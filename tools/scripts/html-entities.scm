(import (rnrs)
	(getopt)
	(rfc http)
	(srfi :13)
	(text json))

(define (get-entity-json)
  (define url "https://html.spec.whatwg.org/entities.json")
  (let*-values (((server path) (url-server&path url))
		((s h body) (http-get server path)))
    (json-read (open-string-input-port body))))

(define (name&code-point json)
  (define ht (make-hashtable string-hash string=?))
  (define (put-it entry)
    ;; ignore &bla format, consider only proper one
    (let ((name (car entry)))
      (when (and (string-prefix? "&" name) (string-suffix? ";" name))
	(let ((n (substring name 1 (- (string-length name) 1))))
	  (hashtable-set! ht n (cdr (vector-ref (cdr entry) 0)))))))
  
  (vector-for-each put-it json)
  ht)

(define (generate out)
  (let ((ht (name&code-point (get-entity-json))))
    (define (print-entry name)
      (let ((cp (hashtable-ref ht name)))
	(put-datum out (cons name cp))
	(newline out)
	#;(format out "(~s . #x~x)~%" name cp)))
    (display ";; This file is automatically generated. !! DO NOT EDIT !!" out)
    (newline out)
    (display "'(" out) (newline out)
    (vector-for-each print-entry (vector-sort string< (hashtable-keys ht)))
    (display ")" out) (newline out)))

(define (main args)
  (with-args (cdr args)
      ((out (#\o "out") #t (usage))
       (clean? (#\c "clean") #f #f))
    (print "Removing file: " out)
    (when (file-exists? out) (delete-file out))
    (when clean? (exit 0))
    (print "Generating file: " out)
    (call-with-output-file out generate)
    (exit 0)))


