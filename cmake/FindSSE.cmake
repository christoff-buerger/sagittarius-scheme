# from https://gist.github.com/hideo55/5642892
# Check if SSE instructions are available on the machine where 
# the project is compiled.

MACRO (FindSSE)
  # SSE is only for x86 and relatives
  IF(CMAKE_SYSTEM_PROCESSOR MATCHES "i.86" OR
     CMAKE_SYSTEM_PROCESSOR MATCHES "x86_64")
   IF(CMAKE_SYSTEM_NAME MATCHES "Linux" OR CYGWIN)
     EXEC_PROGRAM(cat ARGS "/proc/cpuinfo" OUTPUT_VARIABLE CPUINFO)

     STRING(REGEX REPLACE "^.*(sse2).*$" "\\1" SSE_THERE ${CPUINFO})
     STRING(COMPARE EQUAL "sse2" "${SSE_THERE}" SSE2_TRUE)
     IF (SSE2_TRUE)
       set(SSE2_FOUND true CACHE BOOL "SSE2 available on host")
     ELSE (SSE2_TRUE)
       set(SSE2_FOUND false CACHE BOOL "SSE2 available on host")
     ENDIF (SSE2_TRUE)

     # /proc/cpuinfo apparently omits sse3 :(
     STRING(REGEX REPLACE "^.*[^s](sse3).*$" "\\1" SSE_THERE ${CPUINFO})
     STRING(COMPARE EQUAL "sse3" "${SSE_THERE}" SSE3_TRUE)
     IF (NOT SSE3_TRUE)
       STRING(REGEX REPLACE "^.*(T2300).*$" "\\1" SSE_THERE ${CPUINFO})
       STRING(COMPARE EQUAL "T2300" "${SSE_THERE}" SSE3_TRUE)
     ENDIF (NOT SSE3_TRUE)

     STRING(REGEX REPLACE "^.*(ssse3).*$" "\\1" SSE_THERE ${CPUINFO})
     STRING(COMPARE EQUAL "ssse3" "${SSE_THERE}" SSSE3_TRUE)
     IF (SSE3_TRUE OR SSSE3_TRUE)
       set(SSE3_FOUND true CACHE BOOL "SSE3 available on host")
     ELSE (SSE3_TRUE OR SSSE3_TRUE)
       set(SSE3_FOUND false CACHE BOOL "SSE3 available on host")
     ENDIF (SSE3_TRUE OR SSSE3_TRUE)
     IF (SSSE3_TRUE)
       set(SSSE3_FOUND true CACHE BOOL "SSSE3 available on host")
     ELSE (SSSE3_TRUE)
       set(SSSE3_FOUND false CACHE BOOL "SSSE3 available on host")
     ENDIF (SSSE3_TRUE)

     STRING(REGEX REPLACE "^.*(sse4_1).*$" "\\1" SSE_THERE ${CPUINFO})
     STRING(COMPARE EQUAL "sse4_1" "${SSE_THERE}" SSE41_TRUE)
     IF (SSE41_TRUE)
       set(SSE4_1_FOUND true CACHE BOOL "SSE4.1 available on host")
     ELSE (SSE41_TRUE)
       set(SSE4_1_FOUND false CACHE BOOL "SSE4.1 available on host")
     ENDIF (SSE41_TRUE)

     STRING(REGEX REPLACE "^.*(sse4_2).*$" "\\1" SSE_THERE ${CPUINFO})
     STRING(COMPARE EQUAL "sse4_2" "${SSE_THERE}" SSE42_TRUE)
     IF (SSE42_TRUE)
       set(SSE4_2_FOUND true CACHE BOOL "SSE4.2 available on host")
     ELSE (SSE42_TRUE)
       set(SSE4_2_FOUND false CACHE BOOL "SSE4.2 available on host")
     ENDIF (SSE42_TRUE)

     STRING(REGEX REPLACE "^.*(avx).*$" "\\1" SSE_THERE ${CPUINFO})
     STRING(COMPARE EQUAL "avx" "${SSE_THERE}" AVX_TRUE)
     IF (AVX_TRUE)
       set(AVX_FOUND true CACHE BOOL "AVX available on host")
     ELSE (AVX_TRUE)
       set(AVX_FOUND false CACHE BOOL "AVX available on host")
     ENDIF (AVX_TRUE)

   ELSEIF(CMAKE_SYSTEM_NAME MATCHES "Darwin")
     EXEC_PROGRAM("/usr/sbin/sysctl -n machdep.cpu.features" OUTPUT_VARIABLE
       CPUINFO)

     STRING(REGEX REPLACE "^.*[^S](SSE2).*$" "\\1" SSE_THERE ${CPUINFO})
     STRING(COMPARE EQUAL "SSE2" "${SSE_THERE}" SSE2_TRUE)
     IF (SSE2_TRUE)
       set(SSE2_FOUND true CACHE BOOL "SSE2 available on host")
     ELSE (SSE2_TRUE)
       set(SSE2_FOUND false CACHE BOOL "SSE2 available on host")
     ENDIF (SSE2_TRUE)

     STRING(REGEX REPLACE "^.*[^S](SSE3).*$" "\\1" SSE_THERE ${CPUINFO})
     STRING(COMPARE EQUAL "SSE3" "${SSE_THERE}" SSE3_TRUE)
     IF (SSE3_TRUE)
       set(SSE3_FOUND true CACHE BOOL "SSE3 available on host")
     ELSE (SSE3_TRUE)
       set(SSE3_FOUND false CACHE BOOL "SSE3 available on host")
     ENDIF (SSE3_TRUE)

     STRING(REGEX REPLACE "^.*(SSSE3).*$" "\\1" SSE_THERE ${CPUINFO})
     STRING(COMPARE EQUAL "SSSE3" "${SSE_THERE}" SSSE3_TRUE)
     IF (SSSE3_TRUE)
       set(SSSE3_FOUND true CACHE BOOL "SSSE3 available on host")
     ELSE (SSSE3_TRUE)
       set(SSSE3_FOUND false CACHE BOOL "SSSE3 available on host")
     ENDIF (SSSE3_TRUE)

     STRING(REGEX REPLACE "^.*(SSE4.1).*$" "\\1" SSE_THERE ${CPUINFO})
     STRING(COMPARE EQUAL "SSE4.1" "${SSE_THERE}" SSE41_TRUE)
     IF (SSE41_TRUE)
       set(SSE4_1_FOUND true CACHE BOOL "SSE4.1 available on host")
     ELSE (SSE41_TRUE)
       set(SSE4_1_FOUND false CACHE BOOL "SSE4.1 available on host")
     ENDIF (SSE41_TRUE)

     STRING(REGEX REPLACE "^.*(SSE4.2).*$" "\\1" SSE_THERE ${CPUINFO})
     STRING(COMPARE EQUAL "SSE4.2" "${SSE_THERE}" SSE42_TRUE)
     IF (SSE42_TRUE)
       set(SSE4_2_FOUND true CACHE BOOL "SSE4.2 available on host")
     ELSE (SSE42_TRUE)
       set(SSE4_2_FOUND false CACHE BOOL "SSE4.2 available on host")
     ENDIF (SSE42_TRUE)

     STRING(REGEX REPLACE "^.*(AVX).*$" "\\1" SSE_THERE ${CPUINFO})
     STRING(COMPARE EQUAL "AVX" "${SSE_THERE}" AVX_TRUE)
     IF (AVX_TRUE)
       set(AVX_FOUND true CACHE BOOL "AVX available on host")
     ELSE (AVX_TRUE)
       set(AVX_FOUND false CACHE BOOL "AVX available on host")
     ENDIF (AVX_TRUE)
     
   ELSEIF(CMAKE_SYSTEM_NAME MATCHES "Windows")
     # TODO
     set(SSE2_FOUND   true  CACHE BOOL "SSE2 available on host")
     set(SSE3_FOUND   false CACHE BOOL "SSE3 available on host")
     set(SSSE3_FOUND  false CACHE BOOL "SSSE3 available on host")
     set(SSE4_1_FOUND false CACHE BOOL "SSE4.1 available on host")
     set(SSE4_2_FOUND false CACHE BOOL "SSE4.2 available on host")
     set(AVX_FOUND    false CACHE BOOL "AVX available on host")
   ELSE()
     set(SSE2_FOUND   true  CACHE BOOL "SSE2 available on host")
     set(SSE3_FOUND   false CACHE BOOL "SSE3 available on host")
     set(SSSE3_FOUND  false CACHE BOOL "SSSE3 available on host")
     set(SSE4_1_FOUND false CACHE BOOL "SSE4.1 available on host")
     set(SSE4_2_FOUND false CACHE BOOL "SSE4.2 available on host")
     set(AVX_FOUND    false CACHE BOOL "AVX available on host")
   ENDIF()

   IF(CMAKE_COMPILER_IS_GNUCXX)
     EXECUTE_PROCESS(COMMAND ${CMAKE_CXX_COMPILER} -dumpversion OUTPUT_VARIABLE GCC_VERSION)
     IF(GCC_VERSION VERSION_LESS 4.2)
       set(SSE4_1_FOUND false CACHE BOOL "SSE4.1 available on host" FORCE)
       set(SSE4_2_FOUND false CACHE BOOL "SSE4.2 available on host" FORCE)
     ENDIF()
     IF(GCC_VERSION VERSION_LESS 4.7)
       set(AVX_FOUND false CACHE BOOL "AVX available on host" FORCE)
     ENDIF()
   ENDIF(CMAKE_COMPILER_IS_GNUCXX)
 ENDIF()
 
 IF(NOT SSE2_FOUND)
   MESSAGE(STATUS "Could not find support for SSE2 on this machine.")
 ENDIF(NOT SSE2_FOUND)
 IF(NOT SSE3_FOUND)
   MESSAGE(STATUS "Could not find support for SSE3 on this machine.")
 ENDIF(NOT SSE3_FOUND)
 IF(NOT SSSE3_FOUND)
   MESSAGE(STATUS "Could not find support for SSSE3 on this machine.")
 ENDIF(NOT SSSE3_FOUND)
 IF(NOT SSE4_1_FOUND)
   MESSAGE(STATUS "Could not find support for SSE4.1 on this machine.")
 ENDIF(NOT SSE4_1_FOUND)
 IF(NOT SSE4_2_FOUND)
   MESSAGE(STATUS "Could not find support for SSE4.2 on this machine.")
 ENDIF(NOT SSE4_2_FOUND)
 IF(NOT AVX_FOUND)
   MESSAGE(STATUS "Could not find support for AVX on this machine.")
 ENDIF(NOT AVX_FOUND)
 
 MARK_AS_ADVANCED(SSE2_FOUND SSE3_FOUND SSSE3_FOUND SSE4_1_FOUND SSE4_2_FOUND AVX_FOUND)

ENDMACRO(FindSSE)