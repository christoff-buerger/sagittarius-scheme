#!/bin/sh
#| -*- mode:scheme; coding:utf-8; -*-
exec sagittarius $0 "$@"
|#
#!read-macro=sagittarius/regex
(import (rnrs)
	(sagittarius)
	(sagittarius control)
	(sagittarius io)
	(sagittarius vm)
	(sagittarius cgen unit)
	(sagittarius cgen precomp)
	(util file)
	(util port)
	(match)
	(clos user)
	(srfi :1)
	(srfi :39 parameters)
	(binary io) ;; including get-line as well
	(math)
	(getopt))

(define *verbose* (make-parameter #f))

(define (print . args)
  (for-each (lambda (l) (display l)) args) (newline))

(define (printe . args)
  (for-each (lambda (l) (display l (current-error-port))) args)
  (newline (current-error-port)))

(define (printv . args) (when (*verbose*) (apply printe args)))

(define (collect-imports&exprs exprs)
  (let-values (((imports exprs)
		(partition (match-lambda (('import rest ...) #t) (_ #f))
			   exprs)))
    (values (append-map (lambda (i) (cdr i)) imports) exprs)))


(define-class <c-code> ()
  ((code :init-keyword :code)
   (initfun :init-keyword :initfun)))

(define (genenerate-toplevel)
  (string-append "_" (number->string (microsecond) 32)))
(define-class <scheme2c-unit> (<cgen-precomp-unit>)
  ((toplevel :init-thunk genenerate-toplevel)))

(define (name-generator-generator box)
  (lambda args
    (let-values (((out-file init-fun)
		  (apply cgen-default-name-generator args)))
      (vector-set! box 0 init-fun)
      (values out-file init-fun))))

(define (resolve-library-paths imports)
  (define sandbox (environment '(only (sagittarius) import)))
  (define (->imported lib) (map car (reverse (library-imported lib))))
  
  (define (resolve-dependency lib seen)
    (hashtable-set! seen lib #t)
    (let loop ((dependency (->imported lib)) (r '()))
      (cond ((null? dependency)
	     (if (library->path (library-name lib))
		 (cons lib r)
		 r))
	    ((hashtable-contains? seen (car dependency))
	     (loop (cdr dependency) r))
	    ((null? (library-imported (car dependency)))
	     (hashtable-set! seen (car dependency) #t)
	     (loop (cdr dependency) r))
	    (else
	     (hashtable-set! seen (car dependency) #t)
	     (if (library->path (library-name (car dependency)))
		 (let ((parent (resolve-dependency (car dependency) seen)))
		   (loop (cdr dependency) (append parent r)))
		 (loop (cdr dependency) r))))))

  (for-each (lambda (import) (eval `(import ,import) sandbox)) imports)
  ;; the first one is initial import of the sandbox (see above)
  (let ((libraries (cdr (->imported sandbox)))
	(seen (make-eq-hashtable)))
    (append-map (lambda (lib)
		  (if (hashtable-contains? seen lib)
		      '()
		      (reverse! (resolve-dependency lib seen))))
		libraries)))


(define (compile-imports imports need-eval?)
  (define (->cache lib)
    (define (->library-path lib) (library->path (library-name lib)))
    (let ((file (->library-path lib)))
      (printv "Compiling: " file)
      (let* ((exprs (file->sexp-list file))
	     (boxes (map (lambda (e) (make-vector 1)) exprs))
	     (code* (map (lambda (expr box)			   
			   (let ((generator
				  (name-generator-generator box)))
			     (with-output-to-string
			       (lambda ()
				 (cgen-precompile expr
						  :in-file file
						  :name-generator generator
						  :unit-class <scheme2c-unit>
						  :need-macro? need-eval?)))))
			 exprs boxes)))
	(map (lambda (code box)
	       (make <c-code> :code code
		     :initfun (vector-ref box 0)))
	     code* boxes))))
  (append-map ->cache (resolve-library-paths imports)))
   
(define (generate-unique-library-name) (list (gensym)))

(define (emit-raw code)
  (if (list? code)
      (for-each print code)
      (print code)))

(define-method cgen-emit-c ((unit <cgen-precomp-unit>))
  (cgen-emit-preamble unit)
  (cgen-emit-part unit 'decl)
  (cgen-emit-static-data unit)
  (cgen-emit-part unit 'body)
  (cgen-emit-prologue unit)
  (cgen-emit-part unit 'init)
  (cgen-emit-epilogue unit))

(define-method emit-static-cache ((cache <c-code>))
  (print (slot-ref cache 'code)))

(define-method emit-cache-init ((cache <c-code>))
  (format #t "  Sg__Init_~a();~%" (slot-ref cache 'initfun)))

(define (emit-static-caches caches)
  (print "#include <stdint.h>")
  (for-each emit-static-cache caches))

(define library-name->string
  (with-library (sagittarius cgen precomp) library-name->string))

(define (emit-execution-code lib caches)
  (let ((init-this (format "Sg__Init_~a()" (library-name->string lib))))
    (print "static SgObject argsToList(char** argv, int argc)")
    (print "{")
    (print "  SgObject h = SG_NIL, t = SG_NIL;")
    (print "  int i;")
    (print "  for (i = 0; i < argc; i++) {")
    (print "    SG_APPEND1(h, t, Sg_MakeStringC(argv[i]));")
    (print "  }")
    (print "  return h;")
    (print "}")

    (print "int main(int argc, char **argv)")
    (print "{")
    (print "  SgObject lib, m, r, cmd;")
    (print "  Sg_Init();")
    (print "  SG_VM_SET_FLAG(Sg_VM(), SG_WARN_LEVEL);")
    (print "  cmd = argsToList(argv, argc);")
    (print "  lib = Sg_FindLibrary(SG_INTERN(\"(core program)\"), FALSE);")
    (print "  m = Sg_FindBinding(lib, SG_INTERN(\"command-line\"), SG_UNBOUND);")
    (print "  if (!SG_UNBOUNDP(m)) Sg_Apply1(SG_GLOC_GET(SG_GLOC(m)), cmd);")
    (for-each emit-cache-init caches)
    (print "  " init-this ";")
    (format #t  "  lib = Sg_FindLibrary(SG_INTERN(\"~a\"), FALSE);~%"
	    (cgen-decode-library-name (cgen-encode-library-name lib)))
    (print "  m = Sg_FindBinding(lib, SG_INTERN(\"main\"), SG_UNBOUND);")
    (print "  if (SG_UNBOUNDP(m)) return 0;")
    (print "  Sg_VM()->currentLibrary = lib;")
    (print "  r = Sg_Apply1(SG_GLOC_GET(SG_GLOC(m)), cmd);")
    (print "  return SG_INTP(r)? SG_INT_VALUE(r): 0;")
    (print "}")))

(define (usage)
  (printe "sagittarius-scheme2c [OPTIONS] file")
  (printe "OPTIONS")
  (printe " -h,--help")
  (printe"     show this message and quit")
  (printe " -o $OUTPUT,--output=$OUTPUT")
  (printe "    specifying output C file")
  (exit -1))

(define (main args)
  (define (get-out o)
    (if o
	(open-file-output-port
	   o (file-options no-fail) (buffer-mode block) (native-transcoder))
	(current-output-port)))
  (with-args (cdr args)
      ((h          (#\h "help") #f #f)
       (o          (#\o "output") #t #f)
       (need-eval? (#\e "enable-eval") #f #f)
       (verbose    (#\V "verbose") #f #f)
       (load-path  (#\L "loadpath") * '())
       (append-load-path  (#\A "append-loadpath") * '())
       . rest)
    (when h (usage))
    (when (null? rest) (usage))
    (*cgen-show-warning* #f)
    (*verbose* verbose)
    
    (let ((file (car rest)))
      (unless (file-exists? file)
	(printe "Specified file does not exists: " file)
	(exit -1))
      (printv "file: " file)
      (unless (null? load-path) (for-each add-load-path load-path))
      (unless (null? append-load-path)
	(for-each (lambda (p) (add-load-path p #t)) append-load-path))
      (let ((exprs (file->sexp-list file))
	    (library-name (generate-unique-library-name)))
	(let-values (((imports exprs) (collect-imports&exprs exprs)))
	  (let ((c-body (with-output-to-string
			  (lambda ()
			    (cgen-precompile `(library ,library-name
						;; may get warning but
						;; need this
						(export main)
						(import ,@imports)
						,@exprs)
					     :need-macro? need-eval?
					     :in-file file))))
		(caches (compile-imports imports need-eval?))
		(out (get-out o)))
	    (with-output-to-port out
	      (lambda ()
		(emit-static-caches caches)
		(print c-body)
		(emit-execution-code library-name caches)))
	    (flush-output-port out)
	    (close-port out)))))))
			
