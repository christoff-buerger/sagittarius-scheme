#!/bin/env sash

#!read-macro=sagittarius/regex
(import (rnrs) (util file) (sagittarius regex) (pp)
	(srfi :13)
	(sagittarius control)
	(getopt))

(define r7rs-large-lists
  '(
    (1   (scheme list) #f)
    (133 (scheme vector) #f)
    (132 (scheme sort) #f)
    (113 (scheme set) #f)
    (14  (scheme charset) #f)
    (125 (scheme hash-table) #f)
    (116 (scheme ilist) #f)
    (101 (scheme rlist)
	 ((prefix r)
	  (rename (rmake-list make-rlist)
		  (rrandom-access-list->linear-access-list
		   rlist->list)
		  (rlinear-access-list->random-access-list
		   list->rlist))))
    (134 (scheme ideque) #f)
    (135 (scheme text) #f)
    ;; (121 (scheme generator) #f) ;; Tangerine supersedes this...
    (127 (scheme lseq) #f)
    (41  (scheme stream) #f)
    (111 (scheme box) #f)
    (115 (scheme regex) #f)
    (117 (scheme list-queue) #f)
    (124 (scheme ephemeron) #f)
    (128 (scheme comparator) #f)
    (141 (scheme division) #f)
    (143 (scheme fixnum) #f)
    (144 (scheme flonum) #f)
    (146 (scheme mapping) #f)
    ((146 hash) (scheme mapping hash) #f)
    (151 (scheme bitwise) #f)
    (158 (scheme generator) #f)
    ))

(define (ensure-dir file)
  (let-values (((base name ext) (decompose-path file)))
    (unless (file-exists? base) (create-directory* base))))

(define (generate-r7rs-large sitelib-dir)
  (define (library-name->file name)
    (string-append (apply build-path* (map symbol->string name)) ".scm"))
  (define (->import-spec num spec)
    (define base-lib
      (if (pair? num)
	  (cons 'srfi num)
	  `(srfi ,num)))
    (if spec
	(do ((spec spec (cdr spec))
	     (lib base-lib (cons* (caar spec) lib (cdar spec))))
	    ((null? spec) lib))
	base-lib))
  (dolist (lib r7rs-large-lists)
    (let ((num (car lib))
	  (file (build-path sitelib-dir (library-name->file (cadr lib))))
	  (lib-name (cadr lib))
	  (import-spec (caddr lib)))
      (ensure-dir file)
      (when (file-exists? file) (delete-file file))
      (call-with-output-file file
	(lambda (out)
	  (display +prelude+ out) (newline out)
	  (pp `(define-library ,lib-name
		 (export :all :export-reader-macro)
		 (import ,(->import-spec num import-spec)))
	      out))))))
  

(define (usage args)
  (print "Usage: r7rs-srfi-gen.scm -p [SRFI dir] [-s sitelib-dir]")
  (exit -1))

(define-constant +prelude+ 
  ";; This file is automatically generated. DO NOT EDIT!!")

(define nested-srfis
  '(#/%3a146\/hash/))

(define (create p pattern full-path? clean?)
  (define (file->srfi-libary opath)
    (define (convert s)
      (let ((v (regex-replace-all #/%3a/ s ":")))
	(or (string->number v)
	    (string->symbol v))))
    (define path (string-map (lambda (c) (if (eqv? c #\\) #\/ c)) opath))
    (print path)
    (cond ((#/srfi\/(.+)\.scm$/ path) =>
	   (lambda (m)
	     (let ((names (string-split (m 1) "/")))
	       (cons 'srfi (map convert names)))))))
  (let ((files (find-files p :pattern pattern
			   :check-full-path? full-path?)))
    (dolist (file files)
      (let ((new-file (regex-replace-all #/%3a/ file "")))
	;; remove file if it's there
	(when (file-exists? new-file) (delete-file new-file))
	(ensure-dir new-file)
	(unless clean?
	  (call-with-output-file new-file
	    (lambda (out)
	      (display +prelude+ out) (newline out)
	      (pp `(define-library ,(file->srfi-libary new-file)
		     (export :all :export-reader-macro)
		     (import ,(file->srfi-libary file)))
		  out))))))))

(define (main args)
  (with-args (cdr args) 
      ((p* (#\p "path") * (usage args))
       (sitelib (#\s "sitelib") #t "sitelib")
       (clean? (#\c "clean") #f #f))
    (dolist (p p*)
      (create p #/^%3a\d+\.scm/ #f clean?)
      (dolist (rule nested-srfis)
	(create p rule #t clean?)))
    (generate-r7rs-large sitelib)))
