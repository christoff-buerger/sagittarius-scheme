;; -*- mode: scheme; coding: utf-8-unix; -*-
(import (rnrs)
	(srfi :13 strings)
	(srfi :14 char-sets)
	(sagittarius io)
	(sagittarius))

(define *mapping-file* "./jis-sjis-euc-utf8-utf16.txt")

(define *utf16-position* 4)
(define *position-table* '#(jis sjis euc))


(define (generate-table position)
  (let ((type (vector-ref *position-table* position)))
    (display   ";; -*- mode: scheme; coding: utf-8; -*-")(newline)
    (display   ";; This file is automatically generated by mapping-generator.scm. DO NOT EDIT!")(newline)
    (format #t "(library (encoding table ~a-utf16)~%" type)
    (format #t "    (export *~a-utf16-table*~%" type)
    (format #t "            *utf16-~a-table*)~%" type)
    (display   "    (import (core) (sagittarius))")(newline)

    (receive (type-utf16 utf16-type)
	(let loop ((line (get-line (current-input-port)))
		   (tu '())
		   (ut '()))
	  (if (eof-object? line)
	      (values (reverse! tu) (reverse! ut))
	      (let ((first-char (string-ref line 0)))
		(cond ((char=? first-char #\#) ;; comment
		       (loop (get-line (current-input-port)) tu ut))
		      (else
		       (let* ((tokens (string-tokenize line char-set:hex-digit))
			      (tcode (string->number (list-ref tokens position)
						     16))
			      (ucode (string->number (list-ref tokens 
							       *utf16-position*)
						     16)))
			 (loop (get-line (current-input-port))
			       (acons tcode ucode tu)
			       (acons ucode tcode ut))))))))
      (write `(define-constant 
		,(string->symbol (format "*~a-utf16-table*" type))
		',type-utf16))
      (newline)
      (write `(define-constant 
		,(string->symbol (format "*utf16-~a-table*" type))
		',utf16-type))
      (newline))

    (display   ")")(newline)))

(for-each 
 (lambda (pos) 
   (let ((file (format "~a-utf16.scm" (vector-ref *position-table* pos))))
     (when (file-exists? file) (delete-file file))
     (with-input-from-file *mapping-file*
       (lambda ()
	 (with-output-to-file file
	   (lambda ()
	     (generate-table pos)))))
     (copy-file file (build-path "../sitelib/encoding/table/" file) #t)
     (delete-file file)))
 '(0 1 2))
