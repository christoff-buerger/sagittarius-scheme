(import (rnrs)
	(text toml)
	(srfi :64)
	(srfi :19)
	(srfi :39)
	(prefix (sagittarius time) time:)
	(pp))

(test-begin "TOML")

(test-assert toml-read)
(test-assert (procedure? toml-read))

(define (test-toml-date expected str)
  (define (compare r)
    (define (pair=? p1 p2)
      (cond ((and (null? p1) (null? p2)) #t)
	    ((or (null? p1) (null? p2)) #f)
	    ((and (time:local-date? p1) (time:local-date? p2))
	     (time:local-date=? p1 p2))
	    ((and (time:local-time? p2) (time:local-time? p2))
	     (time:local-time=? p1 p2))
	    ((and (date? p1) (date? p2))
	     (time=? (date->time-utc p1) (date->time-utc p2)))
	    ((and (pair? p1) (pair? p2) (equal? (car p1) (car p2)))
	     (pair=? (cdr p1) (cdr p2)))
	    (else #f)))
    (define len (vector-length r))
    (and (= (vector-length expected) len)
	 (let loop ((i 0))
	   (or (= i len)
	       (let ((e (vector-ref expected i))
		     (rv (vector-ref r i)))
		 (and (pair=? e rv) (loop (+ i 1))))))))
  (unless (compare (toml-read (open-string-input-port str)))
    (print expected)
    (print (toml-read (open-string-input-port str))))
  (test-assert str
	       (compare (toml-read (open-string-input-port str)))))

(define (test-toml-file expected file)
  (test-equal file expected (call-with-input-file file toml-read))
  (let ((toml (call-with-string-output-port
	       (lambda (out) (toml-write expected out)))))
    (test-equal file expected (toml-read (open-string-input-port toml)))))

(define (make-local-date n s m h d mm y)
  (make-date n s m h d mm y (date-zone-offset (current-date))))

(define (parse-toml str) (toml-read (open-string-input-port str)))

(test-toml-date `#(("date" . ,(make-local-date 0 59 59 12 1 1 2018)))
		"date=2018-01-01T12:59:59.0")
(test-toml-date `#(("date" . ,(make-local-date 0 59 59 12 1 1 2018)))
		"date=2018-01-01 12:59:59.0")
(test-toml-date `#(("date" . ,(make-date 0 59 59 12 1 1 2018 0)))
		"date=2018-01-01T12:59:59.0Z")
(test-toml-date `#(("date" . ,(make-date 0 59 59 12 1 1 2018 0)))
		"date=2018-01-01T12:59:59Z")
(test-toml-date `#(("date" . ,(make-date 0 59 59 12 1 1 2018 -25200)))
		"date=2018-01-01T12:59:59-07:00")
(test-toml-date `#(("date" . ,(make-date 999999900 59 59 12 1 1 2018 -25200)))
		"date=2018-01-01T12:59:59.9999999-07:00")
(test-toml-date `#(("date" . ,(make-date 999999999 59 59 12 1 1 2018 -25200)))
		"date=2018-01-01T12:59:59.9999999999-07:00")
(test-toml-date `#(("date" . ,(time:make-local-date 1 1 2018)))
 		"date=2018-01-01")
(test-toml-date `#(("date" . ,(time:make-local-time 0 59 59 12)))
 		"date=12:59:59")
(parameterize ((*toml-version* +toml-version-0.4.0+))
  (test-error toml-parse-error? (parse-toml "date=12:59:59"))
  (test-error toml-parse-error? (parse-toml "date=2018-01-01T12:59:59"))
  (test-toml-date `#(("date" . ,(make-date 0 59 59 12 1 1 2018 0)))
		  "date=2018-01-01T12:59:59.0Z"))

(test-equal '#(("inf" . +inf.0)) (parse-toml "inf=inf"))
(test-equal '#(("inf" . +inf.0)) (parse-toml "inf=+inf"))
(test-equal '#(("inf" . -inf.0)) (parse-toml "inf=-inf"))
(test-equal '#(("nan" . +nan.0)) (parse-toml "nan=nan"))
(test-equal '#(("nan" . +nan.0)) (parse-toml "nan=+nan"))
(test-equal '#(("nan" . -nan.0)) (parse-toml "nan=-nan"))
(parameterize ((*toml-version* +toml-version-0.4.0+))
  (test-error toml-parse-error? (parse-toml "inf=inf"))
  (test-error toml-parse-error? (parse-toml "inf=+inf"))
  (test-error toml-parse-error? (parse-toml "inf=-inf"))
  (test-error toml-parse-error? (parse-toml "nan=nan"))
  (test-error toml-parse-error? (parse-toml "nan=+nan"))
  (test-error toml-parse-error? (parse-toml "nan=-nan")))

(define (check-flonum expected)
  (let ((toml (call-with-string-output-port
	       (lambda (out) (toml-write expected out)))))
    (test-equal expected (parse-toml toml))))
(check-flonum '#(("inf" . +inf.0)))
(check-flonum '#(("inf" . +inf.0)))
(check-flonum '#(("inf" . -inf.0)))
(check-flonum '#(("nan" . +nan.0)))
(check-flonum '#(("nan" . +nan.0)))
(check-flonum '#(("nan" . -nan.0)))

(test-equal '#(("hex" . #x12ab)) (parse-toml "hex=0x12ab"))
(test-equal '#(("hex" . #x1234abcd)) (parse-toml "hex=0x12_34_ab_cd"))
(test-equal '#(("oct" . #o1234)) (parse-toml "oct=0o1234"))
(test-equal '#(("oct" . #o1234567)) (parse-toml "oct=0o12_34_567"))
(test-equal '#(("bin" . #b01)) (parse-toml "bin=0b01"))
(test-equal '#(("bin" . #b11)) (parse-toml "bin=0b1_1"))
(parameterize ((*toml-version* +toml-version-0.4.0+))
  (test-error toml-parse-error? (parse-toml "hex=0x12ab"))
  (test-error toml-parse-error? (parse-toml "hex=0x12_34_ab_cd"))
  (test-error toml-parse-error? (parse-toml "oct=0o1234"))
  (test-error toml-parse-error? (parse-toml "oct=0o12_34_567"))
  (test-error toml-parse-error? (parse-toml "bin=0b01"))
  (test-error toml-parse-error? (parse-toml "bin=0b1_1")))

(test-toml-file '#(("key" . "val")
		   ("key2" . #t)
		   ("str1" . "str\tstr")
		   ("str2" . "str\\tstr")
		   ("str3" . "\nmulti line\nthis is not wrapped like this\n")
		   ("str4" . "\nmulti line\nthis is wrapped \\\nit shows as it is\n")
		   ("dec1" . 12345678)
		   ("dec2" . -12345678)
		   ("dec3" . 12345678)
		   ("hex1" . #x12ab)
		   ("hex2" . #x1234abcd)
		   ("oct1" . #o1234)
		   ("oct2" . #o1234567)
		   ("bin1" . #b01)
		   ("bin2" . #b11)
		   ("float1" . 10.05e10)
		   ("float1" . 1e10)
		   ("array1")
		   ("array2" 1)
		   ("array3" 1 2)
		   ("array4" ())
		   ("array5" () ())
		   ("inline-table1" . #())
		   ("inline-table2" . #(("key1" . "key1")))
		   ("inline-table3" . #(("key1" . "key1")
					("key2" . "key2")
					("key3" . #t))))
		"test/data/toml-test1.toml")

(test-toml-file '#(("table-1" . #(("key1" . "some string")
				  ("key2" . 123)))
		   ("table-2" . #(("key1" . "another string")
				  ("key2" . 456)))
		   ("dog" . #(("tater.man" . #(("type" . "pug"))))))
		"test/data/toml-test2.toml")

(test-toml-file '#(("products"
		    #(("name" . "Hammer")
		      ("sku" . 738594937))
		    #()
		    #(("name" . "Nail")
		      ("sku" . 284758393)
		      ("color" . "gray"))))
		"test/data/toml-test3.toml")

(test-toml-file '#(("fruit"
		    #(("name" . "apple")
		      ("physical" . #(("color" . "red")
				      ("shape" . "round")))
		      ("variety"
		       #(("name" . "red delicious"))
		       #(("name" . "granny smith"))))
		    #(("name" . "banana")
		      ("variety"
		       #(("name" . "plantain"))))))
		"test/data/toml-test4.toml")

(test-toml-file '#(("name" . "Orange")
		   ("physical" . #(("color" . "orange")
				   ("shape" . "round")))
		   ("site" . #(("google.com"  . #t))))
		"test/data/toml-test5.toml")

(test-end)
