(import (rnrs)
	(sagittarius)
	(text json)
	(text json patch)
	(text json pointer)
	(text json compare)
	(srfi :26)
	(srfi :64))

(define (test-json-patch file)
  (define test-cases
    (call-with-input-file (build-path (current-directory) file) json-read))
  (define comment-pointer  (json-pointer "/comment"))
  (define doc-pointer      (json-pointer "/doc"))
  (define patch-pointer    (json-pointer "/patch"))
  (define error-pointer    (json-pointer "/error"))
  (define expected-pointer (json-pointer "/expected"))
  (define (run-test-case json)
    (define doc (doc-pointer json))
    (define patch (patch-pointer json))
    (define err (error-pointer json))
    (define expected (expected-pointer json))
    (define comment (let ((v (comment-pointer json)))
		      (if (json-pointer-not-found? v) patch v)))
    (if (json-pointer-not-found? err)
	(if (json-pointer-not-found? expected)
	    (test-assert comment ((json-patcher patch) doc))
	    (test-assert comment (json=? expected ((json-patcher patch) doc))))
	;; TODO detect type of error from error message
	(test-error comment json-patch-error? ((json-patcher patch) doc))))
  (for-each run-test-case test-cases))

(test-begin "JSON Patch")
(test-json-patch "test/data/json-patch-spec-test.json")
(test-json-patch "test/data/json-patch-test.json")
(test-end)
    
