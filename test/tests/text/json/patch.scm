(import (rnrs)
	(sagittarius)
	(text json)
	(text json patch)
	(text json pointer)
	(text json compare)
	(srfi :26)
	(srfi :39)
	(srfi :64))

(define (test-json-patch file)
  (define test-cases
    (call-with-input-file (build-path (current-directory) file) json-read))
  (define comment-pointer  (json-pointer "/comment"))
  (define doc-pointer      (json-pointer "/doc"))
  (define patch-pointer    (json-pointer "/patch"))
  (define error-pointer    (json-pointer "/error"))
  (define expected-pointer (json-pointer "/expected"))
  (define (run-test-case json)
    (define doc (doc-pointer json))
    (define patch (patch-pointer json))
    (define err (error-pointer json))
    (define expected (expected-pointer json))
    (define comment (let ((v (comment-pointer json)))
		      (if (json-pointer-not-found? v) patch v)))

    (define (assert doc wrap)
      (if (json-pointer-not-found? err)
	  (if (json-pointer-not-found? expected)
	      (test-assert comment (wrap ((json-patcher patch) doc)))
	      (test-assert comment (json=? expected
					   (wrap ((json-patcher patch) doc)))))
	  ;; TODO detect type of error from error message
	  (test-error comment json-patch-error? ((json-patcher patch) doc))))
    (assert doc values)
    (assert (json->mutable-json doc) mutable-json->json))
  (for-each run-test-case test-cases))

(test-begin "JSON Patch")
(test-json-patch "test/data/json-patch-spec-test.json")
(test-json-patch "test/data/json-patch-test.json")

(parameterize ((*json-patcher:ignore-no-such-path* 'remove))
  (test-assert (json=? #(("foo" . 1)) 
		       ((json-patcher '(#(("op" . "remove")
					  ("path" . "/bla"))))
			#(("foo" . 1))))))

(parameterize ((*json-patcher:ignore-no-such-path* '(remove replace)))
  (test-assert (json=? #(("foo" . 1)) 
		       ((json-patcher '(#(("op" . "remove")
					  ("path" . "/bla"))
					#(("op" . "replace")
					  ("path" . "/bla")
					  ("value" . "brr"))))
			#(("foo" . 1))))))

(test-end)
    
