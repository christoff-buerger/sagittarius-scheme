;; -*- mode: scheme; coding: utf-8; -*-
(library (sagittarius regex impl)
  (export :only-bindings :export-reader-macro)
    (import (core))

  (define-type <text-matcher> 
    "SgTextMatcher*"
    "text-matcher" "SG_TEXT_MATCHERP" "SG_TEXT_MATCHER")
  (define-type <binary-matcher> 
    "SgBinaryMatcher*"
    "binary-matcher" "SG_BINARY_MATCHERP" "SG_BINARY_MATCHER")

  (decl-code
   (.define "LIBSAGITTARIUS_BODY")
   (.include <sagittarius/private.h>
	     <sagittarius/private/regex.h>))

  (define-c-proc compile-regex (p::<string> :optional
					    (flags::<fixnum> 0)
					    (parse_only::<boolean> #f))
    :no-side-effect
    (result (Sg_CompileRegex p (cast int flags) parse_only)))

  (define-c-proc compile-regex-ast (ast :optional (flags::<fixnum> 0))
    :no-side-effect
    (result (Sg_CompileRegexAST ast (cast int flags))))

  (define-c-proc dump-regex (p::<pattern> :optional
					  (port::<port> (Sg_CurrentOutputPort)))
    ::<void>
    Sg_DumpRegex)

  (define-c-proc regex-matcher 
    (p::<pattern> text
		  :optional (start::<fixnum> 0) (end::<fixnum> -1))
    :no-side-effect
    Sg_RegexMatcher)

  (define-c-proc regex-matches (m::<matcher>) ::<boolean>
    Sg_RegexMatches)

  (define-c-proc regex-looking-at (m::<matcher>) ::<boolean>
    Sg_RegexLookingAt)

  (define-c-proc regex-find (m::<matcher> :optional (start::<fixnum> -1))
    ::<boolean>
    Sg_RegexFind)

  (define-c-proc regex-group (m::<matcher> :optional group)
    (when (SG_UNBOUNDP group) (set! group (SG_MAKE_INT 0)))
    (unless (or (SG_INTP group) (SG_SYMBOLP group))
      (Sg_WrongTypeOfArgumentViolation 'regex-group
				       (SG_MAKE_STRING "integer or symbol")
				       group SG_NIL))
    (result (Sg_RegexGroup m group)))

  (define-c-proc regex-group-start (m::<matcher> :optional group)
    (when (SG_UNBOUNDP group) (set! group (SG_MAKE_INT 0)))
    (unless (or (SG_INTP group) (SG_SYMBOLP group))
      (Sg_WrongTypeOfArgumentViolation 'regex-group
				       (SG_MAKE_STRING "integer or symbol")
				       group SG_NIL))
    (let ((p::int (Sg_RegexGroupPosition m group TRUE)))
      (if (< p 0)
	  (result SG_FALSE)
	  (result (SG_MAKE_INT p)))))
  (define-c-proc regex-group-end (m::<matcher> :optional group)
    (when (SG_UNBOUNDP group) (set! group (SG_MAKE_INT 0)))
    (unless (or (SG_INTP group) (SG_SYMBOLP group))
      (Sg_WrongTypeOfArgumentViolation 'regex-group
				       (SG_MAKE_STRING "integer or symbol")
				       group SG_NIL))
    (let ((p::int (Sg_RegexGroupPosition m group FALSE)))
      (if (< p 0)
	  (result SG_FALSE)
	  (result (SG_MAKE_INT p)))))

  (define-c-proc regex-after (m::<matcher>) Sg_RegexAfter)
  (define-c-proc regex-before (m::<matcher>) Sg_RegexBefore)


  (define-c-proc regex-capture-count (m::<matcher>) ::<fixnum> :no-side-effect
    Sg_RegexCaptureCount)

  (define-c-proc regex-first (m::<matcher>) ::<fixnum> :no-side-effect
    SG_MATCHER_FIRST)

  (define-c-proc regex-last (m::<matcher>) ::<fixnum> :no-side-effect
    SG_MATCHER_LAST)

  (define-c-proc %regex-replace-all (m::<matcher> replacement)
    (unless (or (and (SG_STRINGP replacement) (SG_TEXT_MATCHER m))
		(and (SG_BVECTORP replacement) (SG_BINARY_MATCHER m))
		(SG_PROCEDUREP replacement))
      (Sg_WrongTypeOfArgumentViolation 
       'regex-replace-all
       (SG_MAKE_STRING "string, bytevector or procedure")
       replacement SG_NIL))
    (result (Sg_RegexReplaceAll m replacement)))

  (define-c-proc %regex-replace-first (m::<matcher> replacement)
    (unless (or (and (SG_STRINGP replacement) (SG_TEXT_MATCHER m))
		(and (SG_BVECTORP replacement) (SG_BINARY_MATCHER m))
		(SG_PROCEDUREP replacement))
      (Sg_WrongTypeOfArgumentViolation 
       'regex-replace-first
       (SG_MAKE_STRING "string, bytevector or procedure")
       replacement SG_NIL))
    (result (Sg_RegexReplaceFirst m replacement)))

  (define-c-proc %regex-replace (m::<matcher> replacement count::<fixnum>)
    (unless (or (and (SG_STRINGP replacement) (SG_TEXT_MATCHER m))
		(and (SG_BVECTORP replacement) (SG_BINARY_MATCHER m))
		(SG_PROCEDUREP replacement))
      (Sg_WrongTypeOfArgumentViolation 
       'regex-replace
       (SG_MAKE_STRING "string, bytevector or procedure")
       replacement SG_NIL))
    (result (Sg_RegexReplace m replacement count)))
  
  ;; pred
  (define-c-proc regex-pattern? (o) ::<boolean> :constant SG_PATTERNP)
  (define-c-proc regex-matcher? (o) ::<boolean> :constant SG_MATCHERP)

  ;; accessor
  (define-c-proc regex-pattern (p::<pattern>) (result (-> p pattern)))
  (define-c-proc regex-flags (p::<pattern>) ::<fixnum> (result (-> p flags)))
  (define-c-proc regex-ast (p::<pattern>) (result (-> p ast)))

  ;; misc
  (define-c-proc parse-char-set-string
    (s::<string> :optional (ascii::<boolean> #f)
			   (start::<fixnum> 0) 
			   (end::<fixnum> -1))
    Sg_ParseCharSetString)
  (define-c-proc char-set->regex-string
    (cset::<char-set> :optional (invert?::<boolean> #f))
    Sg_CharSetToRegexString)

  ;; text binary matchers
  (define-c-proc regex-text-matcher 
    (p::<pattern> text::<string> 
		  :optional (start::<fixnum> 0) (end::<fixnum> -1))
    :no-side-effect
    Sg_RegexTextMatcher)

  (define-c-proc regex-text-after (m::<text-matcher>) Sg_RegexTextAfter)
  (define-c-proc regex-text-before (m::<text-matcher>) Sg_RegexTextBefore)

    ;; we can't use case-lambda...
  (define (make-replacer impl)
    (lambda (p t . maybe)
      (if (null? maybe)
	  (impl p t)
	  (impl (regex-matcher p t) (car maybe)))))

  (define regex-replace-all (make-replacer %regex-replace-all))
  (define regex-replace-first (make-replacer %regex-replace-first))
  (define (regex-replace p t r . maybe)
    (if (null? maybe)
	(%regex-replace p t r)
	(%regex-replace (regex-matcher p t) r (car maybe))))

)
