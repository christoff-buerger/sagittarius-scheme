;; -*- scheme -*-
(library (sagittarius compiler procedure)
      (export procedure-name procedure-inliner
	      procedure-inliner-set! procedure-reqargs
	      procedure-optional procedure-optional?
	      procedure-transparent?
	      inline?
	      find-procedure)
      (import :none)

  (decl-code
   (.define "LIBSAGITTARIUS_BODY")
   (.include <sagittarius.h>))

  (define-cise-stmt assertion-violation
    ((_ who msg)
     `(begin
	(Sg_AssertionViolation ,who (SG_MAKE_STRING ,msg) '())))
    ((_ who msg irritants)
     `(begin
	(Sg_AssertionViolation ,who (SG_MAKE_STRING ,msg) ,irritants)
	 )))

  (define-c-proc procedure-name (arg0::<procedure>) SG_PROCEDURE_NAME)
  (define-c-proc procedure-inliner (arg0::<procedure>) SG_PROCEDURE_INLINER)
  (define-c-proc procedure-inliner-set! (arg0::<procedure> arg1) ::<void>
    (set! (SG_PROCEDURE_INLINER arg0) arg1))

  (define-c-proc procedure-reqargs (arg0::<procedure>) ::<fixnum>
    SG_PROCEDURE_REQUIRED)
  ;; TODO change return type to <fixnum>
  (define-c-proc procedure-optional (arg0::<procedure>) ::<boolean>
    SG_PROCEDURE_OPTIONAL)
  (define-c-proc procedure-optional? (arg0::<procedure>) ::<boolean>
    SG_PROCEDURE_OPTIONAL)

  (define-c-proc procedure-transparent? (arg0::<procedure>) ::<boolean>
    (if (SG_PROCEDURE_TRANSPARENTP arg0)
	(result TRUE)
	(result (and (SG_CLOSUREP arg0)
		     (== (SG_PROCEDURE_TRANSPARENT arg0) SG_CLOSURE_UNCHECKED)
		     (SG_PROC_EFFECT_FLAG_EQ 
		      (Sg_ClosureTransparent arg0) SG_PROC_TRANSPARENT)))))

  (define-c-proc procedure-no-side-effect? (arg0::<procedure>) ::<boolean>
    (if (or (SG_PROCEDURE_TRANSPARENTP arg0)
	    (SG_PROCEDURE_NO_SIDE_EFFECTP arg0))
	(result TRUE)
	(result (and (SG_CLOSUREP arg0)
		     (== (SG_PROCEDURE_TRANSPARENT arg0) SG_CLOSURE_UNCHECKED)
		     (not (SG_PROC_EFFECT_FLAG_EQ (Sg_ClosureTransparent arg0)
						  SG_CLOSURE_SIDE_EFFECT))))))

  (define-c-proc procedure-error? (arg0::<procedure>) ::<boolean>
    (if (SG_PROCEDURE_ERRORP arg0)
	(result TRUE)
	(result (and (SG_CLOSUREP arg0)
		     (== (SG_PROCEDURE_TRANSPARENT arg0) SG_CLOSURE_UNCHECKED)
		     (SG_PROC_ERROR_FLAGP (Sg_ClosureTransparent arg0))))))

  (define-c-proc inline? (arg0) ::<boolean>
    (result (and (SG_PROCEDUREP arg0)
		 (not (SG_FALSEP (SG_PROCEDURE_INLINER arg0)))
		 (not (SG_VM_IS_SET_FLAG (Sg_VM) SG_NO_INLINE_ASM)))))

  (define-c-proc find-procedure (name::<symbol> lib)
    (let ((g (Sg_FindBinding lib name SG_UNBOUND)))
      (if (SG_UNBOUNDP g)
	  (result SG_FALSE)
	  (result (SG_GLOC_GET (SG_GLOC g)))))))

