;; -*- Scheme -*-
#!read-macro=sagittarius/regex
(import (rnrs)
	(rnrs eval)
	(sagittarius cgen precomp)
	(sagittarius regex)
	(sagittarius control)
	(sagittarius compiler procedure)
	(sagittarius vm)
	(sagittarius aspect)
	(util file)
	(match)
	(getopt)
	(util port)
	(pp)
	(srfi :1)
	(srfi :13)
	(srfi :26)
	(srfi :39))

;; cancel inliner
(procedure-inliner-set! (find-procedure 'map '(core base)) #f)
(procedure-inliner-set! (find-procedure 'for-each '(core base)) #f)

;; Remove after 0.6.10
(with-library (core) (define vm-error-unbound?
		       (let ((dummy #f))
			 (lambda ()
			   (set! dummy #f)
			   dummy))))

(define-constant +default-compiler+ "../boot/compiler.scm")
;; import specs for compiler 
;; we can use (rnrs) here since it won't be pre-compiled
;; ****CAUTION****
;; DO NOT USE INLINED PROCEDURES SUCH AS map AND for-each
;; So basically we can't use (rnrs)
(define-constant +default-imports+ '((except (core) er-rename)
				     (except (core base) er-rename)
				     (core syntax)
				     (except (core syntax-case)
					     LEXICAL .list)
				     (core errors)
				     (core misc)
				     (rename (match) (match smatch))
				     (except (sagittarius) er-rename)
				     (sagittarius vm)
				     (sagittarius vm debug)
				     (sagittarius vm instruction)
				     (sagittarius compiler util)
				     (sagittarius compiler procedure)))
(define-constant +default-includes+ '("../boot"))

(define-constant +targets-file+ "genlib.targets")

(define *features* (make-parameter '(sagittarius sagittarius.scheme.vm)))

(define-syntax parse-options
  (syntax-rules ()
    ((_ options ((name mark default) ...) body ...)
     (let ((name (cond ((assq 'mark options) => cdr) (else default)))
	   ...)
       body ...))))

(define (load-compiler options)
  (parameterize ((*features* '(sagittarius)))
    (parse-options options
      ((compiler compiler        +default-compiler+)
       (libs     compiler-import +default-imports+)
       (includes  includes       +default-includes+))
      (let1 form (construct-library-form 
		  compiler `((library . (sagittarius host compiler))
			     (exports compile)
			     (imports . ,libs)
			     (includes . ,includes)))
	(eval form (environment '(only (sagittarius) library)
				'user))
	(find-procedure 'compile '(sagittarius host compiler))))))

(define (name-generator filename libname)
  (define (path-directory filename)
    (let-values (((dir base ext) (decompose-path filename))) dir))
  (let-values (((out-file initfun-name) 
		(default-name-generator filename libname)))
    (let* ((dir (string-split (path-directory filename) #/[\/\\]/))
	   ;; FIXME currently we are using ../boot/... but
	   ;; for future we might move
	   (targets (drop dir 2))
	   (base (string-join targets "_")))
      (values (string-append base (if (zero? (string-length base))
				      "" "_") out-file)
	      initfun-name))))

(define-syntax aif
  (lambda (x)
    (syntax-case x ()
      ((aif expr then else)
       (with-syntax ((it (datum->syntax #'aif 'it)))
	 #'(let ((it expr))
	     (if it then else)))))))

(define (resolve-cond-expand&include forms loadpaths)
  (define marks (*features*))
  (define (find-file base loadpaths)
    (car (filter-map (lambda (dir)
		       (let1 f (build-path dir base)
			 (and (file-exists? f) f))) loadpaths)))
  (define (handle-cond-expand body form)
    (aif (find (lambda (x) (memq (car x) marks)) body)
	 (resolve-include (cdr it))
	 (aif (find (lambda (x) (eq? (car x) 'else)) body)
	      `(begin ,@(resolve-include (cdr it)))
	      (error 'cond-expand "unfulfileld cond-expand" form))))
  (define (resolve-include forms)
    (map (lambda (form) 
	   (match form
	     (('include file)
	      `(begin ,@(map (lambda (sexp)
			       (match sexp
				 (('cond-expand . body)
				  `(begin ,@(handle-cond-expand body sexp)))
				 (_ sexp)))
			     (file->sexp-list (find-file file loadpaths)))))
	     (_ form))) forms))
  (map (lambda (form)
	 (match form
	   (('cond-expand . body)
	    `(begin ,@(handle-cond-expand body form)))
	   (('include . path)
	    `(begin ,@(resolve-include (list form))))
	   (_ form))) forms))

(define (construct-library-form file options)
  (define (rename-if-needed n libs)
    (match n
      (('for name bogus ...)
       (cond ((assoc name libs) => (lambda (s) (cons* 'for (cdr s) bogus)))
	     (else n)))
      (else
       (cond ((assoc n libs) => cdr)
	     (else n)))))
  (define (resolve-additionals additionals)
    (define (resolve-additional add)
      (let* ((base (path-sans-extension (path-basename add)))
	     (name (list (string->symbol base)))
	     (libname (string->symbol (string-append +replace-prefix+ base)))
	     (form (construct-library-form 
		    add `((library . ,libname)
			  (imports (except (rnrs) syntax-rules)
				   (sagittarius)
				   (only (compat r7rs) syntax-rules))))))
	(eval form (environment '(sagittarius)))
	(cons name libname)))
    (map resolve-additional additionals))

  (parse-options options
      ((lib library (error 'genlib "library name is missing"))
       (imports imports (error 'genlib "import library is missing"))
       (oexports exports #f)
       (additionals additionals '())
       (includes includes '()))
    ;; for now just add
    (let* ((sexp (file->sexp-list file))
	   (enums '())
	   (exports
	    (filter-map (lambda (sexp)
			  (match sexp
			    (('define (name . args) expr ...) name)
			    (('define (? symbol? name) expr) name)
			    (('define-constant (? symbol? name) expr) name)
			    (('define-syntax name expr) name)
			    ;; fxxk!!!
			    (('define-enum name . e*)
			     (set! enums (append e* enums))
			     name)
			    (else #f))) sexp)))
      ;; try not to contaminate the existing library.
      (let* ((libs (resolve-additionals additionals))
	     (form `(library ,lib 
			(export ,@(if oexports
				      oexports
				      (reverse (append exports enums))))
			(import ,@(map (cut rename-if-needed <> libs) imports))
		      ,@(resolve-cond-expand&include sexp includes))))
	form))))

(define (check-timestamp scm-file out-file)
  (not 
   (and (file-exists? out-file)
	;; check the timestamp
	(let ((target-mtime (file-stat-mtime scm-file))
	      (precomp-mtime (file-stat-mtime out-file)))
	  (and (< target-mtime precomp-mtime)
	       (print "generated file id older than target file. "
		      out-file))))))
      

(define (gen clean? force?)
  (define compiler #f)
  (define (do-clean file libname)
    (let ((filename (name-generator file libname)))
      (when (file-exists? filename) (delete-file filename))))
  (define (get-form/libname config)
    (if (assq 'construct config)
	(values #f (get-library-name config))
	(let* ((file (cdr (assq 'file config)))
	       (form (call-with-input-file file read)))
	  (values form (cadr form)))))
  (define (get-library-name options)
    (parse-options options
	((lib library (error 'genlib "library name is missing")))
      lib))
  (call-with-input-file +targets-file+
    (lambda (in)
      (port-for-each
       (lambda (config)
	 (let-values (((file) (cdr (assq 'file config)))
		      ((form libname) (get-form/libname config)))
	   (if clean? 
	       (print "cleaning generated file from: " file)
	       (print "generating from file:" file))
	   (if clean?
	       (do-clean file libname)
	       (let ()
		 ;; clean needs to be done no matter what
		 (when (or force?
			   (check-timestamp file (name-generator file libname)))
		   (unless compiler
		     (set! compiler (load-compiler config)))
		   (cgen-precompile 
		    (or form
			(construct-library-form file config))
		    :in-file file
		    :name-generator name-generator
		    :predef-syms '(LIBSAGITTARIUS_BODY)
		    :compiler compiler))))))
       (lambda () (read in))))))
(define (main args)
  (with-args (cdr args)
      ((clean?  (#\c "clean") #f #f)
       (force?  (#\f "force") #f #f))
    (gen clean? force?)))
