;; -*- Scheme -*-
#!read-macro=sagittarius/regex
(import (sagittarius cgen stub)
	(sagittarius regex)
	(util file)
	(getopt)
	(sagittarius control))

(define (gen files force? clean?)
  (define (do-gen f c)
    (define (prompt f)
      (format #t "~a ..." f)
      (cgen-genstub f)
      (print "done!"))
    (let1 exist? #f
      (if (and (not force?) (file-exists? c))
	  (let ((stub-mtime (file-stat-mtime f))
		(out-mtime  (file-stat-mtime c)))
	    (if (< stub-mtime out-mtime)
		(print "generated file is older than stub file. " c)
		(prompt f)))
	  (prompt f))))
  (if clean?
      (print "cleaning generated file from: " files)
      (print (if force? "force " "") "generating files:" files))
  (for-each (^f (let* ((b (path-sans-extension f))
		       (c (format "~a.c" b)))
		  (if clean?
		      (when (file-exists? c) (delete-file c))
		      (do-gen f c))))
	    files))
(define (main args)
  (with-args args
      ((force? (#\f "force") #f #f)
       (clean? (#\c "clean") #f #f))
    (gen (find-files "." :pattern #/\.stub$/ :recursive #f) force? clean?)))
