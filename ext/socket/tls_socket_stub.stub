;; -*- scheme -*-
#!compatible
(decl-code
 (.include <sagittarius.h>
	   ;; This has to be before LIBSAGITTARIUS_EXT_BODY
	   ;; to make sure Sg_SocketClass is prefixed with dllimport
	   "sagittarius-socket.h")
 (.define "LIBSAGITTARIUS_EXT_BODY")
 (.include <sagittarius/extend.h>
	   "tls-socket.h"))

(define-type <socket> "SgSocket*")
(define-type <tls-socket> "SgTLSSocket*")

(define-c-proc socket->tls-socket
  (socket::<socket> :key (certificates #f) (private-key #f))
  (unless (or (SG_BVECTORP private-key) (SG_FALSEP private-key))
    (Sg_AssertionViolation 'socket->tls-socket
      (SG_MAKE_STRING "bytevector or #f is required for private key")
      private-key))
  (result (Sg_SocketToTLSSocket socket
	    (?: (SG_PAIRP certificates) certificates SG_NIL)
	    (?: (SG_BVECTORP private-key) (SG_BVECTOR private-key) NULL))))

(define-c-proc tls-socket-connect!
  (o::<tls-socket> :key domain-name alpn) ::<boolean>
  (result (Sg_TLSSocketConnect o domain-name alpn)))

(define-c-proc tls-socket? (o) ::<boolean> :constant SG_TLS_SOCKET_P)

(define-c-proc tls-socket-accept (o::<tls-socket> :key (handshake::<boolean> #t))
  (result (Sg_TLSSocketAccept o handshake)))

(define-c-proc tls-server-socket-handshake (o::<tls-socket>)
  Sg_TLSServerSocketHandshake)

(define-c-proc tls-socket-send
  (o::<tls-socket> bv::<bytevector> :optional (flags::<ifixnum> 0)) ::<fixnum>
  (result (Sg_TLSSocketSend (SG_TLS_SOCKET o)
			    (SG_BVECTOR_ELEMENTS bv)
			    (cast int (SG_BVECTOR_SIZE bv))
			    flags)))

(define-c-proc tls-socket-recv (o::<tls-socket> len::<ifixnum>
						:optional (flags::<ifixnum> 0)) 
  (let ((data (Sg_MakeByteVector len 0))
	(res::int (Sg_TLSSocketReceive (SG_TLS_SOCKET o)
				       (SG_BVECTOR_ELEMENTS data) len flags)))
    (cond ((== len res) (result data))
	  ((< res 0)
	   ;; most probably socket is non-blocking
	   (result #f))
	  (else
	   ;; shrink
	   (let ((r (Sg_MakeByteVector res 0)))
	     (Sg_ByteVectorCopyX (SG_BVECTOR data) 0 (SG_BVECTOR r) 0 res)
	     (result r))))))

;; destructive
(define-c-proc tls-socket-recv! 
  (o::<tls-socket> bv::<bytevector> start::<fixnum> len::<fixnum>
	       :optional (flags::<ifixnum> 0)) ::<fixnum>
  ;; sanity check
  (when (or (>= start (SG_BVECTOR_SIZE bv))
	    (> len (- (SG_BVECTOR_SIZE bv) start)))
    (Sg_AssertionViolation 'tls-socket-recv! 
			   (SG_MAKE_STRING "out of range")
			   (SG_LIST4 o bv (SG_MAKE_INT start) 
				     (SG_MAKE_INT len))))
  (result (Sg_TLSSocketReceive (SG_TLS_SOCKET o)
			       (+ (SG_BVECTOR_ELEMENTS bv) start)
			       (cast int len) flags)))


(define-c-proc tls-socket-shutdown (o::<tls-socket> how::<ifixnum>) ::<void>
  Sg_TLSSocketShutdown)

(define-c-proc tls-socket-close  (o::<tls-socket>) ::<void> Sg_TLSSocketClose)
(define-c-proc tls-socket-closed?  (o::<tls-socket>) ::<boolean>
  (result (not (Sg_TLSSocketOpenP o))))

(define-c-proc tls-socket-peer-certificate  (o::<tls-socket>)
  Sg_TLSSocketPeerCertificate)

(define-c-proc tls-socket-authorities-set! (o::<tls-socket> certs) ::<void>
  (unless (or (SG_PAIRP certs) (SG_NULLP certs))
    (Sg_AssertionViolation 'tls-socket-authorities-set!
      (SG_MAKE_STRING "A list of bytevector required")
      certs))
  (dolist (c certs)
    (unless (SG_BVECTORP c)
      (Sg_AssertionViolation 'tls-socket-authorities-set!
        (SG_MAKE_STRING "A list of bytevector required")
	certs)))
  (set! (SG_TLS_SOCKET_AUTHORITIES o) certs))
(define-c-proc tls-socket-authorities (o::<tls-socket>)
  SG_TLS_SOCKET_AUTHORITIES)

(define-c-proc tls-socket-peer-certificate-verifier-set!
  (o::<tls-socket> required?::<boolean> proc) ::<void>
  (unless (or (SG_BOOLP proc) (SG_PROCEDUREP proc))
    (Sg_AssertionViolation 'tls-socket-peer-certificate-verifier-set!
      (SG_MAKE_STRING "procedure or boolean is required for verifier")
      proc))
  (set! (SG_TLS_SOCKET_PEER_CERTIFICATE_VERIFIER o) proc)
  (set! (SG_TLS_SOCKET_PEER_CERTIFICATE_REQUIREDP o) required?)
  (Sg_TLSSocketPeerCertificateVerifier o))
(define-c-proc tls-socket-peer-certificate-verifier (o::<tls-socket>)
  SG_TLS_SOCKET_PEER_CERTIFICATE_VERIFIER)

(define-c-proc tls-socket-peer-certificate-required?
  (o::<tls-socket>) ::<boolean>
  SG_TLS_SOCKET_PEER_CERTIFICATE_REQUIREDP)
