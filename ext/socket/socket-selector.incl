/* -*- mode:c -*- */
static int selector_sockets(SgSocketSelector *selector)
{
  /* filter closed socket */
  SgObject h = SG_NIL, t = SG_NIL, cp;
  int i = 0;
  SG_FOR_EACH(cp, selector->sockets) {
    SgObject slot = SG_CAR(cp);
    if (Sg_SocketOpenP(SG_SOCKET(SG_CAR(slot)))) {
      SG_APPEND1(h, t, slot);
      i++;
    }
  }
  selector->sockets = h;
  return i;
}

static int duplicate_socket(SgSocket *socket, SgObject sockets)
{
  SgObject cp;
  SG_FOR_EACH(cp, sockets) {
    if (SG_EQ(socket, SG_CAAR(cp))) return TRUE;
  }
  return FALSE;
}

static void strip_sockets(SgSocketSelector *selector, SgObject slots)
{
  if (!SG_NULLP(slots)) {
    /* remove the returned sockets from the targets */
    SgObject h = SG_NIL, t = SG_NIL, cp;
    SG_FOR_EACH(cp, selector->sockets) {
      if (SG_FALSEP(Sg_Memq(SG_CAR(cp), slots))) {
	SG_APPEND1(h, t, SG_CAR(cp));
      }
    }
    selector->sockets = h;
  }
}

static void selector_finalizer(SgObject self, void *data)
{
  Sg_CloseSocketSelector(SG_SOCKET_SELECTOR(self));
}

static struct timespec *selector_timespec(SgObject timeout, struct timespec *tm)
{
  if (SG_FALSEP(timeout)) return NULL;
  /* number = usec (the same as `select`) */
  if (SG_INTP(timeout)) {
    long val = SG_INT_VALUE(timeout);
    if (val < 0) goto badtv;
    tm->tv_sec = val / 1000000;
    tm->tv_nsec = (val % 1000000) * 1000;
    return tm;
  } else if (SG_BIGNUMP(timeout)) {
    long usec;
    SgObject sec;
    if (Sg_Sign(timeout) < 0) goto badtv;
    sec = Sg_BignumDivSI(SG_BIGNUM(timeout), 1000000, &usec);
    tm->tv_sec = Sg_GetInteger(sec);
    tm->tv_nsec = usec * 1000;
    return tm;
  } else if (SG_FLONUMP(timeout)) {
    long val = Sg_GetInteger(timeout);
    if (val < 0) goto badtv;
    tm->tv_sec = val / 1000000;
    tm->tv_nsec = (val % 1000000) * 1000;
    return tm;
  } else if (SG_PAIRP(timeout) && SG_PAIRP(SG_CDR(timeout))) {
    SgObject sec = SG_CAR(timeout);
    SgObject usec = SG_CADR(timeout);
    long isec, iusec;
    if (!Sg_IntegerP(sec) || !Sg_IntegerP(usec)) goto badtv;
    isec = Sg_GetInteger(sec);
    iusec = Sg_GetInteger(usec);
    if (isec < 0 || iusec < 0) goto badtv;
    tm->tv_sec = isec;
    tm->tv_nsec = iusec * 1000;
    return tm;
  } else if (SG_TIMEP(timeout)) {
    /* Normalize it */
    long s = SG_TIME(timeout)->nsec / 1000000000;
    long nsec = SG_TIME(timeout)->nsec % 1000000000;
    tm->tv_sec = SG_TIME(timeout)->sec + s;
    tm->tv_nsec = SG_TIME(timeout)->nsec + nsec;
    return tm;
  }
 badtv:
  Sg_Error(UC("timespec needs to be a real number (in microseconds), a list "
	      "of two integers (seconds and microseconds), or a time object "
	      "but got %S"),
	   timeout);
  return NULL;                /* dummy */
}

static void remove_socket(SgSocketSelector *selector, SgSocket *socket);

SgObject Sg_SocketSelectorClear(SgSocketSelector *selector)
{
  SgObject cp, sockets;
  if (Sg_SocketSelectorWaitingP(selector)) {
    Sg_Error(UC("There's a thread already waiting for %A"), selector);
  }
  Sg_LockMutex(&selector->lock);

  selector_sockets(selector);
  sockets = selector->sockets;
  SG_FOR_EACH(cp, sockets) {
    remove_socket(selector, SG_SOCKET(SG_CAAR(cp)));
  }
  cp = selector->sockets;
  selector->sockets = SG_NIL;

  Sg_UnlockMutex(&selector->lock);
  return cp;
}

static void add_socket(SgSocketSelector *selector, SgObject slot);

SgObject Sg_SocketSelectorAdd(SgSocketSelector *selector,
			      SgSocket *socket,
			      SgObject timeout,
			      SgObject data)
{
  if (Sg_SocketSelectorClosedP(selector)) {
    Sg_Error(UC("Socket selector is closed: %A"), selector);
  }
  if (Sg_SocketOpenP(socket) && !duplicate_socket(socket, selector->sockets)) {
    SgObject slot, to = SG_FALSE;
    struct timespec spec, *sp;
    /* handle timeout */
    sp = selector_timespec(timeout, &spec);
    if (sp) {
      unsigned long sec, usec;
      SgTime *t = SG_NEW(SgTime);
      SG_SET_CLASS(t, SG_CLASS_TIME);
      t->type = SG_INTERN("time-utc");

      Sg_GetTimeOfDay(&sec, &usec);
      t->sec = sp->tv_sec + sec;
      t->nsec = sp->tv_nsec + usec * 1000;
      to = SG_OBJ(t);
    }
    Sg_LockMutex(&selector->lock);
    slot = Sg_Cons(socket, Sg_Cons(to, data));
    add_socket(selector, slot);
    selector->sockets = Sg_Cons(slot, selector->sockets);
    selector_sockets(selector);
    if (selector->waiting && !selector->retry) {
      selector->retry = TRUE;
      Sg_SocketSelectorInterrupt(selector);
    }
    Sg_UnlockMutex(&selector->lock);
  }
  return SG_OBJ(selector);
}

static void * make_selector_context();

SgObject Sg_MakeSocketSelector()
{
  SgSocketSelector *selector = SG_NEW(SgSocketSelector);
  SG_SET_CLASS(selector, SG_CLASS_SOCKET_SELECTOR);

  selector->sockets = SG_NIL;
  selector->waiting = FALSE;
  selector->retry = FALSE;
  selector->context = make_selector_context();

  Sg_InitMutex(&selector->lock, TRUE);

  Sg_RegisterFinalizer(selector, selector_finalizer, NULL);
  return SG_OBJ(selector);
}

static SgObject selector_wait(SgSocketSelector *selector, SgObject sockets,
			      void *context, int n, struct timespec *sp);

static SgObject earliest_timeout(SgObject sockets, SgTime *start,
				 SgObject *timedout)
{
  SgObject cp, r = SG_FALSE;
  SgClassCompareProc compare = SG_CLASS_TIME->compare;

  SG_FOR_EACH(cp, sockets) {
    SgObject slot = SG_CAR(cp);
    SgObject to = SG_CADR(slot);
    if (SG_TIMEP(to)) {
      if (compare(to, start, FALSE) <= 0) {
	/* already timed out */
	*timedout = Sg_Cons(slot, *timedout);
	continue;
      }
      if (SG_FALSEP(r) || (compare(to, r, FALSE) < 0)) {
	r = to;
      }
    }
  }

  return r;
}

static struct timespec * update_timeout(SgObject sockets,
					SgTime *start,
					struct timespec *out,
					SgObject *timedout)
{
  SgObject to = earliest_timeout(sockets, start, timedout);
  struct timespec *r = NULL;

  if (!SG_FALSEP(to)) {
    long sec = SG_TIME(to)->sec - start->sec;
    long nsec = SG_TIME(to)->nsec - start->nsec;

    if (sec > 0 || (sec == 0 && nsec > 0)) {
      out->tv_sec = (sec > 0) ? sec : 0;
      out->tv_nsec = (nsec > 0) ? nsec : 0;
      r = out;
    }
  }
  return r;
}

SgObject Sg_SocketSelectorWait(SgSocketSelector *selector, SgObject timeout)
{
  SgObject r, timedout = SG_NIL, sockets;
  SgTime start;
  int n;
  unsigned long sec, usec;
  struct timespec spec, *sp, sock_to, *sto;
  void *context;

  if (Sg_SocketSelectorClosedP(selector)) {
    Sg_Error(UC("Socket selector is closed: %A"), selector);
  }
  if (selector->waiting) {
    Sg_Error(UC("There's a thread already waiting for %A"), selector);
  }

  SG_SET_CLASS(&start, SG_CLASS_TIME);
  start.type = SG_INTERN("time-utc");
  sp = selector_timespec(timeout, &spec);
  
  Sg_GetTimeOfDay(&sec, &usec);
  start.sec = sec;
  start.nsec = usec * 1000;

  Sg_LockMutex(&selector->lock);

 retry:
  /* compute socket timeout */
  sto = update_timeout(selector->sockets, &start, &sock_to, &timedout);
  /* replace if exists */
  if (sto) {
    sp = sto;
  }
  strip_sockets(selector, timedout);
  n = selector_sockets(selector);

  if (n == 0 && !SG_NULLP(timedout)) {
    Sg_UnlockMutex(&selector->lock);
    return Sg_Values2(SG_NIL, timedout); /* return timedout ones */
  }

  context = selector->context;
  if (context == NULL) {
    Sg_UnlockMutex(&selector->lock);
    Sg_Error(UC("Socket selector is closed: %A"), selector);
  }
  sockets = selector->sockets;
  selector->waiting = TRUE;

  Sg_UnlockMutex(&selector->lock);
  r = selector_wait(selector, sockets, context, n, sp);

  Sg_LockMutex(&selector->lock);
  selector->waiting = FALSE;

  if (SG_NULLP(r) && selector->retry) {
    selector->retry = FALSE;
    /*
      socket is added during waiting. here we do
      - update timeout
      - count socket
      - retry
     */
    if (sp) {
      unsigned long nsec;
      Sg_GetTimeOfDay(&sec, &usec);
      nsec = usec * 1000;
      sp->tv_sec -= sec - start.sec;
      sp->tv_nsec -= nsec - start.nsec;
      if (sp->tv_sec < 0) sp->tv_sec = 0;
      if (sp->tv_nsec < 0) sp->tv_nsec = 0;
      start.sec = sec;
      start.nsec = nsec;
    }
    goto retry;
  } else {
    /* reset it, in case of r is not null :) */
    selector->retry = FALSE;
    if (!SG_NULLP(r)) strip_sockets(selector, r);
    earliest_timeout(selector->sockets, &start, &timedout);
    if (!SG_NULLP(timedout)) strip_sockets(selector, timedout);
  }

  Sg_UnlockMutex(&selector->lock);
  return Sg_Values2(r, timedout);
}


int Sg_SocketSelectorWaitingP(SgSocketSelector *selector)
{
  return selector->waiting;
}
