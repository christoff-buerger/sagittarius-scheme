;; -*- scheme -*-

#!compatible
(decl-code
 (.include <sagittarius.h>)
 (.define "LIBSAGITTARIUS_EXT_BODY")
 (.include <sagittarius/extend.h>
	   <sagittarius-time.h>))

(define-cise-stmt assertion-violation
  ((_ who msg)
   `(begin
      (Sg_AssertionViolation ,who (SG_MAKE_STRING ,msg) '())))
  ((_ who msg irritants)
   `(begin
      (Sg_AssertionViolation ,who (SG_MAKE_STRING ,msg) ,irritants)
      )))

(define-cise-stmt wrong-type-of-argument-violation
  ((_ who msg got)
   `(begin
      (Sg_WrongTypeOfArgumentViolation ,who (SG_MAKE_STRING ,msg) ,got '())))
  ((_ who msg got irritants)
   `(begin
      (Sg_WrongTypeOfArgumentViolation ,who (SG_MAKE_STRING ,msg) ,got
				       ,irritants))))
(define-type <time> "SgTime*")

;; as long as we don't have serializer, we can't make this constant
;; say (define time-0 (make-time 'time-tai 0 0)) will be literal
(define-c-proc make-time (type::<symbol> nsec::<number> sec::<number>)
  (result (Sg_MakeTime type (Sg_GetIntegerS64Clamp sec SG_CLAMP_NONE NULL)
		       (Sg_GetIntegerClamp nsec SG_CLAMP_NONE NULL))))

(define-c-proc time? (o) ::<boolean> :constant SG_TIMEP)

(define-c-proc time-type (o::<time>) :constant
  (result (-> (SG_TIME o) type)))

(define-c-proc time-nanosecond (o::<time>) :no-side-effect
  (result (Sg_MakeInteger (-> (SG_TIME o) nsec))))

(define-c-proc time-second (o::<time>) :no-side-effect
  (result (Sg_MakeIntegerFromS64 (-> (SG_TIME o) sec))))

(define-c-proc set-time-type! (o type::<symbol>) ::<void>
  (set! (-> (SG_TIME o) type) type))

(define-c-proc set-time-nanosecond! (o nsec::<number>) 
  (set! (-> (SG_TIME o) nsec) (Sg_GetIntegerClamp nsec SG_CLAMP_NONE NULL)))

(define-c-proc set-time-second! (o sec::<number>) 
  (set! (-> (SG_TIME o) sec) (Sg_GetIntegerS64Clamp sec SG_CLAMP_NONE NULL)))

(define-c-proc copy-time (o::<time>) :no-side-effect
  (result (Sg_MakeTime (-> (SG_TIME o) type)
		       (-> (SG_TIME o) sec)
		       (-> (SG_TIME o) nsec))))

(define-c-proc time-resolution
  (:optional (type::<symbol> 'time-utc)) ::<fixnum> :constant
  (cond ((SG_EQ type 'time-tai) (result 10000))
	((SG_EQ type 'time-utc) (result 10000))
	((SG_EQ type 'time-monotonic) (result 10000))
	((SG_EQ type 'time-thread) (result 10000))
	((SG_EQ type 'time-process) (result 10000))
	(else 
	 (assertion-violation 'time-resolution
			      "invalid-clock-type"
			      type))))

;; This is not transparent since it returns different value each time
(define-c-proc current-time (:optional (type::<symbol> 'time-utc))
  :no-side-effect Sg_CurrentTime)

(define-c-proc time->seconds (o::<time>) :no-side-effect
  Sg_TimeToSeconds)

(define-c-proc seconds->time (o::<number>) :no-side-effect
  (result (Sg_SecondsToTime (Sg_GetIntegerS64Clamp o SG_CLAMP_NONE NULL))))

(define-c-proc time<=? (x::<time> y::<time>) ::<boolean> :constant
  (let ((compare::SgClassCompareProc (-> (SG_CLASS_OF x) compare)))
    (result (<= (compare x y FALSE) 0))))

(define-c-proc time<? (x::<time> y::<time>) ::<boolean> :constant
  (let ((compare::SgClassCompareProc (-> (SG_CLASS_OF x) compare)))
    (result (< (compare x y FALSE) 0))))

(define-c-proc time=? (x::<time> y::<time>) ::<boolean> :constant
  (let ((compare::SgClassCompareProc (-> (SG_CLASS_OF x) compare)))
    (result (== (compare x y FALSE) 0))))

(define-c-proc time>=? (x::<time> y::<time>) ::<boolean> :constant
  (let ((compare::SgClassCompareProc (-> (SG_CLASS_OF x) compare)))
    (result (>= (compare x y FALSE) 0))))

(define-c-proc time>? (x::<time> y::<time>) ::<boolean> :constant
  (let ((compare::SgClassCompareProc (-> (SG_CLASS_OF x) compare)))
    (result (> (compare x y FALSE) 0))))

(define-c-proc time-difference (x::<time> y::<time>) :no-side-effect
  (result (Sg_TimeDifference x y (SG_TIME (Sg_MakeTime #f 0 0)))))

(define-c-proc time-difference! (x::<time> y::<time>)
  (result (Sg_TimeDifference x y x)))

(define-c-proc add-duration (x::<time> y::<time>) :no-side-effect
  (result (Sg_AddDuration x y 
			  (SG_TIME (Sg_MakeTime (-> (SG_TIME x) type) 0 0)))))

(define-c-proc add-duration! (x::<time> y::<time>) 
  (result (Sg_AddDuration x y x)))

(define-c-proc subtract-duration (x::<time> y::<time>) :no-side-effect
  (result (Sg_SubDuration x y 
			  (SG_TIME (Sg_MakeTime (-> (SG_TIME x) type) 0 0)))))

(define-c-proc subtract-duration! (x::<time> y::<time>) 
  (result (Sg_SubDuration x y x)))
