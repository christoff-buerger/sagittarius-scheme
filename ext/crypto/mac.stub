;; -*- mode: scheme; coding: utf-8; -*-
(decl-code
 (.include <sagittarius/private.h>)
 (.define "LIBSAGITTARIUS_EXT_BODY")
 (.include  <sagittarius/extend.h>
	    <sagittarius-mac.h>
	    <tomcrypt_private.h>))

(define-type <digest> "int" "digest descriptor" "DIGEST_DESCRIPTORP" "SG_INT_VALUE" "SG_MAKE_INT" 0)
(define-type <cipher> "int" "cipher descriptor" "SG_CIPHERP" "SG_INT_VALUE")
(define-type <hmac-state> "SgHmacState *")
(define-type <cmac-state> "SgCmacState *")

(define-cise-stmt assertion-violation
  ((_ who msg)
   `(begin (Sg_AssertionViolation ,who (SG_MAKE_STRING ,msg) '())))
  ((_ who msg irritants)
   `(begin (Sg_AssertionViolation ,who (SG_MAKE_STRING ,msg) ,irritants))))

(define-cise-stmt check-tomcrypt-error
  ((_ who err)
   `(unless (== ,err CRYPT_OK)
      (Sg_AssertionViolation ,who (Sg_MakeStringC (error_to_string err)) '()))))

(define-cise-stmt check-range
  ((_ who bv start length)
   `(when (< (- (SG_BVECTOR_SIZE ,bv) ,start) ,length)
      (assertion-violation ,who "Range error"
	(SG_LIST3 '<
		  (SG_MAKE_INT (- (SG_BVECTOR_SIZE ,bv) ,start))
		  (SG_MAKE_INT ,length))))))

(define-c-proc hmac-state? (obj) ::<boolean> :no-side-effect SG_HMAC_STATE_P)

(define-c-proc hmac-init (md::<digest> key::<bytevector>
		          :optional (start::<fixnum> 0) 
				    (len::<fixnum> (SG_MAKE_INT (- (SG_BVECTOR_SIZE key) start))))
  (check-range 'hmac-init key start len)
  (let* ((hs (Sg_MakeHmacState md))
	 (err::int (hmac_init (& (SG_HMAC_STATE_STATE hs)) md
			      (+ (SG_BVECTOR_ELEMENTS key) start) len)))
    (check-tomcrypt-error 'hmac-init err)
    (result hs)))

(define-c-proc hmac-process! (hs::<hmac-state> in::<bytevector>
			      :optional (start::<fixnum> 0) 
					(len::<fixnum> (SG_MAKE_INT (- (SG_BVECTOR_SIZE in) start))))
  (check-range 'hmac-process! in start len)
  (let ((err::int (hmac_process (& (SG_HMAC_STATE_STATE hs))
				(+ (SG_BVECTOR_ELEMENTS in) start) len)))
    (check-tomcrypt-error 'hmac-process! err)
    (result hs)))

(define-c-proc hmac-done! (hs::<hmac-state> out::<bytevector>
			   :optional (start::<fixnum> 0)
				     (len::<fixnum> (SG_MAKE_INT (- (SG_BVECTOR_SIZE out) start)))) ::<fixnum>
  (when (> len (- (SG_BVECTOR_SIZE out) start))
    (assertion-violation 'hmac-done! "Output buffer is too small"
			 (SG_LIST3 out (SG_MAKE_INT start) (SG_MAKE_INT len))))
  (let* ((|outlen::unsigned long| len)
	 (err::int (hmac_done (& (SG_HMAC_STATE_STATE hs))
			     (+ (SG_BVECTOR_ELEMENTS out) start)
			     (& outlen))))
    (check-tomcrypt-error 'hmac-done! err)
    (result outlen)))

(define-c-proc cmac-state? (obj) ::<boolean> :no-side-effect SG_CMAC_STATE_P)

(define-c-proc cmac-init (cipher::<cipher> key::<bytevector>
		          :optional (start::<fixnum> 0) 
				    (len::<fixnum> (SG_MAKE_INT (- (SG_BVECTOR_SIZE key) start))))
  (check-range 'cmac-init key start len)
  (let* ((hs (Sg_MakeCmacState cipher))
	 (err::int (omac_init (& (SG_CMAC_STATE_STATE hs)) cipher
			      (+ (SG_BVECTOR_ELEMENTS key) start) len)))
    (check-tomcrypt-error 'cmac-init err)
    (result hs)))

(define-c-proc cmac-process! (hs::<cmac-state> in::<bytevector>
			      :optional (start::<fixnum> 0) 
					(len::<fixnum> (SG_MAKE_INT (- (SG_BVECTOR_SIZE in) start))))
  (check-range 'cmac-process! in start len)
  (let ((err::int (omac_process (& (SG_CMAC_STATE_STATE hs))
				(+ (SG_BVECTOR_ELEMENTS in) start) len)))
    (check-tomcrypt-error 'cmac-process! err)
    (result hs)))

(define-c-proc cmac-done! (hs::<cmac-state> out::<bytevector>
			   :optional (start::<fixnum> 0)
				     (len::<fixnum> (SG_MAKE_INT (- (SG_BVECTOR_SIZE out) start)))) ::<fixnum>
  (when (> len (- (SG_BVECTOR_SIZE out) start))
    (assertion-violation 'cmac-done! "Output buffer is too small"
			 (SG_LIST3 out (SG_MAKE_INT start) (SG_MAKE_INT len))))
  (let* ((|outlen::unsigned long| len)
	 (err::int (omac_done (& (SG_CMAC_STATE_STATE hs))
			     (+ (SG_BVECTOR_ELEMENTS out) start)
			     (& outlen))))
    (check-tomcrypt-error 'cmac-done! err)
    (result outlen)))

;; HKDF, it's not really MAC but using HMAC, so here would be the best for now
(define-c-proc hkdf (md::<digest> ikm::<bytevector> salt::<bytevector>
		     info::<bytevector> dk-len::<fixnum>)
  (let* ((dk (Sg_MakeByteVector dk-len 0))
	 (err::int (hkdf md
			 (SG_BVECTOR_ELEMENTS salt) (SG_BVECTOR_SIZE salt)
			 (SG_BVECTOR_ELEMENTS info) (SG_BVECTOR_SIZE info)
			 (SG_BVECTOR_ELEMENTS ikm) (SG_BVECTOR_SIZE ikm)
			 (SG_BVECTOR_ELEMENTS dk) dk-len)))
    (check-tomcrypt-error 'hkdf err)
    (result dk)))
			 
;; PKCS#12 KDF, now we should separate?
;; NOTE: This doesn't convert password to UTF16
(define-c-proc pkcs12-kdf (md::<digest>
			   pw::<bytevector>
			   salt::<bytevector>
			   iteration::<fixnum>
			   purpose::<fixnum>
			   outlen::<fixnum>)
  (let* ((out (Sg_MakeByteVector outlen 0))
	 (err::int (pkcs12_kdf md
			       (SG_BVECTOR_ELEMENTS pw) (SG_BVECTOR_SIZE pw)
			       (SG_BVECTOR_ELEMENTS salt) (SG_BVECTOR_SIZE salt)
			       iteration purpose
			       (SG_BVECTOR_ELEMENTS out) outlen)))
    (check-tomcrypt-error 'pkcs12-kdf err)
    (result out)))
