(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 234 218 147 190 16 178 68 158 30 139 181 131 5 213 32 8 1 60 87 16 124 26 32 163 23 166 203 167 236 166 114 52 12 3 209 210 224 150 99 40 102 145 223 85 6 159 162 84 144 201 221 159 156 11 178 181)
  :der-encode
  #t
  :tests
  '(#(1
      "signature malleability"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 28 47 57 100 66 147 44 184 14 44 202 51 129 235 240 217 117 243 63 109 123 119 218 150 174 251 161 33 106)
      #t
      ())
    #(2
      "Legacy:ASN encoding of r misses leading 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #t
      ("MissingZero"))
    #(3
      "Legacy:ASN encoding of s misses leading 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 28 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #t
      ("MissingZero"))
    #(4
      "valid"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #t
      ())
    #(5
      "long form encoding of length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 129 62 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ("BER"))
    #(6
      "length of sequence contains leading 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 130 0 62 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ("BER"))
    #(7
      "wrong length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 63 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(8
      "wrong length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(9
      "uint32 overflow in length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 133 1 0 0 0 62 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(10
      "uint64 overflow in length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 137 1 0 0 0 0 0 0 0 62 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(11
      "length of sequence = 2**31 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 132 127 255 255 255 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(12
      "length of sequence = 2**32 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 132 255 255 255 255 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(13
      "length of sequence = 2**40 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 133 255 255 255 255 255 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(14
      "length of sequence = 2**64 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 136 255 255 255 255 255 255 255 255 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(15
      "incorrect length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 255 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(16
      "indefinite length without termination"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(17
      "indefinite length without termination"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 128 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(18
      "indefinite length without termination"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 128 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(19
      "removing sequence"
      #vu8(49 50 51 52 48 48)
      #vu8()
      #f
      ())
    #(20
      "lonely sequence tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48)
      #f
      ())
    #(21
      "appending 0's to sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 64 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211 0 0)
      #f
      ())
    #(22
      "prepending 0's to sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 64 0 0 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(23
      "appending unused 0's to sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211 0 0)
      #f
      ())
    #(24
      "appending null value to sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 64 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211 5 0)
      #f
      ())
    #(25
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 67 73 129 119 48 62 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(26
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 66 37 0 48 62 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(27
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 64 48 62 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211 0 4 222 173 190 239)
      #f
      ())
    #(28
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 67 34 34 73 129 119 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(29
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 66 34 33 37 0 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(30
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 34 31 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 0 4 222 173 190 239 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(31
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 67 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 34 34 73 129 119 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(32
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 66 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 34 33 37 0 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(33
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 34 31 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211 0 4 222 173 190 239)
      #f
      ())
    #(34
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 170 0 187 0 205 0 48 62 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(35
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 170 2 170 187 48 62 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(36
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 34 37 170 0 187 0 205 0 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(37
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 34 35 170 2 170 187 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(38
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 34 37 170 0 187 0 205 0 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(39
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 34 35 170 2 170 187 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(40
      "truncated length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 129)
      #f
      ())
    #(41
      "using composition with indefinite length"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 48 62 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211 0 0)
      #f
      ())
    #(42
      "using composition with indefinite length"
      #vu8(49 50 51 52 48 48)
      #vu8(48 66 34 128 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 0 0 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(43
      "using composition with indefinite length"
      #vu8(49 50 51 52 48 48)
      #vu8(48 66 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 34 128 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211 0 0)
      #f
      ())
    #(44
      "using composition with wrong tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 49 62 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211 0 0)
      #f
      ())
    #(45
      "using composition with wrong tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48 66 34 128 3 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 0 0 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(46
      "using composition with wrong tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48 66 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 34 128 3 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211 0 0)
      #f
      ())
    #(47
      "Replacing sequence with NULL"
      #vu8(49 50 51 52 48 48)
      #vu8(5 0)
      #f
      ())
    #(48
      "changing tag value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(46 62 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(49
      "changing tag value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(47 62 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(50
      "changing tag value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(49 62 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(51
      "changing tag value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(50 62 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(52
      "changing tag value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(255 62 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(53
      "dropping value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 0)
      #f
      ())
    #(54
      "using composition for sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 66 48 1 2 48 61 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(55
      "truncated sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8)
      #f
      ())
    #(56
      "truncated sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(57
      "indefinite length"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211 0 0)
      #f
      ("BER"))
    #(58
      "indefinite length with truncated delimiter"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211 0)
      #f
      ())
    #(59
      "indefinite length with additional element"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211 5 0 0 0)
      #f
      ())
    #(60
      "indefinite length with truncated element"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211 6 8 17 34 0 0)
      #f
      ())
    #(61
      "indefinite length with garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211 0 0 254 2 190 239)
      #f
      ())
    #(62
      "indefinite length with nonempty EOC"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211 0 2 190 239)
      #f
      ())
    #(63
      "prepend empty sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 64 48 0 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(64
      "append empty sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 64 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211 48 0)
      #f
      ())
    #(65
      "append garbage with high tag number"
      #vu8(49 50 51 52 48 48)
      #vu8(48 65 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211 191 127 0)
      #f
      ())
    #(66
      "sequence of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 64 48 62 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(67
      "truncated sequence: removed last 1 elements"
      #vu8(49 50 51 52 48 48)
      #vu8(48 31 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100)
      #f
      ())
    #(68
      "repeating element in sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 93 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(69
      "long form encoding of length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 63 2 129 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ("BER"))
    #(70
      "long form encoding of length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 63 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 129 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ("BER"))
    #(71
      "length of integer contains leading 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 64 2 130 0 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ("BER"))
    #(72
      "length of integer contains leading 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 64 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 130 0 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ("BER"))
    #(73
      "wrong length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 30 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(74
      "wrong length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 28 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(75
      "wrong length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 30 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(76
      "wrong length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 28 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(77
      "uint32 overflow in length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 67 2 133 1 0 0 0 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(78
      "uint32 overflow in length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 67 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 133 1 0 0 0 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(79
      "uint64 overflow in length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 137 1 0 0 0 0 0 0 0 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(80
      "uint64 overflow in length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 137 1 0 0 0 0 0 0 0 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(81
      "length of integer = 2**31 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 66 2 132 127 255 255 255 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(82
      "length of integer = 2**31 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 66 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 132 127 255 255 255 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(83
      "length of integer = 2**32 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 66 2 132 255 255 255 255 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(84
      "length of integer = 2**32 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 66 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 132 255 255 255 255 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(85
      "length of integer = 2**40 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 67 2 133 255 255 255 255 255 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(86
      "length of integer = 2**40 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 67 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 133 255 255 255 255 255 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(87
      "length of integer = 2**64 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 136 255 255 255 255 255 255 255 255 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(88
      "length of integer = 2**64 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 136 255 255 255 255 255 255 255 255 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(89
      "incorrect length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 255 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(90
      "incorrect length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 255 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(91
      "removing integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 31 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(92
      "lonely integer tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48 32 2 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(93
      "lonely integer tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48 32 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2)
      #f
      ())
    #(94
      "appending 0's to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 64 2 31 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 0 0 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(95
      "appending 0's to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 64 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 31 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211 0 0)
      #f
      ())
    #(96
      "prepending 0's to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 64 2 31 0 0 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ("BER"))
    #(97
      "prepending 0's to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 64 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 31 0 0 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ("BER"))
    #(98
      "appending unused 0's to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 64 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 0 0 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(99
      "appending null value to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 64 2 31 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 5 0 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(100
      "appending null value to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 64 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 31 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211 5 0)
      #f
      ())
    #(101
      "truncated length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 33 2 129 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(102
      "truncated length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 33 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 129)
      #f
      ())
    #(103
      "Replacing integer with NULL"
      #vu8(49 50 51 52 48 48)
      #vu8(48 33 5 0 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(104
      "Replacing integer with NULL"
      #vu8(49 50 51 52 48 48)
      #vu8(48 33 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 5 0)
      #f
      ())
    #(105
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 0 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(106
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 1 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(107
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 3 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(108
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 4 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(109
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 255 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(110
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 0 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(111
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 1 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(112
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 3 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(113
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 4 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(114
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 255 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(115
      "dropping value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 33 2 0 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(116
      "dropping value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 33 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 0)
      #f
      ())
    #(117
      "using composition for integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 66 34 33 2 1 0 2 28 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(118
      "using composition for integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 66 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 34 33 2 1 0 2 28 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(119
      "modify first byte of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 2 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(120
      "modify first byte of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 2 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(121
      "modify last byte of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 228 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(122
      "modify last byte of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 83)
      #f
      ())
    #(123
      "truncated integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(124
      "truncated integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 28 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8)
      #f
      ())
    #(125
      "leading ff in integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 63 2 30 255 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(126
      "leading ff in integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 63 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 30 255 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(127
      "replaced integer by infinity"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 9 1 128 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(128
      "replaced integer by infinity"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 9 1 128)
      #f
      ())
    #(129
      "replacing integer with zero"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 1 0 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(130
      "replacing integer with zero"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 1 0)
      #f
      ())
    #(131
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 1 142 214 105 10 19 90 143 145 140 5 152 194 210 254 227 180 236 124 89 164 221 102 166 91 106 210 92 161 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(132
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 142 214 105 10 19 90 143 145 140 5 152 194 211 0 182 111 43 10 121 40 181 172 83 208 178 26 8 39 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(133
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 255 113 41 150 245 236 165 112 110 115 250 103 61 45 0 50 237 244 60 150 153 54 118 130 233 241 137 205 156 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(134
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 113 41 150 245 236 165 112 110 115 250 103 61 44 255 73 144 212 245 134 215 74 83 172 47 77 229 247 217 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(135
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 254 113 41 150 245 236 165 112 110 115 250 103 61 45 1 28 75 19 131 166 91 34 153 89 164 149 45 163 95 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(136
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 1 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(137
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 113 41 150 245 236 165 112 110 115 250 103 61 45 0 50 237 244 60 150 153 54 118 130 233 241 137 205 156 2 29 0 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(138
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 1 208 198 155 189 108 211 71 241 211 53 204 126 20 13 83 207 206 50 115 0 175 223 187 219 189 23 51 16)
      #f
      ())
    #(139
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 28 208 198 155 189 108 211 71 241 211 53 204 126 20 15 38 138 12 192 146 132 136 37 105 81 4 94 222 150)
      #f
      ())
    #(140
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 255 47 57 100 66 147 44 184 14 44 202 51 129 235 241 194 211 18 134 125 61 99 253 109 105 159 68 247 45)
      #f
      ())
    #(141
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 254 47 57 100 66 147 44 184 14 44 202 51 129 235 242 172 48 49 205 140 255 80 32 68 36 66 232 204 240)
      #f
      ())
    #(142
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 29 1 208 198 155 189 108 211 71 241 211 53 204 126 20 14 61 44 237 121 130 194 156 2 146 150 96 187 8 211)
      #f
      ())
    #(143
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 29 0 142 214 105 10 19 90 143 145 140 5 152 194 210 255 205 18 11 195 105 102 201 137 125 22 14 118 50 100 2 28 47 57 100 66 147 44 184 14 44 202 51 129 235 241 194 211 18 134 125 61 99 253 109 105 159 68 247 45)
      #f
      ())
    #(144
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 0 2 1 0)
      #f
      ("EdgeCase"))
    #(145
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 0 2 1 1)
      #f
      ("EdgeCase"))
    #(146
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 0 2 1 255)
      #f
      ("EdgeCase"))
    #(147
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 1 0 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 61)
      #f
      ("EdgeCase"))
    #(148
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 1 0 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 60)
      #f
      ("EdgeCase"))
    #(149
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 1 0 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 62)
      #f
      ("EdgeCase"))
    #(150
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 1 0 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 1)
      #f
      ("EdgeCase"))
    #(151
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 1 0 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 2)
      #f
      ("EdgeCase"))
    #(152
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 8 2 1 0 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(153
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 0 9 1 66)
      #f
      ("EdgeCase"))
    #(154
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 2 1 0)
      #f
      ("EdgeCase"))
    #(155
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 2 1 1)
      #f
      ("EdgeCase"))
    #(156
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 2 1 255)
      #f
      ("EdgeCase"))
    #(157
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 1 1 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 61)
      #f
      ("EdgeCase"))
    #(158
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 1 1 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 60)
      #f
      ("EdgeCase"))
    #(159
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 1 1 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 62)
      #f
      ("EdgeCase"))
    #(160
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 1 1 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 1)
      #f
      ("EdgeCase"))
    #(161
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 1 1 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 2)
      #f
      ("EdgeCase"))
    #(162
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 8 2 1 1 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(163
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 9 1 66)
      #f
      ("EdgeCase"))
    #(164
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 255 2 1 0)
      #f
      ("EdgeCase"))
    #(165
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 255 2 1 1)
      #f
      ("EdgeCase"))
    #(166
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 255 2 1 255)
      #f
      ("EdgeCase"))
    #(167
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 1 255 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 61)
      #f
      ("EdgeCase"))
    #(168
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 1 255 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 60)
      #f
      ("EdgeCase"))
    #(169
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 1 255 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 62)
      #f
      ("EdgeCase"))
    #(170
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 1 255 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 1)
      #f
      ("EdgeCase"))
    #(171
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 1 255 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 2)
      #f
      ("EdgeCase"))
    #(172
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 8 2 1 255 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(173
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 255 9 1 66)
      #f
      ("EdgeCase"))
    #(174
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 61 2 1 0)
      #f
      ("EdgeCase"))
    #(175
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 61 2 1 1)
      #f
      ("EdgeCase"))
    #(176
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 61 2 1 255)
      #f
      ("EdgeCase"))
    #(177
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 61 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 61)
      #f
      ("EdgeCase"))
    #(178
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 61 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 60)
      #f
      ("EdgeCase"))
    #(179
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 61 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 62)
      #f
      ("EdgeCase"))
    #(180
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 61 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 1)
      #f
      ("EdgeCase"))
    #(181
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 61 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 2)
      #f
      ("EdgeCase"))
    #(182
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 36 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 61 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(183
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 61 9 1 66)
      #f
      ("EdgeCase"))
    #(184
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 60 2 1 0)
      #f
      ("EdgeCase"))
    #(185
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 60 2 1 1)
      #f
      ("EdgeCase"))
    #(186
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 60 2 1 255)
      #f
      ("EdgeCase"))
    #(187
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 60 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 61)
      #f
      ("EdgeCase"))
    #(188
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 60 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 60)
      #f
      ("EdgeCase"))
    #(189
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 60 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 62)
      #f
      ("EdgeCase"))
    #(190
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 60 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 1)
      #f
      ("EdgeCase"))
    #(191
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 60 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 2)
      #f
      ("EdgeCase"))
    #(192
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 36 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 60 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(193
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 60 9 1 66)
      #f
      ("EdgeCase"))
    #(194
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 62 2 1 0)
      #f
      ("EdgeCase"))
    #(195
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 62 2 1 1)
      #f
      ("EdgeCase"))
    #(196
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 62 2 1 255)
      #f
      ("EdgeCase"))
    #(197
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 61)
      #f
      ("EdgeCase"))
    #(198
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 60)
      #f
      ("EdgeCase"))
    #(199
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 62)
      #f
      ("EdgeCase"))
    #(200
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 1)
      #f
      ("EdgeCase"))
    #(201
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 2)
      #f
      ("EdgeCase"))
    #(202
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 36 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 62 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(203
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 62 9 1 66)
      #f
      ("EdgeCase"))
    #(204
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 1 2 1 0)
      #f
      ("EdgeCase"))
    #(205
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1)
      #f
      ("EdgeCase"))
    #(206
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 1 2 1 255)
      #f
      ("EdgeCase"))
    #(207
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 1 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 61)
      #f
      ("EdgeCase"))
    #(208
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 1 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 60)
      #f
      ("EdgeCase"))
    #(209
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 1 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 62)
      #f
      ("EdgeCase"))
    #(210
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 1 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 1)
      #f
      ("EdgeCase"))
    #(211
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 1 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 2)
      #f
      ("EdgeCase"))
    #(212
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 36 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 1 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(213
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 1 9 1 66)
      #f
      ("EdgeCase"))
    #(214
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 2 2 1 0)
      #f
      ("EdgeCase"))
    #(215
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 2 2 1 1)
      #f
      ("EdgeCase"))
    #(216
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 2 2 1 255)
      #f
      ("EdgeCase"))
    #(217
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 2 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 61)
      #f
      ("EdgeCase"))
    #(218
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 2 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 60)
      #f
      ("EdgeCase"))
    #(219
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 2 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 62)
      #f
      ("EdgeCase"))
    #(220
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 2 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 1)
      #f
      ("EdgeCase"))
    #(221
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 2 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 2)
      #f
      ("EdgeCase"))
    #(222
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 36 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 2 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(223
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 2 9 1 66)
      #f
      ("EdgeCase"))
    #(224
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 12 1 48)
      #f
      ())
    #(225
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 5 2 1 1 12 0)
      #f
      ())
    #(226
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 9 12 2 37 115 12 3 115 37 115)
      #f
      ())
    #(227
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 8 2 1 1 48 3 2 1 0)
      #f
      ())
    #(228
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 3 2 1 1)
      #f
      ())
    #(229
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 1 1 0)
      #f
      ())
    #(230
      "Edge case for Shamir multiplication"
      #vu8(54 51 49 51 51)
      #vu8(48 60 2 28 50 107 192 99 83 247 249 201 247 123 143 75 85 70 78 134 25 148 78 120 121 64 44 202 87 46 4 26 2 28 126 181 206 164 189 166 126 177 124 66 253 158 78 248 252 7 163 134 196 211 139 142 63 215 172 20 230 1)
      #t
      ())
    #(231
      "special case hash"
      #vu8(51 49 57 48 57 52 51 50 56 56)
      #vu8(48 61 2 29 0 206 156 143 38 42 143 207 191 242 106 46 213 97 86 221 127 160 13 241 184 221 120 242 133 34 249 89 159 2 28 63 139 144 117 134 80 3 26 201 67 182 232 154 45 64 28 3 164 132 95 72 37 56 94 219 11 153 73)
      #t
      ())
    #(232
      "special case hash"
      #vu8(56 52 51 52 55 52 49 53 53)
      #vu8(48 62 2 29 0 165 150 199 16 73 47 134 179 29 124 48 49 221 255 164 30 182 236 208 210 85 39 39 119 118 93 150 92 2 29 0 188 14 13 19 79 53 144 136 67 143 157 72 101 24 74 145 52 178 45 201 48 163 45 243 23 205 45 173)
      #t
      ())
    #(233
      "special case hash"
      #vu8(51 53 55 50 54 57 54 56 50 57)
      #vu8(48 60 2 28 68 191 14 142 243 26 220 249 53 191 219 219 255 184 72 22 14 245 213 249 121 115 48 53 3 174 67 198 2 28 88 25 65 9 16 17 7 208 97 87 93 72 174 251 135 145 218 26 236 169 33 79 204 75 249 182 13 236)
      #t
      ())
    #(234
      "special case hash"
      #vu8(53 57 49 56 51 51 52 50 57)
      #vu8(48 61 2 29 0 188 197 107 56 214 167 178 39 160 15 35 95 10 238 243 235 248 70 204 162 219 20 194 144 39 51 159 196 2 28 67 85 134 63 204 117 242 70 242 19 169 180 134 125 235 42 127 172 232 205 245 223 187 228 63 138 195 26)
      #t
      ())
    #(235
      "special case hash"
      #vu8(56 50 53 51 48 56 50 50 53 56 57)
      #vu8(48 61 2 28 110 227 192 240 45 187 28 89 145 254 137 127 133 52 188 155 163 158 60 74 92 49 210 50 108 235 251 28 2 29 0 232 91 136 204 59 37 227 246 201 5 41 147 211 180 63 177 224 211 104 64 198 79 191 176 185 121 247 79)
      #t
      ())
    #(236
      "special case hash"
      #vu8(49 51 55 51 52 56 50 56 49 52 50)
      #vu8(48 60 2 28 33 221 113 172 16 136 30 168 130 150 57 90 184 239 190 130 44 8 27 90 109 68 142 110 93 109 233 23 2 28 59 144 110 41 16 172 48 122 84 92 124 94 90 65 85 99 27 230 222 217 218 135 25 244 89 11 93 242)
      #t
      ())
    #(237
      "special case hash"
      #vu8(49 55 51 56 49 53 54 52 48)
      #vu8(48 60 2 28 60 141 209 193 218 1 202 119 147 137 12 236 249 103 174 247 179 25 155 232 153 115 244 15 19 47 71 204 2 28 112 48 162 175 191 22 224 32 12 155 93 145 4 0 152 129 181 102 127 92 153 28 49 80 213 236 9 35)
      #t
      ())
    #(238
      "special case hash"
      #vu8(50 53 53 51 52 54 54 53 48 52)
      #vu8(48 60 2 28 27 181 56 255 212 155 86 98 3 179 57 1 134 212 16 82 226 21 139 216 202 188 228 130 226 189 156 253 2 28 38 33 254 138 62 189 147 152 46 122 209 248 118 227 84 165 104 9 248 205 175 114 137 194 71 169 53 9)
      #t
      ())
    #(239
      "special case hash"
      #vu8(50 49 56 51 48 51 57 49 57 55)
      #vu8(48 59 2 28 11 107 85 120 57 87 56 69 30 89 188 70 27 252 85 139 15 250 220 117 4 92 66 152 176 15 149 57 2 27 49 71 233 205 206 129 128 158 37 177 5 49 197 154 227 242 37 199 167 104 31 245 19 92 243 23 189)
      #t
      ())
    #(240
      "special case hash"
      #vu8(49 48 53 50 54 49 55 54 53 52 53)
      #vu8(48 62 2 29 0 205 230 117 120 244 102 103 137 168 183 120 18 202 76 5 127 238 232 183 203 42 198 126 3 130 146 194 114 2 29 0 220 45 173 81 51 208 222 77 29 95 78 102 193 38 65 176 208 54 5 131 130 35 125 168 192 37 112 248)
      #t
      ())
    #(241
      "special case hash"
      #vu8(50 53 48 49 53 51 57 57 56 54)
      #vu8(48 62 2 29 0 253 174 116 247 97 142 38 220 174 162 61 150 170 80 191 49 50 226 173 160 186 81 155 12 202 148 228 119 2 29 0 216 79 212 67 132 118 253 66 250 2 181 16 168 139 141 102 189 2 60 80 128 165 77 227 211 200 252 139)
      #t
      ())
    #(242
      "special case hash"
      #vu8(49 52 57 53 51 49 54 52 54 49 57)
      #vu8(48 60 2 28 58 156 54 70 183 175 52 197 2 40 78 240 7 2 135 103 45 210 181 158 46 96 247 39 45 80 9 92 2 28 86 18 37 173 219 170 180 183 188 235 162 72 176 109 212 98 119 155 241 238 49 152 194 234 65 126 164 44)
      #t
      ())
    #(243
      "special case hash"
      #vu8(50 48 54 51 56 53 50 57 48 54)
      #vu8(48 62 2 29 0 196 217 30 84 106 201 218 178 204 236 225 140 73 57 141 99 66 192 18 49 73 181 152 219 144 5 50 13 2 29 0 149 90 218 76 189 23 228 151 84 103 99 63 255 178 50 31 91 74 203 35 244 179 2 26 6 50 135 248)
      #t
      ())
    #(244
      "special case hash"
      #vu8(55 56 51 57 55 54 52 57 57 50)
      #vu8(48 60 2 28 47 254 194 105 122 147 240 196 197 164 139 236 139 21 218 211 39 177 183 0 23 230 146 95 167 107 104 59 2 28 32 93 186 197 136 202 228 240 237 59 140 123 65 1 57 156 225 131 211 130 17 237 34 48 109 12 218 18)
      #t
      ())
    #(245
      "special case hash"
      #vu8(50 49 50 57 50 54 52 52 54 57)
      #vu8(48 61 2 29 0 254 193 80 103 167 140 166 67 165 63 130 127 86 168 72 44 89 215 224 173 56 176 115 33 214 250 159 233 2 28 60 231 228 91 49 57 14 2 107 72 86 100 203 246 78 57 177 151 3 200 239 123 15 45 97 191 230 182)
      #t
      ())
    #(246
      "special case hash"
      #vu8(52 56 51 50 48 52 50 54 56 51)
      #vu8(48 61 2 29 0 213 118 104 103 156 6 208 13 177 18 235 253 39 63 106 165 103 1 178 0 141 119 40 79 48 82 1 203 2 28 33 202 204 15 41 0 222 188 153 12 242 170 82 198 123 183 169 209 131 243 49 163 185 132 214 58 21 125)
      #t
      ())
    #(247
      "special case hash"
      #vu8(51 54 53 50 50 49 56 49 54)
      #vu8(48 61 2 29 0 195 197 38 11 237 32 40 153 7 184 180 251 107 215 254 105 194 87 254 80 250 132 170 234 126 193 172 14 2 28 56 235 120 220 49 118 106 27 3 142 129 29 190 107 128 104 61 181 192 108 125 70 107 111 27 212 79 184)
      #t
      ())
    #(248
      "special case hash"
      #vu8(50 52 57 49 55 49 50 54 57 54 53)
      #vu8(48 60 2 28 51 239 169 16 82 242 168 157 175 210 176 108 250 40 176 200 36 62 60 172 130 70 193 174 163 207 78 96 2 28 65 249 100 113 93 213 84 24 165 116 111 145 236 255 21 183 198 22 63 185 76 24 151 156 246 147 194 29)
      #t
      ())
    #(249
      "special case hash"
      #vu8(50 54 50 50 55 57 48 55 55 56)
      #vu8(48 61 2 29 0 133 97 138 193 101 214 248 121 253 79 119 28 95 26 136 1 155 4 5 44 95 148 11 160 82 165 65 165 2 28 102 64 241 184 219 19 126 81 111 64 91 100 170 9 211 30 140 29 201 172 77 90 186 182 249 248 118 10)
      #t
      ())
    #(250
      "special case hash"
      #vu8(49 48 49 50 53 55 55 50 56 57 50 55)
      #vu8(48 61 2 29 0 157 24 115 160 83 162 128 189 105 134 101 171 77 208 135 190 48 128 194 195 195 185 162 215 40 204 7 4 2 28 115 66 16 232 65 110 8 253 203 179 37 31 56 57 40 151 100 67 197 89 245 14 113 100 240 132 200 7)
      #t
      ())
    #(251
      "special case hash"
      #vu8(49 48 53 48 56 55 50 50 48 50)
      #vu8(48 62 2 29 0 171 31 169 221 216 241 103 152 253 1 82 81 253 113 164 173 217 98 175 182 240 27 0 249 30 66 53 44 2 29 0 157 113 177 31 225 160 98 140 1 44 221 147 142 131 138 203 242 42 235 214 76 29 160 29 91 47 191 74)
      #t
      ())
    #(252
      "special case hash"
      #vu8(50 53 48 55 55 50 55 48 51 50)
      #vu8(48 62 2 29 0 134 159 62 196 118 84 80 172 3 170 42 74 99 45 95 122 150 3 180 181 47 55 2 157 210 199 40 155 2 29 0 164 189 45 5 111 226 67 253 60 109 113 144 65 178 9 60 129 18 95 14 231 117 39 48 195 152 115 17)
      #t
      ())
    #(253
      "special case hash"
      #vu8(55 49 57 51 52 53 57 51 57)
      #vu8(48 60 2 28 15 215 163 119 222 19 181 94 217 227 154 190 215 21 58 183 43 56 100 174 0 8 155 230 203 57 197 174 2 28 1 153 151 34 3 107 164 78 158 0 87 75 61 228 106 124 42 244 105 116 243 206 56 24 28 235 172 225)
      #t
      ())
    #(254
      "special case hash"
      #vu8(49 54 51 55 51 48 53 55 54 51)
      #vu8(48 60 2 28 23 159 240 127 231 182 132 231 35 30 252 178 34 22 112 155 108 91 100 243 226 171 43 105 98 183 208 226 2 28 48 119 175 98 75 250 25 163 223 135 54 46 58 65 234 14 127 144 75 50 192 104 81 206 224 245 182 161)
      #t
      ())
    #(255
      "special case hash"
      #vu8(52 50 52 49 50 55 51 55 49 51)
      #vu8(48 60 2 28 93 104 23 187 188 250 99 63 147 68 86 171 89 70 116 65 40 189 14 183 197 187 230 219 22 233 89 77 2 28 115 194 52 243 242 49 135 179 24 185 132 208 153 131 142 245 120 115 186 109 228 139 217 250 220 210 239 254)
      #t
      ())
    #(256
      "special case hash"
      #vu8(52 55 53 54 49 52 55 51 55)
      #vu8(48 62 2 29 0 173 247 203 211 48 24 254 88 211 218 100 13 200 220 219 93 183 90 133 184 64 158 248 166 211 74 136 223 2 29 0 138 229 202 254 104 51 173 64 234 38 152 205 134 45 249 165 113 143 59 0 147 88 133 248 145 52 217 186)
      #t
      ())
    #(257
      "special case hash"
      #vu8(55 49 54 50 51 50 55 55 51 52)
      #vu8(48 62 2 29 0 186 119 32 81 17 83 182 185 106 56 99 94 153 151 202 255 26 195 28 222 164 2 50 65 208 31 150 108 2 29 0 160 231 46 162 12 85 187 164 126 230 170 125 163 235 209 193 219 175 238 113 82 227 226 39 120 100 64 38)
      #t
      ())
    #(258
      "special case hash"
      #vu8(49 50 50 50 52 48 52 49 50 57)
      #vu8(48 60 2 28 16 168 204 146 229 80 200 22 153 156 10 155 222 43 52 90 42 117 198 246 104 97 240 96 255 42 55 66 2 28 110 245 69 86 199 136 63 196 94 139 0 99 143 247 108 31 62 234 250 137 94 79 45 206 153 2 73 252)
      #t
      ())
    #(259
      "special case hash"
      #vu8(51 53 50 52 53 56 51 51 54 56)
      #vu8(48 61 2 28 41 128 195 175 59 111 230 252 95 15 130 231 75 132 132 83 207 237 20 96 207 153 160 128 189 90 133 102 2 29 0 135 211 171 224 188 101 39 67 167 90 84 87 154 52 184 42 145 196 136 153 1 87 196 169 54 69 64 46)
      #t
      ())
    #(260
      "special case hash"
      #vu8(51 49 54 51 52 51 57 54)
      #vu8(48 60 2 28 44 61 47 239 45 35 234 67 31 54 221 50 88 18 115 38 248 58 186 153 137 117 79 215 51 147 27 176 2 28 100 222 15 55 195 52 235 7 245 126 93 207 146 90 120 6 249 15 26 243 76 37 68 207 61 77 159 101)
      #t
      ())
    #(261
      "special case hash"
      #vu8(54 53 51 50 53 57 56 52 51 57)
      #vu8(48 61 2 28 95 8 73 104 100 186 155 107 116 129 4 5 251 186 87 154 90 236 202 82 195 201 133 27 206 58 229 128 2 29 0 250 210 211 45 88 70 121 235 0 116 40 95 52 213 238 69 46 208 170 194 34 41 80 188 60 176 25 96)
      #t
      ())
    #(262
      "special case hash"
      #vu8(55 51 56 53 49 56 53 48 52)
      #vu8(48 61 2 28 7 85 251 192 203 72 71 16 17 24 210 102 232 38 207 35 253 198 100 191 196 185 66 94 235 86 115 66 2 29 0 194 254 195 22 57 124 241 103 193 178 52 167 186 180 108 42 38 182 180 139 135 121 3 37 153 91 249 162)
      #t
      ())
    #(263
      "special case hash"
      #vu8(49 52 54 53 50 54 54 53 55 57)
      #vu8(48 60 2 28 37 68 133 175 238 105 18 243 139 255 174 119 21 83 170 247 52 199 121 183 105 231 146 178 98 58 176 86 2 28 110 89 158 162 254 135 210 34 137 146 206 163 64 177 77 136 114 173 60 178 171 243 90 31 69 60 124 36)
      #t
      ())
    #(264
      "special case hash"
      #vu8(50 48 51 52 56 56 57 52 57 52)
      #vu8(48 62 2 29 0 153 230 104 152 63 12 60 65 104 8 29 55 102 70 7 67 88 233 35 176 92 139 227 8 14 208 210 160 2 29 0 224 178 140 132 242 202 50 61 137 222 248 120 222 189 1 159 58 137 92 141 234 204 190 105 181 108 72 7)
      #t
      ())
    #(265
      "special case hash"
      #vu8(52 52 55 48 56 56 54 55 56 53)
      #vu8(48 62 2 29 0 172 218 6 161 240 29 188 212 158 137 152 226 114 119 85 203 100 98 186 243 40 17 242 4 53 21 137 227 2 29 0 142 233 217 16 187 102 41 88 23 195 45 105 181 62 214 234 191 162 224 159 179 157 70 67 154 138 72 29)
      #t
      ())
    #(266
      "special case hash"
      #vu8(53 53 55 54 52 48 52 52 54)
      #vu8(48 60 2 28 82 36 197 130 172 143 113 1 191 111 225 74 150 23 202 10 152 120 219 190 2 106 226 48 209 230 61 15 2 28 97 240 228 134 161 183 204 226 40 135 78 124 203 109 200 220 149 67 74 254 109 187 116 148 185 240 225 201)
      #t
      ())
    #(267
      "special case hash"
      #vu8(54 51 52 52 57 53 54 54 48 56)
      #vu8(48 61 2 29 0 157 5 71 14 57 136 247 110 120 38 132 255 215 67 187 211 162 187 104 59 15 44 221 200 115 255 121 237 2 28 58 26 78 121 106 120 71 93 183 0 4 7 39 154 102 90 44 64 103 147 17 4 21 229 101 91 102 152)
      #t
      ())
    #(268
      "special case hash"
      #vu8(52 57 52 50 56 48 57 48 51 49)
      #vu8(48 60 2 28 116 213 165 248 1 171 16 58 141 233 206 254 54 87 83 229 228 226 74 174 136 177 142 173 8 249 231 225 2 28 34 25 95 242 177 223 244 248 239 115 130 165 47 23 122 118 106 143 131 155 101 183 112 118 133 12 94 221)
      #t
      ())
    #(269
      "special case hash"
      #vu8(50 54 54 53 56 49 57 51 57)
      #vu8(48 62 2 29 0 238 224 9 88 172 163 181 188 63 244 133 51 204 222 195 235 86 86 99 241 115 54 124 201 90 159 49 76 2 29 0 235 195 237 13 97 14 11 159 198 61 129 35 185 39 163 51 175 108 204 47 193 64 66 145 3 110 81 77)
      #t
      ())
    #(270
      "special case hash"
      #vu8(51 51 51 50 50 49 52 49 49 52)
      #vu8(48 61 2 28 15 10 131 251 219 176 92 97 31 100 48 168 210 244 124 83 228 69 131 28 135 130 3 203 129 81 56 120 2 29 0 180 177 50 31 9 163 171 94 76 194 123 239 216 149 6 101 26 78 64 226 42 246 158 88 179 200 134 145)
      #t
      ())
    #(271
      "special case hash"
      #vu8(54 49 54 53 50 55 55 49 53)
      #vu8(48 61 2 28 10 103 218 82 90 184 105 243 198 187 77 204 24 33 194 172 6 87 40 205 34 212 155 11 165 129 59 168 2 29 0 183 0 101 177 42 109 43 197 146 120 58 121 66 174 13 174 58 209 231 198 242 124 172 252 43 72 221 219)
      #t
      ())
    #(272
      "special case hash"
      #vu8(50 51 53 57 57 53 53 56 49 51)
      #vu8(48 62 2 29 0 180 31 1 165 183 95 186 72 53 121 129 86 172 136 46 130 162 226 152 89 150 1 50 25 92 31 126 145 2 29 0 244 33 251 166 208 6 27 146 248 171 142 203 231 181 121 27 196 60 81 6 201 172 151 71 229 218 103 26)
      #t
      ())
    #(273
      "special case hash"
      #vu8(50 57 49 51 54 49 57 53 56)
      #vu8(48 61 2 29 0 227 22 59 109 253 101 133 245 10 201 52 189 37 234 134 6 94 255 99 118 56 122 86 204 33 8 151 222 2 28 5 217 58 45 238 154 85 34 141 188 61 242 96 21 44 69 143 141 214 247 43 29 87 243 127 111 104 92)
      #t
      ())
    #(274
      "special case hash"
      #vu8(49 54 50 48 57 48 51 51 57 54)
      #vu8(48 60 2 28 39 162 197 219 20 198 15 113 195 240 129 150 53 110 167 9 77 182 85 154 76 92 122 176 151 170 215 153 2 28 117 87 65 167 119 173 65 155 92 24 83 188 111 141 168 156 40 42 103 247 28 209 252 58 191 230 239 28)
      #t
      ())
    #(275
      "special case hash"
      #vu8(51 51 54 51 49 48 50 56 52 50)
      #vu8(48 60 2 28 107 92 74 33 35 114 28 247 78 21 26 63 61 151 136 13 25 140 215 133 10 73 11 55 54 237 40 164 2 28 75 1 7 180 199 243 42 70 49 81 96 179 159 149 210 190 196 105 152 25 96 238 175 153 243 14 141 139)
      #t
      ())
    #(276
      "special case hash"
      #vu8(54 50 55 55 52 51 52 57 49)
      #vu8(48 60 2 28 33 154 143 157 103 1 215 181 29 130 178 147 210 240 206 72 71 225 58 190 157 254 141 228 38 22 64 64 2 28 51 98 62 105 128 99 190 205 143 40 68 93 219 22 202 237 251 224 147 162 193 216 153 37 194 138 18 249)
      #t
      ())
    #(277
      "special case hash"
      #vu8(51 56 53 54 55 57 56 49 52 55)
      #vu8(48 61 2 29 0 160 103 101 25 193 39 245 107 2 86 149 50 110 182 140 84 56 181 212 115 198 184 27 37 213 55 147 194 2 28 98 206 51 49 94 161 174 131 220 72 231 231 116 215 1 220 39 179 100 72 78 49 51 222 36 240 142 25)
      #t
      ())
    #(278
      "special case hash"
      #vu8(50 56 56 49 49 56 48 54 52 48)
      #vu8(48 62 2 29 0 177 108 184 49 39 122 64 17 85 19 79 179 13 105 56 185 145 134 101 175 126 89 83 15 205 156 192 178 2 29 0 248 90 41 199 155 48 171 109 148 57 234 236 229 144 29 101 119 74 225 137 58 198 3 227 48 140 41 174)
      #t
      ())
    #(279
      "special case hash"
      #vu8(49 48 57 53 55 51 57 52 54 55 56)
      #vu8(48 61 2 28 78 177 245 221 117 97 91 218 131 104 185 69 102 223 221 169 215 216 145 127 24 99 211 96 64 89 251 79 2 29 0 128 181 226 67 190 98 25 53 15 96 175 27 80 87 143 61 98 4 181 239 205 161 12 220 51 141 8 247)
      #t
      ())
    #(280
      "special case hash"
      #vu8(53 52 50 55 49 49 57 56 52)
      #vu8(48 61 2 28 96 2 130 201 1 204 58 76 133 150 160 89 181 172 33 122 155 153 159 13 59 105 178 75 57 23 209 204 2 29 0 241 244 1 205 140 241 6 153 34 68 179 103 78 217 229 89 9 184 104 51 87 190 68 253 72 161 195 235)
      #t
      ())
    #(281
      "special case hash"
      #vu8(51 49 53 48 48 51 52 51 50 53)
      #vu8(48 61 2 28 84 198 102 163 13 114 160 71 90 76 240 254 11 181 143 19 170 219 54 31 251 168 147 37 197 110 196 139 2 29 0 145 243 106 159 202 4 3 67 252 194 156 127 237 53 173 185 219 154 47 23 193 243 93 228 175 204 143 10)
      #t
      ())
    #(282
      "special case hash"
      #vu8(49 57 57 57 56 50 49 51 57 49)
      #vu8(48 61 2 29 0 255 234 52 100 129 163 125 127 39 40 226 187 227 80 131 188 186 206 123 145 224 109 162 173 24 37 219 223 2 28 6 207 110 238 119 234 122 77 160 237 121 168 161 103 173 236 81 200 162 222 144 111 63 127 236 222 121 158)
      #t
      ())
    #(283
      "special case hash"
      #vu8(49 57 55 49 50 48 57 50 54 49)
      #vu8(48 60 2 28 56 250 64 165 126 74 4 2 76 137 144 81 204 128 128 197 38 29 222 102 234 89 254 83 46 133 32 19 2 28 62 153 209 35 229 150 233 147 214 119 104 59 210 88 137 84 145 85 237 174 9 142 89 162 159 231 217 207)
      #t
      ())
    #(284
      "special case hash"
      #vu8(51 53 55 49 56 51 56 56 53 55)
      #vu8(48 60 2 28 127 98 169 133 197 187 222 14 17 224 37 10 151 215 63 163 128 17 187 131 182 250 45 152 54 191 92 69 2 28 59 216 80 131 44 195 5 230 183 217 86 109 54 149 26 196 121 75 45 8 255 113 43 24 176 175 101 148)
      #t
      ())
    #(285
      "special case hash"
      #vu8(56 54 56 50 50 54 57 56 57 53)
      #vu8(48 61 2 28 49 31 6 53 118 200 55 59 150 204 22 82 171 59 227 165 142 173 234 120 110 117 177 122 4 194 188 160 2 29 0 189 183 9 109 103 93 16 36 41 23 2 221 153 29 86 6 193 37 230 18 149 84 146 46 2 68 79 177)
      #t
      ())
    #(286
      "special case hash"
      #vu8(50 53 52 56 56 53 54 48 51 49)
      #vu8(48 61 2 28 101 219 99 166 99 227 95 185 126 168 240 117 42 49 144 19 65 2 244 251 190 221 20 187 92 19 73 168 2 29 0 171 223 230 140 127 12 103 79 48 36 136 188 3 5 88 211 86 73 249 169 198 157 88 1 165 117 203 11)
      #t
      ())
    #(287
      "special case hash"
      #vu8(52 57 57 53 55 48 49 51 49 57)
      #vu8(48 60 2 28 7 92 238 234 162 255 190 93 193 115 216 77 247 17 69 160 86 80 10 144 248 251 144 42 36 192 211 99 2 28 104 140 239 207 38 245 132 248 213 152 218 43 150 10 81 43 107 101 164 37 237 83 106 75 213 112 207 131)
      #t
      ())
    #(288
      "special case hash"
      #vu8(50 52 53 54 54 56 49 55 56 53)
      #vu8(48 61 2 29 0 248 64 116 180 43 20 172 184 113 90 178 41 228 38 28 9 176 150 165 139 105 245 16 245 244 145 186 110 2 28 48 79 228 18 156 109 190 72 28 201 45 157 203 234 152 62 64 234 254 241 126 164 96 57 96 138 20 49)
      #t
      ())
    #(289
      "special case hash"
      #vu8(52 49 56 53 51 55 49 50 51 54)
      #vu8(48 61 2 29 0 173 160 128 236 255 55 202 129 143 72 221 92 14 186 183 138 100 94 151 62 19 132 53 99 114 55 248 112 2 28 77 133 235 25 80 137 200 60 146 180 131 165 59 3 107 51 5 10 161 75 162 68 235 72 160 249 125 157)
      #t
      ())
    #(290
      "special case hash"
      #vu8(55 50 55 56 52 57 48 48 52)
      #vu8(48 61 2 29 0 167 194 44 29 104 232 189 86 53 32 207 199 73 215 222 67 217 174 4 81 135 162 66 65 104 234 172 243 2 28 105 89 174 44 31 227 11 69 176 73 196 165 228 24 101 71 17 242 28 187 146 93 206 137 229 26 154 228)
      #t
      ())
    #(291
      "special case hash"
      #vu8(49 53 54 50 56 49 57 51 49 56)
      #vu8(48 60 2 28 44 225 95 59 196 248 39 226 205 95 89 183 152 15 105 78 145 196 182 167 183 124 97 111 23 18 17 54 2 28 63 113 118 106 201 229 43 152 245 138 104 149 17 46 67 183 89 37 24 58 41 167 59 216 53 249 85 147)
      #t
      ())
    #(292
      "special case hash"
      #vu8(50 49 56 55 57 57 50 56 51 56 54)
      #vu8(48 61 2 29 0 230 155 107 60 154 8 218 42 144 213 154 197 69 76 16 36 107 216 222 192 101 144 66 3 145 20 6 147 2 28 82 208 144 229 75 121 250 120 11 70 0 10 7 11 26 120 186 151 151 179 75 23 97 240 148 8 200 11)
      #t
      ())
    #(293
      "Signature generated without truncating the hash"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 29 0 193 165 39 163 239 227 179 151 190 248 137 182 153 177 146 167 102 61 157 96 68 157 217 236 203 250 142 85 2 28 123 162 222 3 71 208 137 92 106 36 178 110 128 4 69 134 246 113 139 238 171 195 22 241 140 136 240 20)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 142 118 26 143 176 174 15 77 7 124 131 49 3 145 134 186 202 250 199 74 210 92 73 151 135 208 158 244 175 94 128 41 33 222 240 123 133 219 172 161 17 70 56 44 196 18 23 103 216 205 15 7 152 226 188 10)
  :der-encode
  #t
  :tests
  '(#(294
      "k*G has a large x-coordinate"
      #vu8(49 50 51 52 48 48)
      #vu8(48 48 2 15 0 233 92 31 71 15 193 236 34 214 186 163 163 213 193 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 58)
      #t
      ())
    #(295
      "r too large"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 255 255 255 255 255 255 255 255 255 254 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 58)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 202 80 99 10 135 42 220 213 88 195 136 202 59 2 76 181 158 18 153 189 69 217 227 36 246 5 226 97 60 105 167 12 96 244 158 4 179 142 55 56 197 229 145 237 170 81 215 151 77 233 231 39 37 216 166 144)
  :der-encode
  #t
  :tests
  '(#(296
      "r,s are large"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 60 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 59)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 25 119 170 192 185 28 43 101 245 128 165 243 61 128 69 163 165 110 58 58 180 141 134 19 243 172 8 68 195 21 243 123 72 203 119 22 53 225 106 251 202 132 148 139 158 78 53 105 10 9 144 189 220 108 171 154)
  :der-encode
  #t
  :tests
  '(#(297
      "r and s^-1 have a large Hamming weight"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 2 28 61 80 82 105 27 141 200 157 235 173 54 4 102 242 163 158 130 232 174 42 239 183 124 60 146 173 124 209)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 4 30 211 244 211 114 195 183 196 39 78 21 193 164 194 229 32 17 165 234 104 109 226 59 59 39 191 63 109 141 110 191 166 59 116 103 166 145 214 218 37 157 147 46 206 128 182 186 148 109 153 44 167 140 58 171)
  :der-encode
  #t
  :tests
  '(#(298
      "r and s^-1 have a large Hamming weight"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 2 29 0 191 25 171 77 62 191 90 26 73 215 101 144 147 8 218 168 140 43 123 227 150 157 181 82 234 48 86 43)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 103 49 189 47 121 105 254 191 147 250 35 130 189 79 220 147 221 238 222 143 45 234 196 195 171 241 206 122 25 81 107 21 114 125 17 28 120 107 57 186 17 2 109 37 162 32 180 254 82 197 245 111 212 202 93 236)
  :der-encode
  #t
  :tests
  '(#(299
      "small r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 3 2 1 1)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 74 164 102 126 172 214 120 143 23 235 222 89 231 141 222 23 123 43 55 137 69 186 72 125 50 85 103 216 93 136 125 50 232 207 109 81 130 67 61 143 129 201 69 180 53 109 62 188 14 151 13 208 169 3 83 135)
  :der-encode
  #t
  :tests
  '(#(300
      "small r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 3 2 1 3)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 3 34 67 94 248 85 125 169 48 108 100 90 11 97 76 111 108 233 141 133 150 151 120 76 247 79 47 35 168 205 158 36 62 144 136 23 1 51 189 129 235 108 210 133 113 252 242 7 80 152 25 244 67 229 187 181)
  :der-encode
  #t
  :tests
  '(#(301
      "small r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 3 2 1 4)
      #t
      ())
    #(302
      "r is larger than n"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 64 2 1 4)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 87 25 189 120 119 99 103 255 234 149 185 49 62 200 37 199 10 50 82 50 106 161 236 102 188 32 123 211 50 122 224 85 86 246 47 86 80 219 137 139 49 110 104 155 92 55 122 138 100 215 67 168 154 180 21 59)
  :der-encode
  #t
  :tests
  '(#(303
      "s is larger than n"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 1 3 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 111 0 196)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 187 30 151 196 181 190 222 192 175 151 22 157 176 109 4 6 71 189 64 250 120 83 200 232 208 173 67 11 16 37 236 103 126 144 5 116 133 60 197 206 118 26 146 186 233 41 236 134 7 106 204 72 89 190 172 200)
  :der-encode
  #t
  :tests
  '(#(304
      "small r and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 35 2 2 1 0 2 29 0 201 147 38 76 153 50 100 201 147 38 76 153 50 100 17 210 229 91 50 20 168 214 117 40 129 42 85 171)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 176 15 247 225 146 91 151 23 144 58 5 212 12 233 134 14 209 46 190 216 198 134 224 90 146 5 169 118 17 14 233 74 154 50 103 171 21 101 198 108 221 94 210 132 76 204 92 106 126 120 228 130 27 149 79 152)
  :der-encode
  #t
  :tests
  '(#(305
      "smallish r and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 39 2 7 45 155 77 52 121 82 204 2 28 62 133 213 100 116 181 197 95 190 134 96 132 66 168 75 43 240 147 183 215 95 83 164 114 80 225 199 12)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 180 241 141 3 16 151 241 121 239 250 209 70 245 250 126 133 116 230 73 61 196 19 58 126 107 255 103 99 177 26 217 171 205 232 169 59 120 182 188 31 113 217 97 104 113 34 99 246 253 235 29 169 177 25 57 18)
  :der-encode
  #t
  :tests
  '(#(306
      "100-bit r and small s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 13 16 51 230 126 55 179 43 68 85 128 191 78 251 2 28 2 253 2 253 2 253 2 253 2 253 2 253 2 253 0 67 164 253 45 163 23 36 115 8 199 77 198 184)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 163 82 64 198 142 143 78 206 198 64 173 44 197 69 51 39 92 214 181 79 72 4 118 224 65 47 25 30 124 75 222 242 170 37 97 251 178 210 111 144 52 131 98 101 184 30 85 93 86 182 244 70 182 184 99 168)
  :der-encode
  #t
  :tests
  '(#(307
      "small r and 100 bit s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 35 2 2 1 0 2 29 0 208 84 52 171 172 216 89 237 116 24 94 117 183 81 198 217 246 12 121 33 218 207 187 142 25 205 186 142)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 239 103 207 169 94 186 127 33 228 126 159 128 230 36 208 98 151 227 197 22 181 212 129 11 192 50 100 244 122 224 118 69 62 208 107 196 57 153 183 19 170 253 14 178 170 129 146 246 26 97 214 86 13 102 163 216)
  :der-encode
  #t
  :tests
  '(#(308
      "100-bit r and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 13 6 37 34 187 211 236 190 124 57 233 62 124 36 2 29 0 208 84 52 171 172 216 89 237 116 24 94 117 183 81 198 217 246 12 121 33 218 207 187 142 25 205 186 142)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 255 22 219 221 19 53 211 211 26 205 31 234 60 189 213 250 251 207 177 51 103 204 88 49 87 74 11 174 129 118 63 251 214 188 135 32 212 110 126 227 205 160 27 152 160 207 71 152 22 234 70 190 168 170 225 153)
  :der-encode
  #t
  :tests
  '(#(309
      "r and s^-1 are close to n"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 41 189 2 28 85 85 85 85 85 85 85 85 85 85 85 85 85 85 7 139 160 61 165 106 6 159 13 193 201 116 14 20)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 156 136 211 75 205 199 10 9 189 156 180 170 180 228 15 169 0 71 45 99 92 78 189 35 102 229 212 185 236 197 76 61 68 113 73 83 118 107 187 18 87 163 88 10 42 168 81 112 228 24 150 155 163 166 104 65)
  :der-encode
  #t
  :tests
  '(#(310
      "s == 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 33 2 28 85 85 85 85 85 85 85 85 85 85 85 85 85 85 7 139 160 61 165 106 6 159 13 193 201 116 14 20 2 1 1)
      #t
      ())
    #(311
      "s == 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 33 2 28 85 85 85 85 85 85 85 85 85 85 85 85 85 85 7 139 160 61 165 106 6 159 13 193 201 116 14 20 2 1 0)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 163 206 24 11 214 95 252 118 213 80 42 232 6 166 180 52 215 230 155 57 177 148 14 68 200 54 4 203 65 80 202 81 45 221 243 54 56 151 221 141 35 247 101 100 65 33 136 204 155 231 124 23 13 206 244 231)
  :der-encode
  #t
  :tests
  '(#(312
      "point at infinity during verify"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 139 81 112 92 120 31 9 238 148 162 174 46 21 30 2 28 85 85 85 85 85 85 85 85 85 85 85 85 85 85 7 139 160 61 165 106 6 159 13 193 201 116 14 20)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 122 17 131 232 61 216 227 139 42 239 25 201 230 4 162 5 236 245 10 188 154 209 178 191 58 6 43 169 53 208 236 112 209 198 107 161 36 135 42 71 208 68 184 187 123 106 64 91 154 155 204 230 54 249 231 136)
  :der-encode
  #t
  :tests
  '(#(313
      "edge case for signature malleability"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 139 81 112 92 120 31 9 238 148 162 174 46 21 31 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 139 81 112 92 120 31 9 238 148 162 174 46 21 30)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 111 187 191 166 13 73 182 3 251 199 246 246 201 34 223 3 100 192 63 8 154 243 162 136 206 67 55 213 40 196 110 182 244 62 156 79 38 100 255 114 213 135 205 112 108 98 12 215 24 188 235 17 151 72 46 217)
  :der-encode
  #t
  :tests
  '(#(314
      "edge case for signature malleability"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 139 81 112 92 120 31 9 238 148 162 174 46 21 31 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 139 81 112 92 120 31 9 238 148 162 174 46 21 31)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 213 10 147 164 117 171 4 82 28 164 188 77 205 6 135 46 133 252 88 122 124 86 230 138 110 148 132 106 69 17 240 189 33 175 25 223 244 222 240 155 4 188 178 14 33 173 33 224 248 196 164 159 33 133 106 166)
  :der-encode
  #t
  :tests
  '(#(315
      "u1 == 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 85 85 85 85 85 85 85 85 85 85 85 85 85 85 7 139 160 61 165 106 6 159 13 193 201 116 14 20 2 28 87 49 183 196 189 4 203 158 251 131 105 53 255 46 84 123 242 144 159 134 130 74 244 216 223 120 172 247)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 74 2 152 215 167 166 112 210 83 143 106 174 101 221 246 190 53 212 116 187 221 27 106 160 168 18 217 116 146 81 134 111 99 14 218 113 233 215 39 150 78 86 58 37 150 236 4 196 208 19 79 185 151 2 28 163)
  :der-encode
  #t
  :tests
  '(#(316
      "u1 == n - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 85 85 85 85 85 85 85 85 85 85 85 85 85 85 7 139 160 61 165 106 6 159 13 193 201 116 14 20 2 29 0 168 206 72 59 66 251 52 97 4 124 150 202 0 208 194 38 238 40 80 183 145 146 52 108 124 227 125 70)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 74 142 173 94 50 35 75 42 120 23 27 190 50 21 241 183 33 249 174 17 60 126 151 17 189 68 203 40 21 88 12 193 233 242 42 67 46 128 112 247 0 185 73 234 85 207 205 147 35 88 159 225 237 176 96 83)
  :der-encode
  #t
  :tests
  '(#(317
      "u2 == 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 85 85 85 85 85 85 85 85 85 85 85 85 85 85 7 139 160 61 165 106 6 159 13 193 201 116 14 20 2 28 85 85 85 85 85 85 85 85 85 85 85 85 85 85 7 139 160 61 165 106 6 159 13 193 201 116 14 20)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 85 189 0 51 51 228 73 220 89 225 129 203 46 20 226 36 15 38 188 127 63 23 19 167 59 160 227 108 105 172 139 31 185 196 194 112 236 87 166 175 211 248 198 95 30 52 197 23 108 127 118 132 232 97 22 125)
  :der-encode
  #t
  :tests
  '(#(318
      "u2 == n - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 85 85 85 85 85 85 85 85 85 85 85 85 85 85 7 139 160 61 165 106 6 159 13 193 201 116 14 20 2 29 0 170 170 170 170 170 170 170 170 170 170 170 170 170 170 15 23 64 123 74 212 13 62 27 131 146 232 28 41)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 112 54 185 109 144 51 234 91 246 166 59 195 8 147 109 161 99 107 34 198 1 245 253 26 63 200 180 145 2 132 23 173 55 137 155 62 161 220 167 182 126 198 10 126 123 10 240 77 2 75 173 138 163 165 228 163)
  :der-encode
  #t
  :tests
  '(#(319
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 29 0 199 187 61 65 148 86 238 138 83 214 120 103 85 14 213 235 60 0 213 86 56 172 109 33 50 187 0 123)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 88 254 47 64 246 179 97 22 123 217 117 126 115 144 139 33 168 244 60 66 14 19 174 241 25 33 30 100 103 117 164 150 129 226 214 70 222 162 107 242 87 248 247 250 201 247 251 46 155 191 211 102 73 149 123 132)
  :der-encode
  #t
  :tests
  '(#(320
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 29 0 170 182 218 164 98 136 82 202 75 37 233 23 239 71 113 84 124 117 213 236 81 39 201 198 103 140 222 77)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 174 85 36 164 83 49 1 165 207 227 144 125 112 108 175 167 249 4 217 223 227 140 238 197 148 87 214 46 24 67 78 39 30 223 88 0 140 21 214 39 218 187 245 105 30 156 158 170 121 48 9 76 232 133 226 206)
  :der-encode
  #t
  :tests
  '(#(321
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 29 0 128 99 219 22 120 112 17 161 193 33 42 240 68 89 154 145 247 136 105 189 121 15 93 197 136 216 66 229)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 224 175 74 212 240 106 65 199 45 80 45 105 52 200 195 244 179 79 6 45 28 247 35 179 113 44 154 243 74 61 9 255 211 80 110 17 102 150 9 234 143 232 238 84 179 1 136 188 10 209 54 205 207 115 3 140)
  :der-encode
  #t
  :tests
  '(#(322
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 28 23 104 130 70 49 61 11 66 168 206 72 59 66 251 31 10 98 23 57 70 17 242 177 119 173 169 75 71)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 222 175 120 87 80 238 240 179 225 120 236 114 105 86 185 51 136 56 176 190 121 202 81 102 4 25 55 181 166 182 147 24 239 196 150 26 80 180 76 212 183 146 194 113 83 159 59 65 41 232 232 218 220 150 132 179)
  :der-encode
  #t
  :tests
  '(#(323
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 29 0 136 36 99 19 208 180 42 140 228 131 180 47 179 69 148 45 37 101 102 110 37 253 47 133 166 14 186 226)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 225 79 183 252 132 157 226 13 51 198 197 230 179 88 245 186 112 46 178 185 18 29 239 141 61 237 219 223 88 21 60 142 14 240 183 137 147 244 209 116 5 193 254 43 32 136 13 64 178 41 247 222 81 164 214 179)
  :der-encode
  #t
  :tests
  '(#(324
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 28 16 72 198 39 161 104 85 25 201 7 104 95 102 140 17 183 106 17 220 158 56 29 53 197 239 193 75 135)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 248 58 37 76 7 194 144 34 69 76 67 190 155 213 233 156 99 15 247 216 50 6 113 58 31 191 160 250 1 122 10 219 6 143 178 138 148 24 50 142 172 27 193 156 108 146 195 241 102 106 119 50 80 87 26 25)
  :der-encode
  #t
  :tests
  '(#(325
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 28 49 61 11 66 168 206 72 59 66 251 52 97 4 124 105 231 136 96 137 217 240 192 252 44 77 145 121 82)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 35 172 28 203 128 127 118 250 153 32 122 246 127 102 47 177 238 16 241 213 253 219 113 94 175 168 173 61 177 142 206 235 116 50 199 2 80 248 233 47 169 144 186 171 24 41 101 71 251 121 1 172 221 143 175 89)
  :der-encode
  #t
  :tests
  '(#(326
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 28 28 34 97 95 53 212 136 186 214 20 195 204 85 120 32 91 210 92 13 115 237 152 94 18 20 208 148 225)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 17 157 159 12 95 95 98 6 223 89 134 34 236 122 252 117 106 12 28 27 61 17 51 82 138 122 6 205 13 241 122 145 100 113 151 20 72 139 155 168 2 24 133 212 234 168 62 136 66 177 26 243 104 208 99 4)
  :der-encode
  #t
  :tests
  '(#(327
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 28 56 68 194 190 107 169 17 117 172 41 135 152 170 240 64 183 164 184 26 231 219 48 188 36 41 161 41 194)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 136 136 174 155 26 184 213 123 24 70 138 44 22 248 201 113 167 7 17 198 54 26 154 254 20 190 78 51 175 50 49 26 24 239 107 150 92 143 110 37 32 81 121 74 52 103 222 159 88 192 106 133 69 183 67 220)
  :der-encode
  #t
  :tests
  '(#(328
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 28 84 103 36 29 161 125 154 48 130 62 75 101 0 104 97 19 119 20 40 91 200 201 26 54 62 113 190 163)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 44 229 163 242 179 252 121 22 149 62 190 113 167 255 51 146 28 181 113 103 171 170 135 26 7 32 33 150 234 45 59 97 130 11 221 82 100 240 96 104 8 68 215 33 122 33 96 30 62 211 122 121 213 149 59 152)
  :der-encode
  #t
  :tests
  '(#(329
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 29 0 192 49 237 139 60 56 8 208 224 144 149 120 34 44 88 154 108 32 172 253 198 118 67 133 114 154 54 145)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 186 229 241 30 183 126 53 74 13 14 51 196 206 36 131 157 114 110 23 0 229 20 204 189 237 226 49 69 79 253 0 159 190 234 156 115 7 147 143 138 223 237 132 222 54 0 146 2 134 40 29 38 124 136 96 154)
  :der-encode
  #t
  :tests
  '(#(330
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 178 54 74 232 80 20 177 73 184 108 116 30 184 190)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 209 83 173 143 70 45 47 147 136 250 139 67 81 122 162 167 121 157 234 11 187 31 186 103 197 103 65 114 223 3 183 120 181 135 171 193 141 178 59 213 47 67 145 55 20 209 244 27 140 145 144 123 36 207 30 248)
  :der-encode
  #t
  :tests
  '(#(331
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 29 0 133 95 91 45 200 228 110 196 40 165 147 247 50 25 207 101 218 231 147 232 52 110 48 204 55 1 48 156)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 57 179 12 246 130 126 149 196 187 28 245 162 1 227 97 30 168 118 96 198 113 252 254 72 55 165 91 168 191 153 13 126 119 86 171 76 15 8 240 214 116 152 12 170 46 85 156 147 200 79 112 66 251 240 172 224)
  :der-encode
  #t
  :tests
  '(#(332
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 28 45 181 246 26 234 129 114 118 175 32 100 225 4 199 163 14 50 3 76 181 38 221 10 172 250 86 86 111)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 206 114 244 51 65 103 148 217 186 14 83 115 94 178 39 127 253 254 132 248 82 255 6 178 107 43 164 141 206 240 51 214 248 151 206 130 15 49 120 240 51 27 71 90 217 248 230 190 47 243 71 136 224 158 85 196)
  :der-encode
  #t
  :tests
  '(#(333
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 29 0 132 166 199 81 62 95 72 192 127 255 255 255 255 255 135 19 243 203 161 41 62 79 62 149 89 127 230 189)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 105 33 31 182 142 12 228 11 89 11 223 178 98 117 61 56 23 169 119 124 188 193 130 146 246 61 148 70 127 192 220 244 214 160 42 13 175 149 47 27 220 153 236 180 188 239 222 141 126 178 42 225 75 228 75 95)
  :der-encode
  #t
  :tests
  '(#(334
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 28 108 117 19 229 244 140 7 255 255 255 255 255 255 255 157 33 253 27 49 84 76 177 60 168 106 117 178 94)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 234 228 163 212 61 163 30 91 187 103 103 236 24 176 60 34 49 77 205 231 127 106 218 231 230 161 182 108 59 43 111 42 190 34 240 3 118 112 60 218 84 166 182 228 203 215 186 199 97 71 130 239 158 148 178 111)
  :der-encode
  #t
  :tests
  '(#(335
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 29 0 216 234 39 203 233 24 15 255 255 255 255 255 255 255 58 67 250 54 98 168 153 98 121 80 212 235 100 188)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 26 81 150 154 48 249 102 137 78 208 225 183 99 218 124 221 42 37 138 154 157 110 251 1 148 25 193 82 253 137 130 41 84 137 233 127 45 141 110 190 4 9 215 89 165 202 37 207 150 39 242 14 57 241 230 81)
  :der-encode
  #t
  :tests
  '(#(336
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 28 62 95 72 192 127 255 255 255 255 255 255 255 255 255 199 36 150 140 14 207 158 215 131 116 74 115 55 179)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 144 155 182 196 123 152 27 30 179 173 120 214 173 107 4 121 31 153 82 66 159 152 160 20 22 183 120 253 108 56 16 125 85 210 142 55 73 61 34 226 170 42 76 102 201 218 44 201 11 226 32 34 120 135 15 146)
  :der-encode
  #t
  :tests
  '(#(337
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 29 0 191 255 255 255 255 255 255 255 255 255 255 255 255 255 61 135 187 68 200 51 187 56 77 15 34 76 205 222)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 238 201 219 182 254 94 213 200 228 248 48 156 216 29 80 96 5 239 213 45 202 115 232 135 73 87 219 44 132 15 102 147 231 127 146 8 140 110 65 16 117 255 21 129 124 160 246 230 105 162 149 208 29 36 66 189)
  :der-encode
  #t
  :tests
  '(#(338
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 100 108 149 208 160 41 98 147 112 216 232 61 113 127)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 164 181 233 48 79 176 75 198 37 127 237 69 8 63 199 245 10 172 255 185 98 212 43 59 58 108 97 119 88 170 56 254 10 160 52 2 94 75 126 208 69 238 163 237 173 10 94 206 38 191 167 68 18 57 245 33)
  :der-encode
  #t
  :tests
  '(#(339
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 28 63 255 255 255 255 255 255 255 255 255 255 255 255 255 139 81 112 92 120 31 9 238 148 162 174 46 21 32)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 127 239 142 212 37 8 21 55 173 190 71 115 3 125 119 204 236 26 61 174 73 12 70 54 12 146 208 103 229 48 151 146 104 13 242 4 243 204 175 81 217 231 53 67 242 30 81 147 119 181 4 136 91 110 85 197)
  :der-encode
  #t
  :tests
  '(#(340
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 29 0 150 218 251 13 117 64 185 59 87 144 50 112 130 99 92 216 137 94 30 121 157 93 25 249 43 89 64 86)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 212 195 140 13 246 247 116 62 87 124 227 208 84 163 46 132 178 167 65 141 26 158 0 160 161 211 14 19 84 40 247 4 127 126 238 1 178 55 122 194 235 4 29 36 99 127 64 151 123 17 178 79 41 4 217 220)
  :der-encode
  #t
  :tests
  '(#(341
      "point duplication during verification"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 29 0 196 69 3 218 232 93 213 33 7 128 240 41 40 179 217 39 23 28 87 143 134 3 209 107 36 6 99 199 2 28 33 205 175 193 155 60 86 231 25 51 211 105 45 118 201 44 0 205 8 209 70 178 237 76 3 82 83 147)
      #t
      ("PointDuplication"))))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 212 195 140 13 246 247 116 62 87 124 227 208 84 163 46 132 178 167 65 141 26 158 0 160 161 211 14 19 171 215 8 251 128 129 17 254 77 200 133 61 20 251 226 218 156 128 191 104 132 238 77 176 214 251 38 37)
  :der-encode
  #t
  :tests
  '(#(342
      "duplication bug"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 29 0 196 69 3 218 232 93 213 33 7 128 240 41 40 179 217 39 23 28 87 143 134 3 209 107 36 6 99 199 2 28 33 205 175 193 155 60 86 231 25 51 211 105 45 118 201 44 0 205 8 209 70 178 237 76 3 82 83 147)
      #f
      ("PointDuplication"))))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 235 198 145 55 219 137 192 24 150 150 238 117 255 3 112 107 13 147 150 57 187 100 226 32 215 14 206 230 35 164 70 214 91 8 61 161 140 177 76 182 169 229 127 0 117 88 56 96 101 114 110 163 79 234 181 115)
  :der-encode
  #t
  :tests
  '(#(343
      "comparison with point at infinity "
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 85 85 85 85 85 85 85 85 85 85 85 85 85 85 7 139 160 61 165 106 6 159 13 193 201 116 14 20 2 28 51 51 51 51 51 51 51 51 51 51 51 51 51 51 4 134 249 190 150 114 208 197 213 13 223 69 162 12)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 255 143 100 192 192 247 240 232 29 32 91 103 161 195 188 207 12 61 207 59 253 253 200 10 97 71 30 128 160 203 191 41 235 237 245 56 16 22 147 122 217 19 53 197 128 27 190 111 212 161 238 97 153 41 86 1)
  :der-encode
  #t
  :tests
  '(#(344
      "extreme value for k and edgecase s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 112 106 70 220 118 220 183 103 152 230 14 109 137 71 71 136 209 109 193 128 50 210 104 253 26 112 79 166 2 28 85 85 85 85 85 85 85 85 85 85 85 85 85 85 7 139 160 61 165 106 6 159 13 193 201 116 14 20)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 17 192 249 79 194 130 14 173 123 20 32 141 6 32 163 95 55 111 28 16 182 175 22 6 4 84 176 72 176 4 213 50 45 179 3 156 127 221 72 136 253 192 202 255 174 129 237 190 83 232 12 208 93 242 16 185)
  :der-encode
  #t
  :tests
  '(#(345
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 112 106 70 220 118 220 183 103 152 230 14 109 137 71 71 136 209 109 193 128 50 210 104 253 26 112 79 166 2 29 0 219 109 182 219 109 182 219 109 182 219 109 182 219 108 238 212 192 158 132 199 126 189 145 22 225 115 145 235)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 62 79 161 100 100 186 118 47 6 231 206 194 252 191 102 38 159 247 66 193 10 83 54 18 23 242 5 62 112 107 48 143 163 107 93 229 134 82 61 50 36 78 234 99 164 216 111 33 89 48 234 226 191 153 128 142)
  :der-encode
  #t
  :tests
  '(#(346
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 112 106 70 220 118 220 183 103 152 230 14 109 137 71 71 136 209 109 193 128 50 210 104 253 26 112 79 166 2 28 51 51 51 51 51 51 51 51 51 51 51 51 51 51 4 134 249 190 150 114 208 197 213 13 223 69 162 12)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 72 37 179 17 234 107 106 216 110 182 248 254 157 41 238 173 122 122 147 218 175 175 250 227 86 167 133 180 115 22 11 67 107 72 148 245 238 63 80 40 141 189 182 111 225 192 143 148 246 119 236 220 94 238 110 68)
  :der-encode
  #t
  :tests
  '(#(347
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 112 106 70 220 118 220 183 103 152 230 14 109 137 71 71 136 209 109 193 128 50 210 104 253 26 112 79 166 2 29 0 204 204 204 204 204 204 204 204 204 204 204 204 204 204 18 27 230 250 89 203 67 23 84 55 125 22 136 49)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 35 92 97 10 252 220 10 34 248 77 117 59 31 123 156 238 56 143 143 93 104 18 112 70 80 11 79 26 96 94 73 22 132 41 196 78 25 13 54 18 243 85 189 126 99 151 143 182 201 166 29 205 83 177 56 33)
  :der-encode
  #t
  :tests
  '(#(348
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 112 106 70 220 118 220 183 103 152 230 14 109 137 71 71 136 209 109 193 128 50 210 104 253 26 112 79 166 2 28 36 146 73 36 146 73 36 146 73 36 146 73 36 146 39 206 32 26 107 118 149 31 152 46 122 232 152 82)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 159 119 144 109 53 60 27 134 46 196 121 70 135 198 159 165 6 64 92 77 11 87 244 239 132 145 219 167 206 158 129 10 246 94 223 26 229 131 230 249 214 242 221 188 1 54 94 30 116 79 41 135 175 85 39 224)
  :der-encode
  #t
  :tests
  '(#(349
      "extreme value for k"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 112 106 70 220 118 220 183 103 152 230 14 109 137 71 71 136 209 109 193 128 50 210 104 253 26 112 79 166 2 28 14 177 14 90 185 95 172 222 212 6 16 41 214 58 70 244 111 18 148 116 17 242 234 86 26 89 32 87)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 49 105 154 0 121 5 141 96 78 215 248 124 154 235 68 191 25 120 82 123 254 1 2 90 12 221 42 11 235 145 152 131 117 63 136 11 71 208 106 26 204 205 247 215 123 249 132 250 72 242 108 149 155 18 254 122)
  :der-encode
  #t
  :tests
  '(#(350
      "extreme value for k and edgecase s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 29 0 183 14 12 189 107 180 191 127 50 19 144 185 74 3 193 211 86 194 17 34 52 50 128 214 17 92 29 33 2 28 85 85 85 85 85 85 85 85 85 85 85 85 85 85 7 139 160 61 165 106 6 159 13 193 201 116 14 20)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 63 254 114 48 71 127 226 186 76 63 213 74 177 218 111 224 194 158 170 91 108 24 152 46 183 3 138 47 57 17 105 154 216 230 199 19 167 221 178 199 213 105 241 174 100 139 20 0 17 94 65 107 43 231 76 54)
  :der-encode
  #t
  :tests
  '(#(351
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 183 14 12 189 107 180 191 127 50 19 144 185 74 3 193 211 86 194 17 34 52 50 128 214 17 92 29 33 2 29 0 219 109 182 219 109 182 219 109 182 219 109 182 219 108 238 212 192 158 132 199 126 189 145 22 225 115 145 235)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 74 191 0 187 69 89 44 191 222 56 181 56 29 24 71 189 136 22 217 17 58 153 177 139 125 26 14 7 31 71 208 197 14 85 6 192 106 249 228 219 104 173 88 129 143 255 5 223 1 22 4 138 4 24 185 81)
  :der-encode
  #t
  :tests
  '(#(352
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 29 0 183 14 12 189 107 180 191 127 50 19 144 185 74 3 193 211 86 194 17 34 52 50 128 214 17 92 29 33 2 28 51 51 51 51 51 51 51 51 51 51 51 51 51 51 4 134 249 190 150 114 208 197 213 13 223 69 162 12)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 23 86 71 100 221 230 197 213 188 31 240 204 101 71 133 34 170 4 146 204 167 236 222 55 78 80 25 236 193 126 12 211 38 181 163 10 81 49 9 125 166 64 234 31 129 181 119 234 152 223 158 89 6 87 67 97)
  :der-encode
  #t
  :tests
  '(#(353
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 183 14 12 189 107 180 191 127 50 19 144 185 74 3 193 211 86 194 17 34 52 50 128 214 17 92 29 33 2 29 0 204 204 204 204 204 204 204 204 204 204 204 204 204 204 18 27 230 250 89 203 67 23 84 55 125 22 136 49)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 173 114 131 19 245 98 220 34 132 166 246 196 161 2 197 105 195 188 115 2 121 36 139 21 215 93 241 104 14 144 5 6 184 228 107 235 54 96 11 242 226 160 189 218 73 77 254 63 187 66 33 180 88 121 56 214)
  :der-encode
  #t
  :tests
  '(#(354
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 29 0 183 14 12 189 107 180 191 127 50 19 144 185 74 3 193 211 86 194 17 34 52 50 128 214 17 92 29 33 2 28 36 146 73 36 146 73 36 146 73 36 146 73 36 146 39 206 32 26 107 118 149 31 152 46 122 232 152 82)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 56 177 133 177 183 215 73 125 176 235 177 240 153 133 117 112 107 220 192 198 180 48 28 92 153 8 50 16 234 77 67 133 75 146 216 195 171 168 22 56 3 137 48 149 244 72 253 107 236 207 91 169 14 109 7 94)
  :der-encode
  #t
  :tests
  '(#(355
      "extreme value for k"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 29 0 183 14 12 189 107 180 191 127 50 19 144 185 74 3 193 211 86 194 17 34 52 50 128 214 17 92 29 33 2 28 14 177 14 90 185 95 172 222 212 6 16 41 214 58 70 244 111 18 148 116 17 242 234 86 26 89 32 87)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 183 14 12 189 107 180 191 127 50 19 144 185 74 3 193 211 86 194 17 34 52 50 128 214 17 92 29 33 189 55 99 136 181 247 35 251 76 34 223 230 205 67 117 160 90 7 71 100 68 213 129 153 133 0 126 52)
  :der-encode
  #t
  :tests
  '(#(356
      "testing point duplication"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 87 49 183 196 189 4 203 158 251 131 105 53 255 46 84 123 242 144 159 134 130 74 244 216 223 120 172 247 2 28 36 146 73 36 146 73 36 146 73 36 146 73 36 146 39 206 32 26 107 118 149 31 152 46 122 232 152 81)
      #f
      ())
    #(357
      "testing point duplication"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 29 0 168 206 72 59 66 251 52 97 4 124 150 202 0 208 194 38 238 40 80 183 145 146 52 108 124 227 125 70 2 28 36 146 73 36 146 73 36 146 73 36 146 73 36 146 39 206 32 26 107 118 149 31 152 46 122 232 152 81)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 183 14 12 189 107 180 191 127 50 19 144 185 74 3 193 211 86 194 17 34 52 50 128 214 17 92 29 33 66 200 156 119 74 8 220 4 179 221 32 25 50 188 138 94 165 248 184 155 187 42 126 102 122 255 129 205)
  :der-encode
  #t
  :tests
  '(#(358
      "testing point duplication"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 87 49 183 196 189 4 203 158 251 131 105 53 255 46 84 123 242 144 159 134 130 74 244 216 223 120 172 247 2 28 36 146 73 36 146 73 36 146 73 36 146 73 36 146 39 206 32 26 107 118 149 31 152 46 122 232 152 81)
      #f
      ())
    #(359
      "testing point duplication"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 29 0 168 206 72 59 66 251 52 97 4 124 150 202 0 208 194 38 238 40 80 183 145 146 52 108 124 227 125 70 2 28 36 146 73 36 146 73 36 146 73 36 146 73 36 146 39 206 32 26 107 118 149 31 152 46 122 232 152 81)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 76 36 102 112 101 138 29 65 245 215 123 206 36 108 190 56 106 194 40 72 226 105 185 212 205 103 196 102 221 217 71 21 61 57 178 212 37 51 164 96 222 242 104 128 64 140 175 45 211 221 72 254 136 140 209 118)
  :der-encode
  #t
  :tests
  '(#(360
      "pseudorandom signature"
      #vu8()
      #vu8(48 60 2 28 42 142 79 200 200 19 190 4 89 254 111 213 164 73 252 210 113 24 18 17 128 243 127 150 133 116 152 251 2 28 72 127 171 170 190 231 159 102 125 166 80 92 92 23 29 41 151 50 211 119 132 253 115 119 93 253 61 179)
      #t
      ())
    #(361
      "pseudorandom signature"
      #vu8(77 115 103)
      #vu8(48 61 2 28 30 90 21 25 10 29 38 49 242 34 45 112 68 137 4 31 114 224 197 5 72 253 82 110 218 151 94 31 2 29 0 235 255 141 203 140 17 52 172 93 251 39 17 130 73 85 144 252 143 216 234 123 10 79 127 142 199 137 0)
      #t
      ())
    #(362
      "pseudorandom signature"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 41 94 57 156 191 73 4 226 40 80 36 5 152 224 9 214 180 13 99 145 227 112 171 165 160 64 66 217 2 28 42 12 88 65 86 2 113 163 140 123 124 59 176 100 153 14 32 75 174 105 62 33 113 162 70 148 45 64)
      #t
      ())
    #(363
      "pseudorandom signature"
      #vu8(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      #vu8(48 62 2 29 0 240 78 45 196 216 240 29 230 154 91 174 56 208 134 155 225 146 110 12 167 90 100 31 47 205 119 132 215 2 29 0 150 19 1 34 51 219 17 91 161 128 247 54 58 175 189 224 157 192 165 235 182 112 118 19 131 138 20 19)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 174 214 252 173 36 0 196 217 78 85 219 182 176 18 206 61 76 43 70 132 63 190 153 212 40 158 110 207 138 36 168 158 113 52 61 125 21 29 37 141 44 182 144 52 156 45 86 179 102 221 16 166 0 0 0 0)
  :der-encode
  #t
  :tests
  '(#(364
      "y-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 28 64 7 0 142 67 2 2 249 87 126 67 160 178 31 253 22 156 4 109 91 243 92 43 83 1 21 166 24 2 29 0 216 69 210 124 58 182 209 248 24 129 241 197 249 128 209 194 88 68 164 132 168 124 153 5 141 118 227 181)
      #t
      ())
    #(365
      "y-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 62 2 29 0 145 126 120 94 94 4 50 245 151 209 13 196 0 114 90 3 68 207 72 86 190 49 57 5 115 161 234 243 2 29 0 184 93 48 144 17 149 224 92 190 240 226 130 160 121 245 194 41 234 232 235 40 43 233 23 109 249 237 136)
      #t
      ())
    #(366
      "y-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 60 2 28 62 79 152 131 247 172 170 223 42 7 98 52 250 153 253 37 165 216 54 159 183 118 106 165 178 235 63 210 2 28 66 203 62 46 185 245 67 31 202 74 126 200 54 55 172 169 47 190 190 138 250 74 180 188 237 16 136 185)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 191 25 236 254 67 255 226 137 246 153 244 121 49 97 69 185 167 247 55 11 158 206 90 177 33 33 116 241 115 213 40 148 154 233 20 47 129 139 173 231 26 150 4 7 150 59 224 182 72 42 106 96 255 255 255 255)
  :der-encode
  #t
  :tests
  '(#(367
      "y-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 29 0 243 58 36 162 205 100 244 29 152 31 250 151 194 76 183 61 40 55 145 70 130 76 141 76 119 195 127 104 2 28 112 25 162 123 200 122 176 109 58 49 43 48 39 33 81 4 4 74 185 169 23 222 85 66 7 26 87 2)
      #t
      ())
    #(368
      "y-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 29 0 255 150 18 40 185 69 81 194 1 187 97 193 82 134 209 25 224 45 178 244 92 220 102 151 157 235 179 161 2 28 52 164 144 34 30 43 243 9 125 54 159 63 207 156 101 7 165 103 128 5 31 84 255 150 31 119 62 32)
      #t
      ())
    #(369
      "y-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 62 2 29 0 221 206 213 43 202 150 64 177 161 167 248 91 177 45 140 243 111 12 214 11 39 236 221 210 169 68 220 73 2 29 0 130 107 60 26 131 157 165 74 139 238 236 230 157 168 104 28 100 63 236 121 57 77 152 45 191 12 104 55)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 38 229 171 241 53 203 84 234 170 22 182 158 75 11 41 34 117 52 78 136 160 157 246 223 128 0 0 0 234 184 145 222 84 227 242 111 245 10 185 137 243 51 218 197 81 88 61 70 138 230 35 197 150 67 74 240)
  :der-encode
  #t
  :tests
  '(#(370
      "x-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 29 0 216 240 226 154 66 75 160 165 61 220 184 244 143 196 182 80 25 208 30 126 141 172 63 246 56 71 220 211 2 28 98 236 15 31 123 54 81 46 233 140 174 31 172 107 174 117 5 232 78 110 178 121 98 62 6 79 160 148)
      #t
      ())
    #(371
      "x-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 29 0 245 223 37 36 154 219 165 113 115 84 254 161 67 185 55 147 243 46 168 186 49 205 55 127 155 187 110 234 2 28 97 55 111 2 213 231 81 127 28 210 165 195 108 69 42 118 222 203 40 45 174 191 238 165 165 179 46 18)
      #t
      ())
    #(372
      "x-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 60 2 28 75 155 111 239 225 140 115 39 46 230 106 185 111 227 64 179 131 91 31 99 249 3 177 172 118 186 52 87 2 28 12 88 10 101 197 59 72 209 24 15 9 133 254 15 157 95 87 207 126 181 229 114 185 113 68 17 170 152)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 236 98 127 52 85 69 208 63 140 109 189 8 229 117 82 113 22 86 127 227 117 249 236 170 255 255 255 255 65 191 112 86 151 213 247 22 188 247 135 24 213 57 59 99 169 134 145 244 161 242 66 70 55 85 56 253)
  :der-encode
  #t
  :tests
  '(#(373
      "x-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 28 111 114 245 147 77 23 161 38 208 214 254 10 250 89 149 136 197 25 99 2 60 233 60 49 46 199 123 175 2 29 0 213 180 185 105 67 245 133 205 21 104 166 23 231 196 123 157 250 221 251 88 190 193 60 87 193 90 10 16)
      #t
      ())
    #(374
      "x-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 28 21 121 203 199 31 44 6 125 20 73 197 234 243 46 18 30 202 5 122 53 243 117 189 201 63 119 26 60 2 29 0 197 232 101 172 210 27 72 10 101 21 14 112 16 229 7 44 197 170 193 110 51 22 250 143 211 42 7 143)
      #t
      ())
    #(375
      "x-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 29 0 238 80 28 175 57 6 52 252 55 87 234 216 227 246 46 92 142 134 192 68 130 137 174 93 255 198 163 15 2 28 54 211 159 53 96 197 175 160 87 135 36 135 135 35 94 142 221 140 66 231 19 237 67 173 251 130 135 154)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 21 1 110 82 179 100 114 213 54 71 118 5 251 128 93 211 144 48 130 160 98 209 234 48 175 158 85 90 0 0 0 0 118 45 40 241 253 194 25 24 79 129 104 31 191 245 102 212 101 181 241 243 30 135 45 245)
  :der-encode
  #t
  :tests
  '(#(376
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 28 113 71 150 247 254 100 244 222 51 189 216 234 239 244 231 227 168 234 150 100 160 211 36 158 7 189 236 79 2 29 0 236 130 230 78 28 111 101 45 17 152 194 153 111 137 50 34 217 32 211 109 126 56 80 126 134 243 115 87)
      #t
      ())
    #(377
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 62 2 29 0 176 16 212 137 201 102 28 26 40 53 55 66 136 104 196 181 187 41 217 80 61 230 151 172 87 77 34 253 2 29 0 236 103 124 161 200 177 46 176 48 76 240 144 217 82 198 56 1 237 156 130 215 81 219 215 109 75 193 138)
      #t
      ())
    #(378
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 29 0 168 251 106 26 85 140 178 34 21 96 32 75 171 237 246 196 77 72 16 158 186 231 141 39 231 132 5 107 2 28 30 83 45 80 224 182 114 30 147 69 36 143 204 55 89 48 119 196 186 181 117 181 93 33 111 162 163 242)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 21 1 110 82 179 100 114 213 54 71 118 5 251 128 93 211 144 48 130 160 98 209 234 48 175 158 85 90 255 255 255 255 137 210 215 14 2 61 230 231 176 126 151 223 64 10 153 43 154 74 14 12 225 120 210 12)
  :der-encode
  #t
  :tests
  '(#(379
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 62 2 29 0 128 133 214 183 243 217 121 53 111 42 33 59 178 67 116 110 166 120 233 106 112 94 104 147 191 42 81 247 2 29 0 180 216 190 92 63 153 110 212 10 241 2 75 58 140 159 101 201 14 251 65 216 197 152 122 202 17 85 36)
      #t
      ())
    #(380
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 28 95 26 219 252 222 122 10 146 159 67 186 48 224 216 142 162 173 165 180 168 187 245 83 54 235 34 143 223 2 29 0 234 201 13 111 6 121 189 238 252 66 132 2 124 94 82 124 171 76 178 118 25 33 119 131 251 44 66 30)
      #t
      ())
    #(381
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 28 23 178 10 36 69 126 148 248 184 130 164 252 153 105 44 44 68 181 200 83 185 194 52 208 58 212 115 179 2 29 0 176 59 244 126 164 83 62 134 34 155 150 198 82 101 66 63 137 218 173 185 243 246 155 14 227 124 33 191)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 0 0 0 0 247 228 113 61 8 81 18 17 44 55 205 244 96 31 246 136 218 121 96 22 183 26 114 122 222 90 158 193 101 5 76 201 135 249 220 135 233 153 27 146 228 250 100 156 166 85 238 174 159 42 48 225)
  :der-encode
  #t
  :tests
  '(#(382
      "x-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 29 0 250 204 201 195 142 191 168 226 116 141 50 248 196 28 194 145 196 162 178 124 173 74 65 30 81 25 209 155 2 28 112 229 186 144 166 94 3 81 85 148 201 25 241 126 172 77 128 149 150 230 162 115 91 97 123 56 82 171)
      #t
      ())
    #(383
      "x-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 62 2 29 0 143 142 144 194 168 48 83 69 147 189 241 229 97 78 217 202 117 248 37 57 86 209 117 121 166 164 83 45 2 29 0 128 12 45 67 238 160 183 33 31 115 159 78 117 202 86 119 234 14 251 16 155 9 74 172 53 74 246 118)
      #t
      ())
    #(384
      "x-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 28 39 40 204 48 60 62 213 74 5 163 113 241 106 221 124 45 166 210 39 123 128 169 50 183 185 116 157 247 2 29 0 173 44 147 248 55 35 193 158 32 56 95 171 145 22 24 129 20 161 40 11 231 209 253 154 102 30 94 119)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 255 255 255 255 234 223 124 238 141 52 208 76 242 44 143 125 227 86 116 251 47 80 29 36 42 118 247 37 134 196 9 48 157 57 142 96 206 30 10 76 158 5 169 211 38 39 87 126 140 226 204 127 58 250 44 62)
  :der-encode
  #t
  :tests
  '(#(385
      "x-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 60 2 28 58 34 77 75 170 165 213 195 50 163 214 32 67 177 170 246 107 2 152 128 1 12 131 156 92 3 58 163 2 28 45 232 123 55 176 48 92 246 17 46 10 201 66 0 17 143 244 147 192 163 121 244 190 176 182 96 46 2)
      #t
      ())
    #(386
      "x-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 29 0 145 89 170 116 168 139 89 23 128 150 5 225 71 54 160 14 146 244 170 205 162 184 125 222 149 10 95 248 2 28 75 212 86 198 145 76 242 28 136 190 11 201 198 74 61 13 123 44 189 92 119 98 151 254 163 161 47 94)
      #t
      ())
    #(387
      "x-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 29 0 139 33 237 38 217 69 86 19 160 67 30 219 65 212 34 127 197 113 29 26 108 112 228 224 222 128 23 55 2 28 37 146 190 203 150 126 37 210 52 162 81 105 134 193 138 28 104 123 41 105 219 113 120 205 32 77 48 192)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 176 1 60 111 191 246 240 159 236 218 28 38 62 246 83 153 212 207 152 156 165 252 79 143 255 15 233 225 0 0 0 0 14 42 176 232 73 94 133 158 178 175 176 7 105 214 231 254 98 106 17 145 103 192 182 188)
  :der-encode
  #t
  :tests
  '(#(388
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 60 2 28 92 124 99 166 58 105 120 123 252 70 154 183 10 104 86 247 243 34 68 127 156 231 69 115 208 249 77 45 2 28 62 128 255 10 159 189 140 17 160 141 125 192 34 55 228 53 131 141 226 210 181 30 236 17 86 230 103 209)
      #t
      ())
    #(389
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 28 3 107 63 51 204 195 71 214 240 174 43 158 121 239 133 53 29 6 230 24 112 177 203 8 5 76 144 157 2 29 0 154 39 254 157 105 156 246 226 194 237 46 215 12 150 146 241 246 185 111 197 180 229 13 153 38 167 82 173)
      #t
      ())
    #(390
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 28 49 49 188 249 48 209 19 109 241 67 108 71 128 192 149 224 1 112 206 203 146 159 110 231 28 116 88 247 2 29 0 161 198 240 249 124 173 21 96 120 210 72 252 126 121 116 4 93 39 136 142 143 101 40 175 102 4 127 175)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 176 1 60 111 191 246 240 159 236 218 28 38 62 246 83 153 212 207 152 156 165 252 79 143 255 15 233 225 255 255 255 255 241 213 79 23 182 161 122 97 77 80 79 247 150 41 24 1 157 149 238 110 152 63 73 69)
  :der-encode
  #t
  :tests
  '(#(391
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 60 2 28 16 35 250 77 93 206 218 181 58 143 223 226 168 248 218 148 27 224 140 99 20 110 75 162 237 135 189 77 2 28 54 122 136 227 147 253 30 228 236 146 95 127 146 13 76 63 227 186 72 237 189 37 50 97 236 112 108 94)
      #t
      ())
    #(392
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 62 2 29 0 181 37 251 98 4 211 214 15 212 6 177 6 111 10 228 189 126 199 91 10 223 216 7 222 130 1 241 10 2 29 0 250 237 117 127 90 104 216 168 51 135 136 234 83 29 111 124 133 168 140 154 139 174 127 105 110 187 110 186)
      #t
      ())
    #(393
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 62 2 29 0 228 114 229 4 239 75 41 59 127 74 108 201 155 163 58 112 47 53 89 63 73 203 40 65 55 119 107 68 2 29 0 193 239 228 64 70 63 222 59 96 77 72 49 158 13 219 147 38 26 230 8 208 9 148 42 1 147 50 65)
      #t
      ())))
