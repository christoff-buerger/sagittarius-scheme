(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 41 39 177 5 18 186 227 237 220 254 70 120 40 18 139 173 41 3 38 153 25 247 8 96 105 200 196 223 108 115 40 56 199 120 121 100 234 172 0 229 146 31 177 73 138 96 244 96 103 102 179 217 104 80 1 85 141 26 151 78 115 65 81 62)
  :der-encode
  #t
  :tests
  '(#(1
      "signature malleability"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 33 0 147 100 116 90 106 45 105 242 40 54 152 253 251 238 123 19 222 32 188 147 222 176 35 10 154 243 189 159 221 240 68 1)
      #t
      ())
    #(2
      "Legacy:ASN encoding of r misses leading 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #t
      ("MissingZero"))
    #(3
      "valid"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #t
      ())
    #(4
      "long form encoding of length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 129 69 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ("BER"))
    #(5
      "length of sequence contains leading 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 130 0 69 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ("BER"))
    #(6
      "wrong length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(7
      "wrong length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(8
      "uint32 overflow in length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 133 1 0 0 0 69 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(9
      "uint64 overflow in length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 137 1 0 0 0 0 0 0 0 69 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(10
      "length of sequence = 2**31 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 132 127 255 255 255 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(11
      "length of sequence = 2**32 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 132 255 255 255 255 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(12
      "length of sequence = 2**40 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 133 255 255 255 255 255 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(13
      "length of sequence = 2**64 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 136 255 255 255 255 255 255 255 255 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(14
      "incorrect length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 255 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(15
      "indefinite length without termination"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(16
      "indefinite length without termination"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 128 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(17
      "indefinite length without termination"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 128 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(18
      "removing sequence"
      #vu8(49 50 51 52 48 48)
      #vu8()
      #f
      ())
    #(19
      "lonely sequence tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48)
      #f
      ())
    #(20
      "appending 0's to sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80 0 0)
      #f
      ())
    #(21
      "prepending 0's to sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 0 0 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(22
      "appending unused 0's to sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80 0 0)
      #f
      ())
    #(23
      "appending null value to sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80 5 0)
      #f
      ())
    #(24
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 74 73 129 119 48 69 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(25
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 37 0 48 69 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(26
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 48 69 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80 0 4 222 173 190 239)
      #f
      ())
    #(27
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 74 34 38 73 129 119 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(28
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 34 37 37 0 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(29
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 77 34 35 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 0 4 222 173 190 239 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(30
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 74 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 34 37 73 129 119 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(31
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 34 36 37 0 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(32
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 77 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 34 34 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80 0 4 222 173 190 239)
      #f
      ())
    #(33
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 77 170 0 187 0 205 0 48 69 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(34
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 75 170 2 170 187 48 69 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(35
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 77 34 41 170 0 187 0 205 0 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(36
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 75 34 39 170 2 170 187 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(37
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 77 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 34 40 170 0 187 0 205 0 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(38
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 75 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 34 38 170 2 170 187 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(39
      "truncated length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 129)
      #f
      ())
    #(40
      "using composition with indefinite length"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 48 69 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80 0 0)
      #f
      ())
    #(41
      "using composition with indefinite length"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 34 128 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 0 0 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(42
      "using composition with indefinite length"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 34 128 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80 0 0)
      #f
      ())
    #(43
      "using composition with wrong tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 49 69 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80 0 0)
      #f
      ())
    #(44
      "using composition with wrong tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 34 128 3 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 0 0 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(45
      "using composition with wrong tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 34 128 3 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80 0 0)
      #f
      ())
    #(46
      "Replacing sequence with NULL"
      #vu8(49 50 51 52 48 48)
      #vu8(5 0)
      #f
      ())
    #(47
      "changing tag value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(46 69 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(48
      "changing tag value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(47 69 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(49
      "changing tag value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(49 69 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(50
      "changing tag value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(50 69 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(51
      "changing tag value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(255 69 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(52
      "dropping value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 0)
      #f
      ())
    #(53
      "using composition for sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 48 1 2 48 68 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(54
      "truncated sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225)
      #f
      ())
    #(55
      "truncated sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(56
      "indefinite length"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80 0 0)
      #f
      ("BER"))
    #(57
      "indefinite length with truncated delimiter"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80 0)
      #f
      ())
    #(58
      "indefinite length with additional element"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80 5 0 0 0)
      #f
      ())
    #(59
      "indefinite length with truncated element"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80 6 8 17 34 0 0)
      #f
      ())
    #(60
      "indefinite length with garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80 0 0 254 2 190 239)
      #f
      ())
    #(61
      "indefinite length with nonempty EOC"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80 0 2 190 239)
      #f
      ())
    #(62
      "prepend empty sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 48 0 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(63
      "append empty sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80 48 0)
      #f
      ())
    #(64
      "append garbage with high tag number"
      #vu8(49 50 51 52 48 48)
      #vu8(48 72 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80 191 127 0)
      #f
      ())
    #(65
      "sequence of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 48 69 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(66
      "truncated sequence: removed last 1 elements"
      #vu8(49 50 51 52 48 48)
      #vu8(48 35 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110)
      #f
      ())
    #(67
      "repeating element in sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 103 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(68
      "long form encoding of length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 129 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ("BER"))
    #(69
      "long form encoding of length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 129 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ("BER"))
    #(70
      "length of integer contains leading 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 130 0 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ("BER"))
    #(71
      "length of integer contains leading 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 130 0 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ("BER"))
    #(72
      "wrong length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 34 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(73
      "wrong length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(74
      "wrong length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 33 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(75
      "wrong length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 31 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(76
      "uint32 overflow in length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 74 2 133 1 0 0 0 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(77
      "uint32 overflow in length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 74 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 133 1 0 0 0 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(78
      "uint64 overflow in length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 78 2 137 1 0 0 0 0 0 0 0 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(79
      "uint64 overflow in length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 78 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 137 1 0 0 0 0 0 0 0 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(80
      "length of integer = 2**31 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 2 132 127 255 255 255 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(81
      "length of integer = 2**31 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 132 127 255 255 255 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(82
      "length of integer = 2**32 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 2 132 255 255 255 255 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(83
      "length of integer = 2**32 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 132 255 255 255 255 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(84
      "length of integer = 2**40 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 74 2 133 255 255 255 255 255 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(85
      "length of integer = 2**40 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 74 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 133 255 255 255 255 255 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(86
      "length of integer = 2**64 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 77 2 136 255 255 255 255 255 255 255 255 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(87
      "length of integer = 2**64 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 77 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 136 255 255 255 255 255 255 255 255 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(88
      "incorrect length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 255 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(89
      "incorrect length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 255 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(90
      "removing integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(91
      "lonely integer tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48 35 2 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(92
      "lonely integer tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48 36 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2)
      #f
      ())
    #(93
      "appending 0's to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 35 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 0 0 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(94
      "appending 0's to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 34 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80 0 0)
      #f
      ())
    #(95
      "prepending 0's to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 35 0 0 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ("BER"))
    #(96
      "prepending 0's to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 34 0 0 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ("BER"))
    #(97
      "appending unused 0's to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 0 0 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(98
      "appending null value to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 35 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 5 0 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(99
      "appending null value to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 34 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80 5 0)
      #f
      ())
    #(100
      "truncated length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 36 2 129 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(101
      "truncated length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 37 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 129)
      #f
      ())
    #(102
      "Replacing integer with NULL"
      #vu8(49 50 51 52 48 48)
      #vu8(48 36 5 0 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(103
      "Replacing integer with NULL"
      #vu8(49 50 51 52 48 48)
      #vu8(48 37 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 5 0)
      #f
      ())
    #(104
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 0 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(105
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 1 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(106
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 3 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(107
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 4 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(108
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 255 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(109
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 0 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(110
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 1 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(111
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 3 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(112
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 4 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(113
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 255 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(114
      "dropping value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 36 2 0 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(115
      "dropping value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 37 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 0)
      #f
      ())
    #(116
      "using composition for integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 34 37 2 1 0 2 32 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(117
      "using composition for integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 34 36 2 1 108 2 31 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(118
      "modify first byte of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 2 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(119
      "modify first byte of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 110 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(120
      "modify last byte of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 238 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(121
      "modify last byte of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 208)
      #f
      ())
    #(122
      "truncated integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(123
      "truncated integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 31 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225)
      #f
      ())
    #(124
      "truncated integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 31 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(125
      "leading ff in integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 34 255 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(126
      "leading ff in integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 33 255 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(127
      "replaced integer by infinity"
      #vu8(49 50 51 52 48 48)
      #vu8(48 37 9 1 128 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(128
      "replaced integer by infinity"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 9 1 128)
      #f
      ())
    #(129
      "replacing integer with zero"
      #vu8(49 50 51 52 48 48)
      #vu8(48 37 2 1 0 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(130
      "replacing integer with zero"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 1 0)
      #f
      ())
    #(131
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 1 138 185 239 252 103 56 128 64 209 155 146 210 233 253 234 18 79 236 102 38 229 64 242 176 46 220 21 184 58 115 232 191 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(132
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 138 185 239 254 103 56 128 62 209 155 146 210 233 253 234 18 214 30 112 203 151 17 181 166 71 104 128 50 65 173 158 29 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(133
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 255 117 70 16 2 152 199 127 192 46 100 109 45 22 2 21 237 108 250 148 134 193 214 171 212 196 221 181 10 193 239 60 146 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(134
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 117 70 16 1 152 199 127 193 46 100 109 45 22 2 21 237 41 225 143 52 104 238 74 89 184 151 127 205 190 82 97 227 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(135
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 254 117 70 16 3 152 199 127 191 46 100 109 45 22 2 21 237 176 19 153 217 26 191 13 79 209 35 234 71 197 140 23 65 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(136
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 1 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(137
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 117 70 16 2 152 199 127 192 46 100 109 45 22 2 21 237 108 250 148 134 193 214 171 212 196 221 181 10 193 239 60 146 2 32 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(138
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 33 1 108 155 139 163 149 210 150 15 215 201 103 2 4 17 132 235 155 173 56 199 111 127 25 255 76 127 215 230 26 214 6 161)
      #f
      ())
    #(139
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 33 255 108 155 139 165 149 210 150 13 215 201 103 2 4 17 132 236 33 223 67 108 33 79 220 245 101 12 66 96 34 15 187 255)
      #f
      ())
    #(140
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 32 147 100 116 91 106 45 105 241 40 54 152 253 251 238 123 20 33 57 193 230 55 152 132 133 167 57 242 220 225 141 30 176)
      #f
      ())
    #(141
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 33 254 147 100 116 92 106 45 105 240 40 54 152 253 251 238 123 20 100 82 199 56 144 128 230 0 179 128 40 25 229 41 249 95)
      #f
      ())
    #(142
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 33 1 108 155 139 164 149 210 150 14 215 201 103 2 4 17 132 235 222 198 62 25 200 103 123 122 88 198 13 35 30 114 225 80)
      #f
      ())
    #(143
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 138 185 239 253 103 56 128 63 209 155 146 210 233 253 234 18 147 5 107 121 62 41 84 43 59 34 74 245 62 16 195 110 2 33 0 147 100 116 91 106 45 105 241 40 54 152 253 251 238 123 20 33 57 193 230 55 152 132 133 167 57 242 220 225 141 30 176)
      #f
      ())
    #(144
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 0 2 1 0)
      #f
      ("EdgeCase"))
    #(145
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 0 2 1 1)
      #f
      ("EdgeCase"))
    #(146
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 0 2 1 255)
      #f
      ("EdgeCase"))
    #(147
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 0 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81)
      #f
      ("EdgeCase"))
    #(148
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 0 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80)
      #f
      ("EdgeCase"))
    #(149
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 0 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82)
      #f
      ("EdgeCase"))
    #(150
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 0 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255)
      #f
      ("EdgeCase"))
    #(151
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 0 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0)
      #f
      ("EdgeCase"))
    #(152
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 8 2 1 0 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(153
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 0 9 1 66)
      #f
      ("EdgeCase"))
    #(154
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 2 1 0)
      #f
      ("EdgeCase"))
    #(155
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 2 1 1)
      #f
      ("EdgeCase"))
    #(156
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 2 1 255)
      #f
      ("EdgeCase"))
    #(157
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 1 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81)
      #f
      ("EdgeCase"))
    #(158
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 1 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80)
      #f
      ("EdgeCase"))
    #(159
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 1 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82)
      #f
      ("EdgeCase"))
    #(160
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 1 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255)
      #f
      ("EdgeCase"))
    #(161
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 1 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0)
      #f
      ("EdgeCase"))
    #(162
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 8 2 1 1 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(163
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 9 1 66)
      #f
      ("EdgeCase"))
    #(164
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 255 2 1 0)
      #f
      ("EdgeCase"))
    #(165
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 255 2 1 1)
      #f
      ("EdgeCase"))
    #(166
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 255 2 1 255)
      #f
      ("EdgeCase"))
    #(167
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 255 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81)
      #f
      ("EdgeCase"))
    #(168
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 255 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80)
      #f
      ("EdgeCase"))
    #(169
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 255 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82)
      #f
      ("EdgeCase"))
    #(170
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 255 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255)
      #f
      ("EdgeCase"))
    #(171
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 255 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0)
      #f
      ("EdgeCase"))
    #(172
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 8 2 1 255 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(173
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 255 9 1 66)
      #f
      ("EdgeCase"))
    #(174
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81 2 1 0)
      #f
      ("EdgeCase"))
    #(175
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81 2 1 1)
      #f
      ("EdgeCase"))
    #(176
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81 2 1 255)
      #f
      ("EdgeCase"))
    #(177
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81)
      #f
      ("EdgeCase"))
    #(178
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80)
      #f
      ("EdgeCase"))
    #(179
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82)
      #f
      ("EdgeCase"))
    #(180
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255)
      #f
      ("EdgeCase"))
    #(181
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0)
      #f
      ("EdgeCase"))
    #(182
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 40 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(183
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81 9 1 66)
      #f
      ("EdgeCase"))
    #(184
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80 2 1 0)
      #f
      ("EdgeCase"))
    #(185
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80 2 1 1)
      #f
      ("EdgeCase"))
    #(186
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80 2 1 255)
      #f
      ("EdgeCase"))
    #(187
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81)
      #f
      ("EdgeCase"))
    #(188
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80)
      #f
      ("EdgeCase"))
    #(189
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82)
      #f
      ("EdgeCase"))
    #(190
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255)
      #f
      ("EdgeCase"))
    #(191
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0)
      #f
      ("EdgeCase"))
    #(192
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 40 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(193
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80 9 1 66)
      #f
      ("EdgeCase"))
    #(194
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82 2 1 0)
      #f
      ("EdgeCase"))
    #(195
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82 2 1 1)
      #f
      ("EdgeCase"))
    #(196
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82 2 1 255)
      #f
      ("EdgeCase"))
    #(197
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81)
      #f
      ("EdgeCase"))
    #(198
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80)
      #f
      ("EdgeCase"))
    #(199
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82)
      #f
      ("EdgeCase"))
    #(200
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255)
      #f
      ("EdgeCase"))
    #(201
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0)
      #f
      ("EdgeCase"))
    #(202
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 40 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(203
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82 9 1 66)
      #f
      ("EdgeCase"))
    #(204
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 2 1 0)
      #f
      ("EdgeCase"))
    #(205
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 2 1 1)
      #f
      ("EdgeCase"))
    #(206
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 2 1 255)
      #f
      ("EdgeCase"))
    #(207
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81)
      #f
      ("EdgeCase"))
    #(208
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80)
      #f
      ("EdgeCase"))
    #(209
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82)
      #f
      ("EdgeCase"))
    #(210
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255)
      #f
      ("EdgeCase"))
    #(211
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0)
      #f
      ("EdgeCase"))
    #(212
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 40 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(213
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 9 1 66)
      #f
      ("EdgeCase"))
    #(214
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 2 1 0)
      #f
      ("EdgeCase"))
    #(215
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 2 1 1)
      #f
      ("EdgeCase"))
    #(216
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 2 1 255)
      #f
      ("EdgeCase"))
    #(217
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81)
      #f
      ("EdgeCase"))
    #(218
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80)
      #f
      ("EdgeCase"))
    #(219
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82)
      #f
      ("EdgeCase"))
    #(220
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255)
      #f
      ("EdgeCase"))
    #(221
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0)
      #f
      ("EdgeCase"))
    #(222
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 40 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(223
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 9 1 66)
      #f
      ("EdgeCase"))
    #(224
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 12 1 48)
      #f
      ())
    #(225
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 5 2 1 1 12 0)
      #f
      ())
    #(226
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 9 12 2 37 115 12 3 115 37 115)
      #f
      ())
    #(227
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 8 2 1 1 48 3 2 1 0)
      #f
      ())
    #(228
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 3 2 1 1)
      #f
      ())
    #(229
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 1 1 0)
      #f
      ())
    #(230
      "Edge case for Shamir multiplication"
      #vu8(49 55 51 50 50 49)
      #vu8(48 68 2 32 100 161 170 181 0 13 14 128 79 62 47 192 43 222 233 190 143 243 18 51 78 43 161 109 17 84 124 151 113 28 137 142 2 32 64 74 26 109 161 88 174 20 115 252 224 141 51 139 141 100 16 166 165 144 51 88 178 63 221 58 84 254 226 194 116 43)
      #t
      ())
    #(231
      "special case hash"
      #vu8(51 49 57 48 57 52 51 50 56 56)
      #vu8(48 69 2 33 0 169 237 184 121 37 104 75 204 91 146 208 247 69 81 35 101 110 52 152 160 209 130 190 99 226 230 7 124 43 67 188 110 2 32 44 114 158 161 176 29 20 238 143 231 2 9 108 221 217 57 78 53 29 128 20 17 236 142 172 107 117 132 117 234 0 112)
      #t
      ())
    #(232
      "special case hash"
      #vu8(56 52 51 52 55 52 49 53 53)
      #vu8(48 68 2 32 63 186 32 202 137 61 202 240 78 137 20 19 55 169 106 188 126 36 224 38 168 255 76 134 217 80 222 28 49 182 66 114 2 32 107 226 236 237 76 227 136 255 128 38 223 211 182 88 20 79 48 147 27 112 131 238 42 240 110 117 21 140 21 177 34 73)
      #t
      ())
    #(233
      "special case hash"
      #vu8(51 53 55 50 54 57 54 56 50 57)
      #vu8(48 69 2 33 0 197 170 49 17 111 96 6 196 121 88 111 247 7 0 20 163 95 34 22 103 1 190 138 95 31 30 154 67 203 39 220 160 2 32 104 209 206 227 91 163 137 59 156 195 181 223 90 198 175 239 85 235 219 122 217 35 107 31 168 228 56 165 56 248 203 85)
      #t
      ())
    #(234
      "special case hash"
      #vu8(53 57 49 56 51 51 52 50 57)
      #vu8(48 69 2 32 91 91 77 137 5 4 245 108 22 164 172 121 71 172 0 87 205 246 64 210 195 155 172 9 254 220 100 139 176 161 111 29 2 33 0 249 193 46 115 165 109 121 158 40 39 83 129 135 240 237 14 195 49 246 240 192 137 164 246 36 157 4 193 176 197 204 141)
      #t
      ())
    #(235
      "special case hash"
      #vu8(56 50 53 51 48 56 50 50 53 56 57)
      #vu8(48 69 2 32 67 56 231 16 71 142 139 146 46 80 220 148 127 111 160 205 25 3 16 108 240 46 224 116 45 166 158 139 98 76 91 103 2 33 0 144 199 59 208 252 208 122 77 212 163 102 77 85 155 212 121 90 201 80 216 148 99 104 8 82 211 57 21 222 26 87 69)
      #t
      ())
    #(236
      "special case hash"
      #vu8(49 51 55 51 52 56 50 56 49 52 50)
      #vu8(48 69 2 32 15 201 125 119 68 224 178 118 46 107 72 115 13 68 199 88 171 35 129 54 167 38 147 255 39 51 154 174 190 250 213 129 2 33 0 171 104 236 128 207 74 252 202 15 125 117 243 196 176 14 52 237 79 233 16 28 152 237 77 140 47 151 235 134 91 22 131)
      #t
      ())
    #(237
      "special case hash"
      #vu8(49 55 51 56 49 53 54 52 48)
      #vu8(48 69 2 33 0 130 95 11 66 48 227 1 130 178 75 101 21 30 200 61 10 173 198 62 207 224 169 27 88 121 204 247 252 206 158 180 10 2 32 71 240 33 26 213 71 29 5 95 224 124 117 243 127 63 173 138 238 255 30 225 26 84 161 123 171 53 33 44 70 213 214)
      #t
      ())
    #(238
      "special case hash"
      #vu8(50 53 53 51 52 54 54 53 48 52)
      #vu8(48 69 2 32 63 237 216 53 121 67 24 137 113 11 103 182 69 77 67 234 126 221 170 169 218 149 4 36 226 196 172 115 0 101 168 34 2 33 0 181 12 239 90 157 168 50 63 204 213 191 19 38 13 234 101 23 200 174 108 205 100 149 249 237 116 148 207 213 137 21 115)
      #t
      ())
    #(239
      "special case hash"
      #vu8(50 49 56 51 48 51 57 49 57 55)
      #vu8(48 68 2 32 105 186 98 176 32 163 99 51 247 160 113 101 119 221 87 210 128 19 44 84 15 102 185 226 254 141 71 1 33 224 241 53 2 32 102 199 129 21 135 203 146 71 236 109 140 34 59 76 109 85 51 148 143 186 191 7 41 115 215 76 177 157 59 44 145 166)
      #t
      ())
    #(240
      "special case hash"
      #vu8(49 48 53 50 54 49 55 54 53 52 53)
      #vu8(48 69 2 33 0 139 183 99 9 125 140 168 233 203 132 225 17 243 97 244 125 233 52 153 245 11 200 84 1 234 150 166 29 84 250 215 168 2 32 37 135 184 30 39 114 131 213 193 57 184 233 165 244 170 11 176 177 194 178 137 99 239 221 191 115 160 238 243 65 101 154)
      #t
      ())
    #(241
      "special case hash"
      #vu8(50 53 48 49 53 51 57 57 56 54)
      #vu8(48 69 2 33 0 130 96 161 235 139 168 181 45 185 91 7 34 136 121 32 161 249 152 157 250 30 253 66 13 31 143 154 179 223 12 255 206 2 32 103 82 197 104 126 104 137 224 8 235 154 214 228 25 51 121 107 74 220 214 1 132 32 253 239 37 9 152 246 173 246 3)
      #t
      ())
    #(242
      "special case hash"
      #vu8(49 52 57 53 51 49 54 52 54 49 57)
      #vu8(48 69 2 33 0 184 9 193 51 179 12 58 143 241 30 169 2 75 19 22 100 181 28 39 104 175 184 83 103 68 224 65 1 93 169 56 6 2 32 108 208 21 164 158 25 178 96 218 108 211 42 148 128 111 184 189 206 236 93 197 84 42 123 43 147 140 206 117 19 127 48)
      #t
      ())
    #(243
      "special case hash"
      #vu8(50 48 54 51 56 53 50 57 48 54)
      #vu8(48 69 2 32 32 105 36 79 142 114 86 36 6 214 49 246 71 161 65 131 26 202 89 7 251 255 9 147 39 151 216 48 90 211 193 157 2 33 0 223 183 163 174 26 75 223 118 152 125 125 228 4 197 216 183 197 26 106 232 219 236 233 222 52 90 75 113 203 94 31 56)
      #t
      ())
    #(244
      "special case hash"
      #vu8(55 56 51 57 55 54 52 57 57 50)
      #vu8(48 68 2 32 77 130 228 87 149 71 97 0 29 166 197 221 15 180 93 59 138 174 18 162 112 205 197 185 125 102 248 16 227 6 83 38 2 32 12 198 33 126 58 238 56 57 253 128 155 32 125 71 222 164 18 153 25 50 173 178 222 24 238 134 67 20 82 194 37 149)
      #t
      ())
    #(245
      "special case hash"
      #vu8(50 49 50 57 50 54 52 52 54 57)
      #vu8(48 69 2 33 0 168 28 98 88 72 158 16 187 17 50 166 248 31 118 195 29 116 101 134 151 8 216 158 176 24 197 27 247 116 232 160 147 2 32 48 77 117 183 190 190 154 189 165 218 175 196 25 167 101 255 184 229 192 45 217 24 54 196 12 67 15 5 45 92 165 156)
      #t
      ())
    #(246
      "special case hash"
      #vu8(52 56 51 50 48 52 50 54 56 51)
      #vu8(48 69 2 33 0 232 218 119 105 132 214 175 43 141 82 61 27 214 250 184 178 84 9 230 105 209 114 239 81 225 4 100 140 27 240 218 209 2 32 73 180 23 15 237 28 197 154 176 0 8 122 44 9 27 63 105 166 108 133 98 237 53 4 114 233 130 189 49 160 208 158)
      #t
      ())
    #(247
      "special case hash"
      #vu8(51 54 53 50 50 49 56 49 54)
      #vu8(48 70 2 33 0 197 61 41 55 117 197 207 219 135 155 103 255 79 71 146 148 33 50 195 92 157 199 248 253 168 179 160 9 103 199 91 71 2 33 0 195 96 69 21 31 112 165 214 175 47 210 124 241 241 60 179 8 178 232 71 21 31 164 180 126 34 242 223 98 32 174 149)
      #t
      ())
    #(248
      "special case hash"
      #vu8(50 52 57 49 55 49 50 54 57 54 53)
      #vu8(48 68 2 32 48 14 230 250 77 232 83 172 102 128 48 42 156 67 155 130 223 208 70 195 20 215 187 172 178 224 18 116 230 30 155 84 2 32 11 178 182 47 17 183 137 132 134 72 250 183 224 196 108 167 176 156 222 208 24 135 239 107 218 159 135 27 197 204 96 159)
      #t
      ())
    #(249
      "special case hash"
      #vu8(50 54 50 50 55 57 48 55 55 56)
      #vu8(48 69 2 33 0 172 88 161 143 165 151 62 251 6 173 186 132 42 255 189 37 106 28 98 70 6 177 70 218 229 166 239 133 153 44 180 40 2 32 72 180 236 184 105 126 76 210 14 15 48 114 26 217 79 76 24 148 56 121 206 93 153 216 192 0 217 4 101 19 139 208)
      #t
      ())
    #(250
      "special case hash"
      #vu8(49 48 49 50 53 55 55 50 56 57 50 55)
      #vu8(48 68 2 32 110 188 40 87 253 83 101 107 133 112 5 235 143 149 196 246 253 60 153 249 99 106 2 142 82 68 237 198 11 201 225 140 2 32 39 113 159 18 235 29 230 202 222 84 124 185 133 35 189 199 16 134 34 36 15 56 209 47 65 92 121 205 11 19 68 217)
      #t
      ())
    #(251
      "special case hash"
      #vu8(49 48 53 48 56 55 50 50 48 50)
      #vu8(48 68 2 32 103 232 202 25 7 98 68 25 227 204 216 128 2 221 119 87 245 149 171 200 75 216 97 205 1 152 54 74 69 113 255 107 2 32 13 180 11 106 114 0 205 193 160 157 244 50 165 167 99 67 106 180 19 12 189 238 2 77 234 42 61 221 108 2 62 217)
      #t
      ())
    #(252
      "special case hash"
      #vu8(50 53 48 55 55 50 55 48 51 50)
      #vu8(48 69 2 33 0 244 216 32 142 237 92 180 191 228 239 109 219 188 55 66 231 128 228 33 42 57 207 121 201 248 86 5 238 100 169 98 203 2 32 67 222 232 163 196 90 69 169 30 131 161 143 243 248 129 4 123 79 214 173 48 3 179 175 55 251 130 17 234 247 213 132)
      #t
      ())
    #(253
      "special case hash"
      #vu8(55 49 57 51 52 53 57 51 57)
      #vu8(48 68 2 32 51 99 204 201 62 36 19 228 117 40 171 8 100 8 188 5 33 190 115 53 63 44 35 113 187 242 217 220 22 230 63 179 2 32 104 243 209 7 74 46 6 211 63 193 154 86 122 138 240 237 202 233 35 86 12 243 141 162 218 184 46 34 73 200 219 189)
      #t
      ())
    #(254
      "special case hash"
      #vu8(49 54 51 55 51 48 53 55 54 51)
      #vu8(48 69 2 33 0 132 150 7 88 18 90 216 222 61 240 193 19 255 53 241 100 78 77 67 246 97 194 216 24 72 243 254 78 85 132 111 24 2 32 89 131 99 15 200 151 91 171 87 13 44 159 60 187 222 203 77 214 23 158 196 151 175 243 18 216 7 236 38 202 148 10)
      #t
      ())
    #(255
      "special case hash"
      #vu8(52 50 52 49 50 55 51 55 49 51)
      #vu8(48 68 2 32 6 202 146 75 86 134 162 47 46 57 192 249 128 253 88 214 43 186 243 60 58 87 249 138 49 83 50 18 30 155 166 11 2 32 101 22 185 139 49 4 135 34 202 37 224 166 196 80 70 24 35 192 163 95 55 214 113 67 144 132 251 194 124 71 121 161)
      #t
      ())
    #(256
      "special case hash"
      #vu8(52 55 53 54 49 52 55 51 55)
      #vu8(48 68 2 32 0 147 197 239 7 167 217 85 5 107 136 204 130 64 6 11 79 251 66 131 90 61 243 83 203 225 108 203 98 234 243 246 2 32 54 77 190 166 213 234 212 32 45 111 220 37 59 176 194 192 82 43 85 130 62 139 184 144 35 90 176 154 233 3 14 162)
      #t
      ())
    #(257
      "special case hash"
      #vu8(55 49 54 50 51 50 55 55 51 52)
      #vu8(48 69 2 33 0 131 82 116 243 21 123 115 121 117 72 108 115 229 187 221 21 182 30 46 187 158 88 9 17 228 95 194 136 33 77 46 103 2 32 29 93 206 191 198 211 174 56 38 185 163 33 31 94 34 73 172 201 103 235 71 223 212 26 132 146 65 255 231 121 21 79)
      #t
      ())
    #(258
      "special case hash"
      #vu8(49 50 50 50 52 48 52 49 50 57)
      #vu8(48 69 2 32 55 151 145 111 181 196 1 166 145 183 16 5 13 243 238 193 99 56 63 133 95 147 182 19 34 165 109 134 42 213 87 45 2 33 0 235 123 255 64 0 115 138 131 221 100 8 46 255 113 13 94 182 25 66 113 152 172 41 11 41 31 69 153 118 137 89 202)
      #t
      ())
    #(259
      "special case hash"
      #vu8(51 53 50 52 53 56 51 51 54 56)
      #vu8(48 68 2 32 112 153 36 99 105 76 132 81 131 219 20 42 119 191 93 115 193 126 144 4 168 185 70 183 184 238 179 253 242 178 46 0 2 32 3 132 62 194 142 76 77 79 119 38 165 165 131 85 117 187 62 39 47 97 34 70 188 58 255 40 138 196 164 233 12 144)
      #t
      ())
    #(260
      "special case hash"
      #vu8(51 49 54 51 52 51 57 54)
      #vu8(48 70 2 33 0 174 175 34 139 65 161 243 17 212 223 116 113 127 65 52 238 153 46 95 41 34 238 198 94 200 62 45 184 42 134 100 114 2 33 0 245 239 101 235 159 195 254 170 172 4 247 26 154 92 235 115 232 205 108 183 91 69 149 179 155 37 10 80 71 108 182 143)
      #t
      ())
    #(261
      "special case hash"
      #vu8(54 53 51 50 53 57 56 52 51 57)
      #vu8(48 69 2 33 0 184 77 187 221 211 184 162 221 246 125 39 228 239 136 111 114 217 12 187 126 194 214 136 55 40 178 120 66 214 21 5 204 2 32 50 190 127 15 244 32 174 59 226 18 190 180 194 118 217 62 37 39 176 150 77 100 60 88 7 200 238 113 30 102 232 229)
      #t
      ())
    #(262
      "special case hash"
      #vu8(55 51 56 53 49 56 53 48 52)
      #vu8(48 70 2 33 0 247 246 120 41 120 243 118 202 249 67 73 65 83 94 28 135 173 9 185 211 158 233 54 20 90 11 83 185 37 15 209 130 2 33 0 251 117 41 48 200 76 41 228 159 129 169 151 164 208 240 15 205 203 74 47 43 248 4 156 202 93 124 247 11 7 156 234)
      #t
      ())
    #(263
      "special case hash"
      #vu8(49 52 54 53 50 54 54 53 55 57)
      #vu8(48 69 2 33 0 251 75 67 65 18 193 48 47 253 73 235 217 147 207 94 197 151 41 203 231 135 57 219 60 71 2 100 227 120 213 110 141 2 32 58 186 153 189 16 190 15 186 4 202 141 150 1 174 143 104 202 127 254 88 20 244 207 189 231 140 28 192 122 41 253 143)
      #t
      ())
    #(264
      "special case hash"
      #vu8(50 48 51 52 56 56 57 52 57 52)
      #vu8(48 70 2 33 0 234 250 254 133 26 173 118 3 96 19 189 87 23 114 20 123 114 87 251 115 110 215 180 69 142 13 207 96 162 199 185 192 2 33 0 181 156 100 9 229 16 67 183 229 200 106 141 70 89 120 164 200 247 142 19 239 91 24 79 229 244 111 32 31 244 239 168)
      #t
      ())
    #(265
      "special case hash"
      #vu8(52 52 55 48 56 56 54 55 56 53)
      #vu8(48 69 2 32 108 116 209 103 157 135 26 70 164 60 63 227 117 224 157 79 27 100 19 197 155 94 7 13 121 132 218 224 170 219 195 126 2 33 0 255 29 34 34 140 158 156 249 149 141 103 126 237 76 58 37 43 16 39 60 226 211 96 69 127 170 190 127 116 57 192 232)
      #t
      ())
    #(266
      "special case hash"
      #vu8(53 53 55 54 52 48 52 52 54)
      #vu8(48 70 2 33 0 202 226 139 89 46 45 91 246 249 234 84 30 112 188 238 221 7 173 222 64 188 43 95 136 61 53 174 149 96 252 133 194 2 33 0 153 234 255 193 111 87 11 120 55 215 65 119 218 230 230 207 216 115 234 137 66 69 129 188 105 13 14 73 196 33 132 2)
      #t
      ())
    #(267
      "special case hash"
      #vu8(54 51 52 52 57 53 54 54 48 56)
      #vu8(48 69 2 32 108 229 19 53 121 221 4 68 71 32 107 159 110 22 5 210 127 9 75 44 68 102 165 191 142 21 120 115 23 107 175 58 2 33 0 187 227 85 36 217 193 147 107 172 236 182 194 112 191 73 78 172 117 147 60 170 141 187 47 239 48 246 87 46 216 102 124)
      #t
      ())
    #(268
      "special case hash"
      #vu8(52 57 52 50 56 48 57 48 51 49)
      #vu8(48 68 2 32 40 85 207 110 101 129 46 162 70 227 102 171 150 25 112 209 147 135 3 154 147 240 189 64 99 101 214 139 3 86 102 19 2 32 27 58 149 147 17 115 128 137 157 92 143 143 151 106 212 222 233 125 185 241 34 95 115 91 29 65 194 161 21 190 147 251)
      #t
      ())
    #(269
      "special case hash"
      #vu8(50 54 54 53 56 49 57 51 57)
      #vu8(48 69 2 33 0 144 237 58 168 149 121 183 52 119 227 252 186 159 82 165 166 75 155 109 131 180 117 163 136 27 192 230 61 116 246 191 156 2 32 4 203 94 44 161 212 19 179 122 113 96 125 91 95 167 44 204 135 162 237 205 92 127 48 218 170 148 36 27 116 153 32)
      #t
      ())
    #(270
      "special case hash"
      #vu8(51 51 51 50 50 49 52 49 49 52)
      #vu8(48 69 2 32 5 94 56 24 135 86 131 28 237 75 1 224 249 212 219 107 2 41 60 126 226 195 253 71 134 13 56 55 126 224 244 25 2 33 0 156 41 241 104 143 22 225 17 145 77 156 132 60 10 143 3 6 193 196 221 213 22 124 221 84 51 138 79 74 183 154 145)
      #t
      ())
    #(271
      "special case hash"
      #vu8(54 49 54 53 50 55 55 49 53)
      #vu8(48 69 2 32 6 178 140 216 83 141 140 197 99 71 60 246 199 171 181 25 228 200 187 76 55 145 94 247 101 18 243 125 224 44 33 100 2 33 0 166 45 194 175 176 26 26 155 200 119 237 213 79 37 253 31 109 3 120 179 251 170 33 159 249 239 40 197 96 204 128 101)
      #t
      ())
    #(272
      "special case hash"
      #vu8(50 51 53 57 57 53 53 56 49 51)
      #vu8(48 69 2 33 0 196 185 118 82 112 46 251 29 27 103 233 102 232 135 137 239 192 217 235 118 211 46 251 234 249 193 188 163 107 46 169 165 2 32 19 225 178 53 140 122 52 254 243 234 115 142 241 164 143 171 99 162 97 100 85 200 31 128 149 57 74 34 48 200 82 227)
      #t
      ())
    #(273
      "special case hash"
      #vu8(50 57 49 51 54 49 57 53 56)
      #vu8(48 69 2 32 106 134 16 8 72 86 107 95 95 137 193 54 67 81 93 129 57 9 82 182 181 206 86 182 79 195 52 158 78 223 33 223 2 33 0 201 202 75 163 166 253 80 29 174 153 23 40 58 104 81 105 47 87 223 191 164 157 122 49 170 147 117 52 223 118 12 135)
      #t
      ())
    #(274
      "special case hash"
      #vu8(49 54 50 48 57 48 51 51 57 54)
      #vu8(48 70 2 33 0 193 234 32 78 231 26 5 2 252 71 222 93 137 250 217 139 137 123 92 48 138 64 48 180 162 157 233 204 57 255 23 4 2 33 0 165 38 23 152 237 150 101 53 140 49 162 54 140 103 5 181 59 93 125 23 2 60 54 90 229 50 87 53 147 147 68 129)
      #t
      ())
    #(275
      "special case hash"
      #vu8(51 51 54 51 49 48 50 56 52 50)
      #vu8(48 69 2 33 0 179 193 62 73 7 175 165 166 41 57 143 244 251 80 196 143 174 105 221 55 33 166 246 42 193 59 144 30 252 180 113 124 2 32 108 184 169 87 40 117 27 98 116 251 87 224 232 252 135 189 121 17 177 185 79 185 46 223 9 239 48 252 228 16 239 231)
      #t
      ())
    #(276
      "special case hash"
      #vu8(54 50 55 55 52 51 52 57 49)
      #vu8(48 70 2 33 0 159 175 235 216 132 21 136 229 97 22 178 170 53 69 87 190 129 70 48 186 229 130 78 24 116 5 243 57 143 54 188 94 2 33 0 240 18 100 254 180 106 238 254 104 201 103 228 57 152 111 20 174 184 90 217 155 82 13 181 114 175 141 19 73 214 150 166)
      #t
      ())
    #(277
      "special case hash"
      #vu8(51 56 53 54 55 57 56 49 52 55)
      #vu8(48 70 2 33 0 180 87 3 242 198 233 92 47 35 120 145 60 183 142 207 122 1 147 43 102 216 94 111 104 125 187 97 139 5 104 81 232 2 33 0 225 51 51 82 234 58 212 45 127 217 165 42 155 109 209 37 40 72 161 128 96 109 48 1 46 20 45 19 81 86 114 11)
      #t
      ())
    #(278
      "special case hash"
      #vu8(50 56 56 49 49 56 48 54 52 48)
      #vu8(48 69 2 32 65 56 147 77 166 50 147 53 112 40 20 51 63 77 248 249 7 223 122 168 230 132 204 56 226 54 105 97 130 138 217 55 2 33 0 185 11 27 13 119 250 57 200 31 61 247 164 113 73 158 187 228 21 163 114 231 201 71 234 232 97 38 70 8 26 235 71)
      #t
      ())
    #(279
      "special case hash"
      #vu8(49 48 57 53 55 51 57 52 54 55 56)
      #vu8(48 69 2 33 0 165 42 108 202 82 214 10 237 194 112 207 210 251 14 12 45 222 30 196 187 97 67 74 127 17 205 18 106 212 107 236 86 2 32 29 186 146 187 8 229 102 93 163 132 122 191 105 93 190 24 174 174 55 217 253 205 54 23 250 176 198 72 244 141 140 230)
      #t
      ())
    #(280
      "special case hash"
      #vu8(53 52 50 55 49 49 57 56 52)
      #vu8(48 69 2 33 0 177 83 54 61 72 165 141 51 154 126 83 191 237 221 182 62 166 52 132 86 155 218 38 48 214 28 18 154 69 211 82 225 2 32 89 45 200 118 155 72 52 250 231 15 44 243 238 161 87 234 150 132 197 109 72 117 210 150 49 60 223 18 228 147 157 248)
      #t
      ())
    #(281
      "special case hash"
      #vu8(51 49 53 48 48 51 52 51 50 53)
      #vu8(48 68 2 32 53 22 224 200 201 113 16 23 10 81 33 181 64 128 67 243 60 110 251 239 14 85 86 22 88 18 113 59 230 66 42 232 2 32 93 128 197 223 250 135 211 133 96 131 191 103 190 178 126 144 235 220 46 84 216 71 96 193 88 143 100 50 202 115 49 149)
      #t
      ())
    #(282
      "special case hash"
      #vu8(49 57 57 57 56 50 49 51 57 49)
      #vu8(48 70 2 33 0 144 61 131 151 36 75 252 153 242 166 119 80 125 180 25 89 127 239 111 12 191 212 158 12 2 39 9 192 108 147 227 88 2 33 0 241 112 95 74 25 171 134 137 62 14 2 43 202 144 129 2 39 100 189 152 108 28 137 30 184 2 2 236 70 245 8 112)
      #t
      ())
    #(283
      "special case hash"
      #vu8(49 57 55 49 50 48 57 50 54 49)
      #vu8(48 69 2 32 59 164 208 26 200 203 252 74 191 132 130 83 208 96 164 227 250 237 225 136 253 1 194 22 87 194 11 97 209 148 63 67 2 33 0 202 59 83 101 255 187 152 165 83 156 190 62 113 179 217 252 89 181 241 213 190 225 18 40 112 225 83 222 217 225 206 103)
      #t
      ())
    #(284
      "special case hash"
      #vu8(51 53 55 49 56 51 56 56 53 55)
      #vu8(48 68 2 32 116 27 118 211 56 33 200 202 194 54 16 72 241 13 40 6 15 67 226 195 11 66 179 241 182 74 67 47 50 46 112 92 2 32 55 51 28 222 190 21 47 248 75 249 9 24 48 105 242 120 248 176 119 144 66 213 72 107 45 152 38 180 37 70 149 45)
      #t
      ())
    #(285
      "special case hash"
      #vu8(56 54 56 50 50 54 57 56 57 53)
      #vu8(48 69 2 33 0 215 152 129 53 253 33 26 44 192 154 69 136 242 217 29 227 169 169 73 141 92 92 62 247 231 142 155 216 9 6 166 63 2 32 37 222 49 98 174 251 214 175 237 240 17 22 180 230 157 73 142 174 251 242 149 153 167 224 171 96 97 77 100 251 61 183)
      #t
      ())
    #(286
      "special case hash"
      #vu8(50 53 52 56 56 53 54 48 51 49)
      #vu8(48 69 2 32 20 88 12 243 170 229 235 187 116 254 208 159 241 147 243 71 246 154 197 179 132 53 238 183 195 138 15 217 95 91 122 216 2 33 0 252 217 35 253 189 206 203 62 206 59 208 6 156 129 57 107 74 207 99 40 100 143 190 83 36 174 12 90 39 111 216 124)
      #t
      ())
    #(287
      "special case hash"
      #vu8(52 57 57 53 55 48 49 51 49 57)
      #vu8(48 69 2 32 19 8 33 187 0 208 244 65 110 240 103 97 170 40 61 53 56 60 194 212 106 214 190 118 201 109 131 154 220 226 219 182 2 33 0 217 222 239 56 231 208 241 54 204 83 95 31 137 49 242 113 203 240 176 217 228 226 15 200 219 122 31 179 198 22 187 104)
      #t
      ())
    #(288
      "special case hash"
      #vu8(50 52 53 54 54 56 49 55 56 53)
      #vu8(48 70 2 33 0 171 73 145 202 217 3 252 69 246 175 226 43 147 150 64 115 106 236 151 136 185 216 249 65 9 52 54 73 214 50 118 149 2 33 0 171 18 109 236 209 116 60 175 75 70 26 156 128 41 207 18 48 165 74 1 128 229 34 90 121 192 117 22 124 41 17 188)
      #t
      ())
    #(289
      "special case hash"
      #vu8(52 49 56 53 51 55 49 50 51 54)
      #vu8(48 69 2 33 0 220 59 117 107 32 185 6 240 45 192 59 70 187 239 86 112 139 230 73 187 75 35 164 26 196 51 60 215 157 114 116 157 2 32 48 157 254 6 35 3 77 100 65 51 42 235 179 39 191 91 15 178 243 214 223 90 108 2 216 54 252 144 142 55 176 224)
      #t
      ())
    #(290
      "special case hash"
      #vu8(55 50 55 56 52 57 48 48 52)
      #vu8(48 70 2 33 0 215 51 180 57 26 72 118 211 10 205 185 89 119 228 253 253 237 32 30 105 142 66 190 84 197 198 144 180 200 60 144 54 2 33 0 245 85 101 71 93 197 142 70 139 74 174 230 14 218 34 71 112 197 179 5 23 148 76 6 87 88 205 81 85 174 18 81)
      #t
      ())
    #(291
      "special case hash"
      #vu8(49 53 54 50 56 49 57 51 49 56)
      #vu8(48 69 2 33 0 170 158 160 134 227 1 114 142 12 172 117 104 191 100 9 91 159 81 208 112 237 180 102 121 169 152 53 0 36 94 52 104 2 32 58 235 36 21 241 6 37 195 164 232 24 218 125 222 206 162 127 86 240 163 147 146 15 106 93 47 79 48 84 226 19 31)
      #t
      ())
    #(292
      "special case hash"
      #vu8(50 49 56 55 57 57 50 56 51 56 54)
      #vu8(48 69 2 33 0 213 166 255 221 236 233 24 197 254 78 125 58 17 52 70 18 191 176 205 39 53 206 7 29 250 222 1 36 76 59 48 60 2 32 15 244 238 58 112 185 152 78 73 39 123 59 21 37 44 159 37 91 158 213 28 122 68 115 207 85 167 149 80 131 169 133)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 88 231 31 251 253 46 171 244 228 164 101 246 129 0 243 210 61 71 2 83 125 252 202 94 232 157 24 167 90 215 247 86 22 83 93 59 25 240 80 228 67 191 93 195 143 127 124 218 157 243 121 141 74 47 101 164 19 169 175 93 240 2 130 140)
  :der-encode
  #t
  :tests
  '(#(293
      "k*G has a large x-coordinate"
      #vu8(49 50 51 52 48 48)
      #vu8(48 53 2 16 67 25 5 83 88 232 97 123 12 70 53 61 3 156 218 171 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 78)
      #t
      ())
    #(294
      "r too large"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 252 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 78)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 10 120 218 209 112 29 5 81 8 157 58 14 227 41 162 42 157 139 244 38 60 138 80 224 102 141 36 48 108 240 36 11 3 149 11 52 187 99 140 104 60 22 122 0 172 6 35 44 46 241 113 141 62 215 235 207 193 69 164 16 49 176 78 224)
  :der-encode
  #t
  :tests
  '(#(295
      "r,s are large"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 79 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 78)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 229 176 39 225 245 218 246 229 46 202 128 227 91 226 134 81 191 132 159 243 222 112 210 163 76 13 120 43 90 170 214 133 60 142 44 255 155 2 201 11 244 215 212 156 127 242 162 97 210 106 237 125 64 34 180 19 146 200 90 133 125 67 69 121)
  :der-encode
  #t
  :tests
  '(#(296
      "r and s^-1 have a large Hamming weight"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 33 0 144 145 53 189 182 121 146 134 23 15 94 173 45 228 246 81 20 83 254 80 145 79 61 242 222 84 163 99 131 223 141 212)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 36 197 70 43 183 209 241 118 60 226 139 58 159 133 29 134 215 203 76 95 124 97 237 158 215 211 151 241 169 32 255 201 148 96 147 107 105 25 248 134 70 132 75 39 80 53 85 38 46 248 168 30 103 4 244 62 7 222 218 18 170 6 244 174)
  :der-encode
  #t
  :tests
  '(#(297
      "r and s^-1 have a large Hamming weight"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 39 180 87 124 160 9 55 111 113 48 63 213 221 34 125 206 245 222 183 115 173 95 90 132 54 6 68 102 156 162 73 165)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 98 38 187 131 211 206 240 26 226 123 125 4 169 5 57 118 130 213 228 165 150 75 81 96 219 168 160 85 162 226 174 202 122 54 48 212 157 153 157 14 133 229 159 231 98 201 197 103 203 118 124 162 160 167 167 117 106 201 23 230 8 91 24 225)
  :der-encode
  #t
  :tests
  '(#(298
      "small r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 5 2 1 1)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 101 175 140 35 49 15 224 96 160 158 115 102 216 46 163 95 72 248 226 198 130 234 179 120 61 231 217 113 31 89 35 190 190 186 191 175 8 71 65 252 128 107 150 152 239 135 201 69 146 70 183 132 111 161 116 0 9 74 208 187 34 44 44 182)
  :der-encode
  #t
  :tests
  '(#(299
      "small r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 5 2 1 3)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 242 110 168 118 237 171 145 180 7 12 94 198 227 102 99 255 248 111 31 229 239 115 147 139 34 119 102 177 128 87 115 205 7 5 149 6 165 41 109 87 102 212 197 92 6 238 188 207 129 192 78 82 203 20 195 177 152 161 136 8 213 112 212 23)
  :der-encode
  #t
  :tests
  '(#(300
      "small r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 5 2 1 5)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 120 17 225 102 117 121 144 118 196 245 234 120 229 248 51 190 70 73 146 81 101 103 32 87 68 60 67 108 244 1 126 13 142 55 125 83 254 205 241 85 107 28 223 221 130 112 217 32 207 124 109 50 201 70 175 45 180 200 100 250 236 107 30 186)
  :der-encode
  #t
  :tests
  '(#(301
      "small r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 5 2 1 6)
      #t
      ())
    #(302
      "r is larger than n"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 86 2 1 6)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 3 200 64 240 252 223 190 156 186 147 23 38 213 74 31 149 83 115 43 232 50 216 171 112 26 235 173 228 82 75 115 109 148 35 121 241 11 116 183 14 197 160 109 49 199 182 94 202 111 119 160 71 226 87 54 170 206 50 207 70 237 249 233 11)
  :der-encode
  #t
  :tests
  '(#(303
      "s is larger than n"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 5 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 117 251 216)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 75 36 117 174 145 26 179 227 51 75 213 172 239 206 34 37 227 90 215 244 82 61 245 44 19 245 129 184 120 152 204 161 149 87 93 82 150 209 189 151 239 170 116 161 44 192 223 61 85 106 97 79 23 108 37 176 99 72 175 141 48 78 166 199)
  :der-encode
  #t
  :tests
  '(#(304
      "small r and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 39 2 2 1 0 2 33 0 143 30 60 120 98 197 139 22 187 118 237 219 183 110 221 187 81 106 244 246 63 45 116 215 110 13 40 201 187 117 234 136)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 33 28 194 111 31 96 153 139 204 252 106 230 92 254 143 27 242 231 15 194 139 90 175 142 42 41 127 63 68 96 102 44 63 252 141 189 155 88 163 65 213 22 15 240 59 122 80 54 73 150 122 154 147 126 219 191 196 191 21 74 166 225 160 174)
  :der-encode
  #t
  :tests
  '(#(305
      "smallish r and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 44 2 7 45 155 77 52 121 82 214 2 33 0 239 48 67 231 50 149 129 219 179 151 68 151 113 10 177 21 5 238 28 135 255 144 123 238 186 221 25 90 15 254 109 122)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 10 123 181 32 240 204 22 40 72 49 22 125 54 34 178 118 72 122 123 191 65 191 145 29 54 123 72 79 27 216 26 12 12 48 213 115 210 125 68 230 143 185 161 9 172 127 170 210 197 122 224 157 227 13 130 3 171 64 156 211 202 99 175 58)
  :der-encode
  #t
  :tests
  '(#(306
      "100-bit r and small s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 50 2 13 16 51 230 126 55 179 43 68 85 128 191 78 255 2 33 0 139 116 139 116 0 0 0 0 139 116 139 116 139 116 139 116 102 231 105 173 74 22 211 220 216 113 41 184 233 29 27 77)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 213 40 164 143 179 145 221 73 13 63 50 129 5 112 97 61 22 254 39 9 184 34 69 2 119 5 227 89 84 155 14 21 95 74 90 194 121 213 92 158 166 55 31 86 64 63 129 110 231 35 99 41 17 223 152 4 240 28 127 162 137 235 35 97)
  :der-encode
  #t
  :tests
  '(#(307
      "small r and 100 bit s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 39 2 2 1 0 2 33 0 239 159 107 164 217 124 9 208 49 120 250 32 180 170 173 131 190 60 249 203 130 74 135 159 236 50 112 252 75 129 239 91)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 209 240 53 240 162 140 12 73 230 36 143 243 115 135 77 165 178 107 71 231 205 137 193 179 189 21 64 45 201 189 123 98 122 24 42 24 132 243 2 34 151 101 121 215 102 218 104 26 127 49 254 85 177 78 119 13 208 243 241 192 150 84 178 156)
  :der-encode
  #t
  :tests
  '(#(308
      "100-bit r and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 50 2 13 6 37 34 187 211 236 190 124 57 233 62 124 37 2 33 0 239 159 107 164 217 124 9 208 49 120 250 32 180 170 173 131 190 60 249 203 130 74 135 159 236 50 112 252 75 129 239 91)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 7 223 73 80 80 220 177 115 143 78 42 172 91 162 200 161 248 224 157 38 42 59 0 24 101 175 63 186 8 109 122 161 181 150 205 228 130 166 191 220 94 73 228 6 159 206 124 45 17 69 209 224 247 254 214 63 158 132 132 70 250 228 121 237)
  :der-encode
  #t
  :tests
  '(#(309
      "r and s^-1 are close to n"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 36 213 2 32 85 85 85 85 0 0 0 0 85 85 85 85 85 85 85 85 62 247 168 228 141 7 223 129 166 147 67 150 84 33 12 112)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 204 215 13 135 48 83 43 40 199 140 39 219 211 4 63 221 227 233 111 16 237 228 6 88 44 156 186 38 24 220 3 193 149 213 146 195 102 189 24 150 131 253 88 29 222 34 251 145 23 107 85 217 78 72 221 129 70 114 52 119 125 140 34 58)
  :der-encode
  #t
  :tests
  '(#(310
      "s == 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 37 2 32 85 85 85 85 0 0 0 0 85 85 85 85 85 85 85 85 62 247 168 228 141 7 223 129 166 147 67 150 84 33 12 112 2 1 1)
      #t
      ())
    #(311
      "s == 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 37 2 32 85 85 85 85 0 0 0 0 85 85 85 85 85 85 85 85 62 247 168 228 141 7 223 129 166 147 67 150 84 33 12 112 2 1 0)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 252 19 179 123 171 161 130 186 19 223 200 202 116 245 137 100 131 55 138 169 189 111 10 169 49 135 125 220 94 119 38 47 27 248 185 207 220 187 224 214 46 237 129 229 135 67 16 189 81 23 141 28 109 1 182 146 154 52 93 148 25 15 223 59)
  :der-encode
  #t
  :tests
  '(#(312
      "point at infinity during verify"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 128 0 0 0 127 255 255 255 255 255 255 255 222 115 125 86 211 139 207 66 121 220 229 97 126 49 146 168 2 32 85 85 85 85 0 0 0 0 85 85 85 85 85 85 85 85 62 247 168 228 141 7 223 129 166 147 67 150 84 33 12 112)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 32 173 187 108 185 224 156 232 238 75 107 219 194 232 4 122 11 157 200 17 235 65 90 42 37 137 6 239 189 138 136 206 193 107 33 17 181 153 29 152 220 76 147 93 166 25 181 95 120 76 121 240 0 131 13 81 79 254 182 173 63 207 6 64)
  :der-encode
  #t
  :tests
  '(#(313
      "edge case for signature malleability"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 128 0 0 0 127 255 255 255 255 255 255 255 222 115 125 86 211 139 207 66 121 220 229 97 126 49 146 169 2 32 127 255 255 255 128 0 0 0 127 255 255 255 255 255 255 255 222 115 125 86 211 139 207 66 121 220 229 97 126 49 146 168)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 240 51 170 33 28 241 30 230 28 36 117 103 151 79 184 102 124 120 241 58 53 188 46 107 234 212 67 108 38 31 20 77 153 180 208 123 108 232 0 143 236 248 164 196 175 86 27 151 43 0 230 52 67 162 242 0 56 238 132 237 12 35 138 60)
  :der-encode
  #t
  :tests
  '(#(314
      "edge case for signature malleability"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 128 0 0 0 127 255 255 255 255 255 255 255 222 115 125 86 211 139 207 66 121 220 229 97 126 49 146 169 2 32 127 255 255 255 128 0 0 0 127 255 255 255 255 255 255 255 222 115 125 86 211 139 207 66 121 220 229 97 126 49 146 169)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 190 242 83 141 163 208 113 88 121 21 86 178 208 41 124 169 193 179 6 69 156 147 35 206 125 7 162 18 130 222 26 206 78 64 12 142 78 181 119 81 250 160 221 230 187 235 249 111 170 172 158 252 128 227 222 118 143 180 245 163 127 149 234 215)
  :der-encode
  #t
  :tests
  '(#(315
      "u1 == 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 85 85 85 85 0 0 0 0 85 85 85 85 85 85 85 85 62 247 168 228 141 7 223 129 166 147 67 150 84 33 12 112 2 32 87 49 183 196 189 4 203 158 251 131 105 53 255 46 84 123 242 144 159 134 130 74 244 216 223 120 172 247 109 123 61 78)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 191 37 112 181 143 56 24 63 171 202 60 167 34 85 189 70 81 203 183 232 41 34 135 128 155 216 229 194 133 210 74 83 47 133 155 127 117 194 245 232 211 121 26 92 203 96 250 56 136 137 92 99 35 124 158 166 94 67 248 117 35 225 4 229)
  :der-encode
  #t
  :tests
  '(#(316
      "u1 == n - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 85 85 85 85 0 0 0 0 85 85 85 85 85 85 85 85 62 247 168 228 141 7 223 129 166 147 67 150 84 33 12 112 2 33 0 168 206 72 58 66 251 52 98 4 124 150 202 0 209 171 131 202 86 91 39 36 204 169 172 20 65 29 203 142 231 232 3)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 155 168 241 71 51 34 112 152 126 91 170 178 171 10 78 188 153 104 235 134 130 194 135 34 102 162 43 67 194 207 85 247 114 141 85 47 198 91 90 60 124 238 24 135 111 29 139 70 174 96 21 58 236 59 138 43 44 37 39 151 159 74 125 41)
  :der-encode
  #t
  :tests
  '(#(317
      "u2 == 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 85 85 85 85 0 0 0 0 85 85 85 85 85 85 85 85 62 247 168 228 141 7 223 129 166 147 67 150 84 33 12 112 2 32 85 85 85 85 0 0 0 0 85 85 85 85 85 85 85 85 62 247 168 228 141 7 223 129 166 147 67 150 84 33 12 112)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 217 230 77 178 234 86 1 98 218 211 236 103 214 235 170 185 232 33 168 29 168 212 88 79 0 251 20 129 60 126 150 225 83 233 233 110 23 235 5 34 143 243 201 203 197 49 139 187 135 232 139 236 72 157 236 43 231 162 10 220 224 108 248 189)
  :der-encode
  #t
  :tests
  '(#(318
      "u2 == n - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 85 85 85 85 0 0 0 0 85 85 85 85 85 85 85 85 62 247 168 228 141 7 223 129 166 147 67 150 84 33 12 112 2 33 0 170 170 170 170 0 0 0 0 170 170 170 170 170 170 170 170 125 239 81 201 26 15 191 3 77 38 135 44 168 66 24 225)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 133 124 88 217 1 13 31 131 134 226 121 205 204 54 155 50 168 150 2 89 163 166 70 246 216 154 213 39 50 82 243 252 101 210 56 76 171 246 162 21 139 28 209 178 226 71 125 16 177 183 25 18 94 146 38 233 154 233 10 122 250 171 73 158)
  :der-encode
  #t
  :tests
  '(#(319
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 29 16 146 150 233 172 67 223 169 43 205 188 170 100 198 211 251 133 138 130 43 110 81 157 159 210 228 82 121 211 191 26)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 137 216 135 176 100 93 47 150 180 7 176 128 207 109 179 104 92 201 212 69 77 53 165 172 121 131 187 94 187 253 46 32 222 79 205 65 12 59 110 17 245 228 204 203 25 50 124 24 28 67 194 210 22 134 147 9 242 36 149 211 78 226 121 111)
  :der-encode
  #t
  :tests
  '(#(320
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 2 125 55 125 4 113 94 67 117 70 41 150 28 98 51 150 27 146 27 50 131 195 63 203 84 28 194 114 133 9 46 141)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 4 9 36 41 26 167 151 95 208 79 139 46 146 58 31 145 33 131 111 223 191 47 234 18 60 193 135 15 79 108 192 242 197 16 238 52 163 37 231 114 210 50 181 118 5 47 150 211 236 74 51 176 134 80 134 130 252 83 9 156 12 212 142 69)
  :der-encode
  #t
  :tests
  '(#(321
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 33 0 206 22 2 238 90 109 104 108 91 141 138 63 68 244 25 170 96 100 240 211 83 35 52 29 119 166 90 75 201 225 152 155)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 62 126 210 251 184 159 123 100 61 74 180 72 149 255 159 177 110 139 231 168 100 158 74 196 238 47 89 236 143 104 252 99 76 169 28 194 96 67 168 36 46 41 105 200 113 211 202 152 51 20 129 53 178 125 55 113 152 24 44 234 167 231 15 212)
  :der-encode
  #t
  :tests
  '(#(322
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 50 138 178 115 255 104 26 121 169 102 45 193 116 238 1 78 247 61 89 125 50 239 66 177 127 68 58 51 245 228 48 254)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 230 127 85 159 85 39 114 177 116 211 119 178 57 230 7 80 41 157 55 155 107 236 111 201 58 223 4 2 105 213 140 66 108 57 127 121 132 161 73 240 123 247 159 187 163 177 140 146 90 121 124 198 103 142 46 234 190 196 127 180 172 70 16 65)
  :der-encode
  #t
  :tests
  '(#(323
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 33 0 171 39 67 30 129 167 151 110 98 220 23 78 224 20 240 71 156 144 159 23 145 158 196 83 1 59 71 241 170 34 24 88)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 136 177 211 14 41 254 14 222 185 58 180 105 210 105 141 15 188 41 119 247 127 72 41 61 14 135 172 192 133 106 81 252 61 27 79 35 250 63 110 242 111 14 148 203 122 99 144 123 25 35 227 13 8 25 113 21 5 11 157 169 138 43 95 86)
  :der-encode
  #t
  :tests
  '(#(324
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 86 78 134 62 3 79 46 219 197 184 46 157 192 41 224 143 124 58 67 129 124 37 234 33 14 188 197 32 87 225 11 95)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 35 166 237 43 16 100 146 49 4 208 142 228 57 43 68 187 81 85 90 57 84 119 220 82 84 106 246 199 135 204 101 170 129 16 91 140 114 195 87 215 82 21 178 16 40 109 247 129 214 115 28 79 11 135 233 254 112 102 72 150 83 220 53 211)
  :der-encode
  #t
  :tests
  '(#(325
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 49 242 204 237 118 219 123 77 116 238 1 79 4 124 150 201 243 186 62 33 241 18 72 188 244 81 82 106 195 118 197 76)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 89 45 39 205 129 251 182 30 187 221 120 46 170 29 134 213 59 89 234 239 67 73 102 119 195 69 173 201 137 108 86 46 53 91 143 253 164 248 104 61 169 134 83 240 214 6 123 216 19 76 92 62 34 227 220 222 230 165 205 189 130 111 73 21)
  :der-encode
  #t
  :tests
  '(#(326
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 102 143 207 190 221 78 237 126 182 132 12 127 108 241 227 221 229 4 175 229 115 46 224 225 188 190 238 21 185 74 44 100)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 140 74 164 46 244 124 78 45 123 96 202 43 90 11 48 56 169 248 231 238 29 231 125 41 146 134 219 60 214 53 183 84 246 84 56 85 138 34 113 201 68 75 119 64 90 31 151 232 64 54 195 20 108 66 80 6 230 91 232 63 151 228 17 145)
  :der-encode
  #t
  :tests
  '(#(327
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 99 126 87 189 79 8 95 157 59 226 5 6 187 194 184 234 178 104 163 56 113 177 157 165 107 27 160 172 37 146 123 209)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 245 97 143 185 120 183 15 21 184 224 122 116 237 251 206 167 117 220 185 32 85 249 67 27 129 108 212 203 93 79 214 60 189 23 89 253 53 186 231 155 245 187 3 148 100 107 20 251 203 30 210 97 79 220 201 169 245 54 99 224 159 140 106 9)
  :der-encode
  #t
  :tests
  '(#(328
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 33 0 176 161 5 40 23 17 241 117 91 191 193 160 182 234 103 173 209 8 94 132 183 48 22 152 158 32 169 11 227 80 77 34)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 83 193 67 67 82 71 225 226 20 76 76 50 203 28 144 11 142 156 177 96 151 107 220 218 27 36 135 124 231 38 106 116 65 162 23 128 217 21 84 211 73 164 199 198 31 121 155 218 157 220 129 166 99 35 7 130 69 220 179 150 4 23 166 96)
  :der-encode
  #t
  :tests
  '(#(329
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 33 0 241 119 182 179 139 41 222 17 43 106 25 33 170 205 156 149 191 36 53 108 145 96 117 182 35 208 88 153 191 121 69 196)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 147 72 111 102 83 194 144 97 82 235 157 28 43 40 229 28 8 95 32 172 84 1 106 128 143 110 60 107 44 220 192 42 53 67 155 123 154 185 232 109 240 202 97 119 55 180 159 40 186 223 143 86 54 201 187 170 25 155 221 32 6 62 199 255)
  :der-encode
  #t
  :tests
  '(#(330
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 33 0 226 239 109 104 22 83 188 33 86 212 50 67 85 155 57 43 193 97 112 43 123 169 76 231 83 230 230 112 130 143 102 55)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 95 46 6 240 236 146 182 73 158 183 210 73 255 1 71 99 146 83 231 171 224 228 73 114 38 51 106 92 148 202 167 119 78 179 194 138 207 80 18 186 2 57 113 65 108 96 10 16 251 109 40 162 63 58 44 31 119 251 6 134 208 108 223 128)
  :der-encode
  #t
  :tests
  '(#(331
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 33 0 212 103 36 28 161 125 154 49 130 62 75 101 0 104 213 193 195 158 170 234 101 242 36 24 131 253 116 71 69 165 134 170)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 194 175 11 157 160 109 84 177 165 255 147 128 11 87 156 188 226 149 208 178 113 157 163 7 176 40 190 227 198 87 66 75 40 196 146 143 24 95 104 49 43 71 222 49 173 135 250 193 52 222 144 207 17 76 200 93 69 168 254 253 154 58 35 80)
  :der-encode
  #t
  :tests
  '(#(332
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 33 0 231 11 1 118 173 54 180 54 173 198 197 31 162 122 12 213 14 165 245 192 125 29 105 81 53 176 18 135 99 34 94 246)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 42 60 2 83 213 77 200 162 167 42 49 248 21 176 187 108 54 216 82 248 219 20 237 241 225 183 28 211 167 56 154 73 72 145 186 250 23 103 184 94 54 247 80 127 165 238 189 61 160 2 66 8 252 254 242 141 86 205 73 169 128 186 20 101)
  :der-encode
  #t
  :tests
  '(#(333
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 127 255 255 255 170 170 170 170 255 255 255 255 255 255 255 255 233 162 83 143 55 178 138 44 81 61 238 64 254 203 183 26)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 61 211 69 17 64 144 50 140 204 11 222 175 130 105 57 101 147 100 87 32 176 179 38 132 157 31 232 30 201 86 249 150 206 238 10 129 215 246 94 18 5 187 27 105 99 168 224 250 207 210 166 18 71 1 177 161 82 9 77 3 122 33 111 78)
  :der-encode
  #t
  :tests
  '(#(334
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 33 0 182 47 38 181 242 162 178 111 109 232 109 66 173 138 19 218 58 179 204 205 4 89 178 1 222 0 158 82 106 223 33 242)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 252 130 7 202 132 196 175 66 41 19 157 233 83 218 59 222 191 105 69 55 193 84 6 225 114 214 49 233 133 145 244 12 52 160 217 87 227 158 150 134 145 78 152 234 70 121 114 206 222 197 165 198 187 85 190 199 145 109 199 31 122 76 111 119)
  :der-encode
  #t
  :tests
  '(#(335
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 33 0 187 29 154 201 73 221 116 140 208 43 187 231 73 189 53 28 213 123 56 187 97 64 61 112 6 134 170 123 76 144 133 30)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 96 191 123 235 128 130 134 216 171 255 96 194 15 174 215 57 151 57 81 36 84 46 107 118 114 8 157 136 193 75 190 213 127 74 249 96 111 155 224 25 158 65 69 105 138 98 173 37 69 18 58 73 235 20 224 195 51 23 246 144 158 57 21 181)
  :der-encode
  #t
  :tests
  '(#(336
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 102 117 90 0 99 140 218 236 28 115 37 19 202 2 52 236 229 37 69 218 193 31 129 110 129 143 114 91 79 96 170 242)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 45 205 105 147 98 211 102 91 108 146 96 96 139 63 175 152 157 69 172 21 185 218 65 251 52 141 85 32 236 223 78 4 3 228 131 103 10 173 239 70 21 199 161 63 225 191 59 249 39 180 228 122 102 118 96 181 5 186 71 175 254 233 42 182)
  :der-encode
  #t
  :tests
  '(#(337
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 85 160 12 159 205 174 187 96 50 81 60 160 35 78 207 255 233 142 190 73 47 223 2 228 140 164 142 152 43 235 54 105)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 230 32 95 135 250 131 124 71 74 43 173 172 103 21 120 222 119 214 160 119 205 40 106 237 69 64 53 8 118 113 20 255 193 141 170 242 70 61 234 128 48 12 31 77 126 37 185 246 3 238 251 46 44 191 1 47 49 168 25 201 28 173 124 242)
  :der-encode
  #t
  :tests
  '(#(338
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 33 0 171 64 25 63 155 93 118 192 100 162 121 64 70 157 159 255 211 29 124 146 95 190 5 201 25 73 29 48 87 214 108 210)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 53 126 118 135 167 146 67 213 224 48 235 18 10 54 82 194 251 149 252 177 72 129 63 61 169 93 4 75 220 49 200 213 227 237 144 234 115 86 124 179 108 15 204 208 33 218 76 204 207 254 64 223 225 182 3 66 137 105 120 139 237 68 22 219)
  :der-encode
  #t
  :tests
  '(#(339
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 33 0 202 2 52 235 181 253 203 19 202 2 52 236 255 255 255 255 203 13 173 187 199 245 73 248 162 107 68 8 208 220 134 0)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 61 151 35 168 234 94 186 255 172 171 139 248 123 29 99 228 45 167 189 249 78 108 37 32 160 120 107 123 83 77 172 243 55 37 219 47 178 114 72 39 74 194 230 33 47 144 113 73 92 144 174 104 77 5 107 87 173 24 231 43 206 143 54 176)
  :der-encode
  #t
  :tests
  '(#(340
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 33 0 191 255 255 255 62 163 103 126 8 43 147 16 87 38 32 174 25 147 58 158 101 178 133 89 135 17 199 114 152 129 90 211)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 75 171 91 104 102 112 144 237 19 229 101 140 254 104 241 36 112 49 174 232 10 140 203 82 186 5 5 117 47 124 211 240 133 199 1 41 193 113 93 150 16 164 27 247 160 99 184 28 27 199 236 52 187 106 28 149 204 208 142 9 241 71 99 67)
  :der-encode
  #t
  :tests
  '(#(341
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 38 102 102 102 59 187 187 187 230 102 102 102 102 102 102 102 91 55 144 46 2 63 171 124 143 5 93 134 229 204 65 244)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 120 1 120 10 170 180 170 243 27 124 148 6 150 9 165 236 246 35 166 221 126 151 150 64 97 198 179 228 16 59 184 74 89 193 17 121 102 36 204 203 186 9 57 75 202 4 175 121 163 28 189 54 23 109 46 196 206 170 112 7 48 213 115 0)
  :der-encode
  #t
  :tests
  '(#(342
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 33 0 191 255 255 255 54 219 109 183 164 146 73 36 146 73 36 146 20 108 87 63 76 109 252 141 8 164 67 226 88 151 11 9)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 85 176 69 29 145 30 156 100 81 106 201 233 218 61 161 112 62 170 164 106 139 10 112 37 200 197 237 56 181 71 71 19 241 253 224 205 238 131 11 241 105 218 156 163 215 13 86 244 96 121 137 135 63 189 207 203 183 64 233 164 47 175 134 10)
  :der-encode
  #t
  :tests
  '(#(343
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 33 0 191 255 255 255 42 170 170 171 127 255 255 255 255 255 255 255 200 21 208 230 11 62 89 110 203 26 211 162 124 253 73 196)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 46 25 234 58 151 58 76 21 88 20 248 167 182 65 225 36 119 210 136 249 88 183 79 96 49 50 99 86 245 6 31 164 26 205 209 190 16 192 82 234 235 156 34 211 240 76 254 198 233 27 210 61 109 57 150 236 169 205 72 94 80 232 89 9)
  :der-encode
  #t
  :tests
  '(#(344
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 127 255 255 255 85 85 85 85 255 255 255 255 255 255 255 255 211 68 167 30 111 101 20 88 162 123 220 129 253 151 110 55)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 110 175 188 182 131 224 94 11 219 42 160 172 6 134 246 11 52 206 102 118 27 126 207 252 205 61 168 254 135 153 214 36 69 71 180 174 202 138 142 86 219 164 87 80 205 159 196 240 227 241 51 61 203 133 85 102 194 155 209 68 87 207 72 155)
  :der-encode
  #t
  :tests
  '(#(345
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 63 255 255 255 128 0 0 0 127 255 255 255 255 255 255 255 222 115 125 86 211 139 207 66 121 220 229 97 126 49 146 170)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 80 245 28 233 89 226 74 200 107 16 84 234 1 108 87 209 218 95 76 238 0 141 216 0 117 122 129 118 6 35 79 120 170 23 243 239 111 122 108 81 56 28 99 214 102 151 177 181 193 150 235 29 167 61 123 115 195 63 145 21 215 67 45 35)
  :der-encode
  #t
  :tests
  '(#(346
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 93 142 205 100 164 238 186 70 104 21 221 243 164 222 154 142 106 189 156 93 176 160 30 184 3 67 85 61 166 72 66 143)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 156 142 243 111 25 129 85 114 219 21 78 143 71 168 220 92 200 7 213 81 167 20 31 237 138 44 21 70 15 231 238 16 102 11 147 102 68 225 204 173 36 87 136 17 221 69 163 37 33 78 40 167 142 153 160 237 45 247 53 79 233 188 160 173)
  :der-encode
  #t
  :tests
  '(#(347
      "point duplication during verification"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 111 35 71 202 183 221 118 133 143 224 85 90 195 188 153 4 140 74 172 175 223 182 188 190 5 234 108 66 196 147 69 105 2 32 86 190 138 174 187 134 39 239 94 55 5 127 235 52 72 247 38 251 96 83 18 153 36 102 238 141 158 215 205 67 193 177)
      #t
      ("PointDuplication"))))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 156 142 243 111 25 129 85 114 219 21 78 143 71 168 220 92 200 7 213 81 167 20 31 237 138 44 21 70 15 231 238 16 153 244 108 152 187 30 51 83 219 168 119 238 34 186 92 218 222 177 215 89 113 102 95 18 210 8 202 176 22 67 95 82)
  :der-encode
  #t
  :tests
  '(#(348
      "duplication bug"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 111 35 71 202 183 221 118 133 143 224 85 90 195 188 153 4 140 74 172 175 223 182 188 190 5 234 108 66 196 147 69 105 2 32 86 190 138 174 187 134 39 239 94 55 5 127 235 52 72 247 38 251 96 83 18 153 36 102 238 141 158 215 205 67 193 177)
      #f
      ("PointDuplication"))))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 242 163 235 196 79 233 68 6 205 109 201 191 199 154 132 96 10 229 104 207 83 49 49 224 21 5 1 38 73 227 155 143 15 136 109 84 159 131 170 97 236 209 238 183 123 167 37 110 152 79 8 140 59 145 131 232 74 22 233 111 147 134 14 79)
  :der-encode
  #t
  :tests
  '(#(349
      "point with x-coordinate 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 37 2 1 1 2 32 85 85 85 85 0 0 0 0 85 85 85 85 85 85 85 85 62 247 168 228 141 7 223 129 166 147 67 150 84 33 12 112)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 227 7 81 1 140 48 44 105 22 194 30 34 57 186 164 31 14 105 197 172 252 55 27 179 227 118 173 54 78 166 56 2 101 156 206 234 224 202 191 238 62 211 58 186 203 196 144 232 113 107 95 191 17 19 118 71 181 36 228 184 85 215 214 89)
  :der-encode
  #t
  :tests
  '(#(350
      "point with x-coordinate 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 32 51 51 51 51 0 0 0 0 51 51 51 51 51 51 51 51 37 199 203 188 84 158 82 231 99 241 245 90 50 122 58 169)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 239 40 52 15 176 39 218 188 5 162 189 59 233 156 108 194 115 10 176 195 216 40 158 106 36 47 43 118 207 204 249 162 64 92 208 83 1 131 219 102 64 17 154 32 173 156 28 36 236 135 212 217 213 222 66 191 250 181 79 214 203 111 158 214)
  :der-encode
  #t
  :tests
  '(#(351
      "comparison with point at infinity "
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 85 85 85 85 0 0 0 0 85 85 85 85 85 85 85 85 62 247 168 228 141 7 223 129 166 147 67 150 84 33 12 112 2 32 51 51 51 51 0 0 0 0 51 51 51 51 51 51 51 51 37 199 203 188 84 158 82 231 99 241 245 90 50 122 58 169)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 1 180 232 235 12 246 243 33 0 111 193 7 36 108 25 150 247 3 79 86 216 39 6 205 143 20 240 93 160 167 197 20 241 88 173 127 243 198 160 139 47 5 124 108 40 37 95 149 19 129 31 32 171 24 247 16 77 245 84 213 145 145 63 120)
  :der-encode
  #t
  :tests
  '(#(352
      "extreme value for k and edgecase s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 124 242 123 24 141 3 79 126 138 82 56 3 4 181 26 195 192 137 105 226 119 242 27 53 166 11 72 252 71 102 153 120 2 32 85 85 85 85 0 0 0 0 85 85 85 85 85 85 85 85 62 247 168 228 141 7 223 129 166 147 67 150 84 33 12 112)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 11 28 197 128 187 111 113 228 191 251 115 26 30 116 249 41 192 74 16 255 148 172 35 18 53 157 63 19 33 60 59 76 135 2 19 194 173 54 101 163 210 67 220 181 87 128 226 28 134 1 197 249 128 63 39 227 31 242 47 140 231 126 115 158)
  :der-encode
  #t
  :tests
  '(#(353
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 124 242 123 24 141 3 79 126 138 82 56 3 4 181 26 195 192 137 105 226 119 242 27 53 166 11 72 252 71 102 153 120 2 33 0 182 219 109 182 36 146 73 37 73 36 146 73 36 146 73 36 98 91 215 160 155 236 76 168 27 205 217 248 253 107 99 204)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 38 153 115 111 219 96 62 144 177 217 160 79 205 144 237 57 117 110 213 103 33 64 51 221 181 173 87 146 19 8 157 46 150 172 251 11 174 236 156 254 45 241 80 170 6 176 27 165 141 3 22 43 73 124 87 160 211 5 173 180 197 247 243 117)
  :der-encode
  #t
  :tests
  '(#(354
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 124 242 123 24 141 3 79 126 138 82 56 3 4 181 26 195 192 137 105 226 119 242 27 53 166 11 72 252 71 102 153 120 2 33 0 204 204 204 204 0 0 0 0 204 204 204 204 204 204 204 204 151 31 46 241 82 121 75 157 143 199 213 104 201 232 234 167)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 42 48 33 6 158 136 65 249 214 154 212 194 153 43 2 220 122 47 84 71 175 165 90 70 131 198 69 28 220 78 114 134 0 202 65 35 82 6 17 8 92 177 14 168 11 219 133 26 11 9 221 121 112 60 66 6 6 255 101 141 186 148 195 69)
  :der-encode
  #t
  :tests
  '(#(355
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 124 242 123 24 141 3 79 126 138 82 56 3 4 181 26 195 192 137 105 226 119 242 27 53 166 11 72 252 71 102 153 120 2 32 51 51 51 51 0 0 0 0 51 51 51 51 51 51 51 51 37 199 203 188 84 158 82 231 99 241 245 90 50 122 58 170)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 83 82 18 4 13 131 177 128 44 212 169 192 182 206 176 168 157 230 139 121 77 223 151 156 47 251 154 114 229 158 234 0 118 80 22 98 23 235 57 244 224 63 236 212 142 158 116 72 3 45 162 97 202 166 141 33 223 99 155 166 142 230 103 166)
  :der-encode
  #t
  :tests
  '(#(356
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 124 242 123 24 141 3 79 126 138 82 56 3 4 181 26 195 192 137 105 226 119 242 27 53 166 11 72 252 71 102 153 120 2 32 73 36 146 72 219 109 182 219 182 219 109 182 219 109 182 219 90 139 35 13 11 43 81 220 215 235 240 201 254 247 193 133)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 136 74 134 168 153 129 226 22 115 41 22 86 159 158 63 32 56 6 53 158 249 185 206 214 30 187 130 213 248 3 0 69 7 156 238 247 27 143 158 29 235 41 174 221 175 59 204 120 13 255 136 249 43 112 92 104 245 114 236 72 17 57 184 74)
  :der-encode
  #t
  :tests
  '(#(357
      "extreme value for k"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 124 242 123 24 141 3 79 126 138 82 56 3 4 181 26 195 192 137 105 226 119 242 27 53 166 11 72 252 71 102 153 120 2 32 22 164 80 46 39 129 225 26 200 44 188 157 30 221 140 152 21 132 209 62 24 65 30 47 110 4 120 195 68 22 227 187)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 205 176 49 240 224 188 67 47 11 149 155 194 112 69 111 106 80 6 53 115 44 118 118 64 16 165 234 32 245 74 113 216 92 246 206 24 65 28 220 181 5 110 66 128 228 73 195 173 109 249 15 154 226 222 164 171 192 130 128 217 151 73 100 61)
  :der-encode
  #t
  :tests
  '(#(358
      "extreme value for k and edgecase s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 107 23 209 242 225 44 66 71 248 188 230 229 99 164 64 242 119 3 125 129 45 235 51 160 244 161 57 69 216 152 194 150 2 32 85 85 85 85 0 0 0 0 85 85 85 85 85 85 85 85 62 247 168 228 141 7 223 129 166 147 67 150 84 33 12 112)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 99 9 255 211 197 89 254 27 9 103 33 52 97 216 132 181 141 28 213 73 219 194 151 16 29 157 181 167 227 252 243 211 136 245 250 134 189 49 4 60 166 7 124 209 218 75 40 63 65 121 162 62 157 104 15 102 162 8 26 197 2 115 39 20)
  :der-encode
  #t
  :tests
  '(#(359
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 107 23 209 242 225 44 66 71 248 188 230 229 99 164 64 242 119 3 125 129 45 235 51 160 244 161 57 69 216 152 194 150 2 33 0 182 219 109 182 36 146 73 37 73 36 146 73 36 146 73 36 98 91 215 160 155 236 76 168 27 205 217 248 253 107 99 204)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 110 86 79 248 65 46 146 245 238 35 253 41 156 146 197 126 182 239 12 189 23 194 135 33 185 38 37 147 141 14 171 28 255 137 65 6 136 21 201 173 45 59 127 5 132 92 65 196 172 235 185 43 61 193 85 170 122 81 4 105 72 164 238 208)
  :der-encode
  #t
  :tests
  '(#(360
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 107 23 209 242 225 44 66 71 248 188 230 229 99 164 64 242 119 3 125 129 45 235 51 160 244 161 57 69 216 152 194 150 2 33 0 204 204 204 204 0 0 0 0 204 204 204 204 204 204 204 204 151 31 46 241 82 121 75 157 143 199 213 104 201 232 234 167)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 131 254 120 45 144 96 35 218 123 167 0 208 151 248 204 150 24 203 35 241 205 137 194 19 185 139 143 154 232 252 2 61 177 93 227 139 133 109 178 77 77 108 199 155 109 118 31 189 154 201 77 173 95 23 40 131 186 9 39 139 168 109 153 85)
  :der-encode
  #t
  :tests
  '(#(361
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 107 23 209 242 225 44 66 71 248 188 230 229 99 164 64 242 119 3 125 129 45 235 51 160 244 161 57 69 216 152 194 150 2 32 51 51 51 51 0 0 0 0 51 51 51 51 51 51 51 51 37 199 203 188 84 158 82 231 99 241 245 90 50 122 58 170)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 209 221 220 148 122 175 158 105 48 204 70 7 47 44 242 182 142 181 227 45 207 78 232 78 160 100 122 32 27 41 159 188 107 56 32 97 48 153 67 171 239 165 147 142 132 101 226 246 175 208 81 234 185 116 210 97 121 124 212 131 147 64 151 164)
  :der-encode
  #t
  :tests
  '(#(362
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 107 23 209 242 225 44 66 71 248 188 230 229 99 164 64 242 119 3 125 129 45 235 51 160 244 161 57 69 216 152 194 150 2 32 73 36 146 72 219 109 182 219 182 219 109 182 219 109 182 219 90 139 35 13 11 43 81 220 215 235 240 201 254 247 193 133)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 209 124 28 85 5 188 113 1 69 239 116 152 72 100 254 134 30 100 48 44 22 187 74 75 198 155 71 80 123 63 2 53 65 72 14 4 123 25 191 228 187 136 94 193 39 207 37 77 177 4 26 225 213 232 253 119 224 130 148 211 152 182 46 176)
  :der-encode
  #t
  :tests
  '(#(363
      "extreme value for k"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 107 23 209 242 225 44 66 71 248 188 230 229 99 164 64 242 119 3 125 129 45 235 51 160 244 161 57 69 216 152 194 150 2 32 22 164 80 46 39 129 225 26 200 44 188 157 30 221 140 152 21 132 209 62 24 65 30 47 110 4 120 195 68 22 227 187)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 107 23 209 242 225 44 66 71 248 188 230 229 99 164 64 242 119 3 125 129 45 235 51 160 244 161 57 69 216 152 194 150 79 227 66 226 254 26 127 155 142 231 235 74 124 15 158 22 43 206 51 87 107 49 94 206 203 182 64 104 55 191 81 245)
  :der-encode
  #t
  :tests
  '(#(364
      "testing point duplication"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 87 49 183 196 189 4 203 158 251 131 105 53 255 46 84 123 242 144 159 134 130 74 244 216 223 120 172 247 109 123 61 78 2 32 36 146 73 36 109 182 219 109 219 109 182 219 109 182 219 109 173 69 145 134 133 149 168 238 107 245 248 100 255 123 224 194)
      #f
      ())
    #(365
      "testing point duplication"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 168 206 72 58 66 251 52 98 4 124 150 202 0 209 171 131 202 86 91 39 36 204 169 172 20 65 29 203 142 231 232 3 2 32 36 146 73 36 109 182 219 109 219 109 182 219 109 182 219 109 173 69 145 134 133 149 168 238 107 245 248 100 255 123 224 194)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 107 23 209 242 225 44 66 71 248 188 230 229 99 164 64 242 119 3 125 129 45 235 51 160 244 161 57 69 216 152 194 150 176 28 189 28 1 229 128 101 113 24 20 181 131 240 97 233 212 49 204 169 148 206 161 49 52 73 191 151 200 64 174 10)
  :der-encode
  #t
  :tests
  '(#(366
      "testing point duplication"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 87 49 183 196 189 4 203 158 251 131 105 53 255 46 84 123 242 144 159 134 130 74 244 216 223 120 172 247 109 123 61 78 2 32 36 146 73 36 109 182 219 109 219 109 182 219 109 182 219 109 173 69 145 134 133 149 168 238 107 245 248 100 255 123 224 194)
      #f
      ())
    #(367
      "testing point duplication"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 168 206 72 58 66 251 52 98 4 124 150 202 0 209 171 131 202 86 91 39 36 204 169 172 20 65 29 203 142 231 232 3 2 32 36 146 73 36 109 182 219 109 219 109 182 219 109 182 219 109 173 69 145 134 133 149 168 238 107 245 248 100 255 123 224 194)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 4 170 236 115 99 87 38 242 19 251 138 158 100 218 59 134 50 228 20 149 169 68 208 4 91 82 46 186 114 64 250 213 135 217 49 87 152 170 163 165 186 1 119 87 135 206 208 94 170 247 180 224 159 200 29 109 26 165 70 232 54 93 82 93)
  :der-encode
  #t
  :tests
  '(#(368
      "pseudorandom signature"
      #vu8()
      #vu8(48 68 2 32 99 240 24 153 180 176 191 233 220 153 41 253 69 38 145 155 152 26 205 167 129 4 78 227 210 195 55 191 95 199 72 48 2 32 89 19 129 189 241 177 169 176 16 32 184 115 20 161 40 208 110 72 51 52 43 242 50 119 159 97 72 7 57 97 57 39)
      #t
      ())
    #(369
      "pseudorandom signature"
      #vu8(77 115 103)
      #vu8(48 68 2 32 16 34 139 234 247 115 202 239 242 42 148 96 46 158 255 25 35 220 197 27 39 127 100 180 130 234 99 33 140 53 11 13 2 32 33 4 200 52 63 137 112 162 140 158 178 33 166 60 133 126 243 133 231 88 234 204 197 247 210 174 151 85 83 161 83 75)
      #t
      ())
    #(370
      "pseudorandom signature"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 230 225 184 194 14 157 0 240 182 207 27 44 57 202 205 156 80 238 63 153 5 83 37 15 7 74 74 62 237 58 254 67 2 32 82 243 190 26 226 210 249 178 191 234 142 140 34 217 90 244 87 69 129 169 244 176 154 137 247 182 164 173 28 91 39 118)
      #t
      ())
    #(371
      "pseudorandom signature"
      #vu8(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      #vu8(48 69 2 32 32 246 32 62 72 252 76 102 174 138 116 236 97 213 18 71 114 218 173 5 138 116 184 113 145 77 55 223 233 212 9 193 2 33 0 139 104 222 122 71 134 226 155 58 114 110 167 253 142 242 165 133 181 200 218 223 17 40 31 44 170 34 142 179 223 63 150)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 79 51 124 207 214 119 38 168 5 228 241 96 10 226 132 157 243 128 126 202 17 115 128 35 159 189 129 105 0 0 0 0 237 157 234 18 76 200 195 150 65 100 17 233 136 195 15 66 126 181 4 175 67 163 20 108 213 223 126 166 6 102 214 133)
  :der-encode
  #t
  :tests
  '(#(372
      "x-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 32 125 182 5 228 44 150 3 93 84 53 44 91 197 92 242 125 93 237 66 203 107 66 189 174 228 153 234 100 120 77 182 2 32 127 131 192 145 146 170 4 206 3 142 134 22 153 160 242 124 165 91 243 39 65 219 201 91 191 153 125 238 87 245 56 252)
      #t
      ())
    #(373
      "x-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 32 103 194 89 162 88 0 137 237 82 120 7 85 199 94 168 162 107 144 87 204 25 149 228 176 68 200 23 108 239 227 204 123 2 33 0 212 143 99 211 19 51 5 75 189 127 171 103 109 32 123 189 196 222 161 207 27 79 113 172 235 3 123 141 199 247 149 85)
      #t
      ())
    #(374
      "x-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 32 93 198 117 162 190 174 109 238 177 239 104 46 146 44 95 228 113 86 224 105 172 208 128 115 160 248 217 24 77 107 170 108 2 33 0 227 60 173 76 228 143 34 255 110 80 180 123 165 221 68 4 106 120 237 120 115 207 211 162 200 178 212 180 154 173 37 128)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 60 240 61 97 77 137 57 207 212 153 160 120 115 250 194 129 97 143 6 184 255 135 232 1 92 63 73 114 101 0 73 53 132 250 23 77 121 28 114 191 44 227 136 10 137 96 221 42 124 122 19 56 168 47 133 169 229 156 219 222 128 0 0 0)
  :der-encode
  #t
  :tests
  '(#(375
      "y-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 32 26 59 92 75 74 47 176 194 249 239 176 40 169 239 199 137 147 243 21 22 131 206 223 118 33 64 9 234 65 141 62 93 2 33 0 232 46 135 51 46 123 208 4 202 217 177 56 87 147 156 1 70 127 193 195 228 32 126 250 69 239 130 121 133 168 36 53)
      #t
      ())
    #(376
      "y-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 70 2 33 0 140 68 239 102 10 184 147 111 224 21 113 22 132 53 193 145 141 0 91 210 78 199 111 114 206 168 240 250 235 159 119 122 2 33 0 215 147 220 179 166 212 126 36 81 231 214 46 28 40 74 226 91 191 170 8 32 245 138 218 183 156 32 27 168 211 74 62)
      #t
      ())
    #(377
      "y-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 66 39 163 219 255 122 197 53 60 211 44 139 52 86 57 122 126 231 192 230 128 150 21 252 238 70 107 29 205 227 235 73 2 32 34 234 106 216 17 178 127 148 74 190 112 180 127 73 13 37 87 96 248 195 86 46 111 126 44 29 163 219 228 94 181 64)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 60 240 61 97 77 137 57 207 212 153 160 120 115 250 194 129 97 143 6 184 255 135 232 1 92 63 73 114 101 0 73 53 123 5 232 177 134 227 141 65 211 28 119 245 118 159 34 213 131 133 236 200 87 208 122 86 26 99 36 33 127 255 255 255)
  :der-encode
  #t
  :tests
  '(#(378
      "y-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 32 54 99 97 98 219 133 232 211 0 238 69 197 27 157 160 10 124 44 255 217 166 251 32 7 97 166 71 204 191 93 126 142 2 33 0 157 24 55 76 241 248 122 144 81 229 99 131 142 117 114 141 63 47 247 168 108 16 41 40 81 182 206 136 92 91 12 118)
      #t
      ())
    #(379
      "y-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 70 2 33 0 166 55 252 151 47 56 0 112 91 141 82 147 9 99 130 209 193 174 127 103 11 228 80 17 184 189 41 5 159 48 73 189 2 33 0 156 74 187 107 190 6 85 45 93 89 139 7 114 140 202 237 23 56 234 201 252 152 95 215 134 251 192 167 52 125 168 40)
      #t
      ())
    #(380
      "y-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 118 191 199 79 59 72 139 52 131 90 238 150 238 150 6 127 83 218 2 28 255 64 32 161 9 150 214 147 58 39 192 50 2 32 47 209 101 143 228 224 155 46 113 27 16 17 127 92 55 217 195 234 139 111 85 205 241 229 165 221 174 44 150 109 126 78)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 40 41 195 31 170 46 64 14 52 78 217 75 202 63 205 5 69 149 110 188 254 138 208 246 223 165 255 142 255 255 255 255 160 26 175 175 0 14 82 88 88 85 175 167 103 106 222 40 65 19 9 144 82 223 87 231 235 59 211 126 190 185 34 46)
  :der-encode
  #t
  :tests
  '(#(381
      "x-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 33 0 142 12 53 36 14 158 91 123 242 171 53 26 251 19 172 38 85 101 59 174 171 194 71 202 178 199 28 196 13 164 76 0 2 32 7 156 191 140 155 169 181 54 8 178 25 214 152 152 117 217 96 189 239 205 226 36 207 122 198 248 231 145 173 170 67 100)
      #t
      ())
    #(382
      "x-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 33 0 246 206 182 200 247 108 51 127 81 244 236 56 89 235 22 202 236 150 159 192 42 97 222 193 167 15 164 34 59 223 178 84 2 32 16 192 51 66 152 169 138 110 92 18 233 192 202 213 135 220 171 67 25 155 67 205 243 120 91 217 195 107 48 146 92 207)
      #t
      ())
    #(383
      "x-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 32 8 48 0 168 230 18 25 57 244 184 54 18 114 123 32 145 216 171 187 223 156 146 191 155 220 172 232 54 97 80 206 111 2 33 0 186 105 63 78 11 150 220 190 234 167 140 13 116 67 101 118 17 81 116 3 35 195 70 165 77 116 179 50 86 141 147 159)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 255 255 255 249 72 8 30 106 4 88 221 143 158 115 143 38 101 255 144 89 173 106 172 7 8 49 140 76 169 167 164 245 90 138 188 186 45 218 132 116 49 30 229 65 73 185 115 202 224 192 251 137 85 122 208 191 120 230 82 154 22 99 189 115)
  :der-encode
  #t
  :tests
  '(#(384
      "x-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 70 2 33 0 138 27 214 239 40 57 72 24 75 90 50 211 24 96 233 124 192 196 80 147 31 2 76 48 187 59 38 31 37 82 205 199 2 33 0 183 229 12 5 19 168 236 115 13 17 33 9 233 39 97 162 17 81 228 190 198 130 104 229 199 158 248 4 183 87 222 170)
      #t
      ())
    #(385
      "x-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 32 12 24 51 123 112 27 96 0 211 206 53 116 102 76 93 196 78 173 106 31 46 224 194 122 114 142 160 176 243 121 144 185 2 33 0 195 29 185 177 153 179 225 112 156 68 164 65 24 209 215 203 117 50 78 232 42 218 35 24 116 78 184 150 81 230 246 192)
      #t
      ())
    #(386
      "x-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 32 33 51 214 252 120 179 148 212 195 78 23 49 32 177 228 140 127 237 123 137 160 62 85 202 185 11 19 103 21 91 67 138 2 33 0 146 147 230 127 244 185 129 229 12 72 176 48 79 123 30 107 83 4 22 238 53 24 131 2 177 221 47 33 229 203 71 154)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 0 0 0 3 250 21 249 99 148 157 95 3 166 245 199 248 111 158 0 21 238 178 58 235 191 241 23 57 55 186 116 142 16 153 135 32 112 232 232 124 85 95 161 54 89 204 165 215 250 220 252 176 2 62 168 137 84 140 164 138 242 186 126 113)
  :der-encode
  #t
  :tests
  '(#(387
      "x-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 32 54 4 169 142 146 107 47 157 117 133 227 65 165 236 199 58 78 129 28 92 141 168 43 101 121 15 248 161 23 167 91 218 2 33 0 160 255 7 119 76 154 13 75 248 61 178 148 185 112 242 105 108 194 154 115 99 122 164 84 212 211 180 94 185 100 187 136)
      #t
      ())
    #(388
      "x-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 32 107 247 232 248 188 58 90 46 34 73 201 39 37 207 13 255 169 183 46 173 60 197 109 5 16 122 77 88 117 99 190 180 2 33 0 160 83 50 181 180 36 217 123 252 8 15 224 53 52 112 97 9 49 205 83 141 46 75 207 120 198 252 89 180 129 210 113)
      #t
      ())
    #(389
      "x-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 33 0 151 224 153 199 48 136 252 55 5 33 128 208 72 57 135 229 12 21 92 153 60 186 46 108 147 221 155 234 87 152 226 195 2 32 74 158 197 240 87 57 239 180 234 147 121 14 162 44 63 196 35 208 174 177 9 205 19 251 27 68 216 126 165 44 167 31)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 188 187 41 20 199 159 4 94 170 110 203 188 97 40 22 179 190 93 45 103 150 112 125 129 37 233 248 81 193 138 240 21 0 0 0 0 19 82 187 74 15 162 234 76 206 185 171 99 221 104 74 222 90 17 39 188 243 0 166 152 167 25 59 194)
  :der-encode
  #t
  :tests
  '(#(390
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 32 57 136 188 227 25 90 175 124 155 0 138 159 22 99 165 225 58 139 238 125 219 163 58 27 197 213 90 164 159 211 144 61 2 33 0 195 159 97 72 40 226 247 26 76 102 216 109 28 62 199 226 131 247 104 3 60 255 94 208 158 147 227 33 141 157 241 201)
      #t
      ())
    #(391
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 70 2 33 0 195 235 46 143 120 163 31 34 29 96 3 185 73 248 223 108 126 193 224 197 56 3 35 30 18 67 140 178 177 177 217 186 2 33 0 185 124 193 252 206 29 141 219 181 225 191 166 213 48 13 124 172 21 84 148 96 60 102 247 238 232 184 233 201 100 52 49)
      #t
      ())
    #(392
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 70 2 33 0 137 224 194 60 207 97 230 141 192 203 151 119 241 139 24 200 75 43 2 180 54 12 121 234 164 13 70 235 231 243 217 177 2 33 0 165 208 22 78 57 135 100 231 209 45 105 103 80 252 176 146 33 28 34 223 221 57 65 229 156 215 59 196 142 185 20 150)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 188 187 41 20 199 159 4 94 170 110 203 188 97 40 22 179 190 93 45 103 150 112 125 129 37 233 248 81 193 138 240 21 255 255 255 254 236 173 68 182 240 93 21 179 49 70 84 156 34 151 181 34 165 238 216 67 12 255 89 103 88 230 196 61)
  :der-encode
  #t
  :tests
  '(#(393
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 33 0 187 193 187 79 252 235 97 160 219 229 161 45 150 56 220 159 0 78 121 124 247 44 219 168 216 121 253 188 216 77 236 20 2 32 101 167 193 125 154 104 146 207 84 85 161 144 79 221 155 87 206 43 65 84 155 155 44 165 215 209 130 195 5 233 162 2)
      #t
      ())
    #(394
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 32 47 9 58 51 198 158 234 248 71 227 50 177 43 208 117 139 228 29 207 117 216 19 24 120 241 110 111 18 28 179 244 241 2 33 0 147 195 4 223 7 74 239 140 194 200 205 222 175 253 166 126 178 66 142 167 211 161 19 213 19 99 225 120 216 6 143 113)
      #t
      ())
    #(395
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 70 2 33 0 182 134 119 77 179 146 1 169 70 43 150 132 42 219 238 161 106 230 0 55 137 187 24 33 77 171 158 90 117 139 246 239 2 33 0 255 198 179 150 41 59 148 201 111 203 50 95 174 18 118 8 235 253 17 138 70 247 21 180 155 145 140 170 251 96 42 52)
      #t
      ())))
