(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 41 39 177 5 18 186 227 237 220 254 70 120 40 18 139 173 41 3 38 153 25 247 8 96 105 200 196 223 108 115 40 56 199 120 121 100 234 172 0 229 146 31 177 73 138 96 244 96 103 102 179 217 104 80 1 85 141 26 151 78 115 65 81 62)
  :der-encode
  #t
  :tests
  '(#(1
      "signature malleability"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 32 76 214 11 133 93 68 47 91 60 123 17 235 108 78 10 231 82 95 231 16 250 185 170 124 119 166 127 121 230 250 221 118)
      #t
      ())
    #(2
      "Legacy:ASN encoding of s misses leading 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 32 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #t
      ("MissingZero"))
    #(3
      "valid"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #t
      ())
    #(4
      "long form encoding of length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 129 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ("BER"))
    #(5
      "length of sequence contains leading 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 130 0 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ("BER"))
    #(6
      "wrong length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(7
      "wrong length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(8
      "uint32 overflow in length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 133 1 0 0 0 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(9
      "uint64 overflow in length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 137 1 0 0 0 0 0 0 0 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(10
      "length of sequence = 2**31 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 132 127 255 255 255 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(11
      "length of sequence = 2**32 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 132 255 255 255 255 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(12
      "length of sequence = 2**40 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 133 255 255 255 255 255 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(13
      "length of sequence = 2**64 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 136 255 255 255 255 255 255 255 255 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(14
      "incorrect length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 255 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(15
      "indefinite length without termination"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(16
      "indefinite length without termination"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 128 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(17
      "indefinite length without termination"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 128 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(18
      "removing sequence"
      #vu8(49 50 51 52 48 48)
      #vu8()
      #f
      ())
    #(19
      "lonely sequence tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48)
      #f
      ())
    #(20
      "appending 0's to sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219 0 0)
      #f
      ())
    #(21
      "prepending 0's to sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 0 0 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(22
      "appending unused 0's to sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219 0 0)
      #f
      ())
    #(23
      "appending null value to sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219 5 0)
      #f
      ())
    #(24
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 74 73 129 119 48 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(25
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 37 0 48 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(26
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 48 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219 0 4 222 173 190 239)
      #f
      ())
    #(27
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 74 34 37 73 129 119 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(28
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 34 36 37 0 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(29
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 77 34 34 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 0 4 222 173 190 239 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(30
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 74 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 34 38 73 129 119 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(31
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 34 37 37 0 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(32
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 77 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 34 35 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219 0 4 222 173 190 239)
      #f
      ())
    #(33
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 77 170 0 187 0 205 0 48 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(34
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 75 170 2 170 187 48 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(35
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 77 34 40 170 0 187 0 205 0 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(36
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 75 34 38 170 2 170 187 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(37
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 77 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 34 41 170 0 187 0 205 0 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(38
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 75 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 34 39 170 2 170 187 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(39
      "truncated length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 129)
      #f
      ())
    #(40
      "using composition with indefinite length"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 48 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219 0 0)
      #f
      ())
    #(41
      "using composition with indefinite length"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 34 128 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 0 0 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(42
      "using composition with indefinite length"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 34 128 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219 0 0)
      #f
      ())
    #(43
      "using composition with wrong tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 49 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219 0 0)
      #f
      ())
    #(44
      "using composition with wrong tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 34 128 3 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 0 0 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(45
      "using composition with wrong tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 34 128 3 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219 0 0)
      #f
      ())
    #(46
      "Replacing sequence with NULL"
      #vu8(49 50 51 52 48 48)
      #vu8(5 0)
      #f
      ())
    #(47
      "changing tag value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(46 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(48
      "changing tag value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(47 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(49
      "changing tag value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(49 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(50
      "changing tag value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(50 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(51
      "changing tag value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(255 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(52
      "dropping value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 0)
      #f
      ())
    #(53
      "using composition for sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 48 1 2 48 68 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(54
      "truncated sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71)
      #f
      ())
    #(55
      "truncated sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(56
      "indefinite length"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219 0 0)
      #f
      ("BER"))
    #(57
      "indefinite length with truncated delimiter"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219 0)
      #f
      ())
    #(58
      "indefinite length with additional element"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219 5 0 0 0)
      #f
      ())
    #(59
      "indefinite length with truncated element"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219 6 8 17 34 0 0)
      #f
      ())
    #(60
      "indefinite length with garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219 0 0 254 2 190 239)
      #f
      ())
    #(61
      "indefinite length with nonempty EOC"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219 0 2 190 239)
      #f
      ())
    #(62
      "prepend empty sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 48 0 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(63
      "append empty sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219 48 0)
      #f
      ())
    #(64
      "append garbage with high tag number"
      #vu8(49 50 51 52 48 48)
      #vu8(48 72 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219 191 127 0)
      #f
      ())
    #(65
      "sequence of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 48 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(66
      "truncated sequence: removed last 1 elements"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24)
      #f
      ())
    #(67
      "repeating element in sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 104 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(68
      "long form encoding of length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 129 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ("BER"))
    #(69
      "long form encoding of length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 129 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ("BER"))
    #(70
      "length of integer contains leading 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 130 0 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ("BER"))
    #(71
      "length of integer contains leading 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 130 0 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ("BER"))
    #(72
      "wrong length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(73
      "wrong length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 31 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(74
      "wrong length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 34 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(75
      "wrong length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 32 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(76
      "uint32 overflow in length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 74 2 133 1 0 0 0 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(77
      "uint32 overflow in length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 74 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 133 1 0 0 0 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(78
      "uint64 overflow in length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 78 2 137 1 0 0 0 0 0 0 0 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(79
      "uint64 overflow in length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 78 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 137 1 0 0 0 0 0 0 0 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(80
      "length of integer = 2**31 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 2 132 127 255 255 255 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(81
      "length of integer = 2**31 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 132 127 255 255 255 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(82
      "length of integer = 2**32 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 2 132 255 255 255 255 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(83
      "length of integer = 2**32 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 132 255 255 255 255 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(84
      "length of integer = 2**40 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 74 2 133 255 255 255 255 255 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(85
      "length of integer = 2**40 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 74 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 133 255 255 255 255 255 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(86
      "length of integer = 2**64 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 77 2 136 255 255 255 255 255 255 255 255 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(87
      "length of integer = 2**64 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 77 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 136 255 255 255 255 255 255 255 255 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(88
      "incorrect length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 255 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(89
      "incorrect length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 255 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(90
      "removing integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 35 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(91
      "lonely integer tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48 36 2 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(92
      "lonely integer tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48 35 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2)
      #f
      ())
    #(93
      "appending 0's to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 34 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 0 0 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(94
      "appending 0's to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 35 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219 0 0)
      #f
      ())
    #(95
      "prepending 0's to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 34 0 0 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ("BER"))
    #(96
      "prepending 0's to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 35 0 0 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ("BER"))
    #(97
      "appending unused 0's to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 0 0 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(98
      "appending null value to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 34 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 5 0 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(99
      "appending null value to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 35 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219 5 0)
      #f
      ())
    #(100
      "truncated length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 37 2 129 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(101
      "truncated length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 36 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 129)
      #f
      ())
    #(102
      "Replacing integer with NULL"
      #vu8(49 50 51 52 48 48)
      #vu8(48 37 5 0 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(103
      "Replacing integer with NULL"
      #vu8(49 50 51 52 48 48)
      #vu8(48 36 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 5 0)
      #f
      ())
    #(104
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 0 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(105
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 1 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(106
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 3 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(107
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 4 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(108
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 255 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(109
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 0 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(110
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 1 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(111
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 3 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(112
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 4 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(113
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 255 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(114
      "dropping value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 37 2 0 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(115
      "dropping value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 36 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 0)
      #f
      ())
    #(116
      "using composition for integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 34 36 2 1 43 2 31 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(117
      "using composition for integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 34 37 2 1 0 2 32 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(118
      "modify first byte of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 41 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(119
      "modify first byte of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 2 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(120
      "modify last byte of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 152 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(121
      "modify last byte of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 91)
      #f
      ())
    #(122
      "truncated integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 31 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(123
      "truncated integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 31 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(124
      "truncated integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 32 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71)
      #f
      ())
    #(125
      "leading ff in integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 255 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(126
      "leading ff in integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 34 255 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(127
      "replaced integer by infinity"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 9 1 128 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(128
      "replaced integer by infinity"
      #vu8(49 50 51 52 48 48)
      #vu8(48 37 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 9 1 128)
      #f
      ())
    #(129
      "replacing integer with zero"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 0 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(130
      "replacing integer with zero"
      #vu8(49 50 51 52 48 48)
      #vu8(48 37 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 1 0)
      #f
      ())
    #(131
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 1 43 163 168 189 107 148 213 237 128 166 217 209 25 10 67 110 188 204 8 51 73 6 134 222 172 134 53 188 185 191 83 105 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(132
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 255 43 163 168 191 107 148 213 235 128 166 217 209 25 10 67 111 66 254 18 215 250 215 73 212 197 18 160 54 192 249 8 199 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(133
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 212 92 87 65 148 107 42 19 127 89 38 46 230 245 188 145 0 26 242 122 94 17 23 166 71 51 149 6 66 163 209 232 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(134
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 212 92 87 64 148 107 42 20 127 89 38 46 230 245 188 144 189 1 237 40 5 40 182 43 58 237 95 201 63 6 247 57 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(135
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 254 212 92 87 66 148 107 42 18 127 89 38 46 230 245 188 145 67 51 247 204 182 249 121 33 83 121 202 67 70 64 172 151 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(136
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 1 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(137
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 212 92 87 65 148 107 42 19 127 89 38 46 230 245 188 145 0 26 242 122 94 17 23 166 71 51 149 6 66 163 209 232 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(138
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 1 179 41 244 120 162 187 208 166 195 132 238 20 147 177 245 24 39 110 14 74 83 117 146 141 111 205 22 12 17 203 109 44)
      #f
      ())
    #(139
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 32 179 41 244 122 162 187 208 164 195 132 238 20 147 177 245 24 173 160 24 239 5 70 85 131 136 89 128 134 25 5 34 138)
      #f
      ())
    #(140
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 255 76 214 11 134 93 68 47 90 60 123 17 235 108 78 10 231 149 120 236 99 83 162 11 247 131 236 180 182 234 151 184 37)
      #f
      ())
    #(141
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 254 76 214 11 135 93 68 47 89 60 123 17 235 108 78 10 231 216 145 241 181 172 138 109 114 144 50 233 243 238 52 146 212)
      #f
      ())
    #(142
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 1 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(143
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 32 76 214 11 134 93 68 47 90 60 123 17 235 108 78 10 231 149 120 236 99 83 162 11 247 131 236 180 182 234 151 184 37)
      #f
      ())
    #(144
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 0 2 1 0)
      #f
      ("EdgeCase"))
    #(145
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 0 2 1 1)
      #f
      ("EdgeCase"))
    #(146
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 0 2 1 255)
      #f
      ("EdgeCase"))
    #(147
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 0 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81)
      #f
      ("EdgeCase"))
    #(148
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 0 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80)
      #f
      ("EdgeCase"))
    #(149
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 0 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82)
      #f
      ("EdgeCase"))
    #(150
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 0 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255)
      #f
      ("EdgeCase"))
    #(151
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 0 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0)
      #f
      ("EdgeCase"))
    #(152
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 8 2 1 0 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(153
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 0 9 1 66)
      #f
      ("EdgeCase"))
    #(154
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 2 1 0)
      #f
      ("EdgeCase"))
    #(155
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 2 1 1)
      #f
      ("EdgeCase"))
    #(156
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 2 1 255)
      #f
      ("EdgeCase"))
    #(157
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 1 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81)
      #f
      ("EdgeCase"))
    #(158
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 1 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80)
      #f
      ("EdgeCase"))
    #(159
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 1 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82)
      #f
      ("EdgeCase"))
    #(160
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 1 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255)
      #f
      ("EdgeCase"))
    #(161
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 1 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0)
      #f
      ("EdgeCase"))
    #(162
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 8 2 1 1 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(163
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 9 1 66)
      #f
      ("EdgeCase"))
    #(164
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 255 2 1 0)
      #f
      ("EdgeCase"))
    #(165
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 255 2 1 1)
      #f
      ("EdgeCase"))
    #(166
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 255 2 1 255)
      #f
      ("EdgeCase"))
    #(167
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 255 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81)
      #f
      ("EdgeCase"))
    #(168
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 255 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80)
      #f
      ("EdgeCase"))
    #(169
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 255 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82)
      #f
      ("EdgeCase"))
    #(170
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 255 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255)
      #f
      ("EdgeCase"))
    #(171
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 255 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0)
      #f
      ("EdgeCase"))
    #(172
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 8 2 1 255 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(173
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 255 9 1 66)
      #f
      ("EdgeCase"))
    #(174
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81 2 1 0)
      #f
      ("EdgeCase"))
    #(175
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81 2 1 1)
      #f
      ("EdgeCase"))
    #(176
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81 2 1 255)
      #f
      ("EdgeCase"))
    #(177
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81)
      #f
      ("EdgeCase"))
    #(178
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80)
      #f
      ("EdgeCase"))
    #(179
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82)
      #f
      ("EdgeCase"))
    #(180
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255)
      #f
      ("EdgeCase"))
    #(181
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0)
      #f
      ("EdgeCase"))
    #(182
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 40 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(183
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81 9 1 66)
      #f
      ("EdgeCase"))
    #(184
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80 2 1 0)
      #f
      ("EdgeCase"))
    #(185
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80 2 1 1)
      #f
      ("EdgeCase"))
    #(186
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80 2 1 255)
      #f
      ("EdgeCase"))
    #(187
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81)
      #f
      ("EdgeCase"))
    #(188
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80)
      #f
      ("EdgeCase"))
    #(189
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82)
      #f
      ("EdgeCase"))
    #(190
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255)
      #f
      ("EdgeCase"))
    #(191
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0)
      #f
      ("EdgeCase"))
    #(192
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 40 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(193
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80 9 1 66)
      #f
      ("EdgeCase"))
    #(194
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82 2 1 0)
      #f
      ("EdgeCase"))
    #(195
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82 2 1 1)
      #f
      ("EdgeCase"))
    #(196
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82 2 1 255)
      #f
      ("EdgeCase"))
    #(197
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81)
      #f
      ("EdgeCase"))
    #(198
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80)
      #f
      ("EdgeCase"))
    #(199
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82)
      #f
      ("EdgeCase"))
    #(200
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255)
      #f
      ("EdgeCase"))
    #(201
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0)
      #f
      ("EdgeCase"))
    #(202
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 40 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(203
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82 9 1 66)
      #f
      ("EdgeCase"))
    #(204
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 2 1 0)
      #f
      ("EdgeCase"))
    #(205
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 2 1 1)
      #f
      ("EdgeCase"))
    #(206
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 2 1 255)
      #f
      ("EdgeCase"))
    #(207
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81)
      #f
      ("EdgeCase"))
    #(208
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80)
      #f
      ("EdgeCase"))
    #(209
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82)
      #f
      ("EdgeCase"))
    #(210
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255)
      #f
      ("EdgeCase"))
    #(211
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0)
      #f
      ("EdgeCase"))
    #(212
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 40 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(213
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 9 1 66)
      #f
      ("EdgeCase"))
    #(214
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 2 1 0)
      #f
      ("EdgeCase"))
    #(215
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 2 1 1)
      #f
      ("EdgeCase"))
    #(216
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 2 1 255)
      #f
      ("EdgeCase"))
    #(217
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81)
      #f
      ("EdgeCase"))
    #(218
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80)
      #f
      ("EdgeCase"))
    #(219
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82)
      #f
      ("EdgeCase"))
    #(220
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255)
      #f
      ("EdgeCase"))
    #(221
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0)
      #f
      ("EdgeCase"))
    #(222
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 40 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(223
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 9 1 66)
      #f
      ("EdgeCase"))
    #(224
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 12 1 48)
      #f
      ())
    #(225
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 5 2 1 1 12 0)
      #f
      ())
    #(226
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 9 12 2 37 115 12 3 115 37 115)
      #f
      ())
    #(227
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 8 2 1 1 48 3 2 1 0)
      #f
      ())
    #(228
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 3 2 1 1)
      #f
      ())
    #(229
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 1 1 0)
      #f
      ())
    #(230
      "Edge case for Shamir multiplication"
      #vu8(54 57 56 49 57)
      #vu8(48 68 2 32 100 161 170 181 0 13 14 128 79 62 47 192 43 222 233 190 143 243 18 51 78 43 161 109 17 84 124 151 113 28 137 142 2 32 106 240 21 151 28 195 11 230 209 162 6 212 224 19 224 153 119 114 162 249 29 115 40 111 253 104 59 155 178 207 79 27)
      #t
      ())
    #(231
      "special case hash"
      #vu8(52 50 54 52 55 57 55 50 52)
      #vu8(48 68 2 32 22 174 169 100 162 246 80 109 111 120 200 28 145 252 126 139 222 215 211 151 115 132 72 222 30 25 160 236 88 11 242 102 2 32 37 44 215 98 19 12 102 103 207 232 183 188 71 210 125 120 57 30 142 128 197 120 209 205 56 195 255 3 59 233 40 233)
      #t
      ())
    #(232
      "special case hash"
      #vu8(55 49 51 56 54 56 52 56 57 49)
      #vu8(48 69 2 33 0 156 201 139 226 52 125 70 155 244 118 223 194 107 155 115 61 242 210 109 110 245 36 175 145 124 102 91 172 203 35 200 130 2 32 9 52 150 69 158 255 226 216 215 7 39 184 36 98 246 29 14 193 183 132 121 41 209 14 166 49 218 203 22 181 108 50)
      #t
      ())
    #(233
      "special case hash"
      #vu8(49 48 51 53 57 51 51 49 54 54 56)
      #vu8(48 68 2 32 115 179 201 14 205 57 0 40 5 129 100 82 77 222 137 39 3 220 227 222 160 213 63 168 9 57 153 240 122 184 170 67 2 32 47 103 176 184 226 6 54 105 91 183 216 191 10 101 28 128 46 210 90 57 83 135 181 244 24 140 12 64 117 200 134 52)
      #t
      ())
    #(234
      "special case hash"
      #vu8(51 57 52 57 52 48 49 50 49 53)
      #vu8(48 70 2 33 0 191 171 48 152 37 40 71 179 40 250 223 47 137 185 92 133 26 127 14 179 144 118 51 120 243 126 144 17 157 91 163 221 2 33 0 189 214 78 35 78 131 43 16 103 194 208 88 204 180 77 151 129 149 204 235 182 92 42 175 30 45 169 184 180 152 126 59)
      #t
      ())
    #(235
      "special case hash"
      #vu8(49 51 52 52 50 57 51 48 55 57)
      #vu8(48 68 2 32 32 74 151 132 7 75 36 109 139 248 191 4 164 206 177 193 241 201 170 171 22 139 21 150 209 112 147 197 205 33 210 205 2 32 81 204 228 22 112 99 103 131 220 6 167 89 200 132 120 104 164 6 194 80 111 225 121 117 88 47 230 72 209 216 139 82)
      #t
      ())
    #(236
      "special case hash"
      #vu8(51 55 48 54 50 49 49 55 49 50)
      #vu8(48 70 2 33 0 237 102 220 52 245 81 172 130 246 61 74 164 248 31 226 203 0 49 169 29 19 20 248 53 2 123 202 15 28 238 170 3 2 33 0 153 202 18 58 160 155 19 205 25 74 66 46 24 213 253 161 103 98 60 63 110 93 77 106 187 137 83 214 124 12 72 199)
      #t
      ())
    #(237
      "special case hash"
      #vu8(51 52 51 54 56 56 55 49 50)
      #vu8(48 69 2 32 6 11 112 11 239 102 92 104 137 157 68 242 53 106 87 141 18 107 6 32 35 204 195 192 86 191 15 96 162 55 1 43 2 33 0 141 24 108 2 120 50 150 95 79 204 120 163 54 108 169 93 237 187 65 12 190 243 242 109 107 229 213 129 193 29 54 16)
      #t
      ())
    #(238
      "special case hash"
      #vu8(49 51 53 49 53 51 48 51 55 48)
      #vu8(48 70 2 33 0 159 106 223 232 213 235 91 44 36 215 170 121 52 182 207 41 201 62 167 108 211 19 201 19 43 176 200 227 140 150 131 29 2 33 0 178 106 156 158 64 229 94 224 137 12 148 76 242 113 117 108 144 106 51 230 107 91 209 94 5 21 147 136 59 94 153 2)
      #t
      ())
    #(239
      "special case hash"
      #vu8(54 53 53 51 50 48 51 49 50 54)
      #vu8(48 69 2 33 0 161 175 3 202 145 103 123 103 58 210 243 54 21 229 97 116 161 171 246 218 22 140 235 250 136 104 244 186 39 63 22 183 2 32 32 170 115 255 228 138 250 100 53 205 37 139 23 61 12 35 119 214 144 34 231 208 152 215 92 175 36 200 197 224 107 28)
      #t
      ())
    #(240
      "special case hash"
      #vu8(49 53 54 52 51 52 54 54 48 51)
      #vu8(48 69 2 33 0 253 199 6 2 118 111 142 237 17 166 201 154 113 201 115 213 101 147 85 80 123 132 61 166 227 39 162 140 17 137 61 185 2 32 61 245 52 150 136 160 133 177 55 177 234 207 69 106 158 158 15 109 21 236 0 120 202 96 167 248 63 43 16 210 19 80)
      #t
      ())
    #(241
      "special case hash"
      #vu8(52 52 50 57 53 51 57 49 49 55)
      #vu8(48 70 2 33 0 181 22 163 20 242 252 229 48 214 83 127 106 108 73 150 108 35 69 111 99 198 67 207 142 13 199 56 247 184 118 230 117 2 33 0 211 159 253 3 60 146 182 215 23 221 83 111 188 94 253 241 150 124 75 216 9 84 71 155 166 107 1 32 205 22 255 242)
      #t
      ())
    #(242
      "special case hash"
      #vu8(49 48 57 53 51 50 54 49 51 53 49)
      #vu8(48 68 2 32 59 44 191 4 110 172 69 132 46 203 121 132 212 117 131 21 130 113 123 235 182 73 47 208 164 133 193 1 226 159 240 168 2 32 76 155 123 71 169 139 15 130 222 81 43 201 49 58 175 81 112 16 153 202 197 247 110 104 200 89 95 193 193 217 146 88)
      #t
      ())
    #(243
      "special case hash"
      #vu8(53 57 56 55 51 53 48 48 52 49)
      #vu8(48 68 2 32 48 200 125 53 230 54 245 64 132 31 20 175 84 226 249 237 215 157 3 18 207 161 171 101 108 63 177 91 253 228 141 207 2 32 71 193 90 90 130 210 75 117 200 90 105 43 214 236 175 235 113 64 158 222 35 239 208 142 13 185 171 246 52 6 119 237)
      #t
      ())
    #(244
      "special case hash"
      #vu8(51 52 54 51 48 48 54 56 55 56)
      #vu8(48 68 2 32 56 104 111 240 253 162 206 246 188 67 181 140 254 102 71 185 226 232 23 109 22 141 236 60 104 255 38 33 19 118 15 82 2 32 6 126 195 182 81 244 34 102 150 1 102 33 103 250 135 23 233 118 226 219 94 106 76 247 194 221 171 179 253 233 214 125)
      #t
      ())
    #(245
      "special case hash"
      #vu8(57 56 49 55 51 50 48 50 56 55)
      #vu8(48 68 2 32 68 163 226 59 243 20 242 179 68 252 37 199 242 222 139 106 243 225 125 39 245 238 132 75 34 89 133 171 110 39 117 207 2 32 45 72 226 35 32 94 152 4 29 220 135 190 83 42 190 213 132 240 65 31 87 41 80 4 147 201 204 63 77 209 94 134)
      #t
      ())
    #(246
      "special case hash"
      #vu8(51 50 50 50 48 52 49 48 52 54)
      #vu8(48 68 2 32 45 237 91 126 200 233 14 123 241 31 150 122 61 149 17 12 65 185 157 179 181 170 141 51 14 185 214 56 120 22 136 233 2 32 125 87 146 197 54 40 21 94 27 252 70 251 26 103 227 8 141 224 73 195 40 174 31 68 236 105 35 138 0 152 8 249)
      #t
      ())
    #(247
      "special case hash"
      #vu8(54 54 54 54 51 48 55 49 48 52)
      #vu8(48 70 2 33 0 189 174 123 203 88 11 243 53 239 211 188 61 49 135 15 146 62 172 202 252 212 14 194 246 5 151 111 21 19 125 139 143 2 33 0 246 223 161 47 25 229 37 39 11 1 6 238 207 226 87 73 159 55 58 79 179 24 153 79 36 131 129 34 206 126 195 199)
      #t
      ())
    #(248
      "special case hash"
      #vu8(49 48 51 53 57 53 49 56 57 56)
      #vu8(48 69 2 32 80 249 196 240 205 105 64 225 98 114 9 87 255 255 81 55 153 32 155 120 89 105 86 210 30 206 37 28 36 1 241 198 2 33 0 215 3 58 10 120 125 51 142 136 157 239 170 171 177 6 185 90 67 85 228 17 165 156 50 170 81 103 223 171 36 71 38)
      #t
      ())
    #(249
      "special case hash"
      #vu8(49 56 52 54 53 57 55 49 57 53)
      #vu8(48 69 2 33 0 246 18 130 6 135 96 79 160 25 6 6 106 55 141 103 84 9 130 226 149 117 208 25 170 190 144 146 78 173 92 134 13 2 32 63 147 103 112 45 215 221 79 117 234 152 175 210 14 50 138 26 153 244 133 123 49 101 37 50 130 48 206 41 75 15 239)
      #t
      ())
    #(250
      "special case hash"
      #vu8(51 49 51 54 48 52 54 49 56 57)
      #vu8(48 70 2 33 0 149 5 228 7 101 125 110 139 201 61 181 218 122 166 245 8 31 97 152 12 25 73 245 107 15 47 80 125 165 120 42 122 2 33 0 198 13 49 144 78 54 105 115 143 251 236 202 182 195 101 108 8 224 237 92 185 43 60 250 94 127 113 120 79 156 80 33)
      #t
      ())
    #(251
      "special case hash"
      #vu8(50 54 54 51 55 56 52 50 53 52)
      #vu8(48 70 2 33 0 187 209 111 187 182 86 182 208 216 62 106 119 135 205 105 27 8 115 90 237 55 23 50 114 62 28 104 164 4 4 81 125 2 33 0 157 142 53 219 169 96 40 183 120 125 145 49 91 230 117 135 125 45 9 123 229 232 238 52 86 14 62 127 210 92 15 0)
      #t
      ())
    #(252
      "special case hash"
      #vu8(49 54 53 50 49 48 48 53 50 52)
      #vu8(48 68 2 32 46 201 118 1 34 219 152 253 6 234 118 132 141 53 166 218 68 45 44 238 247 85 154 48 207 87 198 30 146 223 50 126 2 32 122 178 113 218 144 133 148 121 112 31 204 248 110 70 46 227 57 63 182 129 76 39 183 96 196 150 54 37 192 161 152 120)
      #t
      ())
    #(253
      "special case hash"
      #vu8(53 55 52 56 48 56 49 54 57 54)
      #vu8(48 68 2 32 84 231 107 118 131 182 101 11 170 106 127 196 155 28 81 238 217 186 157 212 99 34 31 122 79 16 5 168 159 224 12 89 2 32 46 160 118 136 108 119 62 185 55 236 28 200 55 75 121 21 207 209 27 28 26 225 22 97 82 242 247 128 106 49 200 253)
      #t
      ())
    #(254
      "special case hash"
      #vu8(54 51 52 51 57 49 51 52 54 56)
      #vu8(48 68 2 32 82 145 222 175 36 101 159 251 188 230 227 194 111 96 33 9 122 116 171 219 182 155 228 251 16 65 156 12 73 108 148 102 2 32 101 214 252 243 54 210 124 199 205 185 130 187 78 78 206 245 130 127 132 116 47 41 241 10 191 131 70 146 112 160 61 195)
      #t
      ())
    #(255
      "special case hash"
      #vu8(49 53 52 49 49 48 51 53 57 56)
      #vu8(48 69 2 32 32 122 50 65 129 45 117 217 71 65 157 197 142 251 5 232 0 59 51 252 23 235 80 249 209 81 102 168 132 121 241 7 2 33 0 205 238 116 159 46 73 43 33 60 232 11 50 208 87 79 98 241 197 215 7 147 207 85 227 130 213 202 173 247 89 39 103)
      #t
      ())
    #(256
      "special case hash"
      #vu8(49 48 52 55 56 53 56 48 49 50 56)
      #vu8(48 69 2 32 101 84 228 159 130 168 85 32 67 40 172 148 145 59 240 27 190 132 67 122 53 90 10 55 192 222 227 207 129 170 119 40 2 33 0 174 160 13 226 80 125 218 245 201 78 30 18 105 128 211 223 22 37 10 46 174 188 139 228 134 239 254 127 34 180 249 41)
      #t
      ())
    #(257
      "special case hash"
      #vu8(49 48 53 51 54 50 56 53 53 54 56)
      #vu8(48 70 2 33 0 165 76 80 98 100 131 57 210 191 240 111 113 200 130 22 194 108 110 25 180 216 10 140 96 41 144 172 130 112 126 253 252 2 33 0 233 155 190 127 207 175 174 62 105 253 1 103 119 81 122 160 16 86 49 127 70 122 208 154 255 9 190 115 201 115 27 13)
      #t
      ())
    #(258
      "special case hash"
      #vu8(57 53 51 57 48 52 49 48 53)
      #vu8(48 69 2 33 0 151 91 215 21 122 141 54 59 48 159 31 68 64 18 177 161 210 48 150 89 49 51 231 27 76 168 176 89 207 243 126 175 2 32 127 170 122 40 177 200 34 186 162 65 121 63 42 188 147 11 212 198 152 64 254 9 15 42 172 196 103 134 191 145 150 34)
      #t
      ())
    #(259
      "special case hash"
      #vu8(57 55 56 56 52 56 48 51 57)
      #vu8(48 68 2 32 86 148 166 248 75 143 135 92 39 106 253 46 188 254 77 97 222 158 201 3 5 175 177 53 123 149 179 224 218 67 136 94 2 32 13 255 173 159 253 11 117 125 128 81 222 192 46 189 247 13 142 226 220 92 120 112 192 130 59 108 204 124 103 156 186 164)
      #t
      ())
    #(260
      "special case hash"
      #vu8(51 54 49 48 54 55 50 52 52 50)
      #vu8(48 69 2 33 0 160 195 14 128 38 253 178 180 180 150 138 39 209 106 109 8 247 9 143 26 152 210 22 32 215 69 75 169 121 15 27 166 2 32 94 71 4 83 168 163 153 241 91 175 70 63 157 236 235 83 172 197 202 100 69 145 73 104 139 210 118 12 101 66 67 57)
      #t
      ())
    #(261
      "special case hash"
      #vu8(49 48 53 52 50 52 48 55 48 53)
      #vu8(48 68 2 32 97 78 168 74 207 115 101 39 221 115 96 44 212 187 78 234 29 254 190 189 90 216 172 165 42 160 34 140 247 185 154 136 2 32 115 124 200 95 95 45 47 96 209 184 24 63 62 212 144 228 222 20 54 142 150 169 72 44 42 77 209 147 25 92 144 47)
      #t
      ())
    #(262
      "special case hash"
      #vu8(53 49 55 52 52 52 56 49 57 55)
      #vu8(48 69 2 33 0 190 173 103 52 235 228 75 129 13 63 178 234 0 177 115 41 69 55 115 56 254 191 212 57 168 215 77 251 208 249 66 250 2 32 107 177 142 174 54 97 106 125 60 173 53 145 159 210 26 138 244 187 231 161 15 115 179 224 54 164 107 16 62 245 110 42)
      #t
      ())
    #(263
      "special case hash"
      #vu8(49 57 54 55 53 54 49 50 53 49)
      #vu8(48 68 2 32 73 150 37 71 158 22 29 172 212 219 157 156 230 72 84 201 141 146 44 191 33 39 3 233 101 79 174 24 45 249 186 210 2 32 66 193 119 207 55 184 25 58 1 49 16 141 151 129 158 221 148 57 147 96 40 134 74 193 149 182 79 202 118 217 214 147)
      #t
      ())
    #(264
      "special case hash"
      #vu8(51 52 52 55 50 53 51 51 52 51)
      #vu8(48 69 2 32 8 241 107 128 147 168 251 77 102 162 200 6 91 84 27 61 49 227 191 230 148 246 184 156 80 251 26 170 111 246 201 178 2 33 0 157 100 85 226 213 209 119 151 72 87 59 97 28 185 93 74 33 249 103 65 3 153 179 155 83 91 163 229 175 129 202 46)
      #t
      ())
    #(265
      "special case hash"
      #vu8(51 54 56 50 54 52 51 49 56)
      #vu8(48 70 2 33 0 190 38 35 27 97 145 101 138 25 221 114 221 185 158 216 248 197 121 182 147 141 25 188 232 238 216 220 43 51 140 181 248 2 33 0 225 217 163 46 229 108 255 237 55 240 242 43 45 203 87 213 201 67 193 79 121 105 74 3 185 197 233 105 82 87 92 137)
      #t
      ())
    #(266
      "special case hash"
      #vu8(51 50 54 49 49 57 56 54 48 56)
      #vu8(48 69 2 32 21 231 104 128 137 131 22 177 98 4 172 146 10 2 213 128 69 243 106 34 157 74 164 248 18 99 140 69 90 190 4 67 2 33 0 231 77 53 125 63 203 92 140 83 55 189 106 186 65 120 180 85 202 16 226 38 225 63 150 56 25 101 6 161 147 145 35)
      #t
      ())
    #(267
      "special case hash"
      #vu8(57 54 55 56 55 56 49 48 57 52)
      #vu8(48 68 2 32 53 46 203 83 248 223 44 80 58 69 249 132 111 194 141 29 49 230 48 125 61 219 255 193 19 35 21 204 7 241 109 173 2 32 19 72 223 169 196 130 197 88 225 208 92 82 66 202 28 57 67 103 38 236 210 130 88 177 137 151 146 136 125 208 163 198)
      #t
      ())
    #(268
      "special case hash"
      #vu8(52 57 53 56 56 50 51 56 50 51)
      #vu8(48 68 2 32 74 64 128 26 126 96 107 167 138 13 169 136 42 178 60 118 119 184 100 35 73 237 61 101 44 91 250 95 42 149 88 251 2 32 58 73 182 72 72 214 130 239 127 96 95 40 50 247 56 75 220 36 237 41 37 130 91 248 234 119 220 89 129 114 87 130)
      #t
      ())
    #(269
      "special case hash"
      #vu8(56 50 52 54 51 55 56 51 55)
      #vu8(48 69 2 33 0 234 204 94 26 131 4 167 77 43 228 18 176 120 146 75 59 179 81 27 172 133 92 5 201 229 233 228 77 243 214 30 150 2 32 116 81 205 142 24 214 237 24 133 221 130 119 20 132 127 150 236 75 176 237 76 54 206 152 8 219 143 113 66 4 246 209)
      #t
      ())
    #(270
      "special case hash"
      #vu8(49 49 48 50 48 56 51 51 55 55 54)
      #vu8(48 69 2 32 47 122 94 158 87 113 212 36 243 15 103 253 171 97 232 206 79 140 209 33 72 130 173 182 95 125 233 76 49 87 112 82 2 33 0 172 78 105 128 131 69 128 155 68 172 176 178 189 136 145 117 251 117 221 5 12 90 68 154 185 82 143 143 120 218 161 12)
      #t
      ())
    #(271
      "special case hash"
      #vu8(49 51 51 56 55 49 54 52 56)
      #vu8(48 69 2 33 0 255 205 164 15 121 44 228 217 62 126 15 14 149 225 162 20 125 221 215 246 72 118 33 195 10 3 215 16 179 48 2 25 2 32 121 147 139 85 248 161 127 126 215 186 154 222 143 32 101 161 250 119 97 143 11 103 173 216 213 140 66 44 36 83 164 154)
      #t
      ())
    #(272
      "special case hash"
      #vu8(51 50 50 49 52 52 49 54 50)
      #vu8(48 70 2 33 0 129 242 53 156 79 171 166 181 61 62 140 140 63 204 22 169 72 53 15 122 179 165 136 178 140 23 96 58 67 30 57 168 2 33 0 205 111 106 92 195 181 94 173 15 246 149 208 108 104 96 181 9 228 109 153 252 206 251 159 127 158 16 24 87 247 67 0)
      #t
      ())
    #(273
      "special case hash"
      #vu8(49 48 54 56 54 54 53 53 53 52 54)
      #vu8(48 69 2 33 0 223 200 191 82 4 69 203 184 238 21 150 251 7 62 162 131 234 19 2 81 166 253 255 165 195 245 242 170 247 92 168 8 2 32 4 142 51 239 206 20 124 157 217 40 35 100 14 51 142 104 191 215 208 220 122 73 5 179 167 172 113 30 87 126 144 231)
      #t
      ())
    #(274
      "special case hash"
      #vu8(54 50 49 53 53 50 52 54)
      #vu8(48 70 2 33 0 173 1 159 116 198 148 29 32 239 218 112 180 108 83 219 22 101 3 160 227 147 233 50 246 136 34 118 136 186 106 87 98 2 33 0 147 50 14 183 202 7 16 37 83 70 189 187 49 2 205 207 121 100 239 46 9 136 231 18 188 5 239 225 108 25 147 69)
      #t
      ())
    #(275
      "special case hash"
      #vu8(55 48 51 48 56 49 56 55 55 52)
      #vu8(48 70 2 33 0 172 128 150 132 46 138 221 104 195 78 120 206 17 221 113 228 181 67 22 189 62 191 127 255 222 183 189 90 62 188 24 131 2 33 0 245 202 47 79 35 214 116 80 45 76 175 133 209 135 33 93 54 227 206 159 12 226 25 112 159 33 163 170 192 3 183 168)
      #t
      ())
    #(276
      "special case hash"
      #vu8(53 57 50 52 53 50 51 55 52 52)
      #vu8(48 68 2 32 103 123 45 58 89 177 138 95 249 57 183 14 160 2 37 8 137 221 205 123 123 157 119 104 84 180 148 54 147 251 146 247 2 32 107 75 168 86 173 231 103 123 243 3 7 178 31 60 205 163 93 47 99 174 232 30 253 11 171 105 114 204 7 149 219 85)
      #t
      ())
    #(277
      "special case hash"
      #vu8(49 52 57 53 53 56 54 54 50 49)
      #vu8(48 69 2 32 71 158 29 237 20 188 174 208 55 155 168 225 183 61 49 21 216 77 49 212 183 195 14 31 5 225 252 13 89 87 207 176 2 33 0 145 143 121 227 91 61 137 72 124 246 52 164 240 91 46 12 48 133 124 168 121 249 124 119 30 135 112 39 53 91 36 67)
      #t
      ())
    #(278
      "special case hash"
      #vu8(52 48 48 53 51 49 52 52 48 54)
      #vu8(48 68 2 32 67 223 204 208 237 185 226 128 217 165 143 1 22 77 85 195 215 17 225 75 18 172 92 243 182 72 64 234 213 18 160 163 2 32 29 190 51 250 139 168 69 51 205 92 73 52 54 91 52 66 202 17 116 137 155 120 239 154 49 153 244 149 132 56 151 114)
      #t
      ())
    #(279
      "special case hash"
      #vu8(51 48 57 54 52 53 55 53 49 50)
      #vu8(48 68 2 32 91 9 171 99 123 212 202 240 244 199 199 228 188 165 146 254 162 14 144 135 194 89 210 106 56 187 64 133 240 187 255 17 2 32 69 183 235 70 123 103 72 175 97 142 157 128 214 253 205 106 162 73 100 229 161 63 136 91 202 129 1 222 8 235 13 117)
      #t
      ())
    #(280
      "special case hash"
      #vu8(50 55 56 52 48 50 53 54 50 48)
      #vu8(48 69 2 32 94 155 28 90 2 128 112 223 87 40 197 200 175 155 116 224 102 122 250 87 10 108 250 1 20 165 3 158 209 94 224 111 2 33 0 177 54 9 7 226 217 120 94 173 54 43 184 215 189 102 27 108 41 238 255 211 197 3 119 68 237 174 185 173 153 12 32)
      #t
      ())
    #(281
      "special case hash"
      #vu8(50 54 49 56 55 56 55 52 49 56)
      #vu8(48 69 2 32 6 113 160 168 92 43 114 213 74 47 176 153 14 52 83 139 72 144 5 15 90 87 18 246 209 167 165 251 133 120 243 46 2 33 0 219 24 70 186 182 183 54 20 121 171 156 50 133 202 65 41 24 8 242 127 213 189 79 218 199 32 229 133 71 19 105 76)
      #t
      ())
    #(282
      "special case hash"
      #vu8(49 54 52 50 54 50 53 50 54 50)
      #vu8(48 68 2 32 118 115 248 82 103 72 68 100 119 219 187 5 144 164 84 146 197 215 214 152 89 211 1 171 186 237 179 91 32 149 16 58 2 32 61 199 13 223 156 107 82 77 136 107 237 158 106 240 46 14 77 236 13 65 122 65 79 237 56 7 239 68 34 145 61 124)
      #t
      ())
    #(283
      "special case hash"
      #vu8(54 56 50 52 49 56 57 52 51 54)
      #vu8(48 68 2 32 127 8 84 65 7 14 205 43 178 18 133 8 158 187 26 166 69 13 26 6 195 109 63 243 157 253 101 122 121 109 18 181 2 32 36 151 18 1 32 41 135 10 36 89 209 141 71 218 154 164 146 165 230 203 75 45 141 175 169 228 197 197 74 43 154 139)
      #t
      ())
    #(284
      "special case hash"
      #vu8(52 56 52 50 52 53 52 50 53)
      #vu8(48 70 2 33 0 145 76 103 251 97 221 30 39 200 103 57 142 167 50 45 90 183 109 240 75 197 170 102 131 168 224 243 10 93 40 115 72 2 33 0 250 7 71 64 49 72 29 218 73 83 227 172 25 89 238 140 234 126 102 236 65 43 56 214 201 109 40 246 211 115 4 234)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 10 217 149 0 40 141 70 105 64 3 29 114 169 245 68 90 77 67 120 70 64 133 91 240 166 152 116 210 222 95 225 3 197 1 30 110 242 196 45 205 80 213 211 210 159 153 174 110 186 44 128 201 36 79 76 84 34 240 151 159 240 195 186 94)
  :der-encode
  #t
  :tests
  '(#(285
      "k*G has a large x-coordinate"
      #vu8(49 50 51 52 48 48)
      #vu8(48 53 2 16 67 25 5 83 88 232 97 123 12 70 53 61 3 156 218 171 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 78)
      #t
      ())
    #(286
      "r too large"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 252 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 78)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 171 5 253 157 13 226 107 156 230 244 129 150 82 217 252 105 25 61 10 163 152 240 251 168 1 62 9 197 130 32 69 84 25 35 82 113 34 140 120 103 89 9 93 18 183 90 240 105 45 212 16 63 25 246 168 195 47 73 67 90 30 155 141 69)
  :der-encode
  #t
  :tests
  '(#(287
      "r,s are large"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 79 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 78)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 128 152 79 57 161 255 56 168 106 104 170 66 1 182 190 93 251 254 207 135 98 25 113 11 7 186 223 111 221 76 108 86 17 254 185 115 144 217 130 110 122 6 223 180 24 113 201 64 215 68 21 237 60 172 32 137 241 68 80 25 187 85 237 149)
  :der-encode
  #t
  :tests
  '(#(288
      "r and s^-1 have a large Hamming weight"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 33 0 144 145 53 189 182 121 146 134 23 15 94 173 45 228 246 81 20 83 254 80 145 79 61 242 222 84 163 99 131 223 141 212)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 66 1 180 39 41 68 32 28 50 148 245 186 169 163 35 43 109 214 135 73 95 204 25 167 10 149 188 96 43 79 124 5 149 195 126 186 158 232 23 28 27 181 172 111 234 247 83 188 54 244 99 227 174 241 102 41 87 44 12 10 143 176 128 14)
  :der-encode
  #t
  :tests
  '(#(289
      "r and s^-1 have a large Hamming weight"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 39 180 87 124 160 9 55 111 113 48 63 213 221 34 125 206 245 222 183 115 173 95 90 132 54 6 68 102 156 162 73 165)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 167 26 246 77 229 18 106 74 78 2 183 146 45 102 206 148 21 206 136 164 201 210 85 20 217 16 130 200 114 90 201 87 93 71 114 60 143 190 88 11 179 105 254 201 194 102 93 142 48 164 53 185 147 38 69 72 46 124 159 17 232 114 41 107)
  :der-encode
  #t
  :tests
  '(#(290
      "small r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 5 2 1 1)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 102 39 206 196 240 115 30 162 63 194 147 31 144 235 229 183 87 47 89 125 32 223 8 252 43 49 238 142 241 107 21 114 97 112 237 119 216 208 161 79 197 201 195 196 201 190 127 13 62 225 143 112 155 178 117 234 242 7 62 37 143 230 148 165)
  :der-encode
  #t
  :tests
  '(#(291
      "small r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 5 2 1 3)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 90 124 136 37 232 86 145 204 225 245 231 84 76 84 231 63 20 175 192 16 203 115 19 67 38 44 167 236 90 119 245 191 239 110 223 98 164 73 124 27 215 177 71 251 108 61 34 175 60 57 191 206 149 243 14 19 161 109 61 123 40 18 248 19)
  :der-encode
  #t
  :tests
  '(#(292
      "small r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 5 2 1 5)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 203 224 194 145 50 205 115 131 100 254 221 96 49 82 153 12 4 142 94 47 255 153 109 136 63 166 202 202 121 120 199 55 112 175 106 140 228 76 180 18 36 178 96 54 6 244 192 77 24 142 128 191 247 204 49 173 81 137 212 171 13 112 232 193)
  :der-encode
  #t
  :tests
  '(#(293
      "small r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 5 2 1 6)
      #t
      ())
    #(294
      "r is larger than n"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 86 2 1 6)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 75 228 23 128 151 0 47 13 234 182 143 13 154 19 14 14 211 58 103 149 208 42 32 121 109 184 52 68 176 55 225 57 32 241 48 81 224 238 205 207 206 77 172 234 15 80 209 242 71 202 166 105 241 147 193 180 7 91 81 174 41 109 45 86)
  :der-encode
  #t
  :tests
  '(#(295
      "s is larger than n"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 5 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 117 251 216)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 208 247 55 146 32 55 22 175 212 190 67 41 250 164 141 38 159 21 49 62 187 186 55 157 119 131 201 123 243 232 144 217 151 31 74 50 6 96 91 236 33 120 43 245 226 117 199 20 65 126 143 86 101 73 230 188 104 105 13 35 99 200 156 193)
  :der-encode
  #t
  :tests
  '(#(296
      "small r and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 39 2 2 1 0 2 33 0 143 30 60 120 98 197 139 22 187 118 237 219 183 110 221 187 81 106 244 246 63 45 116 215 110 13 40 201 187 117 234 136)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 72 56 178 190 53 166 39 106 128 239 158 34 129 64 249 217 185 108 232 59 122 37 79 113 204 222 187 184 5 76 224 95 250 156 188 18 60 145 155 25 224 2 56 25 141 4 6 144 67 189 102 10 130 136 20 5 31 203 138 172 115 138 108 107)
  :der-encode
  #t
  :tests
  '(#(297
      "smallish r and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 44 2 7 45 155 77 52 121 82 214 2 33 0 239 48 67 231 50 149 129 219 179 151 68 151 113 10 177 21 5 238 28 135 255 144 123 238 186 221 25 90 15 254 109 122)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 115 147 152 60 163 10 82 11 188 71 131 220 153 96 116 106 171 68 78 245 32 192 168 231 113 17 154 164 231 75 15 100 233 215 190 26 176 26 11 246 38 231 9 134 62 106 72 109 186 243 39 147 175 204 247 116 226 198 205 39 177 133 117 38)
  :der-encode
  #t
  :tests
  '(#(298
      "100-bit r and small s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 50 2 13 16 51 230 126 55 179 43 68 85 128 191 78 255 2 33 0 139 116 139 116 0 0 0 0 139 116 139 116 139 116 139 116 102 231 105 173 74 22 211 220 216 113 41 184 233 29 27 77)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 90 195 49 161 16 63 233 102 105 115 121 243 86 169 55 243 80 88 138 5 71 126 48 136 81 184 165 2 213 223 205 197 254 153 147 223 75 87 147 155 43 141 160 149 191 109 121 66 101 32 76 254 3 190 153 90 2 230 93 64 140 135 28 11)
  :der-encode
  #t
  :tests
  '(#(299
      "small r and 100 bit s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 39 2 2 1 0 2 33 0 239 159 107 164 217 124 9 208 49 120 250 32 180 170 173 131 190 60 249 203 130 74 135 159 236 50 112 252 75 129 239 91)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 29 32 155 232 222 45 232 119 9 90 57 157 57 4 199 76 196 88 217 38 226 123 184 229 142 94 174 87 103 196 21 9 221 89 224 76 33 79 123 24 220 227 81 252 42 84 152 147 166 134 14 128 22 63 56 204 96 164 242 201 208 64 216 201)
  :der-encode
  #t
  :tests
  '(#(300
      "100-bit r and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 50 2 13 6 37 34 187 211 236 190 124 57 233 62 124 37 2 33 0 239 159 107 164 217 124 9 208 49 120 250 32 180 170 173 131 190 60 249 203 130 74 135 159 236 50 112 252 75 129 239 91)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 8 53 57 251 238 68 98 94 58 202 175 162 252 180 19 73 57 44 239 6 51 161 184 250 190 206 224 193 51 177 14 153 145 92 30 190 123 240 13 248 83 81 150 119 10 88 4 122 226 164 2 242 99 38 187 125 65 212 215 97 99 55 145 30)
  :der-encode
  #t
  :tests
  '(#(301
      "r and s^-1 are close to n"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 36 213 2 32 85 85 85 85 0 0 0 0 85 85 85 85 85 85 85 85 62 247 168 228 141 7 223 129 166 147 67 150 84 33 12 112)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 138 235 54 138 112 39 164 214 74 189 234 55 57 12 12 29 106 38 243 153 226 217 115 77 225 235 61 14 25 55 56 116 5 189 19 131 71 21 225 219 174 155 135 92 240 123 213 94 27 102 145 199 247 83 106 239 59 25 191 122 74 223 87 109)
  :der-encode
  #t
  :tests
  '(#(302
      "s == 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 37 2 32 85 85 85 85 0 0 0 0 85 85 85 85 85 85 85 85 62 247 168 228 141 7 223 129 166 147 67 150 84 33 12 112 2 1 1)
      #t
      ())
    #(303
      "s == 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 37 2 32 85 85 85 85 0 0 0 0 85 85 85 85 85 85 85 85 62 247 168 228 141 7 223 129 166 147 67 150 84 33 12 112 2 1 0)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 181 51 212 105 93 213 184 197 224 119 87 229 94 110 81 111 126 44 136 250 2 57 226 63 96 232 236 7 221 112 242 135 27 19 78 229 140 197 131 39 132 86 134 63 51 195 168 93 136 31 125 74 57 133 1 67 226 157 78 175 0 154 254 71)
  :der-encode
  #t
  :tests
  '(#(304
      "point at infinity during verify"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 128 0 0 0 127 255 255 255 255 255 255 255 222 115 125 86 211 139 207 66 121 220 229 97 126 49 146 168 2 32 85 85 85 85 0 0 0 0 85 85 85 85 85 85 85 85 62 247 168 228 141 7 223 129 166 147 67 150 84 33 12 112)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 245 13 55 27 145 191 177 215 209 78 19 35 82 59 195 170 140 191 44 87 249 226 132 222 98 140 139 69 54 120 123 134 249 74 216 135 172 148 213 39 36 124 210 231 208 200 177 41 28 85 60 151 48 64 83 128 177 76 187 32 159 95 162 221)
  :der-encode
  #t
  :tests
  '(#(305
      "edge case for signature malleability"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 128 0 0 0 127 255 255 255 255 255 255 255 222 115 125 86 211 139 207 66 121 220 229 97 126 49 146 169 2 32 127 255 255 255 128 0 0 0 127 255 255 255 255 255 255 255 222 115 125 86 211 139 207 66 121 220 229 97 126 49 146 168)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 104 236 110 41 142 175 225 101 57 21 108 229 122 20 176 74 112 71 194 33 186 252 58 88 46 174 176 216 87 196 217 70 151 190 209 175 23 133 1 23 253 179 155 35 36 242 32 165 105 142 209 108 66 106 39 51 91 179 133 172 140 166 251 48)
  :der-encode
  #t
  :tests
  '(#(306
      "edge case for signature malleability"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 128 0 0 0 127 255 255 255 255 255 255 255 222 115 125 86 211 139 207 66 121 220 229 97 126 49 146 169 2 32 127 255 255 255 128 0 0 0 127 255 255 255 255 255 255 255 222 115 125 86 211 139 207 66 121 220 229 97 126 49 146 169)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 105 218 3 100 115 77 46 83 15 236 233 64 25 38 95 239 183 129 160 241 176 143 108 136 151 189 246 85 121 39 200 184 102 210 211 199 220 213 24 178 61 114 105 96 240 105 173 113 169 51 216 110 248 171 188 206 139 32 247 30 42 132 112 2)
  :der-encode
  #t
  :tests
  '(#(307
      "u1 == 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 85 85 85 85 0 0 0 0 85 85 85 85 85 85 85 85 62 247 168 228 141 7 223 129 166 147 67 150 84 33 12 112 2 33 0 187 90 82 244 47 156 146 97 237 67 97 245 148 34 161 227 0 54 231 195 43 39 12 136 7 164 25 254 202 96 80 35)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 216 173 192 0 35 168 237 192 37 118 226 182 62 62 48 98 26 71 30 43 35 32 98 1 135 191 6 122 26 193 255 50 51 226 181 14 192 152 7 172 203 54 19 31 255 149 237 18 160 154 134 180 234 150 144 170 50 134 21 118 186 35 98 225)
  :der-encode
  #t
  :tests
  '(#(308
      "u1 == n - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 85 85 85 85 0 0 0 0 85 85 85 85 85 85 85 85 62 247 168 228 141 7 223 129 166 147 67 150 84 33 12 112 2 32 68 165 173 10 208 99 109 159 18 188 158 10 107 221 94 28 188 176 18 234 123 240 145 252 236 21 176 196 50 2 213 46)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 54 35 172 151 60 237 10 86 250 109 136 47 3 167 213 199 237 202 2 207 199 178 64 31 171 54 144 219 231 90 183 133 141 176 105 8 230 75 40 97 61 167 37 126 115 127 57 121 61 168 231 19 186 6 67 185 46 155 179 37 43 231 248 254)
  :der-encode
  #t
  :tests
  '(#(309
      "u2 == 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 85 85 85 85 0 0 0 0 85 85 85 85 85 85 85 85 62 247 168 228 141 7 223 129 166 147 67 150 84 33 12 112 2 32 85 85 85 85 0 0 0 0 85 85 85 85 85 85 85 85 62 247 168 228 141 7 223 129 166 147 67 150 84 33 12 112)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 207 4 234 119 233 98 37 35 216 148 185 63 245 45 195 2 123 49 149 149 3 182 250 56 144 229 224 66 99 249 34 241 232 82 143 183 192 6 179 152 60 139 132 0 229 123 78 215 23 64 194 243 151 84 56 130 17 153 190 222 174 202 178 233)
  :der-encode
  #t
  :tests
  '(#(310
      "u2 == n - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 85 85 85 85 0 0 0 0 85 85 85 85 85 85 85 85 62 247 168 228 141 7 223 129 166 147 67 150 84 33 12 112 2 33 0 170 170 170 170 0 0 0 0 170 170 170 170 170 170 170 170 125 239 81 201 26 15 191 3 77 38 135 44 168 66 24 225)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 219 122 44 138 26 181 115 229 146 157 194 64 119 181 8 215 230 131 212 146 39 153 107 218 62 159 120 219 239 247 115 80 79 65 127 59 201 168 128 117 194 224 170 221 90 19 49 23 48 207 124 199 106 130 241 26 54 234 240 138 108 153 162 6)
  :der-encode
  #t
  :tests
  '(#(311
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 33 0 233 30 27 166 15 222 219 118 164 107 203 81 220 11 139 75 126 1 159 10 40 114 24 133 250 93 58 129 150 98 51 151)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 222 173 17 199 165 179 150 134 47 33 151 77 196 117 47 173 239 249 148 239 233 187 208 90 180 19 118 94 168 11 110 31 29 227 240 100 14 138 198 237 207 137 207 245 60 64 226 101 187 148 7 138 52 55 54 223 7 170 3 24 252 127 225 255)
  :der-encode
  #t
  :tests
  '(#(312
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 33 0 253 234 88 67 255 235 115 175 148 49 59 164 131 27 83 254 36 247 153 229 37 177 232 232 200 123 89 185 91 67 10 217)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 208 188 71 46 13 124 129 235 174 211 166 239 150 193 134 19 187 31 234 111 153 67 38 251 232 14 0 223 222 103 199 233 152 108 114 62 164 132 61 72 56 155 148 111 100 173 86 200 58 215 15 241 123 168 83 53 102 125 27 185 250 97 158 253)
  :der-encode
  #t
  :tests
  '(#(313
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 3 255 202 191 47 27 77 42 101 25 13 177 104 13 98 187 153 78 65 197 37 28 215 59 60 61 252 94 91 175 192 53)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 160 164 76 169 71 214 106 42 203 115 96 8 185 192 141 26 178 173 3 119 110 2 100 15 120 73 93 69 141 213 28 50 99 55 254 92 248 196 96 75 31 28 64 157 194 216 114 212 41 74 71 98 66 13 244 58 48 162 57 46 64 66 106 221)
  :der-encode
  #t
  :tests
  '(#(314
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 77 251 196 1 249 113 205 48 75 51 223 219 23 208 254 208 254 76 26 136 174 100 142 13 40 71 247 73 119 83 73 137)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 201 194 17 82 144 208 8 180 95 182 95 173 15 96 35 137 41 140 37 66 11 119 80 25 212 43 98 195 206 138 150 183 56 119 210 90 128 128 220 2 217 135 202 115 15 4 5 194 201 219 239 172 70 249 230 1 204 63 6 233 113 57 115 253)
  :der-encode
  #t
  :tests
  '(#(315
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 33 0 188 64 36 118 28 210 255 212 61 253 177 125 15 237 17 43 152 137 119 5 92 211 168 229 73 113 235 169 205 165 202 113)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 94 202 30 244 194 135 221 220 102 184 188 207 27 136 232 162 76 0 24 150 47 60 94 126 250 131 188 26 95 246 3 62 94 121 196 203 44 36 91 140 69 171 220 232 168 228 218 117 141 146 166 7 195 44 212 7 236 174 242 47 28 147 74 113)
  :der-encode
  #t
  :tests
  '(#(316
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 120 128 72 237 57 165 255 167 123 251 98 250 31 218 34 87 116 43 243 93 18 143 179 69 159 42 12 144 158 232 111 145)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 92 170 160 48 231 253 240 228 147 107 199 171 90 150 53 62 10 1 228 19 12 63 139 242 45 71 62 49 112 41 164 122 222 182 173 196 98 247 5 143 42 32 211 113 233 112 34 84 233 178 1 100 32 5 179 206 218 146 107 66 177 120 190 249)
  :der-encode
  #t
  :tests
  '(#(317
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 71 109 145 49 253 56 27 217 23 208 254 209 18 188 158 10 89 36 181 237 91 17 22 126 221 139 35 88 43 60 177 94)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 194 253 32 186 192 110 85 91 184 172 12 230 158 177 234 32 248 58 31 195 80 28 138 102 70 155 26 49 246 25 176 152 98 55 5 7 121 245 43 97 91 215 184 215 106 37 252 149 202 46 211 37 37 199 95 39 255 200 122 195 151 230 203 175)
  :der-encode
  #t
  :tests
  '(#(318
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 33 0 131 116 37 62 62 33 189 21 68 72 208 168 246 64 254 70 250 250 139 25 206 120 213 56 246 204 10 25 102 45 54 1)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 63 214 161 202 127 119 251 59 11 190 114 108 55 32 16 6 132 38 225 30 166 174 120 206 23 190 218 228 187 168 108 237 3 206 85 22 64 107 248 207 170 184 116 94 172 28 214 144 24 173 111 80 181 70 24 114 221 252 86 224 219 60 143 244)
  :der-encode
  #t
  :tests
  '(#(319
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 53 124 253 59 228 208 29 65 60 91 158 222 54 203 165 69 44 17 238 127 225 72 121 231 73 174 106 45 137 122 82 214)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 156 184 229 30 39 165 174 59 98 74 96 214 220 50 115 78 73 137 219 32 233 188 163 237 225 237 247 176 134 145 17 20 180 193 4 171 60 103 126 75 54 214 85 110 138 213 245 35 65 10 25 242 226 119 170 137 95 197 115 34 180 66 117 68)
  :der-encode
  #t
  :tests
  '(#(320
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 41 121 140 92 14 226 135 212 165 232 230 183 153 253 134 184 223 82 37 41 142 111 252 128 124 210 242 188 39 160 166 216)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 163 229 44 21 109 202 241 5 2 98 11 121 85 188 43 64 188 120 239 61 86 158 18 35 194 98 81 45 143 73 96 42 74 32 57 243 28 16 151 2 74 211 204 134 229 115 33 222 3 35 85 70 52 134 22 76 241 146 148 73 119 223 20 127)
  :der-encode
  #t
  :tests
  '(#(321
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 11 112 242 44 120 16 146 69 45 202 26 87 17 250 58 90 31 114 173 209 191 82 194 255 124 174 72 32 179 0 120 221)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 241 155 120 146 135 32 213 190 232 230 112 251 144 1 15 177 92 55 191 145 181 138 81 87 195 243 192 89 178 101 94 136 207 112 30 201 98 251 74 17 220 242 115 245 220 53 126 88 70 133 96 199 207 235 148 45 7 74 189 67 41 38 5 9)
  :der-encode
  #t
  :tests
  '(#(322
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 22 225 228 88 240 33 36 138 91 148 52 174 35 244 116 180 62 229 91 163 126 165 133 254 249 92 144 65 102 0 241 186)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 131 167 68 69 158 205 251 1 165 207 82 178 122 5 187 115 55 72 45 36 47 35 93 123 76 184 147 69 84 92 144 168 192 93 73 51 123 150 73 129 50 135 222 159 254 144 53 95 217 5 223 95 60 50 148 88 40 18 31 55 204 80 222 110)
  :der-encode
  #t
  :tests
  '(#(323
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 34 82 214 133 104 49 182 207 137 94 79 5 53 238 175 14 94 88 9 117 61 248 72 254 118 10 216 98 25 1 106 151)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 221 19 198 179 76 86 152 45 218 225 36 240 57 223 210 63 75 25 187 232 140 238 142 82 138 229 30 93 111 58 33 215 191 173 76 46 111 38 63 229 235 89 202 151 77 3 159 192 228 195 52 86 146 251 83 32 189 174 75 211 180 42 69 255)
  :der-encode
  #t
  :tests
  '(#(324
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 33 0 129 255 229 95 23 141 166 149 178 140 134 216 180 6 177 93 171 26 158 57 102 26 58 224 23 251 227 144 172 9 114 195)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 103 230 246 89 205 222 134 154 47 101 240 148 233 78 91 77 250 214 54 187 249 81 146 254 238 208 27 15 61 235 116 96 163 126 10 81 242 88 183 174 181 29 254 89 47 92 253 86 133 187 229 135 18 200 217 35 60 98 136 100 55 195 139 160)
  :der-encode
  #t
  :tests
  '(#(325
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 127 255 255 255 170 170 170 170 255 255 255 255 255 255 255 255 233 162 83 143 55 178 138 44 81 61 238 64 254 203 183 26)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 46 182 65 37 5 174 192 92 101 69 240 41 147 32 135 228 144 208 85 17 232 236 31 89 150 23 187 54 127 158 202 175 128 95 81 239 204 72 3 64 63 155 26 224 18 72 144 240 106 67 254 220 221 179 24 48 246 102 154 242 146 137 92 176)
  :der-encode
  #t
  :tests
  '(#(326
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 33 0 182 47 38 181 242 162 178 111 109 232 109 66 173 138 19 218 58 179 204 205 4 89 178 1 222 0 158 82 106 223 33 242)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 132 219 100 88 104 234 179 94 58 159 216 14 5 110 46 133 84 53 227 166 182 141 117 165 10 133 70 37 254 13 127 53 109 37 137 172 101 94 220 154 17 239 62 7 94 221 218 154 191 146 231 33 113 87 14 247 191 67 162 238 57 51 140 254)
  :der-encode
  #t
  :tests
  '(#(327
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 33 0 187 29 154 201 73 221 116 140 208 43 187 231 73 189 53 28 213 123 56 187 97 64 61 112 6 134 170 123 76 144 133 30)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 145 185 228 124 86 39 134 98 215 92 9 131 178 44 168 234 106 165 5 155 122 47 247 99 126 178 151 94 56 106 214 99 73 170 143 242 131 208 247 124 24 214 209 29 192 98 22 95 209 60 60 3 16 103 156 20 8 48 42 22 133 78 207 189)
  :der-encode
  #t
  :tests
  '(#(328
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 102 117 90 0 99 140 218 236 28 115 37 19 202 2 52 236 229 37 69 218 193 31 129 110 129 143 114 91 79 96 170 242)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 243 236 47 19 202 240 77 1 146 180 127 180 197 49 31 182 212 220 107 10 158 128 46 83 39 247 236 94 232 228 131 77 249 126 62 70 139 125 13 184 103 214 236 254 129 226 176 249 83 29 248 126 253 180 124 19 56 172 50 31 239 229 164 50)
  :der-encode
  #t
  :tests
  '(#(329
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 85 160 12 159 205 174 187 96 50 81 60 160 35 78 207 255 233 142 190 73 47 223 2 228 140 164 142 152 43 235 54 105)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 217 43 32 10 239 202 182 172 125 175 217 172 175 47 161 11 49 128 35 91 143 70 180 80 62 70 147 198 112 252 204 136 94 242 243 174 191 91 49 116 117 51 98 86 118 143 124 25 239 183 53 45 39 228 204 202 220 133 182 184 171 146 44 114)
  :der-encode
  #t
  :tests
  '(#(330
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 33 0 171 64 25 63 155 93 118 192 100 162 121 64 70 157 159 255 211 29 124 146 95 190 5 201 25 73 29 48 87 214 108 210)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 10 136 54 30 185 46 204 162 98 91 56 229 249 139 186 187 150 191 23 155 61 118 252 72 20 10 59 205 136 21 35 205 230 189 245 96 51 248 74 80 84 3 85 151 55 93 144 134 106 162 201 107 134 164 28 207 110 222 191 71 41 138 212 137)
  :der-encode
  #t
  :tests
  '(#(331
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 33 0 202 2 52 235 181 253 203 19 202 2 52 236 255 255 255 255 203 13 173 187 199 245 73 248 162 107 68 8 208 220 134 0)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 208 251 23 204 216 250 254 130 126 12 26 252 93 141 128 54 110 43 32 231 241 74 86 58 43 165 4 105 216 67 117 232 104 97 37 105 211 158 43 185 245 84 53 85 100 100 109 233 154 198 2 204 99 73 207 140 30 35 106 125 231 99 125 147)
  :der-encode
  #t
  :tests
  '(#(332
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 33 0 191 255 255 255 62 163 103 126 8 43 147 16 87 38 32 174 25 147 58 158 101 178 133 89 135 17 199 114 152 129 90 211)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 131 111 51 187 193 220 13 61 58 187 206 240 217 31 17 226 172 65 129 7 108 154 240 162 43 30 67 9 211 237 178 118 154 180 67 255 111 144 30 48 199 115 134 117 130 153 124 43 236 43 12 184 18 13 118 2 54 243 169 91 190 136 31 117)
  :der-encode
  #t
  :tests
  '(#(333
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 38 102 102 102 59 187 187 187 230 102 102 102 102 102 102 102 91 55 144 46 2 63 171 124 143 5 93 134 229 204 65 244)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 146 249 159 190 151 62 212 162 153 113 155 174 228 180 50 116 18 55 3 77 236 141 114 186 81 3 203 51 229 95 238 184 3 61 208 233 17 52 199 52 23 72 137 243 235 207 27 122 26 192 87 103 40 146 128 238 122 121 76 235 214 230 150 151)
  :der-encode
  #t
  :tests
  '(#(334
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 33 0 191 255 255 255 54 219 109 183 164 146 73 36 146 73 36 146 20 108 87 63 76 109 252 141 8 164 67 226 88 151 11 9)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 211 91 165 141 163 1 151 211 120 230 24 236 15 167 226 226 209 44 255 215 62 187 178 4 157 19 11 186 67 74 240 158 255 131 152 110 104 117 228 30 164 50 183 88 90 73 179 166 199 124 187 60 71 145 159 142 130 135 76 121 70 53 193 210)
  :der-encode
  #t
  :tests
  '(#(335
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 33 0 191 255 255 255 42 170 170 171 127 255 255 255 255 255 255 255 200 21 208 230 11 62 89 110 203 26 211 162 124 253 73 196)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 134 81 206 73 15 27 70 215 63 63 244 117 20 155 226 145 54 105 115 52 165 25 215 221 171 7 37 200 208 121 50 36 225 28 101 189 140 169 45 200 188 154 232 41 17 240 181 39 81 206 33 221 144 3 174 96 144 11 216 37 245 144 204 40)
  :der-encode
  #t
  :tests
  '(#(336
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 127 255 255 255 85 85 85 85 255 255 255 255 255 255 255 255 211 68 167 30 111 101 20 88 162 123 220 129 253 151 110 55)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 109 142 27 18 200 49 160 218 135 149 101 15 249 95 16 30 217 33 217 226 247 43 21 177 205 172 169 130 107 156 252 109 239 109 99 226 188 92 8 149 112 57 74 75 201 248 146 213 230 199 166 166 55 178 4 105 165 140 16 106 212 134 191 55)
  :der-encode
  #t
  :tests
  '(#(337
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 63 255 255 255 128 0 0 0 127 255 255 255 255 255 255 255 222 115 125 86 211 139 207 66 121 220 229 97 126 49 146 170)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 10 229 128 186 233 51 180 239 41 151 203 219 176 146 35 40 202 154 65 15 98 122 15 125 255 36 203 77 146 14 21 66 137 17 231 248 204 54 90 138 136 235 129 66 26 54 28 204 43 153 227 9 216 220 217 169 139 168 60 57 73 216 147 227)
  :der-encode
  #t
  :tests
  '(#(338
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 93 142 205 100 164 238 186 70 104 21 221 243 164 222 154 142 106 189 156 93 176 160 30 184 3 67 85 61 166 72 66 143)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 91 129 47 213 33 170 250 105 131 90 132 156 206 111 189 235 105 131 180 66 210 68 79 231 14 19 76 2 127 196 105 99 131 138 64 242 163 96 146 233 0 78 146 216 217 64 207 86 56 85 12 230 114 206 139 141 78 21 235 165 73 146 73 233)
  :der-encode
  #t
  :tests
  '(#(339
      "point duplication during verification"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 111 35 71 202 183 221 118 133 143 224 85 90 195 188 153 4 140 74 172 175 223 182 188 190 5 234 108 66 196 147 69 105 2 33 0 187 114 102 96 35 87 147 170 153 87 166 30 118 224 12 44 67 81 9 207 154 21 221 98 77 83 244 48 16 71 133 107)
      #t
      ("PointDuplication"))))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 91 129 47 213 33 170 250 105 131 90 132 156 206 111 189 235 105 131 180 66 210 68 79 231 14 19 76 2 127 196 105 99 124 117 191 12 92 159 109 23 255 177 109 39 38 191 48 169 199 170 243 26 141 49 116 114 177 234 20 90 182 109 182 22)
  :der-encode
  #t
  :tests
  '(#(340
      "duplication bug"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 111 35 71 202 183 221 118 133 143 224 85 90 195 188 153 4 140 74 172 175 223 182 188 190 5 234 108 66 196 147 69 105 2 33 0 187 114 102 96 35 87 147 170 153 87 166 30 118 224 12 44 67 81 9 207 154 21 221 98 77 83 244 48 16 71 133 107)
      #f
      ("PointDuplication"))))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 106 221 168 43 144 38 27 15 49 159 170 13 135 134 101 166 182 218 73 127 9 201 3 23 98 34 195 74 207 239 114 166 71 230 245 13 204 64 173 93 155 89 247 96 43 178 34 250 215 26 65 191 94 31 157 244 149 154 54 76 98 228 136 217)
  :der-encode
  #t
  :tests
  '(#(341
      "point with x-coordinate 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 37 2 1 1 2 32 85 85 85 85 0 0 0 0 85 85 85 85 85 85 85 85 62 247 168 228 141 7 223 129 166 147 67 150 84 33 12 112)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 47 202 13 10 71 145 77 231 126 213 110 126 204 195 39 106 96 17 32 198 223 0 105 200 37 200 246 160 28 159 56 32 101 243 69 10 29 23 198 178 73 137 163 155 235 28 125 236 252 168 56 79 189 194 148 65 142 93 128 123 60 110 215 222)
  :der-encode
  #t
  :tests
  '(#(342
      "point with x-coordinate 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 32 51 51 51 51 0 0 0 0 51 51 51 51 51 51 51 51 37 199 203 188 84 158 82 231 99 241 245 90 50 122 58 169)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 221 134 211 181 244 161 62 133 17 8 59 120 0 32 129 197 63 244 103 241 30 189 152 165 26 99 61 183 102 101 210 80 69 213 200 32 12 137 242 250 16 216 73 52 146 38 210 29 141 250 237 111 248 213 203 62 27 126 23 71 78 188 24 247)
  :der-encode
  #t
  :tests
  '(#(343
      "comparison with point at infinity "
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 85 85 85 85 0 0 0 0 85 85 85 85 85 85 85 85 62 247 168 228 141 7 223 129 166 147 67 150 84 33 12 112 2 32 51 51 51 51 0 0 0 0 51 51 51 51 51 51 51 51 37 199 203 188 84 158 82 231 99 241 245 90 50 122 58 169)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 79 234 85 179 44 179 42 202 12 18 196 205 10 191 180 230 75 15 90 81 110 87 140 1 101 145 169 63 90 15 188 197 215 211 253 16 178 190 102 140 84 123 33 47 107 177 76 136 240 254 205 56 168 164 178 199 133 237 59 230 44 228 178 128)
  :der-encode
  #t
  :tests
  '(#(344
      "extreme value for k and edgecase s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 124 242 123 24 141 3 79 126 138 82 56 3 4 181 26 195 192 137 105 226 119 242 27 53 166 11 72 252 71 102 153 120 2 32 85 85 85 85 0 0 0 0 85 85 85 85 85 85 85 85 62 247 168 228 141 7 223 129 166 147 67 150 84 33 12 112)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 198 167 113 82 112 36 34 119 146 23 10 111 142 238 115 91 243 43 127 152 175 102 158 173 41 152 2 227 45 124 49 7 188 59 75 94 101 171 136 123 189 52 53 114 179 229 97 146 97 254 58 7 62 47 253 120 65 47 114 104 103 219 88 158)
  :der-encode
  #t
  :tests
  '(#(345
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 124 242 123 24 141 3 79 126 138 82 56 3 4 181 26 195 192 137 105 226 119 242 27 53 166 11 72 252 71 102 153 120 2 33 0 182 219 109 182 36 146 73 37 73 36 146 73 36 146 73 36 98 91 215 160 155 236 76 168 27 205 217 248 253 107 99 204)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 133 28 43 186 208 142 84 236 122 154 249 159 73 240 54 68 214 236 109 89 178 7 254 201 141 232 90 125 21 185 86 239 206 233 150 2 131 4 80 117 104 75 65 11 232 208 247 73 75 145 170 35 121 246 7 39 49 159 16 221 235 15 233 214)
  :der-encode
  #t
  :tests
  '(#(346
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 124 242 123 24 141 3 79 126 138 82 56 3 4 181 26 195 192 137 105 226 119 242 27 53 166 11 72 252 71 102 153 120 2 33 0 204 204 204 204 0 0 0 0 204 204 204 204 204 204 204 204 151 31 46 241 82 121 75 157 143 199 213 104 201 232 234 167)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 246 65 124 138 103 5 132 227 136 103 105 73 229 61 167 252 85 145 31 246 131 24 209 191 48 97 32 90 203 25 196 143 143 43 116 61 243 74 208 247 38 116 172 183 80 89 41 120 71 121 205 154 201 22 195 102 158 173 67 2 106 182 212 63)
  :der-encode
  #t
  :tests
  '(#(347
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 124 242 123 24 141 3 79 126 138 82 56 3 4 181 26 195 192 137 105 226 119 242 27 53 166 11 72 252 71 102 153 120 2 32 51 51 51 51 0 0 0 0 51 51 51 51 51 51 51 51 37 199 203 188 84 158 82 231 99 241 245 90 50 122 58 170)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 80 20 33 39 123 228 90 94 239 236 108 99 153 48 214 54 3 37 101 175 66 12 243 55 63 85 127 170 127 138 6 67 134 115 214 203 96 118 225 207 205 199 223 231 56 76 142 92 172 8 215 69 1 242 174 110 137 202 209 149 208 170 19 113)
  :der-encode
  #t
  :tests
  '(#(348
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 124 242 123 24 141 3 79 126 138 82 56 3 4 181 26 195 192 137 105 226 119 242 27 53 166 11 72 252 71 102 153 120 2 32 73 36 146 72 219 109 182 219 182 219 109 182 219 109 182 219 90 139 35 13 11 43 81 220 215 235 240 201 254 247 193 133)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 13 147 91 249 255 193 21 165 39 115 95 114 156 168 164 202 35 238 1 164 137 74 223 14 52 21 172 132 232 8 187 52 49 149 163 118 47 234 41 237 56 145 43 217 234 108 79 222 112 195 5 8 147 164 55 88 80 206 97 216 46 186 51 197)
  :der-encode
  #t
  :tests
  '(#(349
      "extreme value for k"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 124 242 123 24 141 3 79 126 138 82 56 3 4 181 26 195 192 137 105 226 119 242 27 53 166 11 72 252 71 102 153 120 2 32 22 164 80 46 39 129 225 26 200 44 188 157 30 221 140 152 21 132 209 62 24 65 30 47 110 4 120 195 68 22 227 187)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 94 89 245 7 8 100 107 232 165 137 53 80 20 48 142 96 182 104 251 103 1 150 32 108 65 231 72 230 78 77 202 33 93 227 127 238 92 151 188 175 113 68 213 180 89 152 47 82 238 234 251 223 3 170 203 175 239 56 226 19 98 74 1 222)
  :der-encode
  #t
  :tests
  '(#(350
      "extreme value for k and edgecase s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 107 23 209 242 225 44 66 71 248 188 230 229 99 164 64 242 119 3 125 129 45 235 51 160 244 161 57 69 216 152 194 150 2 32 85 85 85 85 0 0 0 0 85 85 85 85 85 85 85 85 62 247 168 228 141 7 223 129 166 147 67 150 84 33 12 112)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 22 159 183 151 50 88 67 250 255 47 122 91 84 69 218 158 47 214 34 111 126 249 14 240 191 233 36 16 75 2 219 142 123 187 141 230 98 199 185 177 207 155 34 247 162 229 130 189 70 213 129 214 136 120 239 178 184 97 177 49 216 161 214 103)
  :der-encode
  #t
  :tests
  '(#(351
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 107 23 209 242 225 44 66 71 248 188 230 229 99 164 64 242 119 3 125 129 45 235 51 160 244 161 57 69 216 152 194 150 2 33 0 182 219 109 182 36 146 73 37 73 36 146 73 36 146 73 36 98 91 215 160 155 236 76 168 27 205 217 248 253 107 99 204)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 39 28 216 156 0 1 67 9 107 98 212 233 228 202 136 90 239 47 112 35 209 138 255 218 248 183 181 72 152 20 135 84 10 28 110 149 78 50 16 132 53 181 95 163 133 176 247 100 129 166 9 185 20 156 203 75 2 178 202 71 254 142 77 165)
  :der-encode
  #t
  :tests
  '(#(352
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 107 23 209 242 225 44 66 71 248 188 230 229 99 164 64 242 119 3 125 129 45 235 51 160 244 161 57 69 216 152 194 150 2 33 0 204 204 204 204 0 0 0 0 204 204 204 204 204 204 204 204 151 31 46 241 82 121 75 157 143 199 213 104 201 232 234 167)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 61 11 199 237 143 9 210 203 125 219 70 235 193 237 121 154 177 86 58 154 184 75 245 36 88 122 34 10 254 73 156 18 226 45 195 179 193 3 130 74 79 55 141 150 173 176 164 8 171 241 156 231 214 138 166 36 79 120 203 33 111 163 248 223)
  :der-encode
  #t
  :tests
  '(#(353
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 107 23 209 242 225 44 66 71 248 188 230 229 99 164 64 242 119 3 125 129 45 235 51 160 244 161 57 69 216 152 194 150 2 32 51 51 51 51 0 0 0 0 51 51 51 51 51 51 51 51 37 199 203 188 84 158 82 231 99 241 245 90 50 122 58 170)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 166 200 133 173 225 164 197 102 249 187 1 13 6 105 116 171 178 129 121 127 167 1 40 140 114 27 203 210 54 99 169 183 46 66 75 105 9 87 22 141 25 58 96 150 252 119 162 176 4 169 199 212 103 224 7 225 242 5 132 88 249 138 243 22)
  :der-encode
  #t
  :tests
  '(#(354
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 107 23 209 242 225 44 66 71 248 188 230 229 99 164 64 242 119 3 125 129 45 235 51 160 244 161 57 69 216 152 194 150 2 32 73 36 146 72 219 109 182 219 182 219 109 182 219 109 182 219 90 139 35 13 11 43 81 220 215 235 240 201 254 247 193 133)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 141 60 44 44 59 118 91 168 40 158 106 195 129 37 114 162 91 247 93 246 45 135 171 115 48 195 189 186 217 235 250 92 76 104 69 68 45 102 147 91 35 133 120 212 58 236 84 247 202 161 98 29 26 242 65 212 99 46 11 120 12 66 63 93)
  :der-encode
  #t
  :tests
  '(#(355
      "extreme value for k"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 107 23 209 242 225 44 66 71 248 188 230 229 99 164 64 242 119 3 125 129 45 235 51 160 244 161 57 69 216 152 194 150 2 32 22 164 80 46 39 129 225 26 200 44 188 157 30 221 140 152 21 132 209 62 24 65 30 47 110 4 120 195 68 22 227 187)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 107 23 209 242 225 44 66 71 248 188 230 229 99 164 64 242 119 3 125 129 45 235 51 160 244 161 57 69 216 152 194 150 79 227 66 226 254 26 127 155 142 231 235 74 124 15 158 22 43 206 51 87 107 49 94 206 203 182 64 104 55 191 81 245)
  :der-encode
  #t
  :tests
  '(#(356
      "testing point duplication"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 187 90 82 244 47 156 146 97 237 67 97 245 148 34 161 227 0 54 231 195 43 39 12 136 7 164 25 254 202 96 80 35 2 32 36 146 73 36 109 182 219 109 219 109 182 219 109 182 219 109 173 69 145 134 133 149 168 238 107 245 248 100 255 123 224 194)
      #f
      ())
    #(357
      "testing point duplication"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 68 165 173 10 208 99 109 159 18 188 158 10 107 221 94 28 188 176 18 234 123 240 145 252 236 21 176 196 50 2 213 46 2 32 36 146 73 36 109 182 219 109 219 109 182 219 109 182 219 109 173 69 145 134 133 149 168 238 107 245 248 100 255 123 224 194)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 107 23 209 242 225 44 66 71 248 188 230 229 99 164 64 242 119 3 125 129 45 235 51 160 244 161 57 69 216 152 194 150 176 28 189 28 1 229 128 101 113 24 20 181 131 240 97 233 212 49 204 169 148 206 161 49 52 73 191 151 200 64 174 10)
  :der-encode
  #t
  :tests
  '(#(358
      "testing point duplication"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 187 90 82 244 47 156 146 97 237 67 97 245 148 34 161 227 0 54 231 195 43 39 12 136 7 164 25 254 202 96 80 35 2 32 36 146 73 36 109 182 219 109 219 109 182 219 109 182 219 109 173 69 145 134 133 149 168 238 107 245 248 100 255 123 224 194)
      #f
      ())
    #(359
      "testing point duplication"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 68 165 173 10 208 99 109 159 18 188 158 10 107 221 94 28 188 176 18 234 123 240 145 252 236 21 176 196 50 2 213 46 2 32 36 146 73 36 109 182 219 109 219 109 182 219 109 182 219 109 173 69 145 134 133 149 168 238 107 245 248 100 255 123 224 194)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 4 170 236 115 99 87 38 242 19 251 138 158 100 218 59 134 50 228 20 149 169 68 208 4 91 82 46 186 114 64 250 213 135 217 49 87 152 170 163 165 186 1 119 87 135 206 208 94 170 247 180 224 159 200 29 109 26 165 70 232 54 93 82 93)
  :der-encode
  #t
  :tests
  '(#(360
      "pseudorandom signature"
      #vu8()
      #vu8(48 69 2 33 0 178 146 166 25 51 159 110 86 122 48 92 149 28 13 203 204 66 209 110 71 242 25 249 233 142 118 224 157 135 112 179 74 2 32 1 119 230 4 146 197 168 36 47 118 240 123 254 54 97 189 229 158 194 161 124 229 189 45 171 42 190 189 248 154 98 226)
      #t
      ())
    #(361
      "pseudorandom signature"
      #vu8(77 115 103)
      #vu8(48 69 2 32 83 11 214 176 201 175 45 105 186 137 127 107 95 181 150 149 207 191 51 175 230 109 186 220 245 184 210 162 166 83 142 35 2 33 0 216 94 72 156 183 161 97 253 85 237 237 206 219 244 204 12 9 135 227 227 240 242 66 202 233 52 199 44 170 63 67 233)
      #t
      ())
    #(362
      "pseudorandom signature"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 168 234 21 12 184 1 37 215 56 28 76 31 29 168 233 222 39 17 249 145 112 96 64 106 115 215 144 69 25 229 19 136 2 33 0 243 171 159 166 139 212 121 115 167 59 45 64 72 12 43 165 12 34 201 215 110 194 23 37 114 136 41 50 133 68 155 134)
      #t
      ())
    #(363
      "pseudorandom signature"
      #vu8(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      #vu8(48 69 2 33 0 152 110 101 147 62 242 237 78 229 170 218 19 159 82 183 5 57 170 246 63 0 169 31 41 198 145 120 73 13 87 251 113 2 32 61 175 237 251 141 166 24 157 55 35 8 203 241 72 155 187 218 191 12 2 23 209 192 255 15 112 26 170 122 105 75 156)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 79 51 124 207 214 119 38 168 5 228 241 96 10 226 132 157 243 128 126 202 17 115 128 35 159 189 129 105 0 0 0 0 237 157 234 18 76 200 195 150 65 100 17 233 136 195 15 66 126 181 4 175 67 163 20 108 213 223 126 166 6 102 214 133)
  :der-encode
  #t
  :tests
  '(#(364
      "x-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 70 2 33 0 212 52 226 98 164 158 171 119 129 227 83 163 86 94 72 37 80 221 15 213 222 250 1 60 127 41 116 94 255 53 105 241 2 33 0 155 12 10 147 242 103 251 96 82 253 128 119 190 118 156 43 152 149 49 149 215 188 16 222 132 66 24 48 92 107 161 122)
      #t
      ())
    #(365
      "x-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 15 231 116 53 92 4 208 96 247 109 121 253 122 119 46 66 20 99 72 146 33 191 10 51 173 208 190 155 25 121 17 11 2 32 80 13 203 161 198 154 143 189 67 250 79 87 247 67 206 18 76 168 185 26 31 50 95 63 172 97 129 23 93 245 87 55)
      #t
      ())
    #(366
      "x-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 33 0 187 64 191 33 123 237 63 179 149 12 125 57 240 61 54 220 142 59 44 215 150 147 241 37 191 208 101 149 238 17 53 227 2 32 84 27 243 83 35 81 235 176 50 113 11 219 106 27 241 191 200 154 30 41 26 198 146 179 250 71 128 116 91 181 86 119)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 60 240 61 97 77 137 57 207 212 153 160 120 115 250 194 129 97 143 6 184 255 135 232 1 92 63 73 114 101 0 73 53 132 250 23 77 121 28 114 191 44 227 136 10 137 96 221 42 124 122 19 56 168 47 133 169 229 156 219 222 128 0 0 0)
  :der-encode
  #t
  :tests
  '(#(367
      "y-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 102 78 183 238 109 184 74 52 223 60 134 234 49 56 154 84 5 186 221 92 169 146 49 255 85 109 62 117 162 51 231 58 2 32 89 243 199 82 229 46 202 70 19 118 66 73 10 81 86 12 224 186 220 103 135 84 184 247 46 81 162 144 20 38 161 189)
      #t
      ())
    #(368
      "y-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 32 76 208 66 155 186 189 40 39 0 157 111 205 132 61 76 227 156 62 66 226 209 99 31 208 1 152 90 121 209 253 139 67 2 33 0 150 56 191 18 221 104 47 96 190 126 241 208 224 217 143 8 183 188 167 122 26 43 134 154 228 102 24 157 42 205 171 227)
      #t
      ())
    #(369
      "y-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 70 2 33 0 229 108 110 162 209 176 23 9 28 68 216 182 203 98 185 244 96 227 206 154 237 94 95 212 30 138 221 237 151 197 108 4 2 33 0 163 8 236 49 242 129 233 85 190 32 180 87 228 99 68 11 79 207 43 128 37 128 120 32 127 193 55 129 128 248 155 85)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 60 240 61 97 77 137 57 207 212 153 160 120 115 250 194 129 97 143 6 184 255 135 232 1 92 63 73 114 101 0 73 53 123 5 232 177 134 227 141 65 211 28 119 245 118 159 34 213 131 133 236 200 87 208 122 86 26 99 36 33 127 255 255 255)
  :der-encode
  #t
  :tests
  '(#(370
      "y-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 17 88 160 141 41 21 0 180 202 190 211 52 109 137 30 238 87 193 118 53 106 38 36 251 1 31 143 187 243 70 104 48 2 32 34 138 140 72 106 115 96 6 224 130 50 91 133 41 12 91 201 31 55 139 117 212 135 221 164 103 152 193 143 40 85 25)
      #t
      ())
    #(371
      "y-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 33 0 177 219 146 137 100 159 89 65 14 163 107 12 15 200 214 170 38 135 178 145 118 147 157 210 62 13 222 86 211 9 250 157 2 32 62 21 53 228 40 5 89 1 91 13 189 152 115 102 220 244 58 109 26 245 194 60 125 88 78 28 63 72 161 37 19 54)
      #t
      ())
    #(372
      "y-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 70 2 33 0 183 177 110 118 34 134 203 150 68 106 168 212 230 231 87 139 10 52 26 121 242 221 26 34 10 198 240 202 78 36 237 134 2 33 0 221 198 10 112 10 19 155 4 102 28 84 125 7 187 176 114 23 128 20 109 247 153 204 245 94 85 35 78 203 143 18 188)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 40 41 195 31 170 46 64 14 52 78 217 75 202 63 205 5 69 149 110 188 254 138 208 246 223 165 255 142 255 255 255 255 160 26 175 175 0 14 82 88 88 85 175 167 103 106 222 40 65 19 9 144 82 223 87 231 235 59 211 126 190 185 34 46)
  :der-encode
  #t
  :tests
  '(#(373
      "x-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 33 0 216 42 124 39 23 38 17 135 200 224 13 141 249 99 255 53 215 150 237 173 54 188 110 107 209 201 28 103 13 145 5 180 2 32 61 202 189 218 248 252 170 97 244 96 62 124 186 192 243 192 53 30 205 89 136 239 178 63 104 13 7 222 189 19 153 41)
      #t
      ())
    #(374
      "x-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 94 185 200 132 93 230 142 177 61 91 239 231 25 244 98 215 119 135 128 43 175 243 12 233 106 92 186 6 50 84 175 120 2 32 44 2 106 233 190 46 42 94 124 160 255 155 189 146 251 110 68 151 33 134 34 142 233 166 43 135 221 190 46 246 111 181)
      #t
      ())
    #(375
      "x-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 70 2 33 0 150 132 61 208 60 34 171 210 243 183 130 177 112 35 159 144 242 119 146 27 236 193 23 208 64 74 142 78 54 35 12 40 2 33 0 242 190 55 143 82 111 116 165 67 246 113 101 151 109 233 237 154 49 33 78 180 215 230 219 25 225 237 225 35 221 153 29)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 255 255 255 249 72 8 30 106 4 88 221 143 158 115 143 38 101 255 144 89 173 106 172 7 8 49 140 76 169 167 164 245 90 138 188 186 45 218 132 116 49 30 229 65 73 185 115 202 224 192 251 137 85 122 208 191 120 230 82 154 22 99 189 115)
  :der-encode
  #t
  :tests
  '(#(376
      "x-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 118 100 86 220 225 133 124 144 111 153 150 175 114 147 57 70 77 39 233 217 142 220 45 14 59 118 2 151 6 116 33 246 2 32 64 35 133 236 173 174 13 128 129 220 202 245 209 144 55 236 78 85 55 110 206 214 153 233 54 70 191 187 241 157 11 65)
      #t
      ())
    #(377
      "x-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 70 2 33 0 198 5 196 178 237 234 178 4 25 230 81 138 17 178 219 194 185 126 216 176 124 206 208 177 156 52 247 119 222 123 159 217 2 33 0 237 240 246 18 197 244 110 3 199 25 100 123 200 175 27 41 178 205 226 237 167 0 251 28 255 94 21 157 71 50 109 186)
      #t
      ())
    #(378
      "x-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 70 2 33 0 212 139 104 230 202 191 224 60 246 20 28 154 197 65 65 242 16 230 68 133 217 146 154 215 183 50 191 227 183 235 138 132 2 33 0 254 237 174 80 198 27 208 14 25 220 38 249 183 226 38 94 69 8 195 137 16 154 210 242 8 240 119 35 21 182 201 65)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 0 0 0 3 250 21 249 99 148 157 95 3 166 245 199 248 111 158 0 21 238 178 58 235 191 241 23 57 55 186 116 142 16 153 135 32 112 232 232 124 85 95 161 54 89 204 165 215 250 220 252 176 2 62 168 137 84 140 164 138 242 186 126 113)
  :der-encode
  #t
  :tests
  '(#(379
      "x-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 70 2 33 0 183 200 20 87 212 174 182 170 101 149 112 152 86 159 4 121 113 10 215 246 89 93 88 116 195 90 147 209 42 93 212 199 2 33 0 183 150 26 11 101 40 120 194 213 104 6 154 67 44 161 138 26 145 153 242 202 87 77 173 75 158 58 5 192 161 205 179)
      #t
      ())
    #(380
      "x-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 107 1 51 45 219 110 223 169 163 10 19 33 213 133 142 30 227 207 151 226 99 230 105 248 222 94 150 82 231 111 243 247 2 32 89 57 84 95 206 212 87 48 154 106 4 172 226 189 15 112 19 156 143 125 134 176 44 177 204 88 249 230 158 150 205 90)
      #t
      ())
    #(381
      "x-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 70 2 33 0 239 219 136 71 32 234 234 220 52 159 159 195 86 182 192 52 65 1 205 47 216 67 107 125 14 106 79 185 63 16 99 97 2 33 0 242 75 238 106 213 220 5 247 97 57 117 71 58 173 243 170 203 169 231 125 231 214 155 108 228 140 182 13 129 19 56 93)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 188 187 41 20 199 159 4 94 170 110 203 188 97 40 22 179 190 93 45 103 150 112 125 129 37 233 248 81 193 138 240 21 0 0 0 0 19 82 187 74 15 162 234 76 206 185 171 99 221 104 74 222 90 17 39 188 243 0 166 152 167 25 59 194)
  :der-encode
  #t
  :tests
  '(#(382
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 49 35 4 40 64 85 96 220 184 143 181 166 70 131 106 234 155 35 162 61 217 115 220 190 128 20 200 123 139 32 235 7 2 32 15 147 68 214 232 18 206 22 102 70 116 118 148 164 27 10 175 151 55 78 25 243 197 251 139 215 174 61 155 208 190 255)
      #t
      ())
    #(383
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 70 2 33 0 202 167 151 218 101 179 32 171 13 92 71 12 218 11 54 178 148 53 156 125 185 132 29 103 145 116 219 52 196 133 87 67 2 33 0 207 84 58 98 242 62 33 39 69 57 26 175 117 5 243 69 18 61 38 133 238 59 148 29 61 230 217 179 98 66 229 160)
      #t
      ())
    #(384
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 32 126 95 10 181 217 0 211 211 215 134 118 87 229 214 211 101 25 188 84 8 69 54 231 210 28 51 110 216 0 24 89 69 2 33 0 148 80 192 127 32 31 174 201 75 130 223 179 34 229 172 103 102 136 41 74 173 53 170 114 231 39 255 11 25 182 70 170)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 188 187 41 20 199 159 4 94 170 110 203 188 97 40 22 179 190 93 45 103 150 112 125 129 37 233 248 81 193 138 240 21 255 255 255 254 236 173 68 182 240 93 21 179 49 70 84 156 34 151 181 34 165 238 216 67 12 255 89 103 88 230 196 61)
  :der-encode
  #t
  :tests
  '(#(385
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 70 2 33 0 215 215 12 88 26 233 227 246 109 198 164 128 191 3 122 226 63 138 30 74 33 54 254 75 3 170 105 240 202 37 179 86 2 33 0 137 196 96 248 165 165 194 187 186 150 44 138 62 232 51 164 19 232 86 88 230 42 89 226 175 65 217 18 124 196 114 36)
      #t
      ())
    #(386
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 52 28 27 159 243 200 61 213 224 223 160 191 104 188 223 75 183 170 32 198 37 151 94 94 238 227 75 179 150 38 107 52 2 32 114 182 159 6 27 117 15 213 18 27 34 177 19 102 250 213 73 198 52 231 119 101 160 23 144 42 103 9 158 10 68 105)
      #t
      ())
    #(387
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 32 112 190 190 104 76 220 181 202 114 164 47 13 135 56 121 53 155 209 120 26 89 24 9 148 118 40 211 19 163 129 79 103 2 33 0 174 192 58 202 143 85 135 164 213 53 250 49 2 123 190 156 192 228 100 177 195 87 127 76 45 205 230 178 9 71 152 169)
      #t
      ())))
