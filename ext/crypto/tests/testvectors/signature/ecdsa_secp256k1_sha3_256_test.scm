(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 184 56 255 68 229 188 23 123 242 17 137 208 118 96 130 252 157 132 50 38 136 127 201 118 3 113 16 11 126 226 10 111 240 201 215 91 251 167 179 26 107 202 25 116 73 110 235 86 222 53 112 113 149 93 131 196 177 186 218 160 178 24 50 233)
  :der-encode
  #t
  :tests
  '(#(1
      "signature malleability"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 33 0 187 219 194 110 16 153 178 113 58 218 52 223 156 250 142 218 249 5 164 166 210 161 244 73 240 93 224 61 248 194 166 150)
      #t
      ())
    #(2
      "Legacy:ASN encoding of r misses leading 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #t
      ("MissingZero"))
    #(3
      "valid"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #t
      ())
    #(4
      "long form encoding of length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 129 69 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ("BER"))
    #(5
      "length of sequence contains leading 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 130 0 69 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ("BER"))
    #(6
      "wrong length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(7
      "wrong length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(8
      "uint32 overflow in length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 133 1 0 0 0 69 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(9
      "uint64 overflow in length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 137 1 0 0 0 0 0 0 0 69 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(10
      "length of sequence = 2**31 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 132 127 255 255 255 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(11
      "length of sequence = 2**32 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 132 255 255 255 255 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(12
      "length of sequence = 2**40 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 133 255 255 255 255 255 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(13
      "length of sequence = 2**64 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 136 255 255 255 255 255 255 255 255 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(14
      "incorrect length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 255 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(15
      "indefinite length without termination"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(16
      "indefinite length without termination"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 128 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(17
      "indefinite length without termination"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 128 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(18
      "removing sequence"
      #vu8(49 50 51 52 48 48)
      #vu8()
      #f
      ())
    #(19
      "lonely sequence tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48)
      #f
      ())
    #(20
      "appending 0's to sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171 0 0)
      #f
      ())
    #(21
      "prepending 0's to sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 0 0 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(22
      "appending unused 0's to sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171 0 0)
      #f
      ())
    #(23
      "appending null value to sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171 5 0)
      #f
      ())
    #(24
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 74 73 129 119 48 69 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(25
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 37 0 48 69 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(26
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 48 69 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171 0 4 222 173 190 239)
      #f
      ())
    #(27
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 74 34 38 73 129 119 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(28
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 34 37 37 0 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(29
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 77 34 35 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 0 4 222 173 190 239 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(30
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 74 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 34 37 73 129 119 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(31
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 34 36 37 0 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(32
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 77 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 34 34 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171 0 4 222 173 190 239)
      #f
      ())
    #(33
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 77 170 0 187 0 205 0 48 69 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(34
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 75 170 2 170 187 48 69 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(35
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 77 34 41 170 0 187 0 205 0 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(36
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 75 34 39 170 2 170 187 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(37
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 77 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 34 40 170 0 187 0 205 0 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(38
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 75 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 34 38 170 2 170 187 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(39
      "truncated length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 129)
      #f
      ())
    #(40
      "using composition with indefinite length"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 48 69 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171 0 0)
      #f
      ())
    #(41
      "using composition with indefinite length"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 34 128 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 0 0 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(42
      "using composition with indefinite length"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 34 128 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171 0 0)
      #f
      ())
    #(43
      "using composition with wrong tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 49 69 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171 0 0)
      #f
      ())
    #(44
      "using composition with wrong tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 34 128 3 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 0 0 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(45
      "using composition with wrong tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 34 128 3 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171 0 0)
      #f
      ())
    #(46
      "Replacing sequence with NULL"
      #vu8(49 50 51 52 48 48)
      #vu8(5 0)
      #f
      ())
    #(47
      "changing tag value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(46 69 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(48
      "changing tag value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(47 69 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(49
      "changing tag value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(49 69 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(50
      "changing tag value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(50 69 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(51
      "changing tag value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(255 69 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(52
      "dropping value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 0)
      #f
      ())
    #(53
      "using composition for sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 48 1 2 48 68 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(54
      "truncated sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154)
      #f
      ())
    #(55
      "truncated sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(56
      "indefinite length"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171 0 0)
      #f
      ("BER"))
    #(57
      "indefinite length with truncated delimiter"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171 0)
      #f
      ())
    #(58
      "indefinite length with additional element"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171 5 0 0 0)
      #f
      ())
    #(59
      "indefinite length with truncated element"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171 6 8 17 34 0 0)
      #f
      ())
    #(60
      "indefinite length with garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171 0 0 254 2 190 239)
      #f
      ())
    #(61
      "indefinite length with nonempty EOC"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171 0 2 190 239)
      #f
      ())
    #(62
      "prepend empty sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 48 0 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(63
      "append empty sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171 48 0)
      #f
      ())
    #(64
      "append garbage with high tag number"
      #vu8(49 50 51 52 48 48)
      #vu8(48 72 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171 191 127 0)
      #f
      ())
    #(65
      "sequence of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 48 69 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(66
      "truncated sequence: removed last 1 elements"
      #vu8(49 50 51 52 48 48)
      #vu8(48 35 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81)
      #f
      ())
    #(67
      "repeating element in sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 103 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(68
      "long form encoding of length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 129 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ("BER"))
    #(69
      "long form encoding of length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 129 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ("BER"))
    #(70
      "length of integer contains leading 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 130 0 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ("BER"))
    #(71
      "length of integer contains leading 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 130 0 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ("BER"))
    #(72
      "wrong length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 34 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(73
      "wrong length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(74
      "wrong length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 33 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(75
      "wrong length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 31 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(76
      "uint32 overflow in length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 74 2 133 1 0 0 0 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(77
      "uint32 overflow in length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 74 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 133 1 0 0 0 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(78
      "uint64 overflow in length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 78 2 137 1 0 0 0 0 0 0 0 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(79
      "uint64 overflow in length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 78 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 137 1 0 0 0 0 0 0 0 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(80
      "length of integer = 2**31 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 2 132 127 255 255 255 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(81
      "length of integer = 2**31 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 132 127 255 255 255 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(82
      "length of integer = 2**32 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 2 132 255 255 255 255 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(83
      "length of integer = 2**32 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 132 255 255 255 255 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(84
      "length of integer = 2**40 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 74 2 133 255 255 255 255 255 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(85
      "length of integer = 2**40 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 74 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 133 255 255 255 255 255 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(86
      "length of integer = 2**64 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 77 2 136 255 255 255 255 255 255 255 255 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(87
      "length of integer = 2**64 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 77 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 136 255 255 255 255 255 255 255 255 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(88
      "incorrect length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 255 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(89
      "incorrect length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 255 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(90
      "removing integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(91
      "lonely integer tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48 35 2 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(92
      "lonely integer tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48 36 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2)
      #f
      ())
    #(93
      "appending 0's to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 35 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 0 0 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(94
      "appending 0's to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 34 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171 0 0)
      #f
      ())
    #(95
      "prepending 0's to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 35 0 0 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ("BER"))
    #(96
      "prepending 0's to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 34 0 0 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ("BER"))
    #(97
      "appending unused 0's to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 0 0 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(98
      "appending null value to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 35 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 5 0 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(99
      "appending null value to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 34 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171 5 0)
      #f
      ())
    #(100
      "truncated length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 36 2 129 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(101
      "truncated length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 37 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 129)
      #f
      ())
    #(102
      "Replacing integer with NULL"
      #vu8(49 50 51 52 48 48)
      #vu8(48 36 5 0 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(103
      "Replacing integer with NULL"
      #vu8(49 50 51 52 48 48)
      #vu8(48 37 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 5 0)
      #f
      ())
    #(104
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 0 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(105
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 1 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(106
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 3 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(107
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 4 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(108
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 255 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(109
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 0 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(110
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 1 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(111
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 3 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(112
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 4 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(113
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 255 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(114
      "dropping value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 36 2 0 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(115
      "dropping value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 37 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 0)
      #f
      ())
    #(116
      "using composition for integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 34 37 2 1 0 2 32 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(117
      "using composition for integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 34 36 2 1 68 2 31 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(118
      "modify first byte of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 2 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(119
      "modify first byte of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 70 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(120
      "modify last byte of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 209 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(121
      "modify last byte of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 43)
      #f
      ())
    #(122
      "truncated integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(123
      "truncated integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 31 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154)
      #f
      ())
    #(124
      "truncated integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 31 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(125
      "leading ff in integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 34 255 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(126
      "leading ff in integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 33 255 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(127
      "replaced integer by infinity"
      #vu8(49 50 51 52 48 48)
      #vu8(48 37 9 1 128 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(128
      "replaced integer by infinity"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 9 1 128)
      #f
      ())
    #(129
      "replacing integer with zero"
      #vu8(49 50 51 52 48 48)
      #vu8(48 37 2 1 0 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(130
      "replacing integer with zero"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 1 0)
      #f
      ())
    #(131
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 1 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 249 64 98 207 4 112 21 119 114 68 180 66 227 35 134 35 146 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(132
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 251 203 5 21 55 17 132 54 250 197 15 133 201 131 25 161 16 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(133
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 255 20 251 181 209 142 98 107 92 199 200 142 131 22 67 160 5 122 76 13 226 63 51 40 201 123 30 27 169 172 176 29 175 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(134
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 20 251 181 209 142 98 107 92 199 200 142 131 22 67 160 4 52 250 234 200 238 123 201 5 58 240 122 54 124 230 94 240 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(135
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 254 20 251 181 209 142 98 107 92 199 200 142 131 22 67 160 6 191 157 48 251 143 234 136 141 187 75 189 28 220 121 220 110 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(136
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 1 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(137
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 20 251 181 209 142 98 107 92 199 200 142 131 22 67 160 5 122 76 13 226 63 51 40 201 123 30 27 169 172 176 29 175 2 32 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(138
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 33 1 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 34 124 88 21 38 139 239 76 45 143 70 220 219 167 169 219 236)
      #f
      ())
    #(139
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 33 255 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 37 6 250 91 89 45 94 11 182 15 162 31 194 7 61 89 106)
      #f
      ())
    #(140
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 32 187 219 194 110 16 153 178 113 58 218 52 223 156 250 142 220 62 86 199 192 35 89 84 14 48 139 129 177 40 140 101 85)
      #f
      ())
    #(141
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 33 254 187 219 194 110 16 153 178 113 58 218 52 223 156 250 142 221 131 167 234 217 116 16 179 210 112 185 35 36 88 86 36 20)
      #f
      ())
    #(142
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 33 1 68 36 61 145 239 102 77 142 197 37 203 32 99 5 113 35 193 169 56 63 220 166 171 241 207 116 126 78 215 115 154 171)
      #f
      ())
    #(143
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 235 4 74 46 113 157 148 163 56 55 113 124 233 188 95 250 133 179 242 29 192 204 215 54 132 225 228 86 83 79 226 81 2 33 0 187 219 194 110 16 153 178 113 58 218 52 223 156 250 142 220 62 86 199 192 35 89 84 14 48 139 129 177 40 140 101 85)
      #f
      ())
    #(144
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 0 2 1 0)
      #f
      ("EdgeCase"))
    #(145
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 0 2 1 1)
      #f
      ("EdgeCase"))
    #(146
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 0 2 1 255)
      #f
      ("EdgeCase"))
    #(147
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 0 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 65)
      #f
      ("EdgeCase"))
    #(148
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 0 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 64)
      #f
      ("EdgeCase"))
    #(149
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 0 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 66)
      #f
      ("EdgeCase"))
    #(150
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 0 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 47)
      #f
      ("EdgeCase"))
    #(151
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 0 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 48)
      #f
      ("EdgeCase"))
    #(152
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 8 2 1 0 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(153
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 0 9 1 66)
      #f
      ("EdgeCase"))
    #(154
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 2 1 0)
      #f
      ("EdgeCase"))
    #(155
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 2 1 1)
      #f
      ("EdgeCase"))
    #(156
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 2 1 255)
      #f
      ("EdgeCase"))
    #(157
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 1 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 65)
      #f
      ("EdgeCase"))
    #(158
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 1 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 64)
      #f
      ("EdgeCase"))
    #(159
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 1 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 66)
      #f
      ("EdgeCase"))
    #(160
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 1 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 47)
      #f
      ("EdgeCase"))
    #(161
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 1 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 48)
      #f
      ("EdgeCase"))
    #(162
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 8 2 1 1 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(163
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 9 1 66)
      #f
      ("EdgeCase"))
    #(164
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 255 2 1 0)
      #f
      ("EdgeCase"))
    #(165
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 255 2 1 1)
      #f
      ("EdgeCase"))
    #(166
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 255 2 1 255)
      #f
      ("EdgeCase"))
    #(167
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 255 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 65)
      #f
      ("EdgeCase"))
    #(168
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 255 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 64)
      #f
      ("EdgeCase"))
    #(169
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 255 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 66)
      #f
      ("EdgeCase"))
    #(170
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 255 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 47)
      #f
      ("EdgeCase"))
    #(171
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 255 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 48)
      #f
      ("EdgeCase"))
    #(172
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 8 2 1 255 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(173
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 255 9 1 66)
      #f
      ("EdgeCase"))
    #(174
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 65 2 1 0)
      #f
      ("EdgeCase"))
    #(175
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 65 2 1 1)
      #f
      ("EdgeCase"))
    #(176
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 65 2 1 255)
      #f
      ("EdgeCase"))
    #(177
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 65 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 65)
      #f
      ("EdgeCase"))
    #(178
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 65 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 64)
      #f
      ("EdgeCase"))
    #(179
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 65 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 66)
      #f
      ("EdgeCase"))
    #(180
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 65 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 47)
      #f
      ("EdgeCase"))
    #(181
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 65 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 48)
      #f
      ("EdgeCase"))
    #(182
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 40 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 65 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(183
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 65 9 1 66)
      #f
      ("EdgeCase"))
    #(184
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 64 2 1 0)
      #f
      ("EdgeCase"))
    #(185
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 64 2 1 1)
      #f
      ("EdgeCase"))
    #(186
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 64 2 1 255)
      #f
      ("EdgeCase"))
    #(187
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 64 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 65)
      #f
      ("EdgeCase"))
    #(188
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 64 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 64)
      #f
      ("EdgeCase"))
    #(189
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 64 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 66)
      #f
      ("EdgeCase"))
    #(190
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 64 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 47)
      #f
      ("EdgeCase"))
    #(191
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 64 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 48)
      #f
      ("EdgeCase"))
    #(192
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 40 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 64 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(193
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 64 9 1 66)
      #f
      ("EdgeCase"))
    #(194
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 66 2 1 0)
      #f
      ("EdgeCase"))
    #(195
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 66 2 1 1)
      #f
      ("EdgeCase"))
    #(196
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 66 2 1 255)
      #f
      ("EdgeCase"))
    #(197
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 66 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 65)
      #f
      ("EdgeCase"))
    #(198
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 66 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 64)
      #f
      ("EdgeCase"))
    #(199
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 66 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 66)
      #f
      ("EdgeCase"))
    #(200
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 66 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 47)
      #f
      ("EdgeCase"))
    #(201
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 66 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 48)
      #f
      ("EdgeCase"))
    #(202
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 40 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 66 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(203
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 66 9 1 66)
      #f
      ("EdgeCase"))
    #(204
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 47 2 1 0)
      #f
      ("EdgeCase"))
    #(205
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 47 2 1 1)
      #f
      ("EdgeCase"))
    #(206
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 47 2 1 255)
      #f
      ("EdgeCase"))
    #(207
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 47 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 65)
      #f
      ("EdgeCase"))
    #(208
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 47 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 64)
      #f
      ("EdgeCase"))
    #(209
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 47 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 66)
      #f
      ("EdgeCase"))
    #(210
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 47 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 47)
      #f
      ("EdgeCase"))
    #(211
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 47 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 48)
      #f
      ("EdgeCase"))
    #(212
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 40 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 47 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(213
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 47 9 1 66)
      #f
      ("EdgeCase"))
    #(214
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 48 2 1 0)
      #f
      ("EdgeCase"))
    #(215
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 48 2 1 1)
      #f
      ("EdgeCase"))
    #(216
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 48 2 1 255)
      #f
      ("EdgeCase"))
    #(217
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 48 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 65)
      #f
      ("EdgeCase"))
    #(218
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 48 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 64)
      #f
      ("EdgeCase"))
    #(219
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 48 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 66)
      #f
      ("EdgeCase"))
    #(220
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 48 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 47)
      #f
      ("EdgeCase"))
    #(221
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 48 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 48)
      #f
      ("EdgeCase"))
    #(222
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 40 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 48 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(223
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 48 9 1 66)
      #f
      ("EdgeCase"))
    #(224
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 12 1 48)
      #f
      ())
    #(225
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 5 2 1 1 12 0)
      #f
      ())
    #(226
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 9 12 2 37 115 12 3 115 37 115)
      #f
      ())
    #(227
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 8 2 1 1 48 3 2 1 0)
      #f
      ())
    #(228
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 3 2 1 1)
      #f
      ())
    #(229
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 1 1 0)
      #f
      ())
    #(230
      "Edge case for Shamir multiplication"
      #vu8(50 50 51 56 54)
      #vu8(48 70 2 33 0 221 27 125 9 167 189 130 24 150 16 52 163 154 135 254 207 83 20 240 12 77 37 235 88 160 122 200 94 133 234 181 22 2 33 0 185 140 82 50 240 16 13 85 219 20 235 15 233 233 67 251 69 216 241 146 187 221 56 20 120 80 244 217 80 241 106 145)
      #t
      ())
    #(231
      "special case hash"
      #vu8(51 49 57 48 57 52 51 50 56 56)
      #vu8(48 70 2 33 0 132 10 108 216 25 242 26 42 60 59 231 70 27 245 22 245 25 28 50 208 89 238 160 150 153 172 65 50 247 148 136 25 2 33 0 148 197 57 6 161 89 92 249 254 20 131 27 82 152 180 226 151 33 154 251 137 92 24 161 159 69 8 250 79 110 3 148)
      #t
      ())
    #(232
      "special case hash"
      #vu8(56 52 51 52 55 52 49 53 53)
      #vu8(48 69 2 32 89 40 183 238 184 66 66 145 77 77 91 135 31 235 59 13 120 148 85 228 74 65 227 182 14 14 67 133 106 74 122 57 2 33 0 214 80 147 13 118 235 36 68 113 59 99 181 1 168 232 179 150 21 120 67 6 241 242 250 144 145 80 102 228 246 1 146)
      #t
      ())
    #(233
      "special case hash"
      #vu8(51 53 55 50 54 57 54 56 50 57)
      #vu8(48 69 2 32 47 240 91 6 7 120 17 231 191 138 27 136 4 250 107 183 219 121 59 10 137 39 116 95 91 84 57 152 218 179 6 179 2 33 0 201 231 218 7 226 178 210 143 22 153 36 186 178 45 144 161 7 202 151 245 2 46 172 8 208 164 87 127 48 216 153 136)
      #t
      ())
    #(234
      "special case hash"
      #vu8(53 57 49 56 51 51 52 50 57)
      #vu8(48 69 2 32 25 197 231 79 211 171 56 71 209 186 142 198 255 104 43 24 78 210 174 70 102 34 137 13 235 66 6 56 92 49 176 165 2 33 0 201 89 235 206 153 179 68 106 172 238 86 238 205 186 225 137 143 199 26 107 172 180 70 74 106 75 2 118 130 27 50 231)
      #t
      ())
    #(235
      "special case hash"
      #vu8(56 50 53 51 48 56 50 50 53 56 57)
      #vu8(48 69 2 32 84 187 88 74 103 199 158 25 211 249 98 124 193 234 218 204 232 7 94 63 92 3 228 92 128 123 70 213 5 202 115 171 2 33 0 171 55 251 199 144 160 64 13 235 187 222 6 185 119 27 99 115 45 121 222 106 86 232 114 117 169 104 224 212 170 239 191)
      #t
      ())
    #(236
      "special case hash"
      #vu8(49 51 55 51 52 56 50 56 49 52 50)
      #vu8(48 69 2 32 105 157 77 104 194 51 244 75 241 211 247 0 1 169 172 172 123 233 6 224 154 196 64 200 209 96 68 54 70 150 185 77 2 33 0 153 144 194 205 141 124 106 34 125 206 106 148 144 11 199 182 154 142 230 207 11 160 98 118 124 9 217 229 177 46 65 60)
      #t
      ())
    #(237
      "special case hash"
      #vu8(49 55 51 56 49 53 54 52 48)
      #vu8(48 70 2 33 0 231 121 200 130 169 119 1 41 61 170 20 19 249 254 73 171 151 189 143 116 35 49 70 29 14 59 147 51 60 29 181 187 2 33 0 173 63 217 4 171 70 62 200 188 127 249 136 193 66 172 219 197 221 115 216 220 233 25 180 88 152 124 31 50 186 62 155)
      #t
      ())
    #(238
      "special case hash"
      #vu8(50 53 53 51 52 54 54 53 48 52)
      #vu8(48 70 2 33 0 209 33 212 99 158 144 228 116 25 25 217 203 56 136 214 156 70 214 253 200 73 128 181 236 194 73 250 1 202 225 155 229 2 33 0 172 5 89 170 88 14 83 94 64 30 169 226 113 15 6 122 55 94 198 157 196 159 186 102 141 122 20 216 189 228 45 13)
      #t
      ())
    #(239
      "special case hash"
      #vu8(50 49 56 51 48 51 57 49 57 55)
      #vu8(48 70 2 33 0 222 4 211 135 221 208 24 158 242 236 73 69 148 237 5 102 117 120 141 108 172 37 249 130 110 80 254 198 111 71 190 111 2 33 0 165 92 188 62 135 128 155 77 204 99 76 234 50 252 35 207 122 199 15 113 239 23 49 222 65 65 76 10 113 137 28 181)
      #t
      ())
    #(240
      "special case hash"
      #vu8(49 48 53 50 54 49 55 54 53 52 53)
      #vu8(48 69 2 32 90 141 45 80 72 49 160 71 199 39 125 156 19 247 244 86 253 149 105 163 17 197 190 147 203 250 154 49 34 83 79 243 2 33 0 208 249 88 102 48 86 66 54 233 177 51 167 181 50 2 178 157 58 60 174 178 143 93 35 96 173 254 162 56 244 21 41)
      #t
      ())
    #(241
      "special case hash"
      #vu8(50 53 48 49 53 51 57 57 56 54)
      #vu8(48 69 2 32 14 45 195 224 183 197 27 233 80 200 20 180 205 116 184 112 119 83 188 90 117 67 214 88 154 225 70 76 147 34 123 247 2 33 0 156 234 4 223 18 24 187 122 12 133 29 169 254 244 6 156 252 169 252 0 239 8 195 121 118 173 252 78 199 181 226 178)
      #t
      ())
    #(242
      "special case hash"
      #vu8(49 52 57 53 51 49 54 52 54 49 57)
      #vu8(48 69 2 32 12 147 100 108 80 144 64 186 200 104 37 139 243 242 209 61 38 233 137 147 232 104 15 13 168 70 193 113 43 233 81 9 2 33 0 198 83 134 248 176 161 47 239 37 121 28 217 58 4 81 64 175 156 36 254 61 61 112 14 2 210 59 28 226 218 5 243)
      #t
      ())
    #(243
      "special case hash"
      #vu8(50 48 54 51 56 53 50 57 48 54)
      #vu8(48 69 2 33 0 153 6 134 13 114 134 56 246 162 96 225 52 149 242 198 9 152 56 229 194 249 72 40 241 12 175 44 88 151 13 59 248 2 32 72 83 35 95 213 17 184 219 57 86 189 37 183 114 250 181 75 173 56 103 209 198 55 169 152 64 22 247 133 253 198 207)
      #t
      ())
    #(244
      "special case hash"
      #vu8(55 56 51 57 55 54 52 57 57 50)
      #vu8(48 69 2 33 0 198 214 9 252 134 26 53 19 75 77 193 128 163 178 167 177 58 216 71 115 88 232 2 134 249 4 153 197 139 211 125 211 2 32 9 120 224 178 16 85 220 200 24 68 210 151 214 187 236 189 7 79 9 113 123 70 198 149 174 96 121 157 86 74 31 159)
      #t
      ())
    #(245
      "special case hash"
      #vu8(50 49 50 57 50 54 52 52 54 57)
      #vu8(48 69 2 32 20 150 253 122 80 35 250 247 139 14 16 8 176 84 242 92 80 157 52 113 61 69 148 207 171 242 76 27 34 41 100 61 2 33 0 246 96 172 29 170 119 0 165 81 137 214 113 10 55 59 53 14 162 68 106 231 111 200 163 82 45 243 224 26 43 194 241)
      #t
      ())
    #(246
      "special case hash"
      #vu8(52 56 51 50 48 52 50 54 56 51)
      #vu8(48 68 2 32 49 0 127 3 6 241 113 235 86 201 188 127 124 12 215 215 118 172 216 107 230 128 246 0 211 114 154 237 192 58 169 239 2 32 89 245 41 174 203 108 142 116 105 131 13 174 165 6 94 109 168 195 73 104 138 180 250 14 190 195 100 3 90 104 229 138)
      #t
      ())
    #(247
      "special case hash"
      #vu8(51 54 53 50 50 49 56 49 54)
      #vu8(48 70 2 33 0 251 225 161 57 227 199 76 239 1 210 29 156 90 71 167 131 8 13 189 155 134 162 2 233 51 135 42 113 164 181 56 56 2 33 0 254 49 100 173 81 192 128 221 212 18 111 66 151 158 107 81 144 117 178 236 150 6 14 2 249 221 111 182 249 243 191 223)
      #t
      ())
    #(248
      "special case hash"
      #vu8(50 52 57 49 55 49 50 54 57 54 53)
      #vu8(48 68 2 32 4 81 140 107 230 88 108 235 85 89 1 79 244 3 17 254 126 109 15 252 223 198 85 182 160 107 190 32 58 24 94 214 2 32 30 11 146 126 67 18 90 161 150 50 155 176 240 155 247 93 4 129 219 169 36 249 30 62 57 227 224 135 138 151 42 131)
      #t
      ())
    #(249
      "special case hash"
      #vu8(50 54 50 50 55 57 48 55 55 56)
      #vu8(48 70 2 33 0 173 103 192 39 14 160 136 169 218 168 5 120 139 106 165 22 28 110 126 18 210 55 81 85 24 145 74 182 109 29 203 102 2 33 0 197 250 59 36 62 145 72 225 220 252 39 171 217 153 26 44 12 45 37 189 233 130 44 226 111 52 75 201 224 63 158 231)
      #t
      ())
    #(250
      "special case hash"
      #vu8(49 48 49 50 53 55 55 50 56 57 50 55)
      #vu8(48 69 2 33 0 237 215 227 251 133 129 222 215 192 150 31 115 101 161 163 156 111 163 1 217 114 128 0 174 184 76 65 217 24 193 125 187 2 32 37 207 180 253 173 225 24 22 53 156 207 210 0 28 194 176 229 9 222 156 202 12 26 167 234 174 113 150 55 225 17 86)
      #t
      ())
    #(251
      "special case hash"
      #vu8(49 48 53 48 56 55 50 50 48 50)
      #vu8(48 68 2 32 76 165 2 26 153 197 9 22 249 151 0 154 47 106 221 198 203 42 87 202 218 123 30 183 40 33 246 110 195 83 81 109 2 32 67 212 113 212 4 63 143 187 7 101 192 89 209 181 56 107 73 165 48 166 38 210 109 43 237 67 35 192 174 165 210 74)
      #t
      ())
    #(252
      "special case hash"
      #vu8(50 53 48 55 55 50 55 48 51 50)
      #vu8(48 69 2 33 0 235 58 26 145 101 222 5 2 6 250 4 88 130 247 243 189 6 189 2 194 232 37 116 13 114 216 203 42 7 244 92 251 2 32 57 79 168 98 80 4 198 44 177 200 238 160 44 52 17 230 160 54 180 175 225 71 39 212 151 179 29 114 81 212 162 12)
      #t
      ())
    #(253
      "special case hash"
      #vu8(55 49 57 51 52 53 57 51 57)
      #vu8(48 69 2 32 121 33 186 223 73 242 190 186 59 198 214 150 73 78 127 108 116 237 195 183 34 36 122 219 201 207 84 208 37 39 239 48 2 33 0 164 94 249 182 35 186 217 162 68 51 175 199 228 226 178 82 112 207 7 171 32 226 158 232 34 37 91 110 232 218 35 61)
      #t
      ())
    #(254
      "special case hash"
      #vu8(49 54 51 55 51 48 53 55 54 51)
      #vu8(48 68 2 32 62 44 52 47 132 203 54 249 134 183 43 209 152 103 195 89 173 25 80 70 239 48 202 117 73 223 132 45 51 165 28 203 2 32 91 139 252 252 120 95 244 76 204 38 81 184 147 181 223 188 18 115 156 195 151 57 136 219 178 9 205 96 244 193 180 226)
      #t
      ())
    #(255
      "special case hash"
      #vu8(52 50 52 49 50 55 51 55 49 51)
      #vu8(48 70 2 33 0 145 158 179 107 73 73 227 25 66 123 33 19 146 127 212 15 118 124 17 210 198 169 145 197 88 67 135 144 149 156 0 113 2 33 0 158 75 253 139 204 168 118 50 7 27 220 16 156 212 126 69 201 15 124 187 255 63 240 90 21 145 88 91 47 15 101 55)
      #t
      ())
    #(256
      "special case hash"
      #vu8(52 55 53 54 49 52 55 51 55)
      #vu8(48 69 2 33 0 227 110 60 25 24 227 120 241 44 202 239 226 73 84 196 251 119 216 162 39 247 162 52 160 69 194 250 105 236 1 132 196 2 32 101 247 181 222 241 18 253 150 211 195 221 243 170 91 206 65 138 229 203 115 34 56 123 24 181 177 94 44 170 120 242 9)
      #t
      ())
    #(257
      "special case hash"
      #vu8(55 49 54 50 51 50 55 55 51 52)
      #vu8(48 70 2 33 0 137 103 79 117 183 68 8 105 249 222 12 221 226 30 244 112 3 48 155 233 240 255 127 133 140 111 67 163 185 6 112 150 2 33 0 211 119 129 255 153 50 16 218 84 112 186 140 227 193 106 8 142 88 231 157 127 208 245 226 210 51 100 67 217 177 174 184)
      #t
      ())
    #(258
      "special case hash"
      #vu8(49 50 50 50 52 48 52 49 50 57)
      #vu8(48 68 2 32 88 76 5 175 152 180 135 233 160 181 221 94 1 84 209 36 174 239 165 94 180 138 39 71 33 54 94 89 117 73 236 152 2 32 71 180 18 124 108 9 7 118 21 169 33 190 56 148 43 170 5 58 136 183 56 132 223 173 214 167 69 204 156 111 160 150)
      #t
      ())
    #(259
      "special case hash"
      #vu8(51 53 50 52 53 56 51 51 54 56)
      #vu8(48 68 2 32 95 33 181 84 253 145 202 156 221 81 9 160 10 179 236 178 216 181 19 123 79 208 92 37 76 63 170 163 119 179 218 6 2 32 93 3 106 125 190 191 147 81 200 141 59 190 3 153 22 144 203 123 103 211 181 202 66 102 235 37 2 158 58 31 117 230)
      #t
      ())
    #(260
      "special case hash"
      #vu8(51 49 54 51 52 51 57 54)
      #vu8(48 68 2 32 106 48 151 128 130 101 57 5 155 59 44 157 67 21 187 184 59 76 58 252 33 141 68 10 207 45 1 236 10 92 223 131 2 32 93 62 165 105 165 173 33 219 98 228 188 11 96 37 30 95 101 176 17 88 242 200 130 25 115 238 108 71 205 21 252 52)
      #t
      ())
    #(261
      "special case hash"
      #vu8(54 53 51 50 53 57 56 52 51 57)
      #vu8(48 69 2 32 65 213 31 4 214 253 204 95 92 172 248 142 80 228 24 239 0 103 248 216 84 220 153 22 21 0 63 30 73 146 122 83 2 33 0 198 247 193 12 173 3 184 148 96 169 121 74 23 31 46 16 216 73 130 196 98 203 240 117 176 103 56 179 249 4 204 92)
      #t
      ())
    #(262
      "special case hash"
      #vu8(55 51 56 53 49 56 53 48 52)
      #vu8(48 70 2 33 0 218 142 114 154 194 54 137 232 104 18 152 84 251 189 229 201 19 14 186 208 229 85 4 127 108 79 252 205 176 215 95 222 2 33 0 182 147 193 163 204 217 62 41 137 248 78 119 224 234 89 131 183 88 244 193 162 168 196 182 33 155 107 0 110 155 161 229)
      #t
      ())
    #(263
      "special case hash"
      #vu8(49 52 54 53 50 54 54 53 55 57)
      #vu8(48 69 2 32 7 147 183 11 23 199 219 30 228 248 74 15 204 39 17 83 85 188 164 3 110 51 131 11 221 181 138 170 242 29 177 233 2 33 0 184 132 220 51 41 248 38 163 204 23 102 171 127 103 205 49 173 23 180 212 142 129 184 100 29 108 247 4 0 200 6 73)
      #t
      ())
    #(264
      "special case hash"
      #vu8(50 48 51 52 56 56 57 52 57 52)
      #vu8(48 68 2 32 62 226 1 115 42 247 244 251 134 41 145 209 98 161 31 121 250 229 114 51 255 150 71 130 219 27 53 178 222 230 127 96 2 32 120 224 15 48 186 191 45 72 60 158 151 41 197 10 192 125 249 171 232 120 255 142 221 60 215 234 60 236 195 11 114 78)
      #t
      ())
    #(265
      "special case hash"
      #vu8(52 52 55 48 56 56 54 55 56 53)
      #vu8(48 70 2 33 0 143 44 79 157 174 174 100 93 235 130 55 242 89 132 133 167 195 172 59 14 11 148 86 65 228 242 79 89 255 231 132 90 2 33 0 167 247 129 228 10 115 204 79 73 21 158 217 130 255 178 100 9 124 95 52 56 35 20 186 1 40 165 44 145 68 253 51)
      #t
      ())
    #(266
      "special case hash"
      #vu8(53 53 55 54 52 48 52 52 54)
      #vu8(48 69 2 32 117 13 173 58 131 211 195 98 26 120 220 217 47 125 169 72 198 252 104 215 240 217 96 56 53 178 72 133 21 197 57 174 2 33 0 160 115 108 87 80 60 118 194 52 46 63 19 229 95 109 251 102 55 177 251 107 165 202 240 11 158 84 13 170 127 112 198)
      #t
      ())
    #(267
      "special case hash"
      #vu8(54 51 52 52 57 53 54 54 48 56)
      #vu8(48 70 2 33 0 179 209 74 127 125 214 147 199 253 98 208 115 203 107 199 117 4 67 29 138 153 44 198 74 247 116 112 58 152 29 176 161 2 33 0 171 138 53 172 206 119 50 66 133 12 8 96 19 134 150 49 233 156 249 197 55 141 57 208 254 16 202 123 80 76 12 249)
      #t
      ())
    #(268
      "special case hash"
      #vu8(52 57 52 50 56 48 57 48 51 49)
      #vu8(48 70 2 33 0 255 53 98 29 66 14 122 131 67 210 34 241 138 203 70 174 90 90 41 50 15 136 226 240 151 122 207 217 109 112 20 65 2 33 0 159 194 155 253 138 128 162 73 89 189 68 148 222 27 60 10 51 102 19 26 239 239 79 233 211 63 31 145 209 24 187 39)
      #t
      ())
    #(269
      "special case hash"
      #vu8(50 54 54 53 56 49 57 51 57)
      #vu8(48 69 2 32 5 18 145 242 116 8 67 107 76 86 204 137 147 179 137 28 92 58 75 243 116 112 65 180 217 21 253 204 193 198 122 89 2 33 0 248 214 151 26 148 131 50 97 117 100 180 201 88 24 80 248 153 39 82 241 175 227 3 112 164 211 106 247 35 118 103 47)
      #t
      ())
    #(270
      "special case hash"
      #vu8(51 51 51 50 50 49 52 49 49 52)
      #vu8(48 70 2 33 0 184 32 242 22 61 26 144 46 132 124 105 57 45 167 18 75 195 31 86 236 173 95 115 195 219 20 44 156 130 32 204 101 2 33 0 137 197 39 229 94 85 154 165 239 178 99 134 15 186 192 79 28 229 86 248 43 204 203 73 153 27 194 197 117 128 138 167)
      #t
      ())
    #(271
      "special case hash"
      #vu8(54 49 54 53 50 55 55 49 53)
      #vu8(48 68 2 32 1 128 192 142 151 212 254 64 124 14 171 46 183 209 123 174 96 232 202 154 212 89 229 124 223 72 56 158 217 237 149 54 2 32 125 94 174 255 255 186 101 175 191 27 169 202 155 192 254 17 129 218 118 229 228 26 222 134 135 121 155 9 233 16 69 151)
      #t
      ())
    #(272
      "special case hash"
      #vu8(50 51 53 57 57 53 53 56 49 51)
      #vu8(48 70 2 33 0 152 95 21 240 238 204 98 17 40 23 188 35 71 132 214 4 4 128 78 167 219 164 143 140 9 204 2 64 28 78 19 174 2 33 0 199 61 27 237 112 119 115 68 146 199 0 237 232 230 128 14 4 133 35 239 155 207 251 83 204 121 148 88 5 255 113 30)
      #t
      ())
    #(273
      "special case hash"
      #vu8(50 57 49 51 54 49 57 53 56)
      #vu8(48 70 2 33 0 217 165 174 144 18 188 172 252 18 250 61 182 35 210 9 150 87 212 243 33 70 13 1 53 188 115 26 112 71 139 121 188 2 33 0 165 216 130 170 92 243 144 115 120 57 68 58 176 89 214 130 130 6 77 61 130 123 254 245 47 193 118 208 222 96 237 70)
      #t
      ())
    #(274
      "special case hash"
      #vu8(49 54 50 48 57 48 51 51 57 54)
      #vu8(48 70 2 33 0 240 112 225 40 92 71 16 106 26 210 58 119 71 86 163 211 69 58 72 210 69 64 22 4 239 89 169 107 154 25 16 194 2 33 0 180 60 245 32 65 97 61 191 141 58 19 106 13 15 107 206 135 205 116 38 34 36 230 32 243 85 221 236 237 32 229 189)
      #t
      ())
    #(275
      "special case hash"
      #vu8(51 51 54 51 49 48 50 56 52 50)
      #vu8(48 70 2 33 0 150 58 58 228 176 167 174 134 4 126 71 243 117 199 228 45 224 53 242 143 180 48 196 8 208 216 21 202 235 239 163 68 2 33 0 161 237 216 194 211 159 4 249 158 5 167 147 183 151 13 250 118 244 177 252 6 99 211 8 237 238 157 62 205 7 125 102)
      #t
      ())
    #(276
      "special case hash"
      #vu8(54 50 55 55 52 51 52 57 49)
      #vu8(48 70 2 33 0 230 173 185 19 156 244 125 174 8 144 0 103 50 98 156 142 9 92 19 223 55 7 23 164 42 139 198 232 147 102 120 239 2 33 0 168 223 138 204 126 231 85 28 240 64 158 140 28 47 208 223 110 126 155 56 39 233 87 39 250 73 44 39 78 70 104 252)
      #t
      ())
    #(277
      "special case hash"
      #vu8(51 56 53 54 55 57 56 49 52 55)
      #vu8(48 68 2 32 7 102 42 54 162 187 119 154 39 97 69 231 133 67 195 96 199 208 162 42 23 73 246 158 173 39 136 199 87 80 210 72 2 32 124 10 77 186 73 155 39 204 36 154 112 91 167 187 245 18 167 72 75 147 249 168 60 169 48 93 212 156 222 106 48 43)
      #t
      ())
    #(278
      "special case hash"
      #vu8(50 56 56 49 49 56 48 54 52 48)
      #vu8(48 69 2 32 54 223 0 62 253 190 195 191 83 162 164 82 72 193 233 110 96 201 188 241 11 79 93 251 34 7 68 210 218 81 252 142 2 33 0 229 241 3 179 167 79 161 208 167 142 116 214 4 243 24 137 230 99 124 255 42 203 179 26 112 114 110 114 243 146 212 186)
      #t
      ())
    #(279
      "special case hash"
      #vu8(49 48 57 53 55 51 57 52 54 55 56)
      #vu8(48 68 2 32 113 45 195 35 63 70 43 10 55 240 32 236 85 155 177 161 157 135 154 227 98 16 199 94 252 185 192 113 145 81 22 225 2 32 6 169 129 118 18 73 204 25 41 245 193 141 111 42 118 238 244 135 187 218 12 68 112 187 9 139 135 185 19 40 8 63)
      #t
      ())
    #(280
      "special case hash"
      #vu8(53 52 50 55 49 49 57 56 52)
      #vu8(48 68 2 32 16 227 115 209 203 76 5 41 91 99 206 113 3 129 123 124 15 208 150 215 198 63 101 245 109 149 10 97 228 85 193 203 2 32 68 203 92 130 112 192 105 172 64 138 108 159 49 172 233 34 154 182 7 138 54 173 196 101 16 127 10 61 109 223 234 102)
      #t
      ())
    #(281
      "special case hash"
      #vu8(51 49 53 48 48 51 52 51 50 53)
      #vu8(48 69 2 33 0 205 18 116 244 200 154 177 148 32 60 203 92 57 231 208 188 54 69 55 184 75 157 212 141 146 46 67 231 158 66 88 194 2 32 66 225 252 247 46 182 93 118 177 49 40 211 6 93 170 49 49 43 249 193 16 241 139 71 153 220 232 236 202 229 45 103)
      #t
      ())
    #(282
      "special case hash"
      #vu8(49 57 57 57 56 50 49 51 57 49)
      #vu8(48 69 2 32 81 108 152 63 230 86 122 199 0 249 48 40 218 106 255 197 152 223 169 83 145 137 108 84 76 143 115 201 99 20 160 160 2 33 0 191 165 106 24 51 102 138 207 209 72 153 232 204 22 11 121 197 233 42 48 5 93 215 199 0 72 79 107 252 228 44 253)
      #t
      ())
    #(283
      "special case hash"
      #vu8(49 57 55 49 50 48 57 50 54 49)
      #vu8(48 69 2 32 82 39 155 61 245 142 42 167 221 174 225 229 222 21 92 183 93 79 0 236 125 183 74 233 19 166 237 51 222 168 150 212 2 33 0 239 88 35 255 153 119 250 73 36 131 188 191 193 208 189 118 95 214 223 167 140 193 30 101 139 73 132 181 67 224 231 158)
      #t
      ())
    #(284
      "special case hash"
      #vu8(51 53 55 49 56 51 56 56 53 55)
      #vu8(48 69 2 32 1 194 160 78 239 88 39 231 224 78 181 24 2 204 56 89 175 109 132 254 53 174 228 218 75 193 176 238 21 75 126 243 2 33 0 220 87 161 7 218 107 177 38 36 49 54 96 35 60 189 204 85 255 113 71 236 179 163 40 175 62 134 34 92 137 190 83)
      #t
      ())
    #(285
      "special case hash"
      #vu8(56 54 56 50 50 54 57 56 57 53)
      #vu8(48 69 2 32 28 225 187 31 199 138 56 212 175 33 27 95 206 235 208 17 38 193 12 234 177 222 100 1 225 223 29 196 149 219 245 181 2 33 0 201 181 100 160 165 185 103 94 236 227 203 227 52 152 99 78 121 67 137 63 225 108 97 239 137 75 212 190 52 154 104 116)
      #t
      ())
    #(286
      "special case hash"
      #vu8(50 53 52 56 56 53 54 48 51 49)
      #vu8(48 69 2 33 0 183 174 66 179 111 6 12 21 198 116 94 164 216 189 145 174 46 175 224 225 150 197 44 250 196 225 106 183 77 48 72 182 2 32 66 27 194 220 208 133 77 212 230 154 62 147 11 44 182 70 85 123 214 140 128 12 90 44 167 187 179 221 211 35 112 170)
      #t
      ())
    #(287
      "special case hash"
      #vu8(52 57 57 53 55 48 49 51 49 57)
      #vu8(48 69 2 33 0 213 29 194 6 223 156 251 113 152 226 43 149 124 100 67 87 84 34 100 186 223 90 237 227 247 71 69 52 218 13 91 34 2 32 38 109 23 42 109 103 117 150 63 158 212 251 89 6 92 143 25 72 196 138 81 70 63 231 155 191 27 69 223 126 87 185)
      #t
      ())
    #(288
      "special case hash"
      #vu8(50 52 53 54 54 56 49 55 56 53)
      #vu8(48 69 2 33 0 248 129 179 226 22 132 251 248 153 247 98 200 252 124 116 35 162 173 44 39 98 87 201 158 174 134 182 110 227 158 74 225 2 32 39 32 125 92 207 247 115 178 107 240 210 130 216 132 179 195 166 114 75 160 106 22 113 201 249 190 140 190 110 53 137 228)
      #t
      ())
    #(289
      "special case hash"
      #vu8(52 49 56 53 51 55 49 50 51 54)
      #vu8(48 68 2 32 36 85 235 246 43 80 249 88 120 23 146 253 199 5 117 89 35 163 12 14 183 213 21 160 152 140 26 20 222 98 202 173 2 32 16 189 104 200 129 65 98 5 189 149 165 242 118 93 105 114 110 11 206 91 42 14 197 37 174 177 187 167 211 93 142 74)
      #t
      ())
    #(290
      "special case hash"
      #vu8(55 50 55 56 52 57 48 48 52)
      #vu8(48 69 2 33 0 145 25 215 148 157 158 76 85 228 199 18 210 87 196 186 58 185 214 87 199 224 170 120 64 9 28 178 172 251 79 194 90 2 32 66 82 79 208 196 174 139 80 100 76 186 52 248 108 33 164 46 224 69 206 124 21 180 235 129 122 255 199 141 32 253 179)
      #t
      ())
    #(291
      "special case hash"
      #vu8(49 53 54 50 56 49 57 51 49 56)
      #vu8(48 69 2 32 25 30 113 102 105 216 70 49 160 76 192 133 240 59 47 26 79 85 129 15 112 190 187 175 94 225 61 104 242 89 143 251 2 33 0 144 242 8 169 241 194 121 17 181 251 141 134 123 223 18 61 214 1 99 156 45 250 31 106 97 253 47 130 202 219 19 97)
      #t
      ())
    #(292
      "special case hash"
      #vu8(50 49 56 55 57 57 50 56 51 56 54)
      #vu8(48 70 2 33 0 140 194 202 185 242 87 146 129 129 196 211 104 93 84 75 236 11 136 185 92 187 219 138 209 176 84 59 70 178 65 68 115 2 33 0 157 29 21 141 171 142 145 198 139 55 42 222 16 122 172 92 34 248 190 100 70 59 12 35 52 13 252 130 141 123 125 243)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 39 80 78 137 63 214 45 11 253 234 160 115 16 107 22 232 248 210 114 106 151 98 82 151 100 207 232 254 138 56 70 14 33 187 13 223 240 64 183 175 248 240 138 96 213 174 26 89 71 47 57 72 70 174 79 88 196 190 12 200 162 163 101 1)
  :der-encode
  #t
  :tests
  '(#(293
      "k*G has a large x-coordinate"
      #vu8(49 50 51 52 48 48)
      #vu8(48 54 2 17 1 69 81 35 25 80 183 95 196 64 45 161 114 47 201 186 235 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 62)
      #t
      ())
    #(294
      "r too large"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 44 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 62)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 241 49 246 221 221 229 155 174 123 0 144 164 123 175 187 51 193 87 172 109 164 57 50 74 102 129 191 103 245 117 249 11 236 204 47 178 192 190 49 143 218 147 53 187 131 72 139 202 253 51 190 130 195 131 24 188 248 69 253 14 80 23 194 72)
  :der-encode
  #t
  :tests
  '(#(295
      "r,s are large"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 63 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 62)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 17 1 196 150 213 248 145 10 119 73 239 255 157 196 111 104 167 253 2 214 151 95 223 21 191 144 239 183 4 99 203 78 222 25 158 70 230 125 70 58 168 199 82 202 200 163 66 184 254 14 154 91 169 166 116 22 200 134 92 69 228 120 0 126)
  :der-encode
  #t
  :tests
  '(#(296
      "r and s^-1 have a large Hamming weight"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 62 154 117 130 136 96 137 198 47 184 64 207 59 131 6 28 209 207 243 174 67 65 128 139 181 189 238 97 145 23 65 119)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 110 67 165 198 58 208 188 141 23 138 116 81 146 103 28 6 80 15 13 189 117 124 63 46 174 101 8 154 175 13 100 137 130 149 79 246 12 52 96 162 119 72 68 85 37 198 205 48 112 23 37 225 105 120 145 203 127 50 254 237 18 138 58 231)
  :der-encode
  #t
  :tests
  '(#(297
      "r and s^-1 have a large Hamming weight"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 36 35 142 112 180 49 177 166 78 253 249 3 38 105 147 157 75 119 242 73 80 63 198 144 95 235 117 64 222 163 230 210)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 239 78 139 87 50 245 26 75 37 71 198 88 19 129 204 247 80 187 109 48 160 124 183 88 134 84 20 217 164 80 23 251 241 2 71 188 170 76 167 61 92 154 212 200 160 58 96 167 245 207 160 127 181 116 55 181 166 240 169 189 56 29 120 165)
  :der-encode
  #t
  :tests
  '(#(298
      "small r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 2 1 1)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 169 115 193 90 68 210 220 213 5 88 224 51 210 66 21 90 41 128 139 135 73 21 118 86 106 131 130 27 101 14 111 45 252 94 205 84 130 250 89 31 87 131 8 176 159 46 112 65 22 163 117 186 30 40 55 145 43 174 41 114 211 64 65 77)
  :der-encode
  #t
  :tests
  '(#(299
      "small r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 2 1 2)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 140 211 31 22 86 178 30 194 114 118 165 51 195 91 245 29 149 73 11 254 197 120 104 169 185 68 51 237 164 87 157 97 187 44 142 128 196 93 148 155 202 246 240 187 199 107 194 124 149 147 153 69 5 42 209 161 16 20 117 101 86 198 249 120)
  :der-encode
  #t
  :tests
  '(#(300
      "small r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 2 1 3)
      #t
      ())
    #(301
      "r is larger than n"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 66 2 1 3)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 127 119 219 180 229 0 220 158 64 94 189 144 130 175 169 208 175 181 197 25 253 206 37 41 16 252 201 32 40 149 102 28 239 206 81 209 106 81 112 10 103 45 184 222 42 240 112 57 26 2 218 28 106 57 139 125 218 148 64 58 6 219 3 209)
  :der-encode
  #t
  :tests
  '(#(302
      "s is larger than n"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 1 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 73 23 200)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 109 79 65 201 196 193 95 2 161 153 38 74 81 38 110 215 147 149 42 124 234 121 18 93 205 237 128 94 215 165 76 19 80 49 79 169 39 150 107 144 182 196 229 124 181 33 102 111 206 76 184 27 126 77 53 80 215 41 254 109 214 187 229 171)
  :der-encode
  #t
  :tests
  '(#(303
      "small r and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 39 2 2 1 1 2 33 0 197 139 22 44 88 177 98 197 139 22 44 88 177 98 197 138 27 36 41 115 133 62 22 219 117 200 161 167 29 164 211 157)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 59 212 166 2 17 155 197 12 253 5 170 57 92 60 159 117 59 56 59 221 149 57 210 122 26 20 48 51 252 252 170 168 146 215 84 56 235 165 175 105 49 150 212 183 149 49 132 226 214 73 160 132 93 17 175 60 125 57 227 177 245 68 156 25)
  :der-encode
  #t
  :tests
  '(#(304
      "smallish r and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 44 2 7 45 155 77 52 121 82 204 2 33 0 252 188 81 3 208 218 38 116 119 209 121 20 97 207 42 164 75 249 212 49 152 247 149 7 189 135 121 214 154 19 16 142)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 124 152 29 104 112 87 87 37 66 127 200 76 230 181 247 6 175 110 140 98 180 181 247 247 44 62 226 134 8 54 153 109 41 240 116 118 203 243 249 58 52 231 63 115 118 88 7 6 66 198 109 14 52 245 213 108 113 90 38 176 153 7 132 19)
  :der-encode
  #t
  :tests
  '(#(305
      "100-bit r and small s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 50 2 13 16 51 230 126 55 179 43 68 85 128 191 78 252 2 33 0 144 111 144 111 144 111 144 111 144 111 144 111 144 111 144 110 216 228 38 247 177 150 140 53 162 4 35 106 87 151 35 210)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 215 90 120 207 41 107 88 174 181 47 174 230 169 52 131 133 188 220 97 249 128 218 138 214 242 134 84 216 111 229 22 226 12 233 149 33 130 245 240 108 186 80 219 140 101 170 111 140 241 163 47 42 70 89 156 10 42 187 76 20 2 206 244 103)
  :der-encode
  #t
  :tests
  '(#(306
      "small r and 100 bit s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 2 1 1 2 32 120 50 102 233 15 67 218 254 92 217 179 176 190 134 222 34 249 222 131 103 125 15 80 113 58 70 142 199 47 207 93 87)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 10 53 164 47 180 5 126 17 227 50 68 45 115 114 156 220 104 78 126 10 120 117 236 147 51 55 231 74 177 225 125 230 33 82 227 166 85 136 101 215 243 10 149 12 100 233 242 233 210 240 108 39 3 210 161 152 74 121 68 93 56 112 161 207)
  :der-encode
  #t
  :tests
  '(#(307
      "100-bit r and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 49 2 13 6 37 34 187 211 236 190 124 57 233 62 124 38 2 32 120 50 102 233 15 67 218 254 92 217 179 176 190 134 222 34 249 222 131 103 125 15 80 113 58 70 142 199 47 207 93 87)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 112 94 12 62 161 202 68 58 1 5 137 110 122 242 184 145 160 130 67 204 165 16 203 95 255 174 189 216 110 198 252 140 37 209 22 252 249 18 232 36 106 100 213 135 132 54 223 201 88 181 157 70 98 164 178 39 160 6 135 107 80 66 250 88)
  :der-encode
  #t
  :tests
  '(#(308
      "r and s^-1 are close to n"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 64 193 2 32 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 84 232 228 244 76 229 24 53 105 63 240 202 46 240 18 21 192)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 227 34 199 170 212 167 0 36 196 248 14 163 115 231 232 95 35 220 189 17 241 134 213 93 90 116 76 208 244 89 246 219 113 213 77 176 158 198 110 234 219 237 186 207 226 37 91 184 125 12 26 115 123 61 59 28 123 118 206 120 214 52 45 124)
  :der-encode
  #t
  :tests
  '(#(309
      "s == 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 37 2 32 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 84 232 228 244 76 229 24 53 105 63 240 202 46 240 18 21 193 2 1 1)
      #t
      ())
    #(310
      "s == 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 37 2 32 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 84 232 228 244 76 229 24 53 105 63 240 202 46 240 18 21 193 2 1 0)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 75 36 46 228 160 163 120 53 197 144 246 171 225 175 102 104 71 108 156 18 193 91 138 255 119 108 126 122 138 69 35 25 183 32 207 250 230 66 60 244 122 163 117 254 59 132 52 106 131 176 158 14 250 36 94 184 157 153 178 88 84 81 96 61)
  :der-encode
  #t
  :tests
  '(#(311
      "point at infinity during verify"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 93 87 110 115 87 164 80 29 223 233 47 70 104 27 32 160 2 32 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 84 232 228 244 76 229 24 53 105 63 240 202 46 240 18 21 192)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 249 83 42 161 137 19 139 94 32 63 143 58 154 207 3 175 250 128 121 79 55 182 71 172 40 146 103 232 41 62 222 220 97 172 138 199 52 188 76 118 118 187 191 87 234 213 11 73 129 217 188 238 224 23 46 148 124 34 192 95 68 36 201 178)
  :der-encode
  #t
  :tests
  '(#(312
      "edge case for signature malleability"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 93 87 110 115 87 164 80 29 223 233 47 70 104 27 32 160 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 93 87 110 115 87 164 80 29 223 233 47 70 104 27 32 160)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 15 34 86 57 43 188 68 113 77 95 214 152 182 17 183 20 12 48 49 132 95 20 248 102 11 174 165 236 131 0 136 245 213 101 13 192 247 132 189 144 127 65 177 57 54 162 209 61 14 5 222 177 3 239 176 105 248 167 113 181 39 50 33 85)
  :der-encode
  #t
  :tests
  '(#(313
      "edge case for signature malleability"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 93 87 110 115 87 164 80 29 223 233 47 70 104 27 32 160 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 93 87 110 115 87 164 80 29 223 233 47 70 104 27 32 161)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 38 11 102 212 123 58 59 228 67 100 241 251 221 87 107 130 72 147 206 67 199 142 71 77 179 193 178 81 6 251 72 101 3 98 11 96 104 135 127 139 144 24 239 233 129 145 178 76 246 103 5 60 9 202 148 218 123 207 133 75 246 146 67 50)
  :der-encode
  #t
  :tests
  '(#(314
      "u1 == 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 84 232 228 244 76 229 24 53 105 63 240 202 46 240 18 21 184 2 32 87 49 183 196 189 4 203 158 251 131 105 53 255 46 84 123 242 144 159 134 130 74 244 216 223 120 172 247 109 123 61 78)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 48 84 155 239 81 116 150 44 86 80 148 75 189 120 51 34 3 56 226 227 31 39 119 86 102 247 209 36 216 237 119 131 244 62 230 89 154 132 88 201 215 134 221 80 204 103 107 171 244 137 117 122 222 62 38 125 135 191 38 84 163 74 219 32)
  :der-encode
  #t
  :tests
  '(#(315
      "u1 == n - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 84 232 228 244 76 229 24 53 105 63 240 202 46 240 18 21 184 2 33 0 168 206 72 59 66 251 52 97 4 124 150 202 0 209 171 130 200 30 61 96 44 253 171 98 224 89 177 149 98 187 3 243)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 34 40 60 166 240 85 67 158 133 64 69 79 99 255 2 226 225 20 29 16 227 74 84 115 117 153 250 230 98 102 99 109 200 254 249 124 152 250 17 96 248 41 183 193 50 106 6 158 11 180 66 66 143 21 3 232 207 187 97 108 216 17 136 50)
  :der-encode
  #t
  :tests
  '(#(316
      "u2 == 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 84 232 228 244 76 229 24 53 105 63 240 202 46 240 18 21 184 2 32 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 84 232 228 244 76 229 24 53 105 63 240 202 46 240 18 21 184)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 6 143 82 61 68 203 177 74 36 147 148 134 28 79 65 124 25 219 167 47 116 225 177 35 180 203 184 156 116 84 27 65 68 205 101 77 43 88 113 148 46 141 24 31 158 56 243 148 107 58 115 117 90 32 230 139 165 85 213 109 230 226 144 244)
  :der-encode
  #t
  :tests
  '(#(317
      "u2 == n - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 84 232 228 244 76 229 24 53 105 63 240 202 46 240 18 21 184 2 33 0 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 169 209 201 232 153 202 48 106 210 127 225 148 93 224 36 43 137)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 18 54 112 204 206 184 106 157 95 206 36 240 112 222 141 250 176 147 238 102 4 123 23 193 215 204 164 115 72 32 218 237 118 73 95 146 128 73 153 248 148 192 24 79 114 35 91 45 176 167 216 173 7 116 39 179 70 212 31 36 235 34 16 161)
  :der-encode
  #t
  :tests
  '(#(318
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 29 16 146 150 233 172 67 223 169 43 205 188 170 100 198 211 251 133 138 130 43 110 81 157 159 210 228 82 121 211 191 26)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 245 171 83 181 101 241 112 163 168 62 97 220 140 181 187 58 33 115 152 240 136 13 184 12 65 218 116 109 83 57 147 151 61 17 61 105 162 62 2 174 178 227 53 178 139 133 73 10 206 125 241 130 121 226 244 167 189 111 105 198 86 254 103 99)
  :der-encode
  #t
  :tests
  '(#(319
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 58 138 83 169 185 138 33 17 224 197 231 88 166 31 87 130 46 173 106 193 185 72 157 123 27 174 41 220 29 218 122 135)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 208 171 206 232 134 182 128 35 51 144 241 230 213 206 39 5 108 191 236 53 186 146 49 114 88 73 163 113 75 6 232 40 91 177 19 149 101 42 133 48 28 245 17 13 117 212 4 161 244 73 171 42 196 118 112 19 253 88 106 155 88 17 64 6)
  :der-encode
  #t
  :tests
  '(#(320
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 33 0 172 36 22 132 11 131 232 158 24 141 148 70 59 209 156 220 41 111 178 248 145 120 45 189 115 107 114 65 211 113 232 144)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 15 130 57 47 73 18 186 216 244 252 177 81 178 144 0 49 116 82 106 140 178 112 145 211 140 42 237 22 48 64 105 140 220 52 233 84 45 38 78 207 252 214 51 153 99 128 77 104 252 138 115 118 49 43 138 89 13 131 110 28 225 169 230 55)
  :der-encode
  #t
  :tests
  '(#(321
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 46 201 40 130 97 216 251 205 168 206 72 59 66 251 52 96 201 8 98 76 136 105 22 30 107 21 215 110 102 236 93 255)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 59 132 151 160 3 66 170 12 168 20 8 244 13 224 94 147 138 21 30 98 7 169 18 188 53 161 58 184 206 134 130 212 117 217 212 15 7 250 136 167 65 142 16 208 249 43 209 15 100 96 22 190 24 28 4 175 101 233 172 24 88 248 225 69)
  :der-encode
  #t
  :tests
  '(#(322
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 33 0 146 136 38 29 143 188 218 140 228 131 180 47 179 70 16 71 15 55 86 126 105 45 184 28 226 202 162 254 103 89 70 20)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 233 89 20 229 214 146 244 195 7 36 197 10 35 45 67 42 9 102 78 29 72 94 207 195 168 41 155 112 7 185 144 181 1 162 16 96 197 41 243 119 106 29 241 179 130 129 87 219 205 67 46 132 211 172 34 149 133 188 146 52 52 23 136 168)
  :der-encode
  #t
  :tests
  '(#(323
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 37 16 76 59 31 121 181 25 201 7 104 95 102 140 32 143 99 191 208 22 35 18 207 254 5 194 231 111 254 124 74 231)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 175 62 8 132 73 233 125 243 223 71 140 89 83 105 101 161 133 152 18 46 252 91 178 13 35 185 245 228 27 200 78 138 64 49 119 232 54 250 35 187 59 162 184 254 96 5 200 215 158 19 146 220 59 114 109 202 78 202 20 232 140 0 253 253)
  :der-encode
  #t
  :tests
  '(#(324
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 97 216 251 205 168 206 72 59 66 251 52 97 4 124 150 201 132 122 48 197 131 201 185 244 149 89 31 161 224 55 180 254)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 172 175 32 141 38 153 94 70 78 188 197 74 104 59 4 152 92 123 231 68 72 146 126 92 21 51 40 82 136 110 109 116 139 24 46 36 104 248 108 174 117 208 69 220 66 99 131 210 218 60 126 58 181 21 88 15 63 246 82 63 3 206 64 220)
  :der-encode
  #t
  :tests
  '(#(325
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 33 0 133 103 57 118 79 197 10 147 14 66 1 50 93 119 129 91 207 155 118 129 237 17 33 58 5 62 129 108 93 248 230 198)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 120 33 226 13 57 56 187 180 130 64 255 72 9 110 146 142 64 78 217 30 239 163 126 167 203 44 143 51 147 71 182 238 111 122 218 92 129 79 15 6 234 233 81 106 120 72 54 28 195 172 46 180 69 10 68 85 116 61 54 63 132 240 221 29)
  :der-encode
  #t
  :tests
  '(#(326
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 81 44 158 17 120 210 128 216 70 68 18 242 189 242 221 154 126 128 101 183 186 146 22 247 0 119 151 148 201 168 73 189)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 155 14 241 124 11 211 222 161 27 226 195 53 128 88 161 225 11 2 131 16 139 247 154 170 227 67 85 194 50 158 132 160 149 95 92 247 203 89 62 231 86 207 76 159 47 10 72 138 41 147 174 186 146 51 32 191 171 152 198 247 46 7 157 115)
  :der-encode
  #t
  :tests
  '(#(327
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 33 0 201 228 190 36 27 213 44 105 162 72 107 109 34 41 31 80 47 100 239 171 135 226 68 211 60 172 206 104 103 47 212 75)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 75 169 115 99 167 225 76 224 148 128 189 59 136 73 26 122 80 27 93 72 113 180 112 73 138 188 154 105 140 6 153 85 140 233 225 152 193 212 142 198 101 13 89 193 95 158 31 180 13 192 173 204 222 166 50 150 19 227 169 164 222 204 128 248)
  :der-encode
  #t
  :tests
  '(#(328
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 33 0 176 161 5 40 205 237 95 43 128 82 10 197 73 51 140 63 97 187 182 246 152 119 170 27 47 233 18 156 12 231 23 242)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 11 173 141 159 1 87 112 237 138 198 84 82 135 23 115 66 20 255 248 19 128 155 94 184 134 248 124 70 209 186 198 143 201 19 78 190 208 215 154 130 50 28 236 76 119 213 185 28 28 126 60 52 246 166 156 193 1 64 18 116 33 184 123 146)
  :der-encode
  #t
  :tests
  '(#(329
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 33 0 241 119 182 180 139 41 222 16 43 106 25 33 170 205 156 148 188 236 23 165 153 145 119 108 239 232 236 99 147 76 97 180)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 171 83 240 214 100 198 33 19 136 147 252 94 226 178 106 210 214 134 187 187 103 237 161 238 13 251 150 9 163 245 119 122 252 242 215 43 189 53 123 234 138 21 69 253 79 22 47 63 175 67 191 116 102 108 242 57 20 199 227 216 221 231 158 151)
  :der-encode
  #t
  :tests
  '(#(330
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 33 0 226 239 109 105 22 83 188 32 86 212 50 67 85 155 57 42 191 41 82 100 131 218 78 158 31 255 122 58 86 98 130 39)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 65 134 152 207 233 213 100 224 229 208 74 144 28 6 32 66 216 100 9 21 115 242 130 15 69 146 212 0 39 220 254 38 52 144 158 43 146 179 203 197 149 32 53 83 18 28 164 110 253 218 44 35 202 153 14 30 86 19 115 101 197 165 183 149)
  :der-encode
  #t
  :tests
  '(#(331
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 33 0 212 103 36 29 161 125 154 48 130 62 75 101 0 104 213 192 193 102 141 35 110 35 37 207 80 22 8 17 25 120 162 154)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 220 5 21 228 0 227 82 125 39 133 228 162 29 16 90 244 202 232 98 179 30 7 222 17 127 17 201 205 141 201 188 155 3 78 239 157 150 165 108 14 116 239 161 10 159 117 226 164 77 19 55 232 0 129 117 251 180 15 225 199 0 20 70 1)
  :der-encode
  #t
  :tests
  '(#(332
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 86 18 11 66 5 193 244 79 12 70 202 35 29 232 206 110 20 183 217 124 72 188 22 222 185 181 185 32 233 184 244 72)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 83 255 98 59 49 38 105 180 140 200 161 32 183 106 129 30 72 169 48 84 141 232 71 109 44 70 7 165 82 76 229 146 71 122 226 139 35 159 98 96 103 161 211 222 233 125 118 157 55 180 27 24 75 174 149 0 158 64 30 68 62 147 14 247)
  :der-encode
  #t
  :tests
  '(#(333
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 33 0 213 85 85 85 85 85 85 85 85 85 85 85 85 85 85 84 124 116 147 68 116 219 21 125 42 140 63 8 138 206 214 42)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 210 213 52 141 185 216 55 83 124 144 233 48 206 53 212 205 144 231 215 163 70 11 19 132 121 11 99 34 129 185 140 232 67 204 123 154 32 200 115 74 194 198 42 125 32 113 5 245 178 216 92 36 24 147 157 53 227 136 111 56 147 203 33 180)
  :der-encode
  #t
  :tests
  '(#(334
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 33 0 193 119 124 136 83 147 142 83 98 19 192 36 100 169 54 0 11 161 226 28 15 198 32 117 212 108 98 78 35 181 47 49)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 197 254 65 89 224 182 6 135 159 194 161 16 136 214 88 3 14 215 254 242 230 113 26 171 4 134 150 18 253 9 195 218 172 157 199 225 152 73 90 252 15 67 244 222 67 75 141 162 51 216 73 44 218 40 219 70 14 132 128 174 203 10 136 245)
  :der-encode
  #t
  :tests
  '(#(335
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 48 187 183 148 219 88 131 99 180 6 121 246 193 130 165 13 60 233 103 154 205 211 255 190 54 215 129 61 172 189 200 24)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 154 114 183 133 201 10 105 91 142 53 95 93 143 193 81 4 108 54 13 115 145 54 36 28 127 209 231 122 14 139 133 69 164 112 180 185 165 77 29 66 149 106 196 59 156 159 47 15 84 137 218 22 19 11 123 161 218 56 81 108 145 32 9 188)
  :der-encode
  #t
  :tests
  '(#(336
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 44 55 253 153 86 34 196 251 127 255 255 255 255 255 255 255 199 206 231 69 17 12 180 90 181 88 237 124 144 193 90 47)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 129 228 39 188 143 5 9 177 154 20 193 110 136 131 177 38 65 209 214 142 7 12 54 171 73 209 105 14 93 236 208 97 169 147 215 126 155 192 242 182 110 220 108 215 202 142 50 190 207 50 89 100 5 98 46 162 117 96 6 222 179 232 172 95)
  :der-encode
  #t
  :tests
  '(#(337
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 127 217 149 98 44 79 183 255 255 255 255 255 255 255 255 255 93 136 63 250 181 179 38 82 204 220 170 41 15 204 185 125)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 117 98 121 180 130 124 131 55 33 48 212 254 171 102 164 57 126 212 70 58 201 238 29 200 173 202 221 207 206 197 146 105 182 50 51 55 216 154 244 32 138 216 129 139 103 226 111 155 128 128 49 107 196 63 171 83 209 179 183 206 165 219 153 71)
  :der-encode
  #t
  :tests
  '(#(338
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 33 0 255 179 42 196 88 159 111 255 255 255 255 255 255 255 255 254 187 16 127 245 107 102 76 165 153 185 84 82 31 153 114 250)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 207 147 69 232 80 65 122 168 27 1 169 65 160 44 85 70 149 12 39 131 8 65 164 53 244 243 101 73 39 198 146 109 30 197 61 4 149 74 71 243 121 21 221 219 72 39 47 231 51 50 45 130 80 120 57 145 112 155 55 216 127 162 150 239)
  :der-encode
  #t
  :tests
  '(#(339
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 86 34 196 251 127 255 255 255 255 255 255 255 255 255 255 255 146 138 143 28 122 199 190 193 128 139 159 97 192 30 195 39)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 249 95 98 87 149 230 204 23 180 194 139 30 198 67 195 106 52 152 144 132 170 106 81 56 18 195 170 155 236 7 48 49 43 34 206 14 238 238 157 69 206 232 99 193 177 208 83 129 172 139 44 137 106 44 177 125 62 144 112 212 29 104 187 234)
  :der-encode
  #t
  :tests
  '(#(340
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 68 16 65 4 16 65 4 16 65 4 16 65 4 16 65 3 184 120 83 253 59 125 63 142 23 81 37 180 56 47 37 237)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 195 240 170 222 248 103 93 200 131 42 41 179 151 72 141 106 79 181 71 128 229 150 126 139 67 68 148 152 193 106 212 189 203 57 27 84 84 100 102 141 77 10 128 184 226 131 19 36 72 163 192 190 10 190 211 4 207 8 57 181 146 15 56 103)
  :der-encode
  #t
  :tests
  '(#(341
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 39 57 206 115 156 231 57 206 115 156 231 57 206 115 156 231 5 86 2 152 209 242 240 141 196 25 172 39 58 91 84 217)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 118 185 32 112 154 158 93 197 74 145 189 71 114 171 37 147 167 111 56 132 29 174 40 128 245 71 195 187 117 58 231 193 95 1 230 119 157 94 58 186 117 153 123 207 126 63 50 8 104 186 143 11 193 33 10 184 11 66 118 10 106 112 18 6)
  :der-encode
  #t
  :tests
  '(#(342
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 33 0 183 119 119 119 119 119 119 119 119 119 119 119 119 119 119 118 136 230 161 254 128 138 151 163 72 103 18 34 255 22 184 99)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 227 137 81 71 244 227 106 19 195 72 58 192 12 136 167 138 143 250 66 71 138 252 46 157 131 134 32 91 11 29 248 178 180 21 107 86 186 33 123 28 160 139 215 127 129 154 187 82 215 66 246 178 247 214 19 83 228 204 86 99 218 72 115 23)
  :der-encode
  #t
  :tests
  '(#(343
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 100 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 6 221 58 25 184 213 251 135 82 53 150 60 89 59 210 211)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 231 51 153 156 227 72 207 123 54 61 207 147 25 83 207 28 36 124 58 136 116 8 192 100 185 121 28 23 138 211 80 41 11 8 73 50 157 167 0 142 106 45 0 20 40 131 248 4 27 153 23 82 143 204 76 91 211 247 149 172 207 242 142 182)
  :der-encode
  #t
  :tests
  '(#(344
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 33 0 149 85 85 85 85 85 85 85 85 85 85 85 85 85 85 84 124 116 147 68 116 219 21 125 42 140 63 8 138 206 214 44)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 6 155 102 247 22 144 44 189 81 218 223 246 22 68 172 116 198 163 94 140 119 110 162 44 156 52 146 209 211 250 162 236 228 144 92 196 128 188 150 124 227 137 184 44 142 102 146 177 89 211 254 154 38 139 252 18 1 9 147 147 77 126 36 221)
  :der-encode
  #t
  :tests
  '(#(345
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 42 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 62 58 73 162 58 109 138 190 149 70 31 132 69 103 107 23)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 149 67 191 211 160 182 120 101 79 198 84 88 227 230 34 105 179 11 189 42 64 40 45 146 5 140 51 17 166 27 216 133 51 61 120 34 29 154 160 169 102 58 93 245 18 61 149 195 255 74 2 96 98 120 102 97 121 227 60 148 254 30 12 209)
  :der-encode
  #t
  :tests
  '(#(346
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 33 0 191 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 67)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 166 136 78 98 24 100 37 24 162 17 246 123 3 174 246 168 77 59 50 209 142 234 68 91 49 145 62 138 26 0 244 197 49 163 24 22 108 252 188 227 67 7 87 46 184 35 237 197 208 51 76 94 83 115 175 78 131 46 115 0 71 153 106 202)
  :der-encode
  #t
  :tests
  '(#(347
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 24 93 219 202 109 172 65 177 218 3 60 251 96 193 82 134 158 116 179 205 102 233 255 223 27 107 192 158 214 94 228 12)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 189 76 111 154 179 99 162 4 253 26 190 15 113 88 184 68 23 204 162 224 211 85 39 125 220 23 202 194 42 189 188 45 198 100 105 187 142 142 4 24 110 129 162 182 147 204 33 33 239 34 203 97 128 58 43 78 190 26 62 13 54 123 41 93)
  :der-encode
  #t
  :tests
  '(#(348
      "point duplication during verification"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 50 176 209 13 141 14 4 188 141 77 6 77 39 6 153 232 124 255 201 180 156 92 32 115 14 28 38 246 16 93 220 218 2 33 0 234 175 228 206 119 204 217 19 127 57 237 197 55 13 38 183 63 77 198 206 173 251 64 164 136 178 220 108 147 241 153 60)
      #t
      ("PointDuplication"))))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 189 76 111 154 179 99 162 4 253 26 190 15 113 88 184 68 23 204 162 224 211 85 39 125 220 23 202 194 42 189 188 45 57 155 150 68 113 113 251 231 145 126 93 73 108 51 222 222 16 221 52 158 127 197 212 177 65 229 193 241 201 132 210 210)
  :der-encode
  #t
  :tests
  '(#(349
      "duplication bug"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 50 176 209 13 141 14 4 188 141 77 6 77 39 6 153 232 124 255 201 180 156 92 32 115 14 28 38 246 16 93 220 218 2 33 0 234 175 228 206 119 204 217 19 127 57 237 197 55 13 38 183 63 77 198 206 173 251 64 164 136 178 220 108 147 241 153 60)
      #f
      ("PointDuplication"))))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 225 129 91 177 101 59 129 70 162 233 22 15 176 233 70 17 43 137 148 185 217 14 248 163 106 142 242 186 24 123 112 93 17 179 68 202 237 135 219 148 185 201 234 184 165 227 39 122 154 164 107 49 118 140 238 84 6 195 203 207 252 224 169 69)
  :der-encode
  #t
  :tests
  '(#(350
      "comparison with point at infinity "
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 84 232 228 244 76 229 24 53 105 63 240 202 46 240 18 21 192 2 32 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 50 242 34 248 250 239 219 83 63 38 93 70 28 41 164 115 115)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 43 233 38 92 20 143 198 19 121 202 20 126 101 30 127 10 28 96 44 221 102 247 11 75 106 218 46 131 245 108 26 113 245 225 237 224 19 155 170 147 175 88 140 199 236 27 71 155 145 210 48 200 17 87 92 177 67 175 18 198 49 209 106 97)
  :der-encode
  #t
  :tests
  '(#(351
      "extreme value for k and edgecase s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 198 4 127 148 65 237 125 109 48 69 64 110 149 192 124 216 92 119 142 75 140 239 60 167 171 172 9 185 92 112 158 229 2 32 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 84 232 228 244 76 229 24 53 105 63 240 202 46 240 18 21 192)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 175 59 63 115 164 9 255 165 27 16 243 205 250 39 45 155 66 53 140 169 174 210 132 11 250 245 189 103 230 31 209 196 157 7 55 28 169 25 160 105 228 108 71 62 110 69 178 242 205 1 159 162 31 132 208 171 250 40 91 229 81 55 129 251)
  :der-encode
  #t
  :tests
  '(#(352
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 198 4 127 148 65 237 125 109 48 69 64 110 149 192 124 216 92 119 142 75 140 239 60 167 171 172 9 185 92 112 158 229 2 33 0 182 219 109 182 219 109 182 219 109 182 219 109 182 219 109 181 243 15 48 18 125 51 224 42 173 150 67 137 39 2 46 156)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 225 85 36 12 59 227 20 146 78 215 135 53 67 37 253 195 220 254 70 214 3 121 143 36 145 21 36 72 224 228 19 182 206 17 36 49 62 176 4 130 146 246 237 249 242 72 255 150 36 147 110 65 190 108 147 220 226 223 154 183 153 114 137 252)
  :der-encode
  #t
  :tests
  '(#(353
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 198 4 127 148 65 237 125 109 48 69 64 110 149 192 124 216 92 119 142 75 140 239 60 167 171 172 9 185 92 112 158 229 2 33 0 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 152 214 104 234 240 207 145 249 189 115 23 210 84 124 237 90 90)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 135 212 222 78 216 144 218 66 215 225 26 149 229 96 112 201 89 1 80 12 83 221 85 182 41 82 103 152 132 210 89 141 223 138 55 206 109 143 134 244 232 179 88 13 110 106 68 133 32 203 116 8 136 163 176 234 201 43 201 162 241 88 155 78)
  :der-encode
  #t
  :tests
  '(#(354
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 198 4 127 148 65 237 125 109 48 69 64 110 149 192 124 216 92 119 142 75 140 239 60 167 171 172 9 185 92 112 158 229 2 32 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 101 228 69 241 245 223 182 166 126 76 186 140 56 83 72 230 231)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 140 3 215 38 100 33 79 59 218 166 162 225 0 59 20 134 64 0 229 153 59 65 183 27 104 205 235 196 160 143 98 138 74 73 14 252 145 114 152 59 236 32 62 96 150 221 151 120 190 194 111 110 68 62 29 222 103 6 13 172 24 202 36 64)
  :der-encode
  #t
  :tests
  '(#(355
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 198 4 127 148 65 237 125 109 48 69 64 110 149 192 124 216 92 119 142 75 140 239 60 167 171 172 9 185 92 112 158 229 2 32 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 72 199 159 172 212 50 20 192 17 18 60 27 3 169 52 18 165)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 26 232 191 123 33 179 174 0 253 1 209 155 79 114 174 107 71 191 117 46 223 71 108 197 205 250 28 35 69 88 142 113 84 220 48 97 101 244 249 7 128 36 120 237 42 237 65 236 84 221 248 112 188 98 194 195 115 151 17 148 48 132 17 240)
  :der-encode
  #t
  :tests
  '(#(356
      "extreme value for k"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 198 4 127 148 65 237 125 109 48 69 64 110 149 192 124 216 92 119 142 75 140 239 60 167 171 172 9 185 92 112 158 229 2 32 14 177 14 90 185 95 47 39 83 72 216 42 210 228 215 148 156 129 147 128 13 140 156 117 223 88 227 67 240 235 186 123)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 197 218 210 18 73 39 60 215 42 208 105 67 180 227 190 8 34 89 91 249 250 4 89 34 61 39 53 77 234 36 23 155 151 52 10 187 50 106 253 30 182 222 94 82 90 35 170 212 146 159 138 9 36 76 151 40 65 160 203 118 104 15 240 96)
  :der-encode
  #t
  :tests
  '(#(357
      "extreme value for k and edgecase s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 121 190 102 126 249 220 187 172 85 160 98 149 206 135 11 7 2 155 252 219 45 206 40 217 89 242 129 91 22 248 23 152 2 32 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 84 232 228 244 76 229 24 53 105 63 240 202 46 240 18 21 192)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 242 198 100 59 243 115 160 129 47 153 60 214 22 153 53 81 215 188 120 38 211 214 190 208 145 142 212 153 139 116 232 55 215 22 10 69 45 210 200 211 229 244 248 10 30 251 195 55 147 195 93 110 36 62 157 254 154 57 226 109 251 122 27 159)
  :der-encode
  #t
  :tests
  '(#(358
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 121 190 102 126 249 220 187 172 85 160 98 149 206 135 11 7 2 155 252 219 45 206 40 217 89 242 129 91 22 248 23 152 2 33 0 182 219 109 182 219 109 182 219 109 182 219 109 182 219 109 181 243 15 48 18 125 51 224 42 173 150 67 137 39 2 46 156)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 58 27 214 8 211 24 124 104 77 141 70 26 84 6 226 184 107 9 238 220 93 45 210 143 204 52 27 210 212 131 166 216 94 58 185 217 231 158 203 126 67 19 87 130 174 96 177 47 246 155 51 73 193 129 155 74 178 123 115 140 127 128 53 149)
  :der-encode
  #t
  :tests
  '(#(359
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 121 190 102 126 249 220 187 172 85 160 98 149 206 135 11 7 2 155 252 219 45 206 40 217 89 242 129 91 22 248 23 152 2 33 0 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 152 214 104 234 240 207 145 249 189 115 23 210 84 124 237 90 90)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 174 226 229 170 150 211 27 222 139 14 193 231 29 121 231 33 197 251 9 78 186 73 214 29 251 166 230 54 167 123 33 90 175 53 52 250 33 1 67 206 60 236 197 191 225 224 177 54 171 104 17 214 98 55 102 55 239 225 237 221 33 43 111 240)
  :der-encode
  #t
  :tests
  '(#(360
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 121 190 102 126 249 220 187 172 85 160 98 149 206 135 11 7 2 155 252 219 45 206 40 217 89 242 129 91 22 248 23 152 2 32 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 101 228 69 241 245 223 182 166 126 76 186 140 56 83 72 230 231)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 219 13 198 63 109 255 249 178 86 68 152 162 66 52 73 204 93 137 66 34 221 218 134 234 189 109 43 178 84 157 40 215 91 91 194 1 83 239 106 38 73 220 111 17 110 108 165 201 22 116 10 154 100 86 24 0 58 90 68 142 238 146 143 204)
  :der-encode
  #t
  :tests
  '(#(361
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 121 190 102 126 249 220 187 172 85 160 98 149 206 135 11 7 2 155 252 219 45 206 40 217 89 242 129 91 22 248 23 152 2 32 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 72 199 159 172 212 50 20 192 17 18 60 27 3 169 52 18 165)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 130 160 4 162 255 74 167 194 253 76 113 188 136 164 238 22 215 92 17 245 173 133 153 166 235 65 234 115 228 159 128 188 243 96 171 199 149 180 178 27 70 88 74 27 235 196 23 32 223 81 162 80 68 136 15 40 124 94 93 131 248 60 29 32)
  :der-encode
  #t
  :tests
  '(#(362
      "extreme value for k"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 121 190 102 126 249 220 187 172 85 160 98 149 206 135 11 7 2 155 252 219 45 206 40 217 89 242 129 91 22 248 23 152 2 32 14 177 14 90 185 95 47 39 83 72 216 42 210 228 215 148 156 129 147 128 13 140 156 117 223 88 227 67 240 235 186 123)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 121 190 102 126 249 220 187 172 85 160 98 149 206 135 11 7 2 155 252 219 45 206 40 217 89 242 129 91 22 248 23 152 72 58 218 119 38 163 196 101 93 164 251 252 14 17 8 168 253 23 180 72 166 133 84 25 156 71 208 143 251 16 212 184)
  :der-encode
  #t
  :tests
  '(#(363
      "testing point duplication"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 87 49 183 196 189 4 203 158 251 131 105 53 255 46 84 123 242 144 159 134 130 74 244 216 223 120 172 247 109 123 61 78 2 32 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 99 207 214 106 25 10 96 8 137 30 13 129 212 154 9 82)
      #f
      ())
    #(364
      "testing point duplication"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 168 206 72 59 66 251 52 97 4 124 150 202 0 209 171 130 200 30 61 96 44 253 171 98 224 89 177 149 98 187 3 243 2 32 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 99 207 214 106 25 10 96 8 137 30 13 129 212 154 9 82)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 121 190 102 126 249 220 187 172 85 160 98 149 206 135 11 7 2 155 252 219 45 206 40 217 89 242 129 91 22 248 23 152 183 197 37 136 217 92 59 154 162 91 4 3 241 238 247 87 2 232 75 183 89 122 171 230 99 184 47 111 4 239 39 119)
  :der-encode
  #t
  :tests
  '(#(365
      "testing point duplication"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 87 49 183 196 189 4 203 158 251 131 105 53 255 46 84 123 242 144 159 134 130 74 244 216 223 120 172 247 109 123 61 78 2 32 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 99 207 214 106 25 10 96 8 137 30 13 129 212 154 9 82)
      #f
      ())
    #(366
      "testing point duplication"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 168 206 72 59 66 251 52 97 4 124 150 202 0 209 171 130 200 30 61 96 44 253 171 98 224 89 177 149 98 187 3 243 2 32 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 99 207 214 106 25 10 96 8 137 30 13 129 212 154 9 82)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 120 44 142 209 126 59 42 120 59 84 100 243 59 9 101 42 113 198 120 224 94 197 30 132 226 188 252 102 58 61 233 99 175 154 203 66 128 184 199 247 196 47 78 249 171 166 36 94 193 236 23 18 253 56 160 250 150 65 141 140 214 170 97 82)
  :der-encode
  #t
  :tests
  '(#(367
      "pseudorandom signature"
      #vu8()
      #vu8(48 70 2 33 0 252 15 115 122 121 213 37 238 254 60 148 12 22 33 115 204 111 217 166 213 204 80 23 117 64 38 196 17 61 15 21 204 2 33 0 137 77 111 181 156 199 145 153 184 156 241 43 85 107 164 159 134 35 182 109 168 193 26 85 226 103 227 49 132 151 104 140)
      #t
      ())
    #(368
      "pseudorandom signature"
      #vu8(77 115 103)
      #vu8(48 67 2 32 118 186 227 63 250 55 107 73 107 222 147 199 116 141 80 163 168 183 59 172 4 94 84 196 12 127 205 52 74 16 250 131 2 31 62 37 162 7 22 169 2 213 36 214 86 234 208 144 183 187 225 172 37 255 113 38 157 112 56 212 176 141 181 177 215)
      #t
      ())
    #(369
      "pseudorandom signature"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 1 110 45 250 198 0 200 201 148 192 187 129 91 16 114 187 91 182 128 119 65 33 211 66 249 63 224 169 148 247 44 9 2 33 0 195 120 148 77 224 90 172 167 12 113 237 154 127 228 238 210 179 106 179 221 180 179 45 9 213 62 235 217 31 47 146 23)
      #t
      ())
    #(370
      "pseudorandom signature"
      #vu8(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      #vu8(48 69 2 33 0 163 60 74 203 3 63 61 13 80 210 68 36 154 18 119 68 139 106 82 245 36 227 15 75 115 213 149 251 149 94 146 71 2 32 127 49 181 12 105 138 151 28 143 171 152 82 30 243 161 214 250 72 58 103 98 48 70 124 138 243 1 132 82 191 29 225)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 110 130 53 85 69 41 20 9 145 130 198 178 193 214 240 181 210 141 80 204 208 5 175 44 225 187 165 65 170 64 202 255 0 0 0 1 6 4 146 213 165 103 62 15 37 216 213 15 183 229 140 73 216 109 70 212 33 105 85 224 170 61 64 225)
  :der-encode
  #t
  :tests
  '(#(371
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 32 9 27 200 41 190 134 28 32 196 187 135 127 13 162 5 179 145 21 132 112 141 222 239 88 10 228 102 145 178 69 185 157 2 33 0 192 59 181 231 122 143 173 148 115 103 117 243 26 227 129 1 90 147 151 57 84 178 243 229 65 69 127 203 5 188 203 95)
      #t
      ())
    #(372
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 70 2 33 0 253 106 126 236 64 209 6 43 154 74 122 244 129 123 62 168 205 33 89 109 109 194 40 178 135 162 27 100 124 170 178 159 2 33 0 171 134 22 114 223 227 180 40 194 110 8 242 247 202 70 74 211 233 102 187 246 41 49 64 142 209 206 39 53 186 182 43)
      #t
      ())
    #(373
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 32 83 235 182 222 189 2 143 25 92 3 158 244 224 66 118 173 250 45 149 81 166 224 45 44 65 67 144 126 200 137 230 208 2 33 0 250 1 162 114 64 221 99 175 242 53 205 151 120 201 10 124 37 201 147 121 28 218 88 79 220 202 26 151 159 95 175 84)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 110 130 53 85 69 41 20 9 145 130 198 178 193 214 240 181 210 141 80 204 208 5 175 44 225 187 165 65 170 64 202 255 255 255 255 254 249 251 109 42 90 152 193 240 218 39 42 240 72 26 115 182 39 146 185 43 222 150 170 30 85 194 187 78)
  :der-encode
  #t
  :tests
  '(#(374
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 96 236 79 35 241 178 192 181 172 174 7 91 191 9 190 118 255 201 120 170 77 53 77 48 151 70 4 122 105 196 61 221 2 32 121 140 61 243 173 163 201 24 69 39 43 149 115 231 14 104 61 78 73 217 10 81 246 173 4 126 36 218 25 53 93 59)
      #t
      ())
    #(375
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 32 68 87 195 47 230 191 116 238 130 255 138 56 184 7 107 72 50 55 105 243 183 151 15 65 147 82 40 57 132 221 224 129 2 33 0 198 56 11 62 217 13 219 166 35 148 193 158 2 163 184 105 13 22 21 221 17 32 192 254 103 184 110 121 97 184 231 213)
      #t
      ())
    #(376
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 32 36 130 10 152 91 199 44 136 23 255 222 194 117 219 116 6 237 91 137 127 255 11 113 61 152 167 33 164 43 180 198 212 2 33 0 148 241 57 125 30 87 127 212 124 254 215 172 1 242 174 173 104 136 134 58 63 143 242 31 0 195 76 65 232 64 175 153)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 0 0 0 1 63 210 34 72 214 77 149 247 60 41 180 138 180 134 49 133 11 229 3 253 0 248 70 139 95 15 112 224 246 238 122 164 59 194 198 253 37 177 216 38 146 65 203 221 157 187 13 172 150 220 150 35 31 67 7 5 248 56 113 125)
  :der-encode
  #t
  :tests
  '(#(377
      "x-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 30 212 229 19 46 75 17 38 138 213 91 154 75 122 84 173 62 2 137 118 187 232 95 239 46 140 208 163 228 54 44 112 2 32 29 28 233 79 216 255 218 109 243 195 7 21 10 152 113 159 39 99 129 176 201 210 97 251 167 254 186 55 180 2 57 75)
      #t
      ())
    #(378
      "x-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 79 3 1 150 233 165 88 181 175 85 87 199 52 125 19 43 19 8 179 161 206 136 166 188 107 245 102 237 34 181 218 120 2 32 57 45 220 110 131 249 149 160 3 8 86 236 208 130 36 73 216 218 194 190 173 109 38 158 244 179 7 213 53 220 226 56)
      #t
      ())
    #(379
      "x-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 33 0 158 170 37 103 98 238 61 93 62 210 105 162 144 124 74 131 108 146 7 57 24 190 51 84 105 226 87 67 234 155 160 225 2 32 44 112 225 219 238 103 30 155 189 107 104 105 90 228 13 88 209 28 232 37 146 207 152 36 145 74 29 141 158 66 159 204)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 37 175 214 137 172 171 174 214 124 31 41 109 229 148 6 248 197 80 245 113 70 160 180 236 44 151 135 109 255 255 255 255 250 70 167 110 82 3 34 223 188 73 30 196 240 204 25 116 32 252 78 165 136 61 143 109 213 60 53 75 196 246 124 53)
  :der-encode
  #t
  :tests
  '(#(380
      "x-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 70 2 33 0 219 150 94 45 13 37 200 76 48 174 138 62 49 241 43 85 184 120 75 144 249 29 68 58 112 242 199 203 72 40 245 191 2 33 0 170 187 40 74 119 21 9 92 177 23 20 236 118 119 156 8 173 84 150 216 135 14 33 9 70 122 33 9 63 11 139 202)
      #t
      ())
    #(381
      "x-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 88 103 88 53 173 211 221 101 242 92 118 176 37 69 23 108 55 168 64 116 143 182 74 22 184 187 17 62 54 28 245 93 2 32 59 30 37 85 42 92 53 115 47 51 115 95 77 198 245 15 148 123 190 203 115 69 153 169 135 241 255 191 134 178 132 45)
      #t
      ())
    #(382
      "x-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 120 106 104 119 118 218 156 24 90 250 22 249 10 89 111 93 220 227 194 211 202 236 224 52 65 1 190 36 88 27 134 225 2 32 117 177 61 162 59 224 70 213 81 198 139 84 231 42 153 2 136 221 115 9 152 0 112 94 26 133 67 102 102 43 149 14)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 209 46 108 102 182 119 52 195 200 77 38 1 207 93 53 220 9 126 39 99 127 10 202 74 79 219 116 182 170 221 59 185 63 91 223 248 139 213 115 109 248 152 230 153 0 110 215 80 241 28 240 124 88 102 205 122 215 12 113 33 255 255 255 255)
  :der-encode
  #t
  :tests
  '(#(383
      "y-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 33 0 207 206 113 136 102 117 104 189 125 82 105 167 91 239 66 170 54 7 5 219 82 50 209 137 173 207 35 35 3 104 82 187 2 32 93 6 135 28 40 216 145 152 135 15 148 38 74 225 23 68 210 84 104 46 6 241 84 51 47 151 107 128 61 168 161 162)
      #t
      ())
    #(384
      "y-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 70 2 33 0 178 28 200 24 67 199 71 121 252 91 169 254 27 13 94 113 115 246 150 198 233 19 152 207 131 163 27 199 53 182 5 11 2 33 0 137 69 232 113 23 137 9 60 128 254 108 236 57 71 204 156 54 255 226 80 95 30 247 33 187 80 126 5 201 192 123 210)
      #t
      ())
    #(385
      "y-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 70 2 33 0 251 197 8 125 30 107 188 50 218 226 42 131 125 3 21 16 40 172 105 173 113 230 110 95 200 65 222 5 72 192 109 206 2 33 0 226 223 165 229 109 226 141 114 208 231 112 231 102 96 51 196 36 49 188 174 31 198 207 253 149 147 213 76 188 252 250 124)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp256k1_sha3_256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA3-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 109 74 127 96 212 119 74 79 10 168 187 222 219 149 60 126 234 121 9 64 126 49 100 117 86 100 188 40 0 0 0 0 230 89 211 78 77 243 141 158 140 158 170 223 186 54 97 44 118 145 149 190 134 199 122 172 63 54 231 139 83 134 128 251)
  :der-encode
  #t
  :tests
  '(#(386
      "x-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 32 94 167 128 183 60 224 39 192 63 248 30 27 38 230 16 118 200 148 74 131 93 52 156 215 87 236 224 196 221 241 218 36 2 33 0 189 155 135 219 38 21 141 91 145 50 187 15 61 245 74 42 182 201 174 154 78 11 132 150 165 57 171 74 181 136 204 186)
      #t
      ())
    #(387
      "x-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 70 24 241 161 28 248 203 193 150 100 22 120 92 49 73 247 90 113 174 37 109 68 93 235 49 0 141 81 186 96 136 194 2 32 64 128 135 114 93 214 206 24 191 183 73 58 84 96 181 64 34 36 94 93 189 115 30 214 211 93 184 138 81 210 186 110)
      #t
      ())
    #(388
      "x-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 33 0 157 156 219 148 229 233 166 107 248 238 223 223 159 26 244 55 19 187 5 216 128 222 200 154 236 33 99 25 88 151 13 230 2 32 115 41 50 100 155 234 53 241 29 254 9 38 97 142 79 9 28 27 38 76 161 40 169 238 241 78 109 148 215 201 242 7)
      #t
      ())))
