(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 80 205 101 132 168 5 34 153 46 204 32 194 2 128 195 88 193 94 80 133 224 161 44 187 178 15 190 193 44 225 148 192 249 11 114 51 29 185 15 206)
  :der-encode
  #t
  :tests
  '(#(1
      "signature malleability"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 21 0 160 100 136 10 19 82 133 33 118 171 250 21 194 120 124 5 216 79 94 141)
      #t
      ())
    #(2
      "Legacy:ASN encoding of r misses leading 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 44 2 20 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #t
      ("MissingZero"))
    #(3
      "valid"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #t
      ())
    #(4
      "long form encoding of length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 129 45 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ("BER"))
    #(5
      "length of sequence contains leading 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 130 0 45 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ("BER"))
    #(6
      "wrong length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(7
      "wrong length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 44 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(8
      "uint32 overflow in length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 133 1 0 0 0 45 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(9
      "uint64 overflow in length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 137 1 0 0 0 0 0 0 0 45 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(10
      "length of sequence = 2**31 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 132 127 255 255 255 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(11
      "length of sequence = 2**32 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 132 255 255 255 255 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(12
      "length of sequence = 2**40 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 133 255 255 255 255 255 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(13
      "length of sequence = 2**64 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 136 255 255 255 255 255 255 255 255 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(14
      "incorrect length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 255 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(15
      "indefinite length without termination"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(16
      "indefinite length without termination"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 128 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(17
      "indefinite length without termination"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 128 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(18
      "removing sequence"
      #vu8(49 50 51 52 48 48)
      #vu8()
      #f
      ())
    #(19
      "lonely sequence tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48)
      #f
      ())
    #(20
      "appending 0's to sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 47 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202 0 0)
      #f
      ())
    #(21
      "prepending 0's to sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 47 0 0 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(22
      "appending unused 0's to sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202 0 0)
      #f
      ())
    #(23
      "appending null value to sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 47 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202 5 0)
      #f
      ())
    #(24
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 50 73 129 119 48 45 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(25
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 49 37 0 48 45 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(26
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 47 48 45 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202 0 4 222 173 190 239)
      #f
      ())
    #(27
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 50 34 26 73 129 119 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(28
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 49 34 25 37 0 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(29
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 53 34 23 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 0 4 222 173 190 239 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(30
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 50 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 34 25 73 129 119 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(31
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 49 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 34 24 37 0 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(32
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 53 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 34 22 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202 0 4 222 173 190 239)
      #f
      ())
    #(33
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 53 170 0 187 0 205 0 48 45 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(34
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 51 170 2 170 187 48 45 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(35
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 53 34 29 170 0 187 0 205 0 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(36
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 51 34 27 170 2 170 187 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(37
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 53 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 34 28 170 0 187 0 205 0 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(38
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 51 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 34 26 170 2 170 187 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(39
      "truncated length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 129)
      #f
      ())
    #(40
      "using composition with indefinite length"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 48 45 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202 0 0)
      #f
      ())
    #(41
      "using composition with indefinite length"
      #vu8(49 50 51 52 48 48)
      #vu8(48 49 34 128 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 0 0 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(42
      "using composition with indefinite length"
      #vu8(49 50 51 52 48 48)
      #vu8(48 49 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 34 128 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202 0 0)
      #f
      ())
    #(43
      "using composition with wrong tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 49 45 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202 0 0)
      #f
      ())
    #(44
      "using composition with wrong tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48 49 34 128 3 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 0 0 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(45
      "using composition with wrong tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48 49 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 34 128 3 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202 0 0)
      #f
      ())
    #(46
      "Replacing sequence with NULL"
      #vu8(49 50 51 52 48 48)
      #vu8(5 0)
      #f
      ())
    #(47
      "changing tag value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(46 45 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(48
      "changing tag value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(47 45 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(49
      "changing tag value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(49 45 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(50
      "changing tag value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(50 45 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(51
      "changing tag value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(255 45 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(52
      "dropping value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 0)
      #f
      ())
    #(53
      "using composition for sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 49 48 1 2 48 44 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(54
      "truncated sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 44 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195)
      #f
      ())
    #(55
      "truncated sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 44 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(56
      "sequence of size 4142 to check for overflows"
      #vu8(49 50 51 52 48 48)
      #vu8(48 130 16 46 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      #f
      ())
    #(57
      "indefinite length"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202 0 0)
      #f
      ("BER"))
    #(58
      "indefinite length with truncated delimiter"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202 0)
      #f
      ())
    #(59
      "indefinite length with additional element"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202 5 0 0 0)
      #f
      ())
    #(60
      "indefinite length with truncated element"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202 6 8 17 34 0 0)
      #f
      ())
    #(61
      "indefinite length with garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202 0 0 254 2 190 239)
      #f
      ())
    #(62
      "indefinite length with nonempty EOC"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202 0 2 190 239)
      #f
      ())
    #(63
      "prepend empty sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 47 48 0 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(64
      "append empty sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 47 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202 48 0)
      #f
      ())
    #(65
      "append garbage with high tag number"
      #vu8(49 50 51 52 48 48)
      #vu8(48 48 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202 191 127 0)
      #f
      ())
    #(66
      "append null with explicit tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48 49 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202 160 2 5 0)
      #f
      ())
    #(67
      "append null with implicit tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48 47 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202 160 0)
      #f
      ())
    #(68
      "sequence of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 47 48 45 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(69
      "truncated sequence: removed last 1 elements"
      #vu8(49 50 51 52 48 48)
      #vu8(48 23 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229)
      #f
      ())
    #(70
      "repeating element in sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 67 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(71
      "long form encoding of length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 129 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ("BER"))
    #(72
      "long form encoding of length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 129 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ("BER"))
    #(73
      "length of integer contains leading 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 47 2 130 0 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ("BER"))
    #(74
      "length of integer contains leading 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 47 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 130 0 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ("BER"))
    #(75
      "wrong length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 22 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(76
      "wrong length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 20 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(77
      "wrong length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 21 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(78
      "wrong length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 19 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(79
      "uint32 overflow in length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 50 2 133 1 0 0 0 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(80
      "uint32 overflow in length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 50 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 133 1 0 0 0 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(81
      "uint64 overflow in length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 54 2 137 1 0 0 0 0 0 0 0 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(82
      "uint64 overflow in length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 54 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 137 1 0 0 0 0 0 0 0 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(83
      "length of integer = 2**31 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 49 2 132 127 255 255 255 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(84
      "length of integer = 2**31 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 49 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 132 127 255 255 255 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(85
      "length of integer = 2**32 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 49 2 132 255 255 255 255 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(86
      "length of integer = 2**32 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 49 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 132 255 255 255 255 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(87
      "length of integer = 2**40 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 50 2 133 255 255 255 255 255 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(88
      "length of integer = 2**40 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 50 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 133 255 255 255 255 255 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(89
      "length of integer = 2**64 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 53 2 136 255 255 255 255 255 255 255 255 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(90
      "length of integer = 2**64 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 53 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 136 255 255 255 255 255 255 255 255 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(91
      "incorrect length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 255 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(92
      "incorrect length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 255 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(93
      "removing integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 22 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(94
      "lonely integer tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48 23 2 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(95
      "lonely integer tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48 24 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2)
      #f
      ())
    #(96
      "appending 0's to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 47 2 23 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 0 0 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(97
      "appending 0's to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 47 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 22 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202 0 0)
      #f
      ())
    #(98
      "prepending 0's to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 47 2 23 0 0 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ("BER"))
    #(99
      "prepending 0's to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 47 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 22 0 0 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ("BER"))
    #(100
      "appending unused 0's to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 47 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 0 0 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(101
      "appending null value to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 47 2 23 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 5 0 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(102
      "appending null value to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 47 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 22 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202 5 0)
      #f
      ())
    #(103
      "truncated length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 24 2 129 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(104
      "truncated length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 25 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 129)
      #f
      ())
    #(105
      "Replacing integer with NULL"
      #vu8(49 50 51 52 48 48)
      #vu8(48 24 5 0 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(106
      "Replacing integer with NULL"
      #vu8(49 50 51 52 48 48)
      #vu8(48 25 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 5 0)
      #f
      ())
    #(107
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 0 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(108
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 1 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(109
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 3 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(110
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 4 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(111
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 255 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(112
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 0 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(113
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 1 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(114
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 3 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(115
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 4 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(116
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 255 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(117
      "dropping value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 24 2 0 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(118
      "dropping value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 25 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 0)
      #f
      ())
    #(119
      "using composition for integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 49 34 25 2 1 0 2 20 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(120
      "using composition for integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 49 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 34 24 2 1 95 2 19 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(121
      "modifying first byte of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 2 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(122
      "modifying first byte of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 93 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(123
      "modifying last byte of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 101 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(124
      "modifying last byte of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 74)
      #f
      ())
    #(125
      "truncated integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 44 2 20 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(126
      "truncated integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 44 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 19 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195)
      #f
      ())
    #(127
      "truncated integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 44 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 19 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(128
      "integer of size 4118 to check for overflows"
      #vu8(49 50 51 52 48 48)
      #vu8(48 130 16 48 2 130 16 22 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(129
      "leading ff in integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 22 255 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(130
      "leading ff in integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 21 255 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(131
      "replaced integer by infinity"
      #vu8(49 50 51 52 48 48)
      #vu8(48 25 9 1 128 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(132
      "replaced integer by infinity"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 9 1 128)
      #f
      ())
    #(133
      "replacing integer with zero"
      #vu8(49 50 51 52 48 48)
      #vu8(48 25 2 1 0 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(134
      "replacing integer with zero"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 1 0)
      #f
      ())
    #(135
      "integer of size 4117 to check for overflows"
      #vu8(49 50 51 52 48 48)
      #vu8(48 130 16 48 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 130 16 21 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      #f
      ())
    #(136
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 1 192 214 76 145 25 161 239 49 176 180 154 212 29 208 228 84 125 116 76 60 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(137
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 44 2 20 192 214 76 145 25 161 239 49 176 176 177 66 43 129 134 172 232 138 7 142 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(138
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 255 63 41 179 110 230 94 16 206 79 77 89 244 219 86 202 127 77 0 214 27 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(139
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 44 2 20 63 41 179 110 230 94 16 206 79 79 78 189 212 126 121 83 23 117 248 114 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(140
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 254 63 41 179 110 230 94 16 206 79 75 101 43 226 47 27 171 130 139 179 196 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(141
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 254 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(142
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 1 63 41 179 110 230 94 16 206 79 77 89 244 219 86 202 127 77 0 214 27 2 20 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(143
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 21 1 95 155 119 245 236 173 122 222 137 87 239 124 47 214 225 161 188 154 230 33)
      #f
      ())
    #(144
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 21 255 95 155 119 245 236 173 122 222 137 84 5 234 61 135 131 250 39 176 161 115)
      #f
      ())
    #(145
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 20 160 100 136 10 19 82 133 33 118 170 5 76 201 80 205 50 13 218 60 54)
      #f
      ())
    #(146
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 21 254 160 100 136 10 19 82 133 33 118 168 16 131 208 41 30 94 67 101 25 223)
      #f
      ())
    #(147
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 21 2 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(148
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 21 254 95 155 119 245 236 173 122 222 137 85 250 179 54 175 50 205 242 37 195 202)
      #f
      ())
    #(149
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 0 192 214 76 145 25 161 239 49 176 178 166 11 36 169 53 128 178 255 41 229 2 21 1 160 100 136 10 19 82 133 33 118 170 5 76 201 80 205 50 13 218 60 54)
      #f
      ())
    #(150
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 0 2 1 0)
      #f
      ("EdgeCase"))
    #(151
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 0 2 1 1)
      #f
      ("EdgeCase"))
    #(152
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 0 2 1 255)
      #f
      ("EdgeCase"))
    #(153
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 1 0 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 87)
      #f
      ("EdgeCase"))
    #(154
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 1 0 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 86)
      #f
      ("EdgeCase"))
    #(155
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 1 0 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 88)
      #f
      ("EdgeCase"))
    #(156
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 1 0 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 127 255 255 255)
      #f
      ("EdgeCase"))
    #(157
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 1 0 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 128 0 0 0)
      #f
      ("EdgeCase"))
    #(158
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 8 2 1 0 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(159
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 0 9 1 66)
      #f
      ("EdgeCase"))
    #(160
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 2 1 0)
      #f
      ("EdgeCase"))
    #(161
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 2 1 1)
      #f
      ("EdgeCase"))
    #(162
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 2 1 255)
      #f
      ("EdgeCase"))
    #(163
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 1 1 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 87)
      #f
      ("EdgeCase"))
    #(164
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 1 1 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 86)
      #f
      ("EdgeCase"))
    #(165
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 1 1 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 88)
      #f
      ("EdgeCase"))
    #(166
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 1 1 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 127 255 255 255)
      #f
      ("EdgeCase"))
    #(167
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 1 1 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 128 0 0 0)
      #f
      ("EdgeCase"))
    #(168
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 8 2 1 1 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(169
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 9 1 66)
      #f
      ("EdgeCase"))
    #(170
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 255 2 1 0)
      #f
      ("EdgeCase"))
    #(171
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 255 2 1 1)
      #f
      ("EdgeCase"))
    #(172
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 255 2 1 255)
      #f
      ("EdgeCase"))
    #(173
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 1 255 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 87)
      #f
      ("EdgeCase"))
    #(174
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 1 255 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 86)
      #f
      ("EdgeCase"))
    #(175
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 1 255 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 88)
      #f
      ("EdgeCase"))
    #(176
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 1 255 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 127 255 255 255)
      #f
      ("EdgeCase"))
    #(177
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 1 255 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 128 0 0 0)
      #f
      ("EdgeCase"))
    #(178
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 8 2 1 255 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(179
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 255 9 1 66)
      #f
      ("EdgeCase"))
    #(180
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 87 2 1 0)
      #f
      ("EdgeCase"))
    #(181
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 87 2 1 1)
      #f
      ("EdgeCase"))
    #(182
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 87 2 1 255)
      #f
      ("EdgeCase"))
    #(183
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 87 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 87)
      #f
      ("EdgeCase"))
    #(184
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 87 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 86)
      #f
      ("EdgeCase"))
    #(185
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 87 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 88)
      #f
      ("EdgeCase"))
    #(186
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 87 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 127 255 255 255)
      #f
      ("EdgeCase"))
    #(187
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 87 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 128 0 0 0)
      #f
      ("EdgeCase"))
    #(188
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 28 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 87 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(189
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 87 9 1 66)
      #f
      ("EdgeCase"))
    #(190
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 86 2 1 0)
      #f
      ("EdgeCase"))
    #(191
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 86 2 1 1)
      #f
      ("EdgeCase"))
    #(192
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 86 2 1 255)
      #f
      ("EdgeCase"))
    #(193
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 86 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 87)
      #f
      ("EdgeCase"))
    #(194
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 86 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 86)
      #f
      ("EdgeCase"))
    #(195
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 86 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 88)
      #f
      ("EdgeCase"))
    #(196
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 86 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 127 255 255 255)
      #f
      ("EdgeCase"))
    #(197
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 86 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 128 0 0 0)
      #f
      ("EdgeCase"))
    #(198
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 28 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 86 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(199
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 86 9 1 66)
      #f
      ("EdgeCase"))
    #(200
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 88 2 1 0)
      #f
      ("EdgeCase"))
    #(201
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 88 2 1 1)
      #f
      ("EdgeCase"))
    #(202
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 88 2 1 255)
      #f
      ("EdgeCase"))
    #(203
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 88 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 87)
      #f
      ("EdgeCase"))
    #(204
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 88 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 86)
      #f
      ("EdgeCase"))
    #(205
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 88 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 88)
      #f
      ("EdgeCase"))
    #(206
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 88 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 127 255 255 255)
      #f
      ("EdgeCase"))
    #(207
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 88 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 128 0 0 0)
      #f
      ("EdgeCase"))
    #(208
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 28 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 88 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(209
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 88 9 1 66)
      #f
      ("EdgeCase"))
    #(210
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 127 255 255 255 2 1 0)
      #f
      ("EdgeCase"))
    #(211
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 127 255 255 255 2 1 1)
      #f
      ("EdgeCase"))
    #(212
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 127 255 255 255 2 1 255)
      #f
      ("EdgeCase"))
    #(213
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 127 255 255 255 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 87)
      #f
      ("EdgeCase"))
    #(214
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 127 255 255 255 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 86)
      #f
      ("EdgeCase"))
    #(215
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 127 255 255 255 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 88)
      #f
      ("EdgeCase"))
    #(216
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 127 255 255 255 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 127 255 255 255)
      #f
      ("EdgeCase"))
    #(217
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 127 255 255 255 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 128 0 0 0)
      #f
      ("EdgeCase"))
    #(218
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 28 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 127 255 255 255 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(219
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 127 255 255 255 9 1 66)
      #f
      ("EdgeCase"))
    #(220
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 128 0 0 0 2 1 0)
      #f
      ("EdgeCase"))
    #(221
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 128 0 0 0 2 1 1)
      #f
      ("EdgeCase"))
    #(222
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 128 0 0 0 2 1 255)
      #f
      ("EdgeCase"))
    #(223
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 128 0 0 0 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 87)
      #f
      ("EdgeCase"))
    #(224
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 128 0 0 0 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 86)
      #f
      ("EdgeCase"))
    #(225
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 128 0 0 0 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 88)
      #f
      ("EdgeCase"))
    #(226
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 128 0 0 0 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 127 255 255 255)
      #f
      ("EdgeCase"))
    #(227
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 128 0 0 0 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 128 0 0 0)
      #f
      ("EdgeCase"))
    #(228
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 28 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 128 0 0 0 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(229
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 128 0 0 0 9 1 66)
      #f
      ("EdgeCase"))
    #(230
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 12 1 48)
      #f
      ())
    #(231
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 5 2 1 1 12 0)
      #f
      ())
    #(232
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 9 12 2 37 115 12 3 115 37 115)
      #f
      ())
    #(233
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 8 2 1 1 48 3 2 1 0)
      #f
      ())
    #(234
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 3 2 1 1)
      #f
      ())
    #(235
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 1 1 0)
      #f
      ())
    #(236
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 1 1 0 1 1 0)
      #f
      ())
    #(237
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 4 12 0 12 0)
      #f
      ())
    #(238
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 12 1 48 12 1 48)
      #f
      ())
    #(239
      "Edge case for Shamir multiplication"
      #vu8(55 48 53 48 53)
      #vu8(48 46 2 21 0 222 58 110 225 18 180 37 242 20 78 69 42 186 169 209 26 35 124 236 97 2 21 0 156 64 111 65 225 104 140 216 158 10 22 81 197 116 12 150 28 89 148 158)
      #t
      ())
    #(240
      "special case hash"
      #vu8(52 50 54 52 55 57 55 50 52)
      #vu8(48 45 2 21 0 173 63 95 192 145 32 223 144 232 116 1 17 147 75 220 80 114 49 114 161 2 20 65 10 225 35 109 165 237 160 179 39 189 188 158 109 84 90 52 118 64 81)
      #t
      ())
    #(241
      "special case hash"
      #vu8(55 49 51 56 54 56 52 56 57 49)
      #vu8(48 44 2 20 42 8 167 245 42 53 6 197 255 11 11 223 196 30 210 86 169 152 222 202 2 20 61 83 36 184 81 248 15 51 75 239 163 155 119 36 28 240 101 53 161 246)
      #t
      ())
    #(242
      "special case hash"
      #vu8(49 48 51 53 57 51 51 49 54 54 56)
      #vu8(48 44 2 20 72 219 190 248 104 175 53 176 88 189 52 229 7 232 95 198 31 214 15 49 2 20 46 251 126 68 139 165 157 229 131 81 152 195 213 245 1 81 19 163 218 229)
      #t
      ())
    #(243
      "special case hash"
      #vu8(51 57 52 57 52 48 49 50 49 53)
      #vu8(48 45 2 21 0 166 121 174 45 123 193 247 212 192 63 178 50 89 40 178 83 176 144 165 111 2 20 100 111 144 169 33 10 135 178 131 36 215 197 10 69 74 188 220 167 245 60)
      #t
      ())
    #(244
      "special case hash"
      #vu8(49 51 52 52 50 57 51 48 55 57)
      #vu8(48 44 2 20 71 57 142 144 104 99 213 126 162 115 151 112 131 211 108 227 95 31 97 158 2 20 36 149 156 155 31 6 187 136 34 189 143 172 143 69 148 95 209 199 235 235)
      #t
      ())
    #(245
      "special case hash"
      #vu8(51 55 48 54 50 49 49 55 49 50)
      #vu8(48 45 2 20 89 155 203 160 255 63 230 242 216 178 84 78 59 130 71 49 102 109 25 177 2 21 0 245 209 84 105 252 225 226 68 117 7 146 243 39 187 110 229 232 41 159 148)
      #t
      ())
    #(246
      "special case hash"
      #vu8(51 52 51 54 56 56 55 49 50)
      #vu8(48 44 2 20 75 36 21 90 246 107 201 131 5 3 129 194 87 154 217 26 133 196 141 79 2 20 40 176 212 69 233 63 163 114 165 155 112 48 198 125 33 36 185 187 214 95)
      #t
      ())
    #(247
      "special case hash"
      #vu8(49 51 53 49 53 51 48 51 55 48)
      #vu8(48 44 2 20 87 153 155 109 207 125 119 51 125 132 69 84 63 30 224 210 18 215 248 91 2 20 95 76 143 162 241 19 179 99 117 4 180 33 96 221 174 133 45 170 29 120)
      #t
      ())
    #(248
      "special case hash"
      #vu8(54 53 53 51 50 48 51 49 50 54)
      #vu8(48 45 2 20 7 136 236 167 53 144 78 0 79 65 79 91 219 8 115 101 250 230 98 211 2 21 0 153 229 42 248 199 242 12 227 79 49 131 30 163 47 101 3 192 60 58 41)
      #t
      ())
    #(249
      "special case hash"
      #vu8(49 53 54 52 51 52 54 54 48 51)
      #vu8(48 46 2 21 0 247 189 125 229 159 231 121 26 221 32 164 153 36 37 226 12 20 53 222 74 2 21 0 197 169 254 161 49 122 35 116 134 161 152 148 196 226 232 71 94 234 197 197)
      #t
      ())
    #(250
      "special case hash"
      #vu8(52 52 50 57 53 51 57 49 49 55)
      #vu8(48 44 2 20 110 54 71 223 237 156 90 227 204 72 21 40 163 95 87 65 233 220 16 193 2 20 86 156 57 55 192 161 24 203 73 53 138 100 6 112 145 107 163 70 219 3)
      #t
      ())
    #(251
      "special case hash"
      #vu8(49 48 57 53 51 50 54 49 51 53 49)
      #vu8(48 45 2 20 95 96 62 203 172 105 130 150 14 251 109 136 83 222 61 223 180 178 35 110 2 21 0 180 183 121 2 140 126 142 168 80 36 38 7 230 70 56 132 98 1 136 172)
      #t
      ())
    #(252
      "special case hash"
      #vu8(53 57 56 55 51 53 48 48 52 49)
      #vu8(48 44 2 20 29 166 219 25 120 139 129 252 61 219 152 11 222 250 154 84 211 55 23 208 2 20 1 139 21 30 235 140 121 191 91 230 105 241 44 183 132 97 94 9 131 23)
      #t
      ())
    #(253
      "special case hash"
      #vu8(51 52 54 51 48 48 54 56 55 56)
      #vu8(48 45 2 20 122 221 70 186 176 210 194 33 208 63 106 147 208 252 201 225 165 75 12 114 2 21 0 177 120 27 214 137 165 51 69 151 184 2 113 58 15 214 245 97 19 44 130)
      #t
      ())
    #(254
      "special case hash"
      #vu8(57 56 49 55 51 50 48 50 56 55)
      #vu8(48 46 2 21 0 131 17 102 47 108 102 84 20 164 235 165 28 50 139 3 121 69 82 48 206 2 21 0 190 214 203 220 224 89 70 72 136 203 73 18 170 52 181 220 185 230 33 35)
      #t
      ())
    #(255
      "special case hash"
      #vu8(51 50 50 50 48 52 49 48 52 54)
      #vu8(48 45 2 21 0 248 106 163 86 98 116 166 39 119 228 116 232 85 152 250 45 86 174 25 228 2 20 69 156 17 203 200 162 237 75 121 75 109 238 211 199 239 122 74 69 150 31)
      #t
      ())
    #(256
      "special case hash"
      #vu8(54 54 54 54 51 48 55 49 48 52)
      #vu8(48 44 2 20 60 44 104 48 160 115 61 37 250 205 240 4 138 157 108 59 41 33 174 207 2 20 12 126 12 51 61 200 41 48 245 248 164 51 123 55 157 183 240 165 38 238)
      #t
      ())
    #(257
      "special case hash"
      #vu8(49 48 51 53 57 53 49 56 57 56)
      #vu8(48 46 2 21 0 250 206 27 69 225 138 15 157 171 237 95 240 155 184 0 236 5 54 152 124 2 21 0 158 96 177 192 168 121 55 252 25 128 52 180 54 86 34 41 12 171 84 193)
      #t
      ())
    #(258
      "special case hash"
      #vu8(49 56 52 54 53 57 55 49 57 53)
      #vu8(48 45 2 21 0 227 202 250 161 254 254 7 186 1 14 254 78 247 130 60 187 46 5 211 43 2 20 21 31 27 72 26 36 221 213 223 152 192 77 5 133 72 253 6 244 127 33)
      #t
      ())
    #(259
      "special case hash"
      #vu8(51 49 51 54 48 52 54 49 56 57)
      #vu8(48 45 2 21 0 155 218 103 51 213 71 85 95 210 170 19 145 255 66 19 2 0 93 42 77 2 20 74 172 62 124 29 188 153 168 85 96 169 33 243 78 203 62 139 163 116 102)
      #t
      ())
    #(260
      "special case hash"
      #vu8(50 54 54 51 55 56 52 50 53 52)
      #vu8(48 44 2 20 83 168 247 179 17 251 210 183 28 251 199 129 197 9 35 191 76 66 51 53 2 20 51 207 44 246 23 245 101 184 49 216 46 147 232 251 88 222 147 141 187 181)
      #t
      ())
    #(261
      "special case hash"
      #vu8(49 54 53 50 49 48 48 53 50 52)
      #vu8(48 44 2 20 51 50 226 221 64 128 97 107 150 78 123 253 86 158 123 60 160 118 123 56 2 20 101 224 199 85 212 220 244 96 251 189 38 64 211 71 41 143 42 41 193 86)
      #t
      ())
    #(262
      "special case hash"
      #vu8(53 55 52 56 48 56 49 54 57 54)
      #vu8(48 45 2 21 0 217 71 3 5 93 122 153 225 114 124 32 24 37 101 51 153 69 105 60 238 2 20 1 48 80 35 152 131 159 96 71 41 118 9 153 237 100 53 14 87 101 23)
      #t
      ())
    #(263
      "special case hash"
      #vu8(54 51 52 51 57 49 51 52 54 56)
      #vu8(48 45 2 20 92 26 52 252 194 203 202 242 119 142 133 233 74 218 105 225 138 180 6 72 2 21 0 195 121 140 180 115 175 29 51 178 223 93 223 215 212 131 41 219 160 77 49)
      #t
      ())
    #(264
      "special case hash"
      #vu8(49 53 52 49 49 48 51 53 57 56)
      #vu8(48 46 2 21 0 224 99 167 124 104 140 177 163 222 174 60 252 68 185 0 65 5 170 60 14 2 21 0 143 30 155 47 225 35 153 49 176 170 53 184 255 125 85 95 7 110 142 172)
      #t
      ())
    #(265
      "special case hash"
      #vu8(49 48 52 55 56 53 56 48 49 50 56)
      #vu8(48 45 2 20 111 17 195 30 101 104 155 132 129 54 254 4 71 34 8 29 237 95 59 188 2 21 0 233 117 22 69 72 187 175 240 81 232 252 190 62 127 209 218 116 96 82 122)
      #t
      ())
    #(266
      "special case hash"
      #vu8(49 48 53 51 54 50 56 53 53 54 56)
      #vu8(48 45 2 21 0 142 193 18 96 15 84 35 254 198 26 158 172 17 194 215 242 2 102 10 251 2 20 60 62 246 239 218 83 67 98 42 156 179 113 20 152 144 25 188 236 48 22)
      #t
      ())
    #(267
      "special case hash"
      #vu8(57 53 51 57 48 52 49 48 53)
      #vu8(48 46 2 21 0 234 255 157 53 151 41 115 46 73 50 122 255 175 224 117 14 66 190 153 76 2 21 0 180 242 236 155 74 185 112 92 30 64 124 224 98 180 34 15 116 203 130 9)
      #t
      ())
    #(268
      "special case hash"
      #vu8(57 55 56 56 52 56 48 51 57)
      #vu8(48 45 2 21 0 183 35 127 17 60 60 57 137 46 33 188 21 48 8 158 178 98 62 26 181 2 20 22 71 121 108 214 150 219 249 250 133 43 20 238 89 177 3 130 57 64 243)
      #t
      ())
    #(269
      "special case hash"
      #vu8(51 54 49 48 54 55 50 52 52 50)
      #vu8(48 44 2 20 65 216 21 48 51 163 20 72 35 175 194 48 23 128 222 92 199 7 146 250 2 20 10 154 221 151 141 80 44 113 161 106 4 50 69 21 19 199 37 90 78 196)
      #t
      ())
    #(270
      "special case hash"
      #vu8(49 48 53 52 50 52 48 55 48 53)
      #vu8(48 45 2 21 0 148 183 187 187 99 112 128 234 219 0 82 176 158 220 78 28 249 113 175 24 2 20 63 190 71 69 27 179 47 83 44 79 124 135 18 93 64 189 83 95 68 120)
      #t
      ())
    #(271
      "special case hash"
      #vu8(53 49 55 52 52 52 56 49 57 55)
      #vu8(48 46 2 21 0 234 221 75 74 204 227 130 88 114 87 52 5 2 93 22 3 238 168 150 228 2 21 0 223 10 151 2 252 158 35 125 5 186 143 253 195 127 100 109 249 203 235 191)
      #t
      ())
    #(272
      "special case hash"
      #vu8(49 57 54 55 53 54 49 50 53 49)
      #vu8(48 46 2 21 0 165 188 64 49 112 115 127 95 41 109 162 237 244 108 151 155 0 246 180 187 2 21 0 143 12 230 213 247 228 133 117 59 243 248 80 37 76 92 50 179 133 32 90)
      #t
      ())
    #(273
      "special case hash"
      #vu8(51 52 52 55 50 53 51 51 52 51)
      #vu8(48 44 2 20 111 16 130 44 132 114 128 202 12 104 126 32 157 119 56 219 87 49 93 252 2 20 127 251 171 132 55 104 129 90 135 190 121 178 241 237 206 107 232 66 52 128)
      #t
      ())
    #(274
      "special case hash"
      #vu8(51 54 56 50 54 52 51 49 56)
      #vu8(48 45 2 20 64 161 39 196 216 155 62 121 59 199 228 45 57 49 38 110 46 43 122 207 2 21 0 191 24 250 59 89 130 219 221 2 212 129 79 90 3 39 254 212 119 100 107)
      #t
      ())
    #(275
      "special case hash"
      #vu8(51 50 54 49 49 57 56 54 48 56)
      #vu8(48 45 2 21 0 172 252 143 5 167 30 25 174 221 86 25 69 60 130 124 174 195 224 130 4 2 20 65 99 212 27 216 140 104 145 20 190 189 176 177 76 166 61 226 230 54 174)
      #t
      ())
    #(276
      "special case hash"
      #vu8(57 54 55 56 55 56 49 48 57 52)
      #vu8(48 46 2 21 0 179 129 187 184 116 100 3 230 254 157 119 121 27 246 185 173 1 184 195 43 2 21 0 231 147 191 146 109 185 193 238 53 218 240 69 126 137 13 52 227 247 2 236)
      #t
      ())
    #(277
      "special case hash"
      #vu8(52 57 53 56 56 50 51 56 50 51)
      #vu8(48 45 2 21 0 255 8 111 143 176 93 57 214 113 139 197 138 208 4 189 177 163 70 14 143 2 20 54 97 176 209 182 91 32 245 166 231 122 172 57 48 176 143 153 239 204 211)
      #t
      ())
    #(278
      "special case hash"
      #vu8(56 50 52 54 51 55 56 51 55)
      #vu8(48 45 2 21 0 154 106 196 222 155 105 31 93 142 123 134 32 228 50 103 32 20 220 20 251 2 20 25 237 83 101 94 178 121 91 46 68 193 166 155 226 7 229 161 47 148 200)
      #t
      ())
    #(279
      "special case hash"
      #vu8(49 49 48 50 48 56 51 51 55 55 54)
      #vu8(48 46 2 21 0 222 65 234 184 251 232 57 219 7 179 170 39 88 13 135 251 33 176 4 61 2 21 0 142 155 114 153 125 138 184 42 76 115 145 217 77 187 73 4 35 21 57 176)
      #t
      ())
    #(280
      "special case hash"
      #vu8(49 51 51 56 55 49 54 52 56)
      #vu8(48 45 2 20 64 188 242 67 197 164 72 16 52 151 167 44 228 21 133 13 134 249 65 122 2 21 0 190 195 132 190 6 62 58 50 190 82 138 187 100 248 117 76 89 52 173 26)
      #t
      ())
    #(281
      "special case hash"
      #vu8(51 50 50 49 52 52 49 54 50)
      #vu8(48 45 2 20 43 129 194 160 122 33 99 125 241 128 148 218 231 35 100 118 33 31 162 81 2 21 0 233 74 145 12 67 194 159 52 124 254 135 205 140 236 125 146 74 187 133 130)
      #t
      ())
    #(282
      "special case hash"
      #vu8(49 48 54 56 54 54 53 53 53 52 54)
      #vu8(48 45 2 21 0 244 28 229 247 213 244 72 221 145 132 133 190 162 10 74 43 123 219 137 76 2 20 11 180 175 171 241 175 75 239 102 29 202 101 115 244 203 237 86 77 91 113)
      #t
      ())
    #(283
      "special case hash"
      #vu8(54 50 49 53 53 50 52 54)
      #vu8(48 46 2 21 0 238 19 9 197 29 155 182 223 240 253 110 24 45 201 16 233 7 69 101 30 2 21 0 176 109 231 5 106 112 168 180 30 250 73 108 78 212 68 138 66 61 172 32)
      #t
      ())
    #(284
      "special case hash"
      #vu8(55 48 51 48 56 49 56 55 55 52)
      #vu8(48 46 2 21 0 215 74 20 183 211 21 191 26 229 54 217 242 136 97 235 52 241 108 102 145 2 21 0 231 202 253 238 158 54 13 163 177 57 250 107 24 85 57 27 212 7 45 191)
      #t
      ())
    #(285
      "special case hash"
      #vu8(53 57 50 52 53 50 51 55 52 52)
      #vu8(48 44 2 20 107 123 126 191 204 74 207 203 65 168 166 160 114 183 69 242 116 56 43 118 2 20 56 160 154 32 35 215 155 98 66 24 85 41 174 222 65 235 168 245 35 50)
      #t
      ())
    #(286
      "special case hash"
      #vu8(49 52 57 53 53 56 54 54 50 49)
      #vu8(48 45 2 20 124 170 27 50 251 106 103 178 4 135 139 54 148 105 146 55 236 205 5 88 2 21 0 177 112 21 57 133 109 151 19 211 234 251 50 108 161 129 5 124 120 31 96)
      #t
      ())
    #(287
      "special case hash"
      #vu8(52 48 48 53 51 49 52 52 48 54)
      #vu8(48 44 2 20 123 248 93 51 204 178 48 141 81 1 116 25 25 126 83 242 74 72 47 108 2 20 89 28 187 62 187 79 27 246 87 31 23 184 109 7 229 248 12 97 24 233)
      #t
      ())
    #(288
      "special case hash"
      #vu8(51 48 57 54 52 53 55 53 49 50)
      #vu8(48 46 2 21 0 248 118 231 43 139 215 177 86 231 237 33 129 134 163 85 169 36 12 148 81 2 21 0 171 125 240 32 203 251 242 184 242 103 41 14 253 243 155 201 1 69 88 206)
      #t
      ())
    #(289
      "special case hash"
      #vu8(50 55 56 52 48 50 53 54 50 48)
      #vu8(48 45 2 21 0 159 107 169 2 161 174 50 215 251 108 98 248 64 19 54 92 166 249 183 18 2 20 76 39 6 20 134 238 14 61 165 218 151 6 216 146 124 55 238 200 240 87)
      #t
      ())
    #(290
      "special case hash"
      #vu8(50 54 49 56 55 56 55 52 49 56)
      #vu8(48 44 2 20 42 215 150 26 37 21 36 30 157 134 117 192 90 166 250 20 136 113 74 56 2 20 23 222 160 162 86 171 78 32 201 85 76 95 91 12 73 18 113 251 6 137)
      #t
      ())
    #(291
      "special case hash"
      #vu8(49 54 52 50 54 50 53 50 54 50)
      #vu8(48 45 2 20 109 191 102 105 8 18 228 191 41 81 129 177 197 206 56 30 153 121 230 182 2 21 0 128 235 60 136 28 124 132 82 254 114 43 120 236 78 13 55 136 196 118 231)
      #t
      ())
    #(292
      "special case hash"
      #vu8(54 56 50 52 49 56 57 52 51 54)
      #vu8(48 46 2 21 0 226 56 98 23 245 91 59 127 119 16 212 135 206 254 121 64 84 39 55 222 2 21 0 144 54 123 30 199 190 128 134 137 39 253 227 209 72 74 128 196 241 169 131)
      #t
      ())
    #(293
      "special case hash"
      #vu8(52 56 52 50 52 53 52 50 53)
      #vu8(48 45 2 21 0 149 98 162 186 126 112 157 9 198 213 218 171 118 162 126 20 151 141 201 210 2 20 21 232 150 213 206 140 27 21 18 235 3 63 241 192 8 208 75 75 56 190)
      #t
      ())
    #(294
      "Signature generated without truncating the hash"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 0 162 228 71 28 14 189 123 232 25 252 190 100 128 88 55 56 199 51 126 30 2 21 0 186 208 241 206 215 224 208 171 1 173 193 55 28 102 233 202 209 83 146 141)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 148 82 202 200 159 216 70 3 107 63 77 223 153 93 164 188 149 142 25 17 95 139 48 214 204 166 152 138 180 150 255 47 23 226 79 8 250 172 117 183)
  :der-encode
  #t
  :tests
  '(#(295
      "k*G has a large x-coordinate"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 127 255 255 252 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 84)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 176 5 184 12 176 115 53 118 189 39 82 11 247 172 68 242 142 115 55 24 9 115 139 154 235 33 37 41 56 233 165 250 136 90 75 250 55 5 224 132)
  :der-encode
  #t
  :tests
  '(#(296
      "r,s are large"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 11 1 244 200 249 39 174 212 74 117 34 85 2 11 1 244 200 249 39 174 212 74 117 34 84)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 240 166 200 16 14 87 32 171 98 220 152 16 97 171 196 173 217 161 147 60 54 115 213 54 144 95 190 72 222 254 43 42 134 55 243 143 46 24 67 196)
  :der-encode
  #t
  :tests
  '(#(297
      "r and s^-1 have a large Hamming weight"
      #vu8(49 50 51 52 48 48)
      #vu8(48 28 2 4 127 255 255 255 2 20 23 100 78 140 46 200 157 24 93 145 103 243 1 173 205 237 174 63 91 53)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 113 29 92 64 53 186 235 200 228 107 240 148 52 168 174 187 176 246 120 208 143 102 174 166 146 46 73 29 2 150 12 78 27 170 44 34 188 186 212 8)
  :der-encode
  #t
  :tests
  '(#(298
      "r and s^-1 have a large Hamming weight"
      #vu8(49 50 51 52 48 48)
      #vu8(48 28 2 4 127 255 255 255 2 20 116 154 219 99 210 107 109 143 73 174 154 87 37 173 232 136 13 156 155 108)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 179 232 133 126 39 57 63 182 9 187 126 77 66 187 97 39 4 217 238 242 102 132 57 49 51 16 168 73 225 127 172 166 96 245 245 52 110 17 193 169)
  :der-encode
  #t
  :tests
  '(#(299
      "small r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 4 2 1 1)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 27 102 188 71 76 130 32 222 8 243 219 15 220 152 75 0 136 40 255 93 249 69 9 166 89 111 130 47 98 88 10 204 152 139 249 98 239 158 50 184)
  :der-encode
  #t
  :tests
  '(#(300
      "small r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 4 2 1 3)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 138 193 69 57 67 46 6 47 242 177 246 8 105 38 191 200 126 52 46 152 189 193 130 178 236 150 172 133 95 16 87 205 153 115 26 5 64 103 161 83)
  :der-encode
  #t
  :tests
  '(#(301
      "small r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 4 2 1 4)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 74 92 119 209 29 218 165 104 115 61 138 108 183 155 73 126 106 100 73 68 51 156 37 20 237 162 226 117 206 255 185 167 252 76 141 4 112 179 118 56)
  :der-encode
  #t
  :tests
  '(#(302
      "small r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 4 2 1 5)
      #t
      ())
    #(303
      "r is larger than n"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 117 34 91 2 1 5)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 68 188 230 249 204 9 16 8 230 138 23 100 193 234 245 111 111 222 146 52 246 191 151 112 38 140 157 251 12 46 163 56 25 167 147 110 232 213 115 51)
  :der-encode
  #t
  :tests
  '(#(304
      "s is larger than n"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 1 4 2 21 1 0 0 0 0 0 0 0 0 0 1 244 200 249 39 174 211 202 135 248 222)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 80 148 52 95 248 92 104 254 153 98 126 237 231 4 54 42 241 150 174 207 83 73 154 39 44 235 70 104 192 43 75 17 229 103 234 233 112 159 6 24)
  :der-encode
  #t
  :tests
  '(#(305
      "small r and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 2 1 0 2 20 28 56 112 225 195 135 14 28 56 113 24 247 235 22 132 39 121 22 253 189)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 94 43 177 233 8 223 53 95 176 154 197 103 2 30 219 192 208 253 112 71 101 238 116 5 239 135 42 246 242 85 12 18 56 38 5 142 188 131 9 251)
  :der-encode
  #t
  :tests
  '(#(306
      "smallish r and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 31 2 7 45 155 77 52 121 82 205 2 20 17 100 166 31 195 223 163 66 186 24 110 50 56 27 52 179 36 17 122 70)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 222 83 252 191 199 68 237 252 107 224 74 248 53 24 130 155 95 166 48 22 159 237 41 64 161 102 35 232 246 14 236 135 195 42 237 144 93 37 254 183)
  :der-encode
  #t
  :tests
  '(#(307
      "100-bit r and small s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 37 2 13 16 51 230 126 55 179 43 68 85 128 191 78 251 2 20 76 179 76 179 76 179 76 179 76 179 226 189 181 59 179 225 210 19 40 44)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 54 107 176 193 219 23 44 13 167 169 77 107 150 43 43 251 153 219 67 13 173 181 92 172 185 45 207 134 215 231 55 61 180 1 89 194 60 106 216 219)
  :der-encode
  #t
  :tests
  '(#(308
      "small r and 100 bit s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 2 1 0 2 20 56 46 254 211 220 126 24 207 65 174 199 36 143 78 86 8 127 151 52 160)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 134 224 16 97 252 2 229 32 87 52 99 112 99 106 91 92 195 113 14 114 204 251 16 99 165 17 24 212 66 213 4 76 176 236 218 222 81 171 125 211)
  :der-encode
  #t
  :tests
  '(#(309
      "100-bit r and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 37 2 13 6 37 34 187 211 236 190 124 57 233 62 124 36 2 20 56 46 254 211 220 126 24 207 65 174 199 36 143 78 86 8 127 151 52 160)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 64 225 103 22 194 73 251 71 67 252 118 26 251 5 220 52 205 68 127 200 23 156 118 174 122 193 240 176 197 242 72 189 184 20 11 145 235 254 170 42)
  :der-encode
  #t
  :tests
  '(#(310
      "r and s^-1 are close to n"
      #vu8(49 50 51 52 48 48)
      #vu8(48 36 2 11 1 244 200 249 39 174 212 74 117 33 218 2 21 0 170 170 170 170 170 170 170 170 170 171 248 133 251 111 201 226 134 248 193 143)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 7 151 14 73 157 54 184 80 134 76 225 214 176 13 98 203 112 226 210 224 227 13 75 60 52 96 23 199 102 135 143 147 252 187 166 92 216 10 31 89)
  :der-encode
  #t
  :tests
  '(#(311
      "s == 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 25 2 20 85 85 85 85 85 85 85 85 85 85 252 66 253 183 228 241 67 124 96 200 2 1 1)
      #t
      ())
    #(312
      "s == 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 25 2 20 85 85 85 85 85 85 85 85 85 85 252 66 253 183 228 241 67 124 96 200 2 1 0)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 43 58 112 88 253 189 66 59 150 22 141 72 126 7 47 235 26 5 68 214 182 179 22 49 237 232 103 55 97 214 211 228 142 142 150 100 121 192 143 195)
  :der-encode
  #t
  :tests
  '(#(313
      "point at infinity during verify"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 0 128 0 0 0 0 0 0 0 0 0 250 100 124 147 215 105 229 58 145 43 2 20 85 85 85 85 85 85 85 85 85 85 252 66 253 183 228 241 67 124 96 199)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 89 97 26 51 251 52 37 136 30 49 224 246 31 33 130 228 252 227 189 137 192 41 26 191 196 209 20 90 80 1 222 86 189 250 150 190 68 109 48 182)
  :der-encode
  #t
  :tests
  '(#(314
      "edge case for signature malleability"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 0 128 0 0 0 0 0 0 0 0 0 250 100 124 147 215 105 229 58 145 43 2 21 0 128 0 0 0 0 0 0 0 0 0 250 100 124 147 215 105 229 58 145 43)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 49 234 202 22 122 60 101 120 105 229 93 126 72 188 197 37 194 110 98 119 207 59 52 84 58 82 177 97 23 23 217 75 168 35 121 128 171 2 226 24)
  :der-encode
  #t
  :tests
  '(#(315
      "edge case for signature malleability"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 0 128 0 0 0 0 0 0 0 0 0 250 100 124 147 215 105 229 58 145 43 2 21 0 128 0 0 0 0 0 0 0 0 0 250 100 124 147 215 105 229 58 145 44)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 103 136 56 64 185 97 243 17 66 253 170 66 37 217 24 104 148 213 51 236 100 136 134 254 240 230 3 72 233 6 33 246 183 165 83 240 93 143 245 167)
  :der-encode
  #t
  :tests
  '(#(316
      "u1 == 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 20 85 85 85 85 85 85 85 85 85 85 252 66 253 183 228 241 67 124 96 197 2 21 1 118 180 165 232 95 57 36 195 218 134 195 235 40 69 67 198 0 109 207 134)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 43 234 94 77 160 108 158 41 10 101 213 159 156 68 240 20 150 22 217 236 75 154 100 163 131 93 126 36 159 150 157 44 203 153 120 120 239 171 170 25)
  :der-encode
  #t
  :tests
  '(#(317
      "u1 == n - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 20 85 85 85 85 85 85 85 85 85 85 252 66 253 183 228 241 67 124 96 197 2 21 0 137 75 90 23 160 198 219 60 37 125 37 166 202 10 25 225 148 124 117 40)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 177 252 16 48 93 46 131 134 140 158 64 232 66 104 150 41 123 127 62 0 145 161 225 248 141 31 176 249 83 128 241 156 152 245 90 8 84 198 180 148)
  :der-encode
  #t
  :tests
  '(#(318
      "u2 == 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 44 2 20 85 85 85 85 85 85 85 85 85 85 252 66 253 183 228 241 67 124 96 197 2 20 85 85 85 85 85 85 85 85 85 85 252 66 253 183 228 241 67 124 96 197)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 158 171 243 56 11 25 62 84 125 210 97 1 82 234 118 4 136 6 185 225 65 58 138 83 113 28 145 93 23 193 109 249 131 0 238 65 79 17 219 221)
  :der-encode
  #t
  :tests
  '(#(319
      "u2 == n - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 20 85 85 85 85 85 85 85 85 85 85 252 66 253 183 228 241 67 124 96 197 2 21 0 170 170 170 170 170 170 170 170 170 171 248 133 251 111 201 226 134 248 193 146)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 43 158 105 11 121 225 101 176 78 13 246 252 132 229 138 201 74 198 58 146 122 149 50 185 238 64 191 247 148 249 136 139 26 46 11 138 48 244 245 80)
  :der-encode
  #t
  :tests
  '(#(320
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 28 2 4 127 255 255 253 2 20 124 230 225 248 31 189 182 235 243 130 65 78 98 193 193 66 0 36 154 130)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 64 156 146 81 44 37 215 253 243 49 72 125 75 177 202 131 18 234 39 180 219 105 9 212 160 118 142 96 154 82 6 76 38 110 21 42 54 180 155 122)
  :der-encode
  #t
  :tests
  '(#(321
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 28 2 4 127 255 255 253 2 20 48 77 38 170 2 146 46 115 178 198 15 18 231 242 136 176 180 63 55 131)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 57 34 110 59 230 159 174 232 134 31 31 186 244 82 61 167 189 45 27 205 199 165 40 149 109 175 127 126 92 33 40 135 50 198 147 114 202 50 126 205)
  :der-encode
  #t
  :tests
  '(#(322
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 28 2 4 127 255 255 253 2 20 43 154 254 48 145 148 71 54 149 163 40 207 232 154 49 78 231 114 246 22)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 116 163 68 85 188 146 34 220 159 24 150 114 224 199 44 179 215 191 132 145 96 87 147 38 154 121 110 223 185 125 238 181 15 48 71 117 113 199 109 50)
  :der-encode
  #t
  :tests
  '(#(323
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 28 2 4 127 255 255 253 2 20 11 99 196 153 210 123 116 232 137 75 112 95 109 202 176 181 131 76 71 133)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 177 3 30 7 129 254 207 129 54 51 203 56 132 233 48 145 62 101 186 91 204 136 96 119 156 167 225 116 223 120 125 102 246 113 168 250 51 121 148 207)
  :der-encode
  #t
  :tests
  '(#(324
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 28 2 4 127 255 255 253 2 20 60 73 157 39 183 78 136 148 181 161 239 251 136 213 13 162 213 49 230 38)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 152 127 240 125 64 126 231 164 26 101 167 172 105 41 193 61 10 110 72 0 89 129 62 33 213 242 254 116 143 6 190 115 40 169 134 42 242 188 124 87)
  :der-encode
  #t
  :tests
  '(#(325
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 28 2 4 127 255 255 253 2 20 120 147 58 79 110 157 17 41 107 67 223 247 17 170 27 69 170 99 204 76)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 192 113 162 110 94 82 87 254 38 189 184 1 63 72 187 174 23 162 243 25 44 242 83 207 73 115 211 194 220 37 14 196 193 231 28 30 211 101 55 134)
  :der-encode
  #t
  :tests
  '(#(326
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 29 2 4 127 255 255 253 2 21 0 210 123 116 232 137 75 90 23 160 200 118 250 131 32 80 41 77 14 222 1)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 219 61 162 161 16 149 178 174 253 20 31 38 201 178 14 67 161 244 206 205 235 38 102 240 110 191 207 205 250 63 152 144 118 155 13 179 184 90 138 63)
  :der-encode
  #t
  :tests
  '(#(327
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 29 2 4 127 255 255 253 2 21 0 176 128 235 62 186 39 227 116 62 230 195 186 29 2 63 131 199 100 62 88)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 15 157 113 251 72 232 7 242 230 107 253 255 171 135 199 141 36 207 45 101 129 37 148 63 115 24 9 40 67 107 229 219 66 40 239 183 39 105 2 30)
  :der-encode
  #t
  :tests
  '(#(328
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 29 2 4 127 255 255 253 2 21 0 235 46 218 86 165 96 97 131 87 108 63 59 232 178 14 158 31 196 93 236)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 254 170 111 91 169 112 217 4 254 37 77 212 92 244 241 211 151 248 181 198 219 205 222 245 56 91 178 236 46 88 68 180 86 108 194 47 1 93 134 75)
  :der-encode
  #t
  :tests
  '(#(329
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 29 2 4 127 255 255 253 2 21 0 131 25 30 7 224 66 73 20 12 127 179 122 150 101 237 145 202 80 135 213)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 82 192 50 46 41 109 2 128 106 85 128 14 103 185 51 78 212 0 92 209 246 15 85 86 231 86 59 117 109 138 23 205 105 119 205 222 22 83 22 96)
  :der-encode
  #t
  :tests
  '(#(330
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 28 2 4 127 255 255 253 2 20 68 165 173 11 208 99 109 158 18 190 146 211 101 5 12 240 202 62 58 148)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 80 192 113 112 253 234 104 69 192 156 61 162 156 200 238 103 0 89 41 25 153 211 207 16 239 101 81 78 137 12 5 106 8 197 5 173 19 219 254 3)
  :der-encode
  #t
  :tests
  '(#(331
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 28 2 4 127 255 255 253 2 20 21 205 127 24 72 202 35 155 74 209 148 103 244 77 24 167 115 185 123 11)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 5 204 37 209 96 24 184 131 136 164 28 254 53 71 235 218 35 45 229 235 191 32 23 198 188 131 122 115 141 202 156 142 145 179 251 224 109 21 68 151)
  :der-encode
  #t
  :tests
  '(#(332
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 29 2 4 127 255 255 253 2 21 0 170 170 170 170 170 170 170 170 170 171 248 133 251 111 201 226 177 163 108 57)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 226 202 218 47 34 174 105 79 238 58 50 135 206 141 192 105 26 244 12 159 246 165 146 232 199 35 190 198 53 167 108 156 100 130 210 182 13 221 185 134)
  :der-encode
  #t
  :tests
  '(#(333
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 28 2 4 127 255 255 253 2 20 93 14 130 226 70 252 117 129 8 172 116 126 111 145 235 252 56 0 211 103)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 38 116 113 180 31 129 139 184 23 110 42 1 47 150 60 217 182 250 37 117 193 78 166 36 124 116 49 160 95 215 66 45 233 5 175 219 198 200 225 102)
  :der-encode
  #t
  :tests
  '(#(334
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 29 2 4 127 255 255 253 2 21 0 230 174 157 170 245 111 139 131 129 91 109 226 224 34 195 10 95 164 242 41)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 154 226 160 111 103 68 1 178 138 121 145 129 173 35 186 221 17 80 102 209 52 48 0 158 253 18 113 234 25 98 211 94 255 235 253 245 201 77 70 210)
  :der-encode
  #t
  :tests
  '(#(335
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 28 2 4 127 255 255 253 2 20 68 189 235 98 17 71 67 203 0 0 134 120 231 2 208 47 227 183 94 183)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 208 134 146 28 52 46 229 107 231 78 135 149 14 28 38 11 7 12 116 105 12 90 214 68 183 128 107 117 70 154 246 61 139 162 118 197 104 232 226 122)
  :der-encode
  #t
  :tests
  '(#(336
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 29 2 4 127 255 255 253 2 21 0 222 182 33 20 116 60 176 0 0 1 179 170 143 167 119 5 81 17 4 131)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 197 248 95 18 69 201 60 243 127 130 88 211 241 142 21 174 100 191 55 36 195 195 247 220 18 41 251 139 90 208 39 78 174 124 152 213 252 158 246 122)
  :der-encode
  #t
  :tests
  '(#(337
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 29 2 4 127 255 255 253 2 21 0 189 108 66 40 232 121 96 0 0 1 114 140 38 39 63 54 215 172 230 175)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 65 72 233 186 17 4 135 132 76 65 198 169 144 206 96 41 251 172 215 218 171 245 169 77 137 172 90 214 51 168 91 104 121 175 252 65 134 15 42 197)
  :der-encode
  #t
  :tests
  '(#(338
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 28 2 4 127 255 255 253 2 20 17 71 67 203 0 0 0 0 0 0 33 204 192 230 113 48 130 103 253 178)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 111 105 14 251 7 106 125 218 42 15 153 7 54 186 108 210 8 20 79 27 171 252 203 22 229 157 215 174 205 219 81 244 228 210 191 194 174 23 47 10)
  :der-encode
  #t
  :tests
  '(#(339
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 28 2 4 127 255 255 253 2 20 103 6 62 112 99 231 6 62 112 100 176 143 81 137 185 222 151 184 129 85)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 132 178 90 36 73 28 224 64 235 109 201 0 248 238 144 198 104 74 200 229 149 169 133 230 9 206 1 106 137 123 145 60 93 255 53 119 108 235 104 42)
  :der-encode
  #t
  :tests
  '(#(340
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 29 2 4 127 255 255 253 2 21 0 184 227 142 56 227 142 56 227 142 58 77 59 208 99 197 96 11 27 181 63)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 150 210 103 16 109 214 132 68 174 48 9 102 186 198 46 24 35 128 66 212 81 17 232 118 84 175 187 173 66 114 162 100 166 186 90 51 32 238 220 43)
  :der-encode
  #t
  :tests
  '(#(341
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 28 2 4 127 255 255 253 2 20 85 85 85 85 85 85 85 85 85 85 252 66 253 183 228 241 24 209 182 30)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 192 106 252 75 118 14 201 178 220 164 154 75 54 23 231 35 118 87 25 31 240 181 236 56 185 24 14 126 228 170 134 250 25 56 77 210 142 52 42 156)
  :der-encode
  #t
  :tests
  '(#(342
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 29 2 4 127 255 255 253 2 21 0 128 0 0 0 0 0 0 0 0 0 250 100 124 147 215 105 165 58 145 45)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 147 223 121 148 234 184 168 121 115 231 226 22 223 6 114 168 33 20 174 44 106 162 142 231 27 244 21 77 4 174 213 154 57 39 97 195 209 220 65 27)
  :der-encode
  #t
  :tests
  '(#(343
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 29 2 4 127 255 255 253 2 21 0 243 87 78 213 122 183 197 193 192 174 177 85 236 165 56 239 21 13 10 64)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 89 234 52 107 164 55 21 61 88 168 121 91 126 7 134 137 37 29 84 35 241 19 185 202 165 133 90 142 190 154 109 11 26 207 40 14 52 42 147 218)
  :der-encode
  #t
  :tests
  '(#(344
      "point duplication during verification"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 0 137 73 159 148 234 226 69 213 169 181 55 73 117 236 229 33 216 85 151 90 2 21 0 177 33 137 39 147 81 38 241 140 143 87 68 91 197 234 42 155 98 255 204)
      #t
      ("PointDuplication"))))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 89 234 52 107 164 55 21 61 88 168 121 91 126 7 134 137 37 29 84 35 14 236 70 53 90 122 165 113 65 101 146 244 229 48 215 241 75 213 108 37)
  :der-encode
  #t
  :tests
  '(#(345
      "duplication bug"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 0 137 73 159 148 234 226 69 213 169 181 55 73 117 236 229 33 216 85 151 90 2 21 0 177 33 137 39 147 81 38 241 140 143 87 68 91 197 234 42 155 98 255 204)
      #f
      ("PointDuplication"))))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 193 50 158 90 188 5 220 140 178 44 108 94 144 12 17 159 231 0 136 11 137 100 63 189 47 21 99 102 179 164 67 22 200 187 16 228 110 48 80 85)
  :der-encode
  #t
  :tests
  '(#(346
      "point with x-coordinate 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 25 2 1 1 2 20 85 85 85 85 85 85 85 85 85 85 252 66 253 183 228 241 67 124 96 199)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 17 149 225 66 113 136 9 197 65 41 110 172 77 98 1 175 70 105 93 93 35 63 9 154 253 31 241 106 203 16 113 180 25 158 97 226 169 195 70 235)
  :der-encode
  #t
  :tests
  '(#(347
      "point with x-coordinate 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 20 51 51 51 51 51 51 51 51 51 51 151 91 101 7 239 195 245 74 160 119)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 201 247 231 188 55 123 255 196 226 167 158 72 54 230 30 213 199 117 218 190 7 58 30 98 73 75 34 250 39 100 47 81 214 244 197 211 93 112 219 90)
  :der-encode
  #t
  :tests
  '(#(348
      "comparison with point at infinity "
      #vu8(49 50 51 52 48 48)
      #vu8(48 44 2 20 85 85 85 85 85 85 85 85 85 85 252 66 253 183 228 241 67 124 96 199 2 20 51 51 51 51 51 51 51 51 51 51 151 91 101 7 239 195 245 74 160 119)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 33 2 179 25 171 233 6 14 157 69 32 176 182 168 171 150 65 179 181 211 43 64 103 53 137 112 113 74 15 36 174 31 53 24 132 167 216 88 128 66)
  :der-encode
  #t
  :tests
  '(#(349
      "extreme value for k and edgecase s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 44 2 20 2 249 151 243 60 94 208 76 85 211 237 248 103 93 62 146 232 244 102 134 2 20 85 85 85 85 85 85 85 85 85 85 252 66 253 183 228 241 67 124 96 199)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 161 133 162 132 220 142 85 231 150 224 132 202 95 77 223 91 184 215 10 11 211 158 197 2 180 183 103 201 105 121 99 236 152 188 214 214 19 193 53 232)
  :der-encode
  #t
  :tests
  '(#(350
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 44 2 20 2 249 151 243 60 94 208 76 85 211 237 248 103 93 62 146 232 244 102 134 2 20 36 146 73 36 146 73 36 146 73 36 217 211 145 78 207 213 28 236 41 122)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 145 199 180 69 106 158 193 31 137 51 22 240 94 142 129 167 180 52 133 154 1 36 216 77 109 253 34 26 169 40 215 104 245 51 33 158 182 213 188 204)
  :der-encode
  #t
  :tests
  '(#(351
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 20 2 249 151 243 60 94 208 76 85 211 237 248 103 93 62 146 232 244 102 134 2 21 0 204 204 204 204 204 204 204 204 204 206 93 109 148 31 191 15 213 42 129 223)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 69 73 242 90 245 252 58 86 12 98 249 31 213 85 249 34 223 39 17 3 66 137 11 100 101 69 113 25 165 97 72 199 99 122 33 20 76 172 101 11)
  :der-encode
  #t
  :tests
  '(#(352
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 44 2 20 2 249 151 243 60 94 208 76 85 211 237 248 103 93 62 146 232 244 102 134 2 20 51 51 51 51 51 51 51 51 51 51 151 91 101 7 239 195 245 74 160 120)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 127 73 172 3 198 103 49 146 155 78 240 60 116 69 179 134 214 64 37 234 2 70 30 176 125 73 43 200 175 202 16 211 127 70 155 20 221 45 148 73)
  :der-encode
  #t
  :tests
  '(#(353
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 20 2 249 151 243 60 94 208 76 85 211 237 248 103 93 62 146 232 244 102 134 2 21 0 219 109 182 219 109 182 219 109 182 221 26 245 103 216 222 254 173 136 248 221)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 23 157 10 95 168 190 11 137 216 239 210 89 72 232 98 78 62 177 184 160 246 20 251 221 167 198 48 25 196 173 72 11 1 166 243 139 125 23 49 56)
  :der-encode
  #t
  :tests
  '(#(354
      "extreme value for k"
      #vu8(49 50 51 52 48 48)
      #vu8(48 44 2 20 2 249 151 243 60 94 208 76 85 211 237 248 103 93 62 146 232 244 102 134 2 20 14 176 0 145 84 110 45 31 199 220 194 73 218 101 63 8 112 122 243 24)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 170 92 177 42 205 249 168 51 104 100 25 12 29 214 223 134 249 143 76 79 178 255 221 233 226 185 181 88 201 191 223 122 169 199 247 236 9 12 97 210)
  :der-encode
  #t
  :tests
  '(#(355
      "extreme value for k and edgecase s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 44 2 20 74 150 181 104 142 245 115 40 70 100 105 137 104 195 139 185 19 203 252 130 2 20 85 85 85 85 85 85 85 85 85 85 252 66 253 183 228 241 67 124 96 199)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 79 5 45 93 237 75 153 159 149 2 84 1 85 62 28 214 163 244 125 107 75 76 96 171 142 154 181 160 251 0 66 36 4 115 150 5 34 54 184 24)
  :der-encode
  #t
  :tests
  '(#(356
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 44 2 20 74 150 181 104 142 245 115 40 70 100 105 137 104 195 139 185 19 203 252 130 2 20 36 146 73 36 146 73 36 146 73 36 217 211 145 78 207 213 28 236 41 122)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 58 83 170 45 244 236 91 194 116 142 67 112 230 8 235 221 106 37 102 102 15 223 97 185 234 243 107 172 40 80 2 225 191 204 98 233 229 81 113 219)
  :der-encode
  #t
  :tests
  '(#(357
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 20 74 150 181 104 142 245 115 40 70 100 105 137 104 195 139 185 19 203 252 130 2 21 0 204 204 204 204 204 204 204 204 204 206 93 109 148 31 191 15 213 42 129 223)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 116 124 97 116 89 93 73 241 123 179 163 108 139 113 102 66 31 255 143 159 93 151 132 97 123 221 102 129 119 84 233 100 161 198 34 196 12 253 171 60)
  :der-encode
  #t
  :tests
  '(#(358
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 44 2 20 74 150 181 104 142 245 115 40 70 100 105 137 104 195 139 185 19 203 252 130 2 20 51 51 51 51 51 51 51 51 51 51 151 91 101 7 239 195 245 74 160 120)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 2 72 156 88 242 103 155 209 112 203 72 119 108 92 107 44 108 133 16 35 50 68 255 228 118 9 18 247 21 196 67 19 58 56 78 205 231 46 104 68)
  :der-encode
  #t
  :tests
  '(#(359
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 20 74 150 181 104 142 245 115 40 70 100 105 137 104 195 139 185 19 203 252 130 2 21 0 219 109 182 219 109 182 219 109 182 221 26 245 103 216 222 254 173 136 248 221)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 77 11 218 251 51 223 180 58 246 158 142 19 13 217 1 209 41 172 66 122 31 116 189 228 243 42 213 187 33 174 124 174 7 156 159 197 131 254 25 109)
  :der-encode
  #t
  :tests
  '(#(360
      "extreme value for k"
      #vu8(49 50 51 52 48 48)
      #vu8(48 44 2 20 74 150 181 104 142 245 115 40 70 100 105 137 104 195 139 185 19 203 252 130 2 20 14 176 0 145 84 110 45 31 199 220 194 73 218 101 63 8 112 122 243 24)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 74 150 181 104 142 245 115 40 70 100 105 137 104 195 139 185 19 203 252 130 35 166 40 85 49 104 148 125 89 220 201 18 4 35 81 55 122 197 251 50)
  :der-encode
  #t
  :tests
  '(#(361
      "testing point duplication"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 1 118 180 165 232 95 57 36 195 218 134 195 235 40 69 67 198 0 109 207 134 2 20 36 146 73 36 146 73 36 146 73 36 217 211 145 78 207 213 28 236 41 122)
      #f
      ())
    #(362
      "testing point duplication"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 0 137 75 90 23 160 198 219 60 37 125 37 166 202 10 25 225 148 124 117 40 2 20 36 146 73 36 146 73 36 146 73 36 217 211 145 78 207 213 28 236 41 122)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 74 150 181 104 142 245 115 40 70 100 105 137 104 195 139 185 19 203 252 130 220 89 215 170 206 151 107 130 166 35 54 237 251 220 174 200 5 58 4 205)
  :der-encode
  #t
  :tests
  '(#(363
      "testing point duplication"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 1 118 180 165 232 95 57 36 195 218 134 195 235 40 69 67 198 0 109 207 134 2 20 36 146 73 36 146 73 36 146 73 36 217 211 145 78 207 213 28 236 41 122)
      #f
      ())
    #(364
      "testing point duplication"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 0 137 75 90 23 160 198 219 60 37 125 37 166 202 10 25 225 148 124 117 40 2 20 36 146 73 36 146 73 36 146 73 36 217 211 145 78 207 213 28 236 41 122)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp160r1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 8 3 42 0 4 176 4 106 86 248 116 211 14 162 186 122 193 169 53 253 157 117 78 230 65 123 154 84 210 117 128 104 25 236 48 177 86 24 245 98 81 21 36 31 70)
  :der-encode
  #t
  :tests
  '(#(365
      "pseudorandom signature"
      #vu8()
      #vu8(48 44 2 20 73 201 101 108 216 203 238 68 86 84 141 99 167 252 72 7 145 144 156 66 2 20 111 247 137 128 121 62 224 134 162 230 110 1 164 144 189 252 3 242 211 2)
      #t
      ())
    #(366
      "pseudorandom signature"
      #vu8(77 115 103)
      #vu8(48 45 2 20 15 87 32 198 189 149 98 75 96 59 43 229 167 94 72 123 52 38 141 95 2 21 0 191 214 211 112 181 22 104 113 19 177 42 79 201 94 235 184 116 166 70 250)
      #t
      ())
    #(367
      "pseudorandom signature"
      #vu8(49 50 51 52 48 48)
      #vu8(48 44 2 20 45 252 33 218 92 57 212 65 252 102 131 229 77 160 9 244 19 160 255 135 2 20 100 115 130 179 227 154 138 200 203 224 47 70 102 208 69 146 138 14 176 97)
      #t
      ())
    #(368
      "pseudorandom signature"
      #vu8(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      #vu8(48 45 2 20 79 113 1 64 87 221 229 146 105 186 8 156 73 8 45 171 63 250 154 243 2 21 0 141 26 187 132 43 47 147 42 4 194 221 25 162 242 16 154 87 200 140 50)
      #t
      ())))
