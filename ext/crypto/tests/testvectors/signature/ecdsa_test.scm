(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 41 39 177 5 18 186 227 237 220 254 70 120 40 18 139 173 41 3 38 153 25 247 8 96 105 200 196 223 108 115 40 56 199 120 121 100 234 172 0 229 146 31 177 73 138 96 244 96 103 102 179 217 104 80 1 85 141 26 151 78 115 65 81 62)
  :der-encode
  #t
  :tests
  '(#(1
      "signature malleability"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 32 76 214 11 133 93 68 47 91 60 123 17 235 108 78 10 231 82 95 231 16 250 185 170 124 119 166 127 121 230 250 221 118)
      #t
      ())
    #(2
      "Legacy:ASN encoding of s misses leading 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 32 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #t
      ("MissingZero"))
    #(3
      "valid"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #t
      ())
    #(4
      "long form encoding of length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 129 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ("BER"))
    #(5
      "length of sequence contains leading 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 130 0 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ("BER"))
    #(6
      "wrong length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(7
      "wrong length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(8
      "uint32 overflow in length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 133 1 0 0 0 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(9
      "uint64 overflow in length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 137 1 0 0 0 0 0 0 0 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(10
      "length of sequence = 2**31 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 132 127 255 255 255 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(11
      "length of sequence = 2**32 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 132 255 255 255 255 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(12
      "length of sequence = 2**40 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 133 255 255 255 255 255 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(13
      "length of sequence = 2**64 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 136 255 255 255 255 255 255 255 255 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(14
      "incorrect length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 255 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(15
      "indefinite length without termination"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(16
      "indefinite length without termination"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 128 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(17
      "indefinite length without termination"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 128 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(18
      "removing sequence"
      #vu8(49 50 51 52 48 48)
      #vu8()
      #f
      ())
    #(19
      "lonely sequence tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48)
      #f
      ())
    #(20
      "appending 0's to sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219 0 0)
      #f
      ())
    #(21
      "prepending 0's to sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 0 0 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(22
      "appending unused 0's to sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219 0 0)
      #f
      ())
    #(23
      "appending null value to sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219 5 0)
      #f
      ())
    #(24
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 74 73 129 119 48 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(25
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 37 0 48 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(26
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 48 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219 0 4 222 173 190 239)
      #f
      ())
    #(27
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 74 34 37 73 129 119 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(28
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 34 36 37 0 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(29
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 77 34 34 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 0 4 222 173 190 239 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(30
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 74 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 34 38 73 129 119 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(31
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 34 37 37 0 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(32
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 77 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 34 35 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219 0 4 222 173 190 239)
      #f
      ())
    #(33
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 77 170 0 187 0 205 0 48 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(34
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 75 170 2 170 187 48 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(35
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 77 34 40 170 0 187 0 205 0 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(36
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 75 34 38 170 2 170 187 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(37
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 77 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 34 41 170 0 187 0 205 0 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(38
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 75 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 34 39 170 2 170 187 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(39
      "truncated length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 129)
      #f
      ())
    #(40
      "using composition with indefinite length"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 48 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219 0 0)
      #f
      ())
    #(41
      "using composition with indefinite length"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 34 128 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 0 0 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(42
      "using composition with indefinite length"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 34 128 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219 0 0)
      #f
      ())
    #(43
      "using composition with wrong tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 49 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219 0 0)
      #f
      ())
    #(44
      "using composition with wrong tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 34 128 3 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 0 0 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(45
      "using composition with wrong tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 34 128 3 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219 0 0)
      #f
      ())
    #(46
      "Replacing sequence with NULL"
      #vu8(49 50 51 52 48 48)
      #vu8(5 0)
      #f
      ())
    #(47
      "changing tag value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(46 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(48
      "changing tag value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(47 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(49
      "changing tag value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(49 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(50
      "changing tag value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(50 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(51
      "changing tag value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(255 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(52
      "dropping value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 0)
      #f
      ())
    #(53
      "using composition for sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 48 1 2 48 68 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(54
      "truncated sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71)
      #f
      ())
    #(55
      "truncated sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(56
      "indefinite length"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219 0 0)
      #f
      ("BER"))
    #(57
      "indefinite length with truncated delimiter"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219 0)
      #f
      ())
    #(58
      "indefinite length with additional element"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219 5 0 0 0)
      #f
      ())
    #(59
      "indefinite length with truncated element"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219 6 8 17 34 0 0)
      #f
      ())
    #(60
      "indefinite length with garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219 0 0 254 2 190 239)
      #f
      ())
    #(61
      "indefinite length with nonempty EOC"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219 0 2 190 239)
      #f
      ())
    #(62
      "prepend empty sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 48 0 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(63
      "append empty sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219 48 0)
      #f
      ())
    #(64
      "append garbage with high tag number"
      #vu8(49 50 51 52 48 48)
      #vu8(48 72 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219 191 127 0)
      #f
      ())
    #(65
      "sequence of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 48 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(66
      "truncated sequence: removed last 1 elements"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24)
      #f
      ())
    #(67
      "repeating element in sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 104 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(68
      "long form encoding of length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 129 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ("BER"))
    #(69
      "long form encoding of length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 129 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ("BER"))
    #(70
      "length of integer contains leading 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 130 0 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ("BER"))
    #(71
      "length of integer contains leading 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 130 0 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ("BER"))
    #(72
      "wrong length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(73
      "wrong length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 31 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(74
      "wrong length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 34 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(75
      "wrong length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 32 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(76
      "uint32 overflow in length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 74 2 133 1 0 0 0 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(77
      "uint32 overflow in length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 74 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 133 1 0 0 0 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(78
      "uint64 overflow in length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 78 2 137 1 0 0 0 0 0 0 0 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(79
      "uint64 overflow in length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 78 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 137 1 0 0 0 0 0 0 0 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(80
      "length of integer = 2**31 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 2 132 127 255 255 255 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(81
      "length of integer = 2**31 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 132 127 255 255 255 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(82
      "length of integer = 2**32 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 2 132 255 255 255 255 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(83
      "length of integer = 2**32 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 132 255 255 255 255 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(84
      "length of integer = 2**40 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 74 2 133 255 255 255 255 255 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(85
      "length of integer = 2**40 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 74 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 133 255 255 255 255 255 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(86
      "length of integer = 2**64 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 77 2 136 255 255 255 255 255 255 255 255 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(87
      "length of integer = 2**64 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 77 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 136 255 255 255 255 255 255 255 255 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(88
      "incorrect length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 255 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(89
      "incorrect length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 255 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(90
      "removing integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 35 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(91
      "lonely integer tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48 36 2 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(92
      "lonely integer tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48 35 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2)
      #f
      ())
    #(93
      "appending 0's to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 34 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 0 0 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(94
      "appending 0's to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 35 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219 0 0)
      #f
      ())
    #(95
      "prepending 0's to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 34 0 0 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ("BER"))
    #(96
      "prepending 0's to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 35 0 0 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ("BER"))
    #(97
      "appending unused 0's to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 0 0 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(98
      "appending null value to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 34 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 5 0 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(99
      "appending null value to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 35 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219 5 0)
      #f
      ())
    #(100
      "truncated length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 37 2 129 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(101
      "truncated length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 36 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 129)
      #f
      ())
    #(102
      "Replacing integer with NULL"
      #vu8(49 50 51 52 48 48)
      #vu8(48 37 5 0 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(103
      "Replacing integer with NULL"
      #vu8(49 50 51 52 48 48)
      #vu8(48 36 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 5 0)
      #f
      ())
    #(104
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 0 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(105
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 1 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(106
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 3 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(107
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 4 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(108
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 255 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(109
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 0 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(110
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 1 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(111
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 3 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(112
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 4 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(113
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 255 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(114
      "dropping value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 37 2 0 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(115
      "dropping value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 36 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 0)
      #f
      ())
    #(116
      "using composition for integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 34 36 2 1 43 2 31 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(117
      "using composition for integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 34 37 2 1 0 2 32 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(118
      "modify first byte of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 41 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(119
      "modify first byte of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 2 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(120
      "modify last byte of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 152 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(121
      "modify last byte of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 91)
      #f
      ())
    #(122
      "truncated integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 31 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(123
      "truncated integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 31 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(124
      "truncated integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 32 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71)
      #f
      ())
    #(125
      "leading ff in integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 255 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(126
      "leading ff in integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 34 255 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(127
      "replaced integer by infinity"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 9 1 128 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(128
      "replaced integer by infinity"
      #vu8(49 50 51 52 48 48)
      #vu8(48 37 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 9 1 128)
      #f
      ())
    #(129
      "replacing integer with zero"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 0 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(130
      "replacing integer with zero"
      #vu8(49 50 51 52 48 48)
      #vu8(48 37 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 1 0)
      #f
      ())
    #(131
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 1 43 163 168 189 107 148 213 237 128 166 217 209 25 10 67 110 188 204 8 51 73 6 134 222 172 134 53 188 185 191 83 105 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(132
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 255 43 163 168 191 107 148 213 235 128 166 217 209 25 10 67 111 66 254 18 215 250 215 73 212 197 18 160 54 192 249 8 199 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(133
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 212 92 87 65 148 107 42 19 127 89 38 46 230 245 188 145 0 26 242 122 94 17 23 166 71 51 149 6 66 163 209 232 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(134
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 212 92 87 64 148 107 42 20 127 89 38 46 230 245 188 144 189 1 237 40 5 40 182 43 58 237 95 201 63 6 247 57 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(135
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 254 212 92 87 66 148 107 42 18 127 89 38 46 230 245 188 145 67 51 247 204 182 249 121 33 83 121 202 67 70 64 172 151 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(136
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 1 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(137
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 212 92 87 65 148 107 42 19 127 89 38 46 230 245 188 145 0 26 242 122 94 17 23 166 71 51 149 6 66 163 209 232 2 33 0 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(138
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 1 179 41 244 120 162 187 208 166 195 132 238 20 147 177 245 24 39 110 14 74 83 117 146 141 111 205 22 12 17 203 109 44)
      #f
      ())
    #(139
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 32 179 41 244 122 162 187 208 164 195 132 238 20 147 177 245 24 173 160 24 239 5 70 85 131 136 89 128 134 25 5 34 138)
      #f
      ())
    #(140
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 255 76 214 11 134 93 68 47 90 60 123 17 235 108 78 10 231 149 120 236 99 83 162 11 247 131 236 180 182 234 151 184 37)
      #f
      ())
    #(141
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 254 76 214 11 135 93 68 47 89 60 123 17 235 108 78 10 231 216 145 241 181 172 138 109 114 144 50 233 243 238 52 146 212)
      #f
      ())
    #(142
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 33 1 179 41 244 121 162 187 208 165 195 132 238 20 147 177 245 24 106 135 19 156 172 93 244 8 124 19 75 73 21 104 71 219)
      #f
      ())
    #(143
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 43 163 168 190 107 148 213 236 128 166 217 209 25 10 67 110 255 229 13 133 161 238 232 89 184 204 106 249 189 92 46 24 2 32 76 214 11 134 93 68 47 90 60 123 17 235 108 78 10 231 149 120 236 99 83 162 11 247 131 236 180 182 234 151 184 37)
      #f
      ())
    #(144
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 0 2 1 0)
      #f
      ("EdgeCase"))
    #(145
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 0 2 1 1)
      #f
      ("EdgeCase"))
    #(146
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 0 2 1 255)
      #f
      ("EdgeCase"))
    #(147
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 0 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81)
      #f
      ("EdgeCase"))
    #(148
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 0 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80)
      #f
      ("EdgeCase"))
    #(149
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 0 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82)
      #f
      ("EdgeCase"))
    #(150
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 0 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255)
      #f
      ("EdgeCase"))
    #(151
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 0 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0)
      #f
      ("EdgeCase"))
    #(152
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 8 2 1 0 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(153
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 0 9 1 66)
      #f
      ("EdgeCase"))
    #(154
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 2 1 0)
      #f
      ("EdgeCase"))
    #(155
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 2 1 1)
      #f
      ("EdgeCase"))
    #(156
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 2 1 255)
      #f
      ("EdgeCase"))
    #(157
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 1 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81)
      #f
      ("EdgeCase"))
    #(158
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 1 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80)
      #f
      ("EdgeCase"))
    #(159
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 1 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82)
      #f
      ("EdgeCase"))
    #(160
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 1 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255)
      #f
      ("EdgeCase"))
    #(161
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 1 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0)
      #f
      ("EdgeCase"))
    #(162
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 8 2 1 1 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(163
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 9 1 66)
      #f
      ("EdgeCase"))
    #(164
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 255 2 1 0)
      #f
      ("EdgeCase"))
    #(165
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 255 2 1 1)
      #f
      ("EdgeCase"))
    #(166
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 255 2 1 255)
      #f
      ("EdgeCase"))
    #(167
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 255 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81)
      #f
      ("EdgeCase"))
    #(168
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 255 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80)
      #f
      ("EdgeCase"))
    #(169
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 255 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82)
      #f
      ("EdgeCase"))
    #(170
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 255 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255)
      #f
      ("EdgeCase"))
    #(171
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 255 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0)
      #f
      ("EdgeCase"))
    #(172
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 8 2 1 255 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(173
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 255 9 1 66)
      #f
      ("EdgeCase"))
    #(174
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81 2 1 0)
      #f
      ("EdgeCase"))
    #(175
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81 2 1 1)
      #f
      ("EdgeCase"))
    #(176
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81 2 1 255)
      #f
      ("EdgeCase"))
    #(177
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81)
      #f
      ("EdgeCase"))
    #(178
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80)
      #f
      ("EdgeCase"))
    #(179
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82)
      #f
      ("EdgeCase"))
    #(180
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255)
      #f
      ("EdgeCase"))
    #(181
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0)
      #f
      ("EdgeCase"))
    #(182
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 40 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(183
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81 9 1 66)
      #f
      ("EdgeCase"))
    #(184
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80 2 1 0)
      #f
      ("EdgeCase"))
    #(185
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80 2 1 1)
      #f
      ("EdgeCase"))
    #(186
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80 2 1 255)
      #f
      ("EdgeCase"))
    #(187
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81)
      #f
      ("EdgeCase"))
    #(188
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80)
      #f
      ("EdgeCase"))
    #(189
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82)
      #f
      ("EdgeCase"))
    #(190
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255)
      #f
      ("EdgeCase"))
    #(191
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0)
      #f
      ("EdgeCase"))
    #(192
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 40 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(193
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80 9 1 66)
      #f
      ("EdgeCase"))
    #(194
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82 2 1 0)
      #f
      ("EdgeCase"))
    #(195
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82 2 1 1)
      #f
      ("EdgeCase"))
    #(196
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82 2 1 255)
      #f
      ("EdgeCase"))
    #(197
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81)
      #f
      ("EdgeCase"))
    #(198
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80)
      #f
      ("EdgeCase"))
    #(199
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82)
      #f
      ("EdgeCase"))
    #(200
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255)
      #f
      ("EdgeCase"))
    #(201
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0)
      #f
      ("EdgeCase"))
    #(202
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 40 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(203
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82 9 1 66)
      #f
      ("EdgeCase"))
    #(204
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 2 1 0)
      #f
      ("EdgeCase"))
    #(205
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 2 1 1)
      #f
      ("EdgeCase"))
    #(206
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 2 1 255)
      #f
      ("EdgeCase"))
    #(207
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81)
      #f
      ("EdgeCase"))
    #(208
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80)
      #f
      ("EdgeCase"))
    #(209
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82)
      #f
      ("EdgeCase"))
    #(210
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255)
      #f
      ("EdgeCase"))
    #(211
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0)
      #f
      ("EdgeCase"))
    #(212
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 40 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(213
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 9 1 66)
      #f
      ("EdgeCase"))
    #(214
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 2 1 0)
      #f
      ("EdgeCase"))
    #(215
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 2 1 1)
      #f
      ("EdgeCase"))
    #(216
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 2 1 255)
      #f
      ("EdgeCase"))
    #(217
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 81)
      #f
      ("EdgeCase"))
    #(218
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 80)
      #f
      ("EdgeCase"))
    #(219
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 82)
      #f
      ("EdgeCase"))
    #(220
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255)
      #f
      ("EdgeCase"))
    #(221
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0)
      #f
      ("EdgeCase"))
    #(222
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 40 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(223
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 9 1 66)
      #f
      ("EdgeCase"))
    #(224
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 12 1 48)
      #f
      ())
    #(225
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 5 2 1 1 12 0)
      #f
      ())
    #(226
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 9 12 2 37 115 12 3 115 37 115)
      #f
      ())
    #(227
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 8 2 1 1 48 3 2 1 0)
      #f
      ())
    #(228
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 3 2 1 1)
      #f
      ())
    #(229
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 1 1 0)
      #f
      ())
    #(230
      "Edge case for Shamir multiplication"
      #vu8(54 57 56 49 57)
      #vu8(48 68 2 32 100 161 170 181 0 13 14 128 79 62 47 192 43 222 233 190 143 243 18 51 78 43 161 109 17 84 124 151 113 28 137 142 2 32 106 240 21 151 28 195 11 230 209 162 6 212 224 19 224 153 119 114 162 249 29 115 40 111 253 104 59 155 178 207 79 27)
      #t
      ())
    #(231
      "special case hash"
      #vu8(52 50 54 52 55 57 55 50 52)
      #vu8(48 68 2 32 22 174 169 100 162 246 80 109 111 120 200 28 145 252 126 139 222 215 211 151 115 132 72 222 30 25 160 236 88 11 242 102 2 32 37 44 215 98 19 12 102 103 207 232 183 188 71 210 125 120 57 30 142 128 197 120 209 205 56 195 255 3 59 233 40 233)
      #t
      ())
    #(232
      "special case hash"
      #vu8(55 49 51 56 54 56 52 56 57 49)
      #vu8(48 69 2 33 0 156 201 139 226 52 125 70 155 244 118 223 194 107 155 115 61 242 210 109 110 245 36 175 145 124 102 91 172 203 35 200 130 2 32 9 52 150 69 158 255 226 216 215 7 39 184 36 98 246 29 14 193 183 132 121 41 209 14 166 49 218 203 22 181 108 50)
      #t
      ())
    #(233
      "special case hash"
      #vu8(49 48 51 53 57 51 51 49 54 54 56)
      #vu8(48 68 2 32 115 179 201 14 205 57 0 40 5 129 100 82 77 222 137 39 3 220 227 222 160 213 63 168 9 57 153 240 122 184 170 67 2 32 47 103 176 184 226 6 54 105 91 183 216 191 10 101 28 128 46 210 90 57 83 135 181 244 24 140 12 64 117 200 134 52)
      #t
      ())
    #(234
      "special case hash"
      #vu8(51 57 52 57 52 48 49 50 49 53)
      #vu8(48 70 2 33 0 191 171 48 152 37 40 71 179 40 250 223 47 137 185 92 133 26 127 14 179 144 118 51 120 243 126 144 17 157 91 163 221 2 33 0 189 214 78 35 78 131 43 16 103 194 208 88 204 180 77 151 129 149 204 235 182 92 42 175 30 45 169 184 180 152 126 59)
      #t
      ())
    #(235
      "special case hash"
      #vu8(49 51 52 52 50 57 51 48 55 57)
      #vu8(48 68 2 32 32 74 151 132 7 75 36 109 139 248 191 4 164 206 177 193 241 201 170 171 22 139 21 150 209 112 147 197 205 33 210 205 2 32 81 204 228 22 112 99 103 131 220 6 167 89 200 132 120 104 164 6 194 80 111 225 121 117 88 47 230 72 209 216 139 82)
      #t
      ())
    #(236
      "special case hash"
      #vu8(51 55 48 54 50 49 49 55 49 50)
      #vu8(48 70 2 33 0 237 102 220 52 245 81 172 130 246 61 74 164 248 31 226 203 0 49 169 29 19 20 248 53 2 123 202 15 28 238 170 3 2 33 0 153 202 18 58 160 155 19 205 25 74 66 46 24 213 253 161 103 98 60 63 110 93 77 106 187 137 83 214 124 12 72 199)
      #t
      ())
    #(237
      "special case hash"
      #vu8(51 52 51 54 56 56 55 49 50)
      #vu8(48 69 2 32 6 11 112 11 239 102 92 104 137 157 68 242 53 106 87 141 18 107 6 32 35 204 195 192 86 191 15 96 162 55 1 43 2 33 0 141 24 108 2 120 50 150 95 79 204 120 163 54 108 169 93 237 187 65 12 190 243 242 109 107 229 213 129 193 29 54 16)
      #t
      ())
    #(238
      "special case hash"
      #vu8(49 51 53 49 53 51 48 51 55 48)
      #vu8(48 70 2 33 0 159 106 223 232 213 235 91 44 36 215 170 121 52 182 207 41 201 62 167 108 211 19 201 19 43 176 200 227 140 150 131 29 2 33 0 178 106 156 158 64 229 94 224 137 12 148 76 242 113 117 108 144 106 51 230 107 91 209 94 5 21 147 136 59 94 153 2)
      #t
      ())
    #(239
      "special case hash"
      #vu8(54 53 53 51 50 48 51 49 50 54)
      #vu8(48 69 2 33 0 161 175 3 202 145 103 123 103 58 210 243 54 21 229 97 116 161 171 246 218 22 140 235 250 136 104 244 186 39 63 22 183 2 32 32 170 115 255 228 138 250 100 53 205 37 139 23 61 12 35 119 214 144 34 231 208 152 215 92 175 36 200 197 224 107 28)
      #t
      ())
    #(240
      "special case hash"
      #vu8(49 53 54 52 51 52 54 54 48 51)
      #vu8(48 69 2 33 0 253 199 6 2 118 111 142 237 17 166 201 154 113 201 115 213 101 147 85 80 123 132 61 166 227 39 162 140 17 137 61 185 2 32 61 245 52 150 136 160 133 177 55 177 234 207 69 106 158 158 15 109 21 236 0 120 202 96 167 248 63 43 16 210 19 80)
      #t
      ())
    #(241
      "special case hash"
      #vu8(52 52 50 57 53 51 57 49 49 55)
      #vu8(48 70 2 33 0 181 22 163 20 242 252 229 48 214 83 127 106 108 73 150 108 35 69 111 99 198 67 207 142 13 199 56 247 184 118 230 117 2 33 0 211 159 253 3 60 146 182 215 23 221 83 111 188 94 253 241 150 124 75 216 9 84 71 155 166 107 1 32 205 22 255 242)
      #t
      ())
    #(242
      "special case hash"
      #vu8(49 48 57 53 51 50 54 49 51 53 49)
      #vu8(48 68 2 32 59 44 191 4 110 172 69 132 46 203 121 132 212 117 131 21 130 113 123 235 182 73 47 208 164 133 193 1 226 159 240 168 2 32 76 155 123 71 169 139 15 130 222 81 43 201 49 58 175 81 112 16 153 202 197 247 110 104 200 89 95 193 193 217 146 88)
      #t
      ())
    #(243
      "special case hash"
      #vu8(53 57 56 55 51 53 48 48 52 49)
      #vu8(48 68 2 32 48 200 125 53 230 54 245 64 132 31 20 175 84 226 249 237 215 157 3 18 207 161 171 101 108 63 177 91 253 228 141 207 2 32 71 193 90 90 130 210 75 117 200 90 105 43 214 236 175 235 113 64 158 222 35 239 208 142 13 185 171 246 52 6 119 237)
      #t
      ())
    #(244
      "special case hash"
      #vu8(51 52 54 51 48 48 54 56 55 56)
      #vu8(48 68 2 32 56 104 111 240 253 162 206 246 188 67 181 140 254 102 71 185 226 232 23 109 22 141 236 60 104 255 38 33 19 118 15 82 2 32 6 126 195 182 81 244 34 102 150 1 102 33 103 250 135 23 233 118 226 219 94 106 76 247 194 221 171 179 253 233 214 125)
      #t
      ())
    #(245
      "special case hash"
      #vu8(57 56 49 55 51 50 48 50 56 55)
      #vu8(48 68 2 32 68 163 226 59 243 20 242 179 68 252 37 199 242 222 139 106 243 225 125 39 245 238 132 75 34 89 133 171 110 39 117 207 2 32 45 72 226 35 32 94 152 4 29 220 135 190 83 42 190 213 132 240 65 31 87 41 80 4 147 201 204 63 77 209 94 134)
      #t
      ())
    #(246
      "special case hash"
      #vu8(51 50 50 50 48 52 49 48 52 54)
      #vu8(48 68 2 32 45 237 91 126 200 233 14 123 241 31 150 122 61 149 17 12 65 185 157 179 181 170 141 51 14 185 214 56 120 22 136 233 2 32 125 87 146 197 54 40 21 94 27 252 70 251 26 103 227 8 141 224 73 195 40 174 31 68 236 105 35 138 0 152 8 249)
      #t
      ())
    #(247
      "special case hash"
      #vu8(54 54 54 54 51 48 55 49 48 52)
      #vu8(48 70 2 33 0 189 174 123 203 88 11 243 53 239 211 188 61 49 135 15 146 62 172 202 252 212 14 194 246 5 151 111 21 19 125 139 143 2 33 0 246 223 161 47 25 229 37 39 11 1 6 238 207 226 87 73 159 55 58 79 179 24 153 79 36 131 129 34 206 126 195 199)
      #t
      ())
    #(248
      "special case hash"
      #vu8(49 48 51 53 57 53 49 56 57 56)
      #vu8(48 69 2 32 80 249 196 240 205 105 64 225 98 114 9 87 255 255 81 55 153 32 155 120 89 105 86 210 30 206 37 28 36 1 241 198 2 33 0 215 3 58 10 120 125 51 142 136 157 239 170 171 177 6 185 90 67 85 228 17 165 156 50 170 81 103 223 171 36 71 38)
      #t
      ())
    #(249
      "special case hash"
      #vu8(49 56 52 54 53 57 55 49 57 53)
      #vu8(48 69 2 33 0 246 18 130 6 135 96 79 160 25 6 6 106 55 141 103 84 9 130 226 149 117 208 25 170 190 144 146 78 173 92 134 13 2 32 63 147 103 112 45 215 221 79 117 234 152 175 210 14 50 138 26 153 244 133 123 49 101 37 50 130 48 206 41 75 15 239)
      #t
      ())
    #(250
      "special case hash"
      #vu8(51 49 51 54 48 52 54 49 56 57)
      #vu8(48 70 2 33 0 149 5 228 7 101 125 110 139 201 61 181 218 122 166 245 8 31 97 152 12 25 73 245 107 15 47 80 125 165 120 42 122 2 33 0 198 13 49 144 78 54 105 115 143 251 236 202 182 195 101 108 8 224 237 92 185 43 60 250 94 127 113 120 79 156 80 33)
      #t
      ())
    #(251
      "special case hash"
      #vu8(50 54 54 51 55 56 52 50 53 52)
      #vu8(48 70 2 33 0 187 209 111 187 182 86 182 208 216 62 106 119 135 205 105 27 8 115 90 237 55 23 50 114 62 28 104 164 4 4 81 125 2 33 0 157 142 53 219 169 96 40 183 120 125 145 49 91 230 117 135 125 45 9 123 229 232 238 52 86 14 62 127 210 92 15 0)
      #t
      ())
    #(252
      "special case hash"
      #vu8(49 54 53 50 49 48 48 53 50 52)
      #vu8(48 68 2 32 46 201 118 1 34 219 152 253 6 234 118 132 141 53 166 218 68 45 44 238 247 85 154 48 207 87 198 30 146 223 50 126 2 32 122 178 113 218 144 133 148 121 112 31 204 248 110 70 46 227 57 63 182 129 76 39 183 96 196 150 54 37 192 161 152 120)
      #t
      ())
    #(253
      "special case hash"
      #vu8(53 55 52 56 48 56 49 54 57 54)
      #vu8(48 68 2 32 84 231 107 118 131 182 101 11 170 106 127 196 155 28 81 238 217 186 157 212 99 34 31 122 79 16 5 168 159 224 12 89 2 32 46 160 118 136 108 119 62 185 55 236 28 200 55 75 121 21 207 209 27 28 26 225 22 97 82 242 247 128 106 49 200 253)
      #t
      ())
    #(254
      "special case hash"
      #vu8(54 51 52 51 57 49 51 52 54 56)
      #vu8(48 68 2 32 82 145 222 175 36 101 159 251 188 230 227 194 111 96 33 9 122 116 171 219 182 155 228 251 16 65 156 12 73 108 148 102 2 32 101 214 252 243 54 210 124 199 205 185 130 187 78 78 206 245 130 127 132 116 47 41 241 10 191 131 70 146 112 160 61 195)
      #t
      ())
    #(255
      "special case hash"
      #vu8(49 53 52 49 49 48 51 53 57 56)
      #vu8(48 69 2 32 32 122 50 65 129 45 117 217 71 65 157 197 142 251 5 232 0 59 51 252 23 235 80 249 209 81 102 168 132 121 241 7 2 33 0 205 238 116 159 46 73 43 33 60 232 11 50 208 87 79 98 241 197 215 7 147 207 85 227 130 213 202 173 247 89 39 103)
      #t
      ())
    #(256
      "special case hash"
      #vu8(49 48 52 55 56 53 56 48 49 50 56)
      #vu8(48 69 2 32 101 84 228 159 130 168 85 32 67 40 172 148 145 59 240 27 190 132 67 122 53 90 10 55 192 222 227 207 129 170 119 40 2 33 0 174 160 13 226 80 125 218 245 201 78 30 18 105 128 211 223 22 37 10 46 174 188 139 228 134 239 254 127 34 180 249 41)
      #t
      ())
    #(257
      "special case hash"
      #vu8(49 48 53 51 54 50 56 53 53 54 56)
      #vu8(48 70 2 33 0 165 76 80 98 100 131 57 210 191 240 111 113 200 130 22 194 108 110 25 180 216 10 140 96 41 144 172 130 112 126 253 252 2 33 0 233 155 190 127 207 175 174 62 105 253 1 103 119 81 122 160 16 86 49 127 70 122 208 154 255 9 190 115 201 115 27 13)
      #t
      ())
    #(258
      "special case hash"
      #vu8(57 53 51 57 48 52 49 48 53)
      #vu8(48 69 2 33 0 151 91 215 21 122 141 54 59 48 159 31 68 64 18 177 161 210 48 150 89 49 51 231 27 76 168 176 89 207 243 126 175 2 32 127 170 122 40 177 200 34 186 162 65 121 63 42 188 147 11 212 198 152 64 254 9 15 42 172 196 103 134 191 145 150 34)
      #t
      ())
    #(259
      "special case hash"
      #vu8(57 55 56 56 52 56 48 51 57)
      #vu8(48 68 2 32 86 148 166 248 75 143 135 92 39 106 253 46 188 254 77 97 222 158 201 3 5 175 177 53 123 149 179 224 218 67 136 94 2 32 13 255 173 159 253 11 117 125 128 81 222 192 46 189 247 13 142 226 220 92 120 112 192 130 59 108 204 124 103 156 186 164)
      #t
      ())
    #(260
      "special case hash"
      #vu8(51 54 49 48 54 55 50 52 52 50)
      #vu8(48 69 2 33 0 160 195 14 128 38 253 178 180 180 150 138 39 209 106 109 8 247 9 143 26 152 210 22 32 215 69 75 169 121 15 27 166 2 32 94 71 4 83 168 163 153 241 91 175 70 63 157 236 235 83 172 197 202 100 69 145 73 104 139 210 118 12 101 66 67 57)
      #t
      ())
    #(261
      "special case hash"
      #vu8(49 48 53 52 50 52 48 55 48 53)
      #vu8(48 68 2 32 97 78 168 74 207 115 101 39 221 115 96 44 212 187 78 234 29 254 190 189 90 216 172 165 42 160 34 140 247 185 154 136 2 32 115 124 200 95 95 45 47 96 209 184 24 63 62 212 144 228 222 20 54 142 150 169 72 44 42 77 209 147 25 92 144 47)
      #t
      ())
    #(262
      "special case hash"
      #vu8(53 49 55 52 52 52 56 49 57 55)
      #vu8(48 69 2 33 0 190 173 103 52 235 228 75 129 13 63 178 234 0 177 115 41 69 55 115 56 254 191 212 57 168 215 77 251 208 249 66 250 2 32 107 177 142 174 54 97 106 125 60 173 53 145 159 210 26 138 244 187 231 161 15 115 179 224 54 164 107 16 62 245 110 42)
      #t
      ())
    #(263
      "special case hash"
      #vu8(49 57 54 55 53 54 49 50 53 49)
      #vu8(48 68 2 32 73 150 37 71 158 22 29 172 212 219 157 156 230 72 84 201 141 146 44 191 33 39 3 233 101 79 174 24 45 249 186 210 2 32 66 193 119 207 55 184 25 58 1 49 16 141 151 129 158 221 148 57 147 96 40 134 74 193 149 182 79 202 118 217 214 147)
      #t
      ())
    #(264
      "special case hash"
      #vu8(51 52 52 55 50 53 51 51 52 51)
      #vu8(48 69 2 32 8 241 107 128 147 168 251 77 102 162 200 6 91 84 27 61 49 227 191 230 148 246 184 156 80 251 26 170 111 246 201 178 2 33 0 157 100 85 226 213 209 119 151 72 87 59 97 28 185 93 74 33 249 103 65 3 153 179 155 83 91 163 229 175 129 202 46)
      #t
      ())
    #(265
      "special case hash"
      #vu8(51 54 56 50 54 52 51 49 56)
      #vu8(48 70 2 33 0 190 38 35 27 97 145 101 138 25 221 114 221 185 158 216 248 197 121 182 147 141 25 188 232 238 216 220 43 51 140 181 248 2 33 0 225 217 163 46 229 108 255 237 55 240 242 43 45 203 87 213 201 67 193 79 121 105 74 3 185 197 233 105 82 87 92 137)
      #t
      ())
    #(266
      "special case hash"
      #vu8(51 50 54 49 49 57 56 54 48 56)
      #vu8(48 69 2 32 21 231 104 128 137 131 22 177 98 4 172 146 10 2 213 128 69 243 106 34 157 74 164 248 18 99 140 69 90 190 4 67 2 33 0 231 77 53 125 63 203 92 140 83 55 189 106 186 65 120 180 85 202 16 226 38 225 63 150 56 25 101 6 161 147 145 35)
      #t
      ())
    #(267
      "special case hash"
      #vu8(57 54 55 56 55 56 49 48 57 52)
      #vu8(48 68 2 32 53 46 203 83 248 223 44 80 58 69 249 132 111 194 141 29 49 230 48 125 61 219 255 193 19 35 21 204 7 241 109 173 2 32 19 72 223 169 196 130 197 88 225 208 92 82 66 202 28 57 67 103 38 236 210 130 88 177 137 151 146 136 125 208 163 198)
      #t
      ())
    #(268
      "special case hash"
      #vu8(52 57 53 56 56 50 51 56 50 51)
      #vu8(48 68 2 32 74 64 128 26 126 96 107 167 138 13 169 136 42 178 60 118 119 184 100 35 73 237 61 101 44 91 250 95 42 149 88 251 2 32 58 73 182 72 72 214 130 239 127 96 95 40 50 247 56 75 220 36 237 41 37 130 91 248 234 119 220 89 129 114 87 130)
      #t
      ())
    #(269
      "special case hash"
      #vu8(56 50 52 54 51 55 56 51 55)
      #vu8(48 69 2 33 0 234 204 94 26 131 4 167 77 43 228 18 176 120 146 75 59 179 81 27 172 133 92 5 201 229 233 228 77 243 214 30 150 2 32 116 81 205 142 24 214 237 24 133 221 130 119 20 132 127 150 236 75 176 237 76 54 206 152 8 219 143 113 66 4 246 209)
      #t
      ())
    #(270
      "special case hash"
      #vu8(49 49 48 50 48 56 51 51 55 55 54)
      #vu8(48 69 2 32 47 122 94 158 87 113 212 36 243 15 103 253 171 97 232 206 79 140 209 33 72 130 173 182 95 125 233 76 49 87 112 82 2 33 0 172 78 105 128 131 69 128 155 68 172 176 178 189 136 145 117 251 117 221 5 12 90 68 154 185 82 143 143 120 218 161 12)
      #t
      ())
    #(271
      "special case hash"
      #vu8(49 51 51 56 55 49 54 52 56)
      #vu8(48 69 2 33 0 255 205 164 15 121 44 228 217 62 126 15 14 149 225 162 20 125 221 215 246 72 118 33 195 10 3 215 16 179 48 2 25 2 32 121 147 139 85 248 161 127 126 215 186 154 222 143 32 101 161 250 119 97 143 11 103 173 216 213 140 66 44 36 83 164 154)
      #t
      ())
    #(272
      "special case hash"
      #vu8(51 50 50 49 52 52 49 54 50)
      #vu8(48 70 2 33 0 129 242 53 156 79 171 166 181 61 62 140 140 63 204 22 169 72 53 15 122 179 165 136 178 140 23 96 58 67 30 57 168 2 33 0 205 111 106 92 195 181 94 173 15 246 149 208 108 104 96 181 9 228 109 153 252 206 251 159 127 158 16 24 87 247 67 0)
      #t
      ())
    #(273
      "special case hash"
      #vu8(49 48 54 56 54 54 53 53 53 52 54)
      #vu8(48 69 2 33 0 223 200 191 82 4 69 203 184 238 21 150 251 7 62 162 131 234 19 2 81 166 253 255 165 195 245 242 170 247 92 168 8 2 32 4 142 51 239 206 20 124 157 217 40 35 100 14 51 142 104 191 215 208 220 122 73 5 179 167 172 113 30 87 126 144 231)
      #t
      ())
    #(274
      "special case hash"
      #vu8(54 50 49 53 53 50 52 54)
      #vu8(48 70 2 33 0 173 1 159 116 198 148 29 32 239 218 112 180 108 83 219 22 101 3 160 227 147 233 50 246 136 34 118 136 186 106 87 98 2 33 0 147 50 14 183 202 7 16 37 83 70 189 187 49 2 205 207 121 100 239 46 9 136 231 18 188 5 239 225 108 25 147 69)
      #t
      ())
    #(275
      "special case hash"
      #vu8(55 48 51 48 56 49 56 55 55 52)
      #vu8(48 70 2 33 0 172 128 150 132 46 138 221 104 195 78 120 206 17 221 113 228 181 67 22 189 62 191 127 255 222 183 189 90 62 188 24 131 2 33 0 245 202 47 79 35 214 116 80 45 76 175 133 209 135 33 93 54 227 206 159 12 226 25 112 159 33 163 170 192 3 183 168)
      #t
      ())
    #(276
      "special case hash"
      #vu8(53 57 50 52 53 50 51 55 52 52)
      #vu8(48 68 2 32 103 123 45 58 89 177 138 95 249 57 183 14 160 2 37 8 137 221 205 123 123 157 119 104 84 180 148 54 147 251 146 247 2 32 107 75 168 86 173 231 103 123 243 3 7 178 31 60 205 163 93 47 99 174 232 30 253 11 171 105 114 204 7 149 219 85)
      #t
      ())
    #(277
      "special case hash"
      #vu8(49 52 57 53 53 56 54 54 50 49)
      #vu8(48 69 2 32 71 158 29 237 20 188 174 208 55 155 168 225 183 61 49 21 216 77 49 212 183 195 14 31 5 225 252 13 89 87 207 176 2 33 0 145 143 121 227 91 61 137 72 124 246 52 164 240 91 46 12 48 133 124 168 121 249 124 119 30 135 112 39 53 91 36 67)
      #t
      ())
    #(278
      "special case hash"
      #vu8(52 48 48 53 51 49 52 52 48 54)
      #vu8(48 68 2 32 67 223 204 208 237 185 226 128 217 165 143 1 22 77 85 195 215 17 225 75 18 172 92 243 182 72 64 234 213 18 160 163 2 32 29 190 51 250 139 168 69 51 205 92 73 52 54 91 52 66 202 17 116 137 155 120 239 154 49 153 244 149 132 56 151 114)
      #t
      ())
    #(279
      "special case hash"
      #vu8(51 48 57 54 52 53 55 53 49 50)
      #vu8(48 68 2 32 91 9 171 99 123 212 202 240 244 199 199 228 188 165 146 254 162 14 144 135 194 89 210 106 56 187 64 133 240 187 255 17 2 32 69 183 235 70 123 103 72 175 97 142 157 128 214 253 205 106 162 73 100 229 161 63 136 91 202 129 1 222 8 235 13 117)
      #t
      ())
    #(280
      "special case hash"
      #vu8(50 55 56 52 48 50 53 54 50 48)
      #vu8(48 69 2 32 94 155 28 90 2 128 112 223 87 40 197 200 175 155 116 224 102 122 250 87 10 108 250 1 20 165 3 158 209 94 224 111 2 33 0 177 54 9 7 226 217 120 94 173 54 43 184 215 189 102 27 108 41 238 255 211 197 3 119 68 237 174 185 173 153 12 32)
      #t
      ())
    #(281
      "special case hash"
      #vu8(50 54 49 56 55 56 55 52 49 56)
      #vu8(48 69 2 32 6 113 160 168 92 43 114 213 74 47 176 153 14 52 83 139 72 144 5 15 90 87 18 246 209 167 165 251 133 120 243 46 2 33 0 219 24 70 186 182 183 54 20 121 171 156 50 133 202 65 41 24 8 242 127 213 189 79 218 199 32 229 133 71 19 105 76)
      #t
      ())
    #(282
      "special case hash"
      #vu8(49 54 52 50 54 50 53 50 54 50)
      #vu8(48 68 2 32 118 115 248 82 103 72 68 100 119 219 187 5 144 164 84 146 197 215 214 152 89 211 1 171 186 237 179 91 32 149 16 58 2 32 61 199 13 223 156 107 82 77 136 107 237 158 106 240 46 14 77 236 13 65 122 65 79 237 56 7 239 68 34 145 61 124)
      #t
      ())
    #(283
      "special case hash"
      #vu8(54 56 50 52 49 56 57 52 51 54)
      #vu8(48 68 2 32 127 8 84 65 7 14 205 43 178 18 133 8 158 187 26 166 69 13 26 6 195 109 63 243 157 253 101 122 121 109 18 181 2 32 36 151 18 1 32 41 135 10 36 89 209 141 71 218 154 164 146 165 230 203 75 45 141 175 169 228 197 197 74 43 154 139)
      #t
      ())
    #(284
      "special case hash"
      #vu8(52 56 52 50 52 53 52 50 53)
      #vu8(48 70 2 33 0 145 76 103 251 97 221 30 39 200 103 57 142 167 50 45 90 183 109 240 75 197 170 102 131 168 224 243 10 93 40 115 72 2 33 0 250 7 71 64 49 72 29 218 73 83 227 172 25 89 238 140 234 126 102 236 65 43 56 214 201 109 40 246 211 115 4 234)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 184 56 255 68 229 188 23 123 242 17 137 208 118 96 130 252 157 132 50 38 136 127 201 118 3 113 16 11 126 226 10 111 240 201 215 91 251 167 179 26 107 202 25 116 73 110 235 86 222 53 112 113 149 93 131 196 177 186 218 160 178 24 50 233)
  :der-encode
  #t
  :tests
  '(#(285
      "signature malleability"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 33 0 144 14 117 173 35 63 204 144 133 9 219 255 89 34 100 125 179 124 33 244 175 211 32 58 232 220 74 231 121 75 15 135)
      #t
      ())
    #(286
      "Legacy:ASN encoding of r misses leading 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #t
      ("MissingZero"))
    #(287
      "valid"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #t
      ())
    #(288
      "long form encoding of length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 129 69 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ("BER"))
    #(289
      "length of sequence contains leading 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 130 0 69 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ("BER"))
    #(290
      "wrong length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(291
      "wrong length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(292
      "uint32 overflow in length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 133 1 0 0 0 69 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(293
      "uint64 overflow in length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 137 1 0 0 0 0 0 0 0 69 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(294
      "length of sequence = 2**31 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 132 127 255 255 255 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(295
      "length of sequence = 2**32 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 132 255 255 255 255 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(296
      "length of sequence = 2**40 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 133 255 255 255 255 255 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(297
      "length of sequence = 2**64 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 136 255 255 255 255 255 255 255 255 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(298
      "incorrect length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 255 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(299
      "indefinite length without termination"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(300
      "indefinite length without termination"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 128 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(301
      "indefinite length without termination"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 128 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(302
      "removing sequence"
      #vu8(49 50 51 52 48 48)
      #vu8()
      #f
      ())
    #(303
      "lonely sequence tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48)
      #f
      ())
    #(304
      "appending 0's to sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186 0 0)
      #f
      ())
    #(305
      "prepending 0's to sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 0 0 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(306
      "appending unused 0's to sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186 0 0)
      #f
      ())
    #(307
      "appending null value to sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186 5 0)
      #f
      ())
    #(308
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 74 73 129 119 48 69 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(309
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 37 0 48 69 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(310
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 48 69 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186 0 4 222 173 190 239)
      #f
      ())
    #(311
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 74 34 38 73 129 119 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(312
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 34 37 37 0 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(313
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 77 34 35 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 0 4 222 173 190 239 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(314
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 74 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 34 37 73 129 119 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(315
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 34 36 37 0 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(316
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 77 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 34 34 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186 0 4 222 173 190 239)
      #f
      ())
    #(317
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 77 170 0 187 0 205 0 48 69 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(318
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 75 170 2 170 187 48 69 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(319
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 77 34 41 170 0 187 0 205 0 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(320
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 75 34 39 170 2 170 187 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(321
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 77 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 34 40 170 0 187 0 205 0 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(322
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 75 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 34 38 170 2 170 187 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(323
      "truncated length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 129)
      #f
      ())
    #(324
      "using composition with indefinite length"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 48 69 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186 0 0)
      #f
      ())
    #(325
      "using composition with indefinite length"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 34 128 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 0 0 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(326
      "using composition with indefinite length"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 34 128 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186 0 0)
      #f
      ())
    #(327
      "using composition with wrong tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 49 69 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186 0 0)
      #f
      ())
    #(328
      "using composition with wrong tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 34 128 3 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 0 0 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(329
      "using composition with wrong tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 34 128 3 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186 0 0)
      #f
      ())
    #(330
      "Replacing sequence with NULL"
      #vu8(49 50 51 52 48 48)
      #vu8(5 0)
      #f
      ())
    #(331
      "changing tag value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(46 69 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(332
      "changing tag value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(47 69 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(333
      "changing tag value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(49 69 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(334
      "changing tag value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(50 69 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(335
      "changing tag value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(255 69 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(336
      "dropping value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 0)
      #f
      ())
    #(337
      "using composition for sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 48 1 2 48 68 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(338
      "truncated sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49)
      #f
      ())
    #(339
      "truncated sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(340
      "indefinite length"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186 0 0)
      #f
      ("BER"))
    #(341
      "indefinite length with truncated delimiter"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186 0)
      #f
      ())
    #(342
      "indefinite length with additional element"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186 5 0 0 0)
      #f
      ())
    #(343
      "indefinite length with truncated element"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186 6 8 17 34 0 0)
      #f
      ())
    #(344
      "indefinite length with garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186 0 0 254 2 190 239)
      #f
      ())
    #(345
      "indefinite length with nonempty EOC"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186 0 2 190 239)
      #f
      ())
    #(346
      "prepend empty sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 48 0 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(347
      "append empty sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186 48 0)
      #f
      ())
    #(348
      "append garbage with high tag number"
      #vu8(49 50 51 52 48 48)
      #vu8(48 72 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186 191 127 0)
      #f
      ())
    #(349
      "sequence of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 48 69 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(350
      "truncated sequence: removed last 1 elements"
      #vu8(49 50 51 52 48 48)
      #vu8(48 35 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101)
      #f
      ())
    #(351
      "repeating element in sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 103 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(352
      "long form encoding of length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 129 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ("BER"))
    #(353
      "long form encoding of length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 129 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ("BER"))
    #(354
      "length of integer contains leading 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 130 0 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ("BER"))
    #(355
      "length of integer contains leading 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 130 0 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ("BER"))
    #(356
      "wrong length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 34 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(357
      "wrong length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(358
      "wrong length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 33 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(359
      "wrong length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 31 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(360
      "uint32 overflow in length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 74 2 133 1 0 0 0 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(361
      "uint32 overflow in length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 74 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 133 1 0 0 0 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(362
      "uint64 overflow in length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 78 2 137 1 0 0 0 0 0 0 0 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(363
      "uint64 overflow in length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 78 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 137 1 0 0 0 0 0 0 0 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(364
      "length of integer = 2**31 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 2 132 127 255 255 255 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(365
      "length of integer = 2**31 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 132 127 255 255 255 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(366
      "length of integer = 2**32 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 2 132 255 255 255 255 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(367
      "length of integer = 2**32 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 132 255 255 255 255 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(368
      "length of integer = 2**40 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 74 2 133 255 255 255 255 255 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(369
      "length of integer = 2**40 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 74 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 133 255 255 255 255 255 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(370
      "length of integer = 2**64 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 77 2 136 255 255 255 255 255 255 255 255 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(371
      "length of integer = 2**64 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 77 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 136 255 255 255 255 255 255 255 255 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(372
      "incorrect length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 255 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(373
      "incorrect length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 255 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(374
      "removing integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(375
      "lonely integer tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48 35 2 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(376
      "lonely integer tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48 36 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2)
      #f
      ())
    #(377
      "appending 0's to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 35 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 0 0 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(378
      "appending 0's to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 34 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186 0 0)
      #f
      ())
    #(379
      "prepending 0's to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 35 0 0 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ("BER"))
    #(380
      "prepending 0's to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 34 0 0 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ("BER"))
    #(381
      "appending unused 0's to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 0 0 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(382
      "appending null value to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 35 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 5 0 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(383
      "appending null value to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 71 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 34 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186 5 0)
      #f
      ())
    #(384
      "truncated length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 36 2 129 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(385
      "truncated length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 37 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 129)
      #f
      ())
    #(386
      "Replacing integer with NULL"
      #vu8(49 50 51 52 48 48)
      #vu8(48 36 5 0 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(387
      "Replacing integer with NULL"
      #vu8(49 50 51 52 48 48)
      #vu8(48 37 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 5 0)
      #f
      ())
    #(388
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 0 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(389
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 1 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(390
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 3 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(391
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 4 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(392
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 255 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(393
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 0 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(394
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 1 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(395
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 3 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(396
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 4 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(397
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 255 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(398
      "dropping value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 36 2 0 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(399
      "dropping value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 37 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 0)
      #f
      ())
    #(400
      "using composition for integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 34 37 2 1 0 2 32 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(401
      "using composition for integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 73 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 34 36 2 1 111 2 31 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(402
      "modify first byte of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 2 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(403
      "modify first byte of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 109 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(404
      "modify last byte of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 229 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(405
      "modify last byte of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 58)
      #f
      ())
    #(406
      "truncated integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(407
      "truncated integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 31 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49)
      #f
      ())
    #(408
      "truncated integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 31 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(409
      "leading ff in integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 34 255 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(410
      "leading ff in integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 33 255 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(411
      "replaced integer by infinity"
      #vu8(49 50 51 52 48 48)
      #vu8(48 37 9 1 128 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(412
      "replaced integer by infinity"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 9 1 128)
      #f
      ())
    #(413
      "replacing integer with zero"
      #vu8(49 50 51 52 48 48)
      #vu8(48 37 2 1 0 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(414
      "replacing integer with zero"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 1 0)
      #f
      ())
    #(415
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 1 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 131 185 13 234 188 164 176 92 69 116 228 155 88 153 185 100 166 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(416
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 134 67 176 48 239 70 31 27 205 245 63 222 62 249 76 226 36 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(417
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 255 126 193 8 99 49 5 101 169 8 69 127 160 241 184 122 123 1 160 242 42 10 152 67 246 74 237 195 52 54 124 220 155 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(418
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 126 193 8 99 49 5 101 169 8 69 127 160 241 184 122 121 188 79 207 16 185 224 228 50 10 192 33 193 6 179 29 220 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(419
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 254 126 193 8 99 49 5 101 169 8 69 127 160 241 184 122 124 70 242 21 67 91 79 163 186 139 27 100 167 102 70 155 90 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(420
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 1 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(421
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 126 193 8 99 49 5 101 169 8 69 127 160 241 184 122 123 1 160 242 42 10 152 67 246 74 237 195 52 54 124 220 155 2 32 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(422
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 33 1 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 127 193 225 151 216 174 190 32 60 150 200 114 50 39 33 114 251)
      #f
      ())
    #(423
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 33 255 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 130 76 131 222 11 80 44 223 197 23 35 181 24 134 180 240 121)
      #f
      ())
    #(424
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 32 144 14 117 173 35 63 204 144 133 9 219 255 89 34 100 126 248 205 69 14 0 138 127 255 41 9 236 90 169 20 206 70)
      #f
      ())
    #(425
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 33 254 144 14 117 173 35 63 204 144 133 9 219 255 89 34 100 128 62 30 104 39 81 65 223 195 105 55 141 205 216 222 141 5)
      #f
      ())
    #(426
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 33 1 111 241 138 82 220 192 51 111 122 246 36 0 166 221 155 129 7 50 186 241 255 117 128 0 214 246 19 165 86 235 49 186)
      #f
      ())
    #(427
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 129 62 247 156 206 250 154 86 247 186 128 95 14 71 133 132 254 95 13 213 245 103 188 9 181 18 60 203 201 131 35 101 2 33 0 144 14 117 173 35 63 204 144 133 9 219 255 89 34 100 126 248 205 69 14 0 138 127 255 41 9 236 90 169 20 206 70)
      #f
      ())
    #(428
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 0 2 1 0)
      #f
      ("EdgeCase"))
    #(429
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 0 2 1 1)
      #f
      ("EdgeCase"))
    #(430
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 0 2 1 255)
      #f
      ("EdgeCase"))
    #(431
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 0 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 65)
      #f
      ("EdgeCase"))
    #(432
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 0 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 64)
      #f
      ("EdgeCase"))
    #(433
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 0 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 66)
      #f
      ("EdgeCase"))
    #(434
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 0 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 47)
      #f
      ("EdgeCase"))
    #(435
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 0 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 48)
      #f
      ("EdgeCase"))
    #(436
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 8 2 1 0 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(437
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 0 9 1 66)
      #f
      ("EdgeCase"))
    #(438
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 2 1 0)
      #f
      ("EdgeCase"))
    #(439
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 2 1 1)
      #f
      ("EdgeCase"))
    #(440
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 2 1 255)
      #f
      ("EdgeCase"))
    #(441
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 1 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 65)
      #f
      ("EdgeCase"))
    #(442
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 1 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 64)
      #f
      ("EdgeCase"))
    #(443
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 1 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 66)
      #f
      ("EdgeCase"))
    #(444
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 1 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 47)
      #f
      ("EdgeCase"))
    #(445
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 1 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 48)
      #f
      ("EdgeCase"))
    #(446
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 8 2 1 1 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(447
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 9 1 66)
      #f
      ("EdgeCase"))
    #(448
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 255 2 1 0)
      #f
      ("EdgeCase"))
    #(449
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 255 2 1 1)
      #f
      ("EdgeCase"))
    #(450
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 255 2 1 255)
      #f
      ("EdgeCase"))
    #(451
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 255 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 65)
      #f
      ("EdgeCase"))
    #(452
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 255 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 64)
      #f
      ("EdgeCase"))
    #(453
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 255 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 66)
      #f
      ("EdgeCase"))
    #(454
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 255 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 47)
      #f
      ("EdgeCase"))
    #(455
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 255 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 48)
      #f
      ("EdgeCase"))
    #(456
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 8 2 1 255 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(457
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 255 9 1 66)
      #f
      ("EdgeCase"))
    #(458
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 65 2 1 0)
      #f
      ("EdgeCase"))
    #(459
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 65 2 1 1)
      #f
      ("EdgeCase"))
    #(460
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 65 2 1 255)
      #f
      ("EdgeCase"))
    #(461
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 65 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 65)
      #f
      ("EdgeCase"))
    #(462
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 65 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 64)
      #f
      ("EdgeCase"))
    #(463
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 65 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 66)
      #f
      ("EdgeCase"))
    #(464
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 65 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 47)
      #f
      ("EdgeCase"))
    #(465
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 65 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 48)
      #f
      ("EdgeCase"))
    #(466
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 40 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 65 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(467
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 65 9 1 66)
      #f
      ("EdgeCase"))
    #(468
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 64 2 1 0)
      #f
      ("EdgeCase"))
    #(469
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 64 2 1 1)
      #f
      ("EdgeCase"))
    #(470
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 64 2 1 255)
      #f
      ("EdgeCase"))
    #(471
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 64 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 65)
      #f
      ("EdgeCase"))
    #(472
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 64 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 64)
      #f
      ("EdgeCase"))
    #(473
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 64 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 66)
      #f
      ("EdgeCase"))
    #(474
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 64 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 47)
      #f
      ("EdgeCase"))
    #(475
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 64 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 48)
      #f
      ("EdgeCase"))
    #(476
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 40 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 64 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(477
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 64 9 1 66)
      #f
      ("EdgeCase"))
    #(478
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 66 2 1 0)
      #f
      ("EdgeCase"))
    #(479
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 66 2 1 1)
      #f
      ("EdgeCase"))
    #(480
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 66 2 1 255)
      #f
      ("EdgeCase"))
    #(481
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 66 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 65)
      #f
      ("EdgeCase"))
    #(482
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 66 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 64)
      #f
      ("EdgeCase"))
    #(483
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 66 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 66)
      #f
      ("EdgeCase"))
    #(484
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 66 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 47)
      #f
      ("EdgeCase"))
    #(485
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 66 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 48)
      #f
      ("EdgeCase"))
    #(486
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 40 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 66 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(487
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 66 9 1 66)
      #f
      ("EdgeCase"))
    #(488
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 47 2 1 0)
      #f
      ("EdgeCase"))
    #(489
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 47 2 1 1)
      #f
      ("EdgeCase"))
    #(490
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 47 2 1 255)
      #f
      ("EdgeCase"))
    #(491
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 47 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 65)
      #f
      ("EdgeCase"))
    #(492
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 47 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 64)
      #f
      ("EdgeCase"))
    #(493
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 47 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 66)
      #f
      ("EdgeCase"))
    #(494
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 47 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 47)
      #f
      ("EdgeCase"))
    #(495
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 47 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 48)
      #f
      ("EdgeCase"))
    #(496
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 40 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 47 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(497
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 47 9 1 66)
      #f
      ("EdgeCase"))
    #(498
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 48 2 1 0)
      #f
      ("EdgeCase"))
    #(499
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 48 2 1 1)
      #f
      ("EdgeCase"))
    #(500
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 48 2 1 255)
      #f
      ("EdgeCase"))
    #(501
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 48 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 65)
      #f
      ("EdgeCase"))
    #(502
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 48 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 64)
      #f
      ("EdgeCase"))
    #(503
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 48 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 66)
      #f
      ("EdgeCase"))
    #(504
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 48 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 47)
      #f
      ("EdgeCase"))
    #(505
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 48 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 48)
      #f
      ("EdgeCase"))
    #(506
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 40 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 48 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(507
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 48 9 1 66)
      #f
      ("EdgeCase"))
    #(508
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 12 1 48)
      #f
      ())
    #(509
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 5 2 1 1 12 0)
      #f
      ())
    #(510
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 9 12 2 37 115 12 3 115 37 115)
      #f
      ())
    #(511
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 8 2 1 1 48 3 2 1 0)
      #f
      ())
    #(512
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 3 2 1 1)
      #f
      ())
    #(513
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 1 1 0)
      #f
      ())
    #(514
      "Edge case for Shamir multiplication"
      #vu8(50 53 53 56 53)
      #vu8(48 69 2 33 0 221 27 125 9 167 189 130 24 150 16 52 163 154 135 254 207 83 20 240 12 77 37 235 88 160 122 200 94 133 234 181 22 2 32 53 19 140 64 30 248 211 73 61 101 201 0 47 230 43 67 174 229 104 115 27 116 69 72 53 137 150 217 204 66 126 6)
      #t
      ())
    #(515
      "special case hash"
      #vu8(52 50 54 52 55 57 55 50 52)
      #vu8(48 69 2 33 0 149 194 146 103 217 114 160 67 217 85 34 69 70 34 43 186 52 63 193 212 219 15 236 38 42 51 172 97 48 86 150 174 2 32 110 223 233 103 19 174 213 111 138 40 166 101 63 87 224 184 41 113 46 94 221 198 127 52 104 43 36 240 103 107 38 64)
      #t
      ())
    #(516
      "special case hash"
      #vu8(55 49 51 56 54 56 52 56 57 49)
      #vu8(48 69 2 32 40 249 74 137 78 146 2 70 153 227 69 254 102 151 30 62 220 208 80 2 51 134 19 90 179 147 157 85 8 152 251 37 2 33 0 205 105 193 164 43 224 90 110 225 39 12 130 20 121 37 30 19 76 33 133 141 128 11 218 111 78 152 179 113 150 35 142)
      #t
      ())
    #(517
      "special case hash"
      #vu8(49 48 51 53 57 51 51 49 54 54 56)
      #vu8(48 70 2 33 0 190 38 177 143 149 73 248 159 65 26 155 82 83 107 21 170 39 11 132 84 141 14 133 154 25 82 162 122 241 167 122 198 2 33 0 143 62 43 5 99 47 195 55 21 87 42 249 18 70 129 17 63 43 132 50 91 128 21 76 4 74 84 77 193 168 250 18)
      #t
      ())
    #(518
      "special case hash"
      #vu8(51 57 52 57 52 48 49 50 49 53)
      #vu8(48 70 2 33 0 177 164 177 71 142 101 204 62 175 223 34 93 18 152 180 63 45 161 158 75 207 247 234 204 10 46 152 205 75 116 177 20 2 33 0 232 101 92 225 207 179 62 189 48 175 140 232 232 174 77 111 123 80 205 62 34 175 81 191 105 224 162 133 23 96 213 43)
      #t
      ())
    #(519
      "special case hash"
      #vu8(49 51 52 52 50 57 51 48 55 57)
      #vu8(48 68 2 32 50 83 50 2 18 97 241 189 24 242 113 42 161 226 37 45 162 55 150 218 138 75 31 246 234 24 202 254 199 225 113 242 2 32 64 180 245 226 135 238 97 252 60 128 65 134 152 35 96 137 30 170 53 199 95 5 164 62 205 72 179 93 152 74 102 72)
      #t
      ())
    #(520
      "special case hash"
      #vu8(51 55 48 54 50 49 49 55 49 50)
      #vu8(48 70 2 33 0 162 58 209 141 143 198 109 129 175 9 3 137 12 189 69 58 85 76 176 76 220 26 140 167 247 247 142 83 103 237 136 160 2 33 0 220 28 20 211 30 63 177 88 183 60 118 66 104 200 181 85 121 115 74 126 42 44 155 94 229 217 208 20 78 246 82 235)
      #t
      ())
    #(521
      "special case hash"
      #vu8(51 52 51 54 56 56 55 49 50)
      #vu8(48 69 2 32 43 222 164 28 218 99 162 209 75 244 115 83 189 32 136 10 105 9 1 222 124 214 227 204 109 142 213 186 12 219 16 145 2 33 0 195 21 153 67 48 54 6 64 115 131 91 30 62 186 131 53 166 80 200 253 120 111 148 254 35 90 215 212 29 201 76 122)
      #t
      ())
    #(522
      "special case hash"
      #vu8(49 51 53 49 53 51 48 51 55 48)
      #vu8(48 70 2 33 0 215 205 118 236 1 193 177 7 158 186 158 42 162 163 151 36 60 71 88 201 138 27 160 183 64 74 52 11 155 0 206 214 2 33 0 202 138 255 225 230 38 221 25 33 116 194 147 123 21 188 72 247 123 91 223 224 31 7 58 138 234 247 242 77 198 200 91)
      #t
      ())
    #(523
      "special case hash"
      #vu8(54 53 53 51 50 48 51 49 50 54)
      #vu8(48 69 2 33 0 168 114 199 68 217 54 219 33 161 12 54 29 213 201 6 51 85 248 73 2 33 150 82 246 252 86 220 149 167 19 157 150 2 32 64 13 247 87 93 151 86 33 14 156 204 119 22 44 107 89 60 119 70 207 180 138 194 99 196 39 80 180 33 239 75 185)
      #t
      ())
    #(524
      "special case hash"
      #vu8(49 53 54 52 51 52 54 54 48 51)
      #vu8(48 70 2 33 0 159 169 175 224 119 82 218 16 179 109 58 252 208 254 68 191 196 2 68 215 82 3 89 156 248 245 4 127 163 69 56 84 2 33 0 175 31 88 63 236 64 64 174 126 104 201 104 210 187 75 73 78 236 58 51 237 199 192 204 249 95 127 117 188 37 105 199)
      #t
      ())
    #(525
      "special case hash"
      #vu8(52 52 50 57 53 51 57 49 49 55)
      #vu8(48 69 2 33 0 136 86 64 56 77 13 145 14 251 23 123 70 190 108 61 197 202 200 31 11 136 195 25 11 182 181 249 156 38 65 242 5 2 32 115 142 217 191 241 22 48 109 156 170 15 143 198 8 190 36 62 11 86 119 121 216 218 176 62 142 25 213 83 241 220 142)
      #t
      ())
    #(526
      "special case hash"
      #vu8(49 48 57 53 51 50 54 49 51 53 49)
      #vu8(48 69 2 32 45 5 31 145 197 169 212 64 197 103 105 133 113 4 131 188 79 26 108 97 27 16 201 90 47 240 54 61 144 194 164 88 2 33 0 146 32 107 25 4 90 65 167 151 204 47 58 195 13 233 81 129 101 233 109 91 134 52 30 203 59 207 242 49 179 253 101)
      #t
      ())
    #(527
      "special case hash"
      #vu8(53 57 56 55 51 53 48 48 52 49)
      #vu8(48 69 2 33 0 243 172 37 35 150 116 130 245 61 80 133 34 113 45 88 63 67 121 205 130 65 1 255 99 94 160 147 81 23 186 165 79 2 32 39 241 8 18 34 115 151 224 44 234 150 251 14 104 7 97 99 109 171 43 8 13 31 197 209 22 133 203 232 80 12 254)
      #t
      ())
    #(528
      "special case hash"
      #vu8(51 52 54 51 48 48 54 56 55 56)
      #vu8(48 70 2 33 0 150 68 124 246 140 58 183 38 110 215 68 125 227 172 82 254 215 204 8 203 223 234 57 28 24 169 184 171 55 11 201 19 2 33 0 240 161 135 139 44 83 241 110 112 254 55 122 94 156 110 134 241 138 228 128 162 43 180 153 245 179 46 113 9 192 115 133)
      #t
      ())
    #(529
      "special case hash"
      #vu8(57 56 49 55 51 50 48 50 56 55)
      #vu8(48 69 2 32 83 10 8 50 182 145 218 11 86 25 160 177 29 230 135 127 60 9 113 186 170 104 237 18 39 88 194 156 170 244 107 114 2 33 0 147 118 27 176 161 76 207 159 21 180 185 206 115 198 236 112 11 208 21 184 203 28 250 197 104 55 244 70 63 83 7 78)
      #t
      ())
    #(530
      "special case hash"
      #vu8(51 50 50 50 48 52 49 48 52 54)
      #vu8(48 70 2 33 0 156 84 194 85 0 189 224 185 45 114 214 236 72 61 194 72 47 54 84 41 76 167 77 231 150 182 129 37 94 213 138 119 2 33 0 152 139 172 57 74 144 173 137 206 54 9 132 192 193 73 220 189 38 132 187 100 73 138 206 144 188 246 182 175 28 23 14)
      #t
      ())
    #(531
      "special case hash"
      #vu8(54 54 54 54 51 48 55 49 48 52)
      #vu8(48 69 2 33 0 231 144 157 65 67 158 47 106 242 145 54 199 52 140 162 100 26 43 7 13 91 100 249 30 169 218 112 112 199 162 97 139 2 32 66 215 130 241 50 250 29 54 194 200 139 162 124 61 103 141 128 24 74 93 30 204 172 117 1 240 180 126 61 32 80 8)
      #t
      ())
    #(532
      "special case hash"
      #vu8(49 48 51 53 57 53 49 56 57 56)
      #vu8(48 69 2 32 89 36 135 50 9 89 49 53 164 195 218 123 179 129 34 127 138 75 106 169 243 79 229 187 127 143 188 19 26 3 159 254 2 33 0 224 228 78 228 187 227 112 21 91 240 187 222 194 101 191 159 227 28 7 70 250 171 68 109 230 46 54 49 234 205 17 31)
      #t
      ())
    #(533
      "special case hash"
      #vu8(49 56 52 54 53 57 55 49 57 53)
      #vu8(48 69 2 33 0 238 182 146 201 178 98 150 155 35 28 56 181 167 246 6 73 224 200 117 205 100 223 136 243 58 165 113 250 61 41 171 14 2 32 33 139 58 30 176 99 121 194 193 140 245 27 6 67 7 134 209 198 76 210 210 76 155 35 43 35 229 186 199 152 154 205)
      #t
      ())
    #(534
      "special case hash"
      #vu8(51 49 51 54 48 52 54 49 56 57)
      #vu8(48 69 2 33 0 164 0 52 23 127 54 9 28 43 101 54 132 160 227 235 93 75 255 24 228 208 159 102 76 40 0 231 202 253 161 218 248 2 32 58 62 194 152 83 112 78 82 3 28 88 146 122 128 10 150 131 83 173 195 217 115 190 186 145 114 203 190 171 77 209 73)
      #t
      ())
    #(535
      "special case hash"
      #vu8(50 54 54 51 55 56 52 50 53 52)
      #vu8(48 70 2 33 0 181 215 149 204 117 206 165 196 52 250 65 133 24 12 214 189 33 34 63 61 90 134 218 102 112 215 29 149 104 13 173 191 2 33 0 171 27 39 126 245 255 225 52 70 8 53 227 209 64 36 97 186 16 76 181 11 22 243 151 253 199 169 171 254 254 242 128)
      #t
      ())
    #(536
      "special case hash"
      #vu8(49 54 53 50 49 48 48 53 50 52)
      #vu8(48 68 2 32 7 220 36 120 212 60 18 50 164 89 86 8 198 68 38 195 85 16 5 26 99 26 230 165 166 235 17 97 229 126 66 225 2 32 74 89 234 15 219 114 209 33 101 206 163 191 28 168 107 169 117 23 189 24 141 179 219 210 26 90 21 120 80 2 25 132)
      #t
      ())
    #(537
      "special case hash"
      #vu8(53 55 52 56 48 56 49 54 57 54)
      #vu8(48 70 2 33 0 221 210 12 74 5 89 108 168 104 181 88 131 159 206 159 101 17 221 216 61 28 203 83 248 46 82 105 213 89 160 21 82 2 33 0 164 110 140 184 214 38 207 108 0 221 237 195 181 218 126 97 58 195 118 68 94 226 96 116 63 6 247 144 84 199 212 42)
      #t
      ())
    #(538
      "special case hash"
      #vu8(54 51 52 51 57 49 51 52 54 56)
      #vu8(48 69 2 33 0 156 222 110 14 222 10 0 63 2 253 160 160 27 89 250 207 229 222 192 99 49 143 39 156 226 222 122 155 16 98 247 183 2 32 40 134 165 184 198 121 189 248 34 76 102 249 8 253 98 5 73 44 183 11 0 104 212 106 228 243 58 65 73 177 42 82)
      #t
      ())
    #(539
      "special case hash"
      #vu8(49 53 52 49 49 48 51 53 57 56)
      #vu8(48 70 2 33 0 197 119 16 22 208 221 99 87 20 60 137 246 132 205 116 4 35 80 37 84 192 197 154 168 201 149 132 241 255 56 246 9 2 33 0 171 75 250 11 184 138 185 151 145 185 179 171 156 75 2 189 42 87 174 141 222 80 185 6 64 99 252 248 83 21 207 229)
      #t
      ())
    #(540
      "special case hash"
      #vu8(49 48 52 55 56 53 56 48 49 50 56)
      #vu8(48 69 2 33 0 162 78 188 14 194 36 189 103 174 57 124 190 111 163 123 49 37 173 189 52 137 26 190 45 124 115 86 146 25 22 223 230 2 32 52 246 235 99 116 115 27 187 175 196 146 79 184 176 189 205 218 73 69 109 114 76 218 230 23 141 135 1 76 181 61 140)
      #t
      ())
    #(541
      "special case hash"
      #vu8(49 48 53 51 54 50 56 53 53 54 56)
      #vu8(48 69 2 32 37 87 214 74 122 238 46 9 49 192 18 228 254 161 205 58 44 51 78 218 230 140 222 183 21 140 175 33 182 142 90 36 2 33 0 128 249 50 68 149 111 253 197 104 199 125 18 104 79 127 0 79 169 45 167 230 10 233 74 27 152 196 34 226 62 218 52)
      #t
      ())
    #(542
      "special case hash"
      #vu8(57 53 51 57 48 52 49 48 53)
      #vu8(48 70 2 33 0 196 242 236 203 182 162 67 80 200 70 100 80 185 214 27 32 126 227 89 224 55 179 220 237 180 42 63 46 109 214 174 181 2 33 0 205 156 57 74 101 208 170 50 46 57 30 183 107 42 26 104 127 134 32 168 138 222 243 160 30 184 228 251 5 182 71 122)
      #t
      ())
    #(543
      "special case hash"
      #vu8(57 55 56 56 52 56 48 51 57)
      #vu8(48 70 2 33 0 239 240 71 129 201 203 205 22 45 10 37 166 226 235 204 164 53 6 197 35 56 92 181 21 212 158 163 138 27 18 252 173 2 33 0 234 83 40 206 107 54 229 106 184 122 203 13 207 234 73 139 206 193 187 168 106 6 82 104 246 239 243 196 28 75 12 156)
      #t
      ())
    #(544
      "special case hash"
      #vu8(51 54 49 48 54 55 50 52 52 50)
      #vu8(48 70 2 33 0 245 139 78 49 16 166 75 241 181 219 151 99 158 224 229 169 200 223 164 157 197 155 103 152 145 245 32 253 240 88 76 135 2 33 0 211 39 1 174 119 117 17 98 76 31 138 187 240 43 36 139 4 231 169 235 39 147 143 82 79 62 136 40 186 64 22 74)
      #t
      ())
    #(545
      "special case hash"
      #vu8(49 48 53 52 50 52 48 55 48 53)
      #vu8(48 69 2 33 0 248 171 236 170 79 12 80 45 228 191 89 3 212 132 23 247 134 191 146 232 173 114 254 192 189 127 203 120 0 192 187 227 2 32 76 127 158 35 16 118 163 11 122 227 107 12 235 230 156 206 241 205 25 79 124 206 147 165 88 143 214 129 79 67 124 14)
      #t
      ())
    #(546
      "special case hash"
      #vu8(53 49 55 52 52 52 56 49 57 55)
      #vu8(48 68 2 32 93 91 56 189 55 173 73 139 34 39 166 51 38 138 140 202 135 154 92 124 148 164 228 22 189 10 97 77 9 230 6 210 2 32 18 184 214 100 234 153 145 6 46 203 184 52 229 132 0 226 92 70 0 122 248 79 96 7 215 241 104 84 67 38 154 254)
      #t
      ())
    #(547
      "special case hash"
      #vu8(49 57 54 55 53 54 49 50 53 49)
      #vu8(48 68 2 32 12 28 217 254 64 52 240 134 162 181 45 101 185 211 131 77 114 174 190 127 51 223 232 249 118 218 130 100 129 119 216 227 2 32 19 16 87 130 227 208 207 232 92 39 120 222 193 168 72 178 122 192 174 7 26 166 218 52 26 149 83 169 70 180 30 89)
      #t
      ())
    #(548
      "special case hash"
      #vu8(51 52 52 55 50 53 51 51 52 51)
      #vu8(48 69 2 33 0 174 121 53 251 150 255 36 107 123 93 86 98 135 13 27 165 135 176 61 110 19 96 186 244 121 136 181 192 44 204 26 91 2 32 95 0 195 35 39 32 131 120 45 74 89 242 223 214 94 73 222 6 147 98 112 22 144 14 247 230 20 40 5 102 100 179)
      #t
      ())
    #(549
      "special case hash"
      #vu8(51 54 56 50 54 52 51 49 56)
      #vu8(48 69 2 32 0 161 52 181 198 204 188 239 212 200 130 185 69 186 235 73 51 68 65 114 121 95 166 121 106 174 20 144 103 84 112 152 2 33 0 169 145 185 239 162 219 39 111 234 225 193 21 193 64 119 9 1 131 157 135 230 14 126 196 90 43 129 207 59 67 123 230)
      #t
      ())
    #(550
      "special case hash"
      #vu8(51 50 54 49 49 57 56 54 48 56)
      #vu8(48 69 2 32 46 71 33 54 58 211 153 44 19 158 90 28 38 57 93 44 45 119 120 36 170 36 253 224 117 224 215 56 17 113 48 157 2 33 0 139 240 131 182 187 231 30 207 242 43 174 208 135 213 167 126 174 175 114 107 241 74 206 44 3 253 110 55 186 108 38 242)
      #t
      ())
    #(551
      "special case hash"
      #vu8(57 54 55 56 55 56 49 48 57 52)
      #vu8(48 69 2 32 104 82 233 211 205 159 227 115 194 213 4 135 121 103 211 101 171 20 86 112 123 104 23 160 66 134 70 148 225 150 12 207 2 33 0 249 180 216 21 235 212 207 119 132 123 55 149 35 52 208 91 32 69 203 57 141 76 33 186 32 121 34 167 164 113 77 132)
      #t
      ())
    #(552
      "special case hash"
      #vu8(52 57 53 56 56 50 51 56 50 51)
      #vu8(48 68 2 32 24 138 140 86 72 220 121 234 206 21 140 248 134 198 43 84 104 240 95 217 95 3 167 99 92 91 76 49 240 154 244 197 2 32 54 54 26 11 87 26 0 198 205 94 104 108 203 252 250 112 60 79 151 228 137 56 52 109 12 16 63 220 118 220 88 103)
      #t
      ())
    #(553
      "special case hash"
      #vu8(56 50 52 54 51 55 56 51 55)
      #vu8(48 69 2 33 0 167 79 31 185 168 38 63 98 252 68 22 165 183 213 132 244 32 111 57 150 187 145 246 252 142 115 185 233 43 173 14 19 2 32 104 21 3 46 140 125 118 195 171 6 168 111 51 36 156 233 148 1 72 203 54 209 244 23 194 233 146 232 1 175 163 250)
      #t
      ())
    #(554
      "special case hash"
      #vu8(49 49 48 50 48 56 51 51 55 55 54)
      #vu8(48 69 2 32 7 36 72 101 183 47 243 126 98 227 20 111 13 193 70 130 186 221 113 151 121 145 53 240 176 10 222 118 113 116 43 254 2 33 0 242 127 61 220 113 36 177 181 133 121 87 58 131 86 80 231 168 186 213 238 185 110 157 162 21 205 123 249 162 160 57 237)
      #t
      ())
    #(555
      "special case hash"
      #vu8(49 51 51 56 55 49 54 52 56)
      #vu8(48 69 2 33 0 218 127 221 5 181 186 218 189 97 157 128 92 78 231 217 168 79 132 221 213 207 156 91 244 212 51 129 64 214 137 239 8 2 32 40 241 207 79 161 195 197 134 44 250 20 156 0 19 207 95 230 207 80 118 202 224 0 81 16 99 231 222 37 187 56 229)
      #t
      ())
    #(556
      "special case hash"
      #vu8(51 50 50 49 52 52 49 54 50)
      #vu8(48 70 2 33 0 211 2 124 101 111 109 79 223 216 237 226 32 147 227 195 3 176 19 60 52 13 97 94 119 86 246 37 58 234 146 114 56 2 33 0 246 81 15 159 55 27 49 6 141 104 191 238 170 114 14 185 187 220 128 64 20 95 207 136 212 224 181 141 224 119 125 42)
      #t
      ())
    #(557
      "special case hash"
      #vu8(49 48 54 56 54 54 53 53 53 52 54)
      #vu8(48 68 2 32 11 246 192 24 141 201 87 28 208 226 30 236 172 95 187 25 210 67 73 136 233 204 16 36 69 147 239 58 152 9 159 105 2 32 72 100 165 98 102 31 146 33 236 136 227 221 11 194 246 226 122 193 40 195 12 193 168 15 121 236 103 10 34 176 66 238)
      #t
      ())
    #(558
      "special case hash"
      #vu8(54 50 49 53 53 50 52 54)
      #vu8(48 69 2 33 0 174 69 150 64 213 209 23 155 228 122 71 250 83 142 22 217 77 222 165 88 94 122 36 72 4 165 23 66 198 134 68 58 2 32 108 142 48 229 48 166 52 250 232 11 60 235 6 41 120 179 158 219 225 151 119 224 162 69 83 182 136 134 24 31 216 151)
      #t
      ())
    #(559
      "special case hash"
      #vu8(55 48 51 48 56 49 56 55 55 52)
      #vu8(48 68 2 32 28 243 81 123 163 191 42 184 185 234 212 235 182 232 102 203 136 161 222 172 182 167 133 211 182 59 72 60 160 42 196 149 2 32 36 154 121 139 115 96 111 85 245 241 199 13 230 124 177 160 207 249 93 125 197 11 58 97 125 248 97 186 211 198 177 201)
      #t
      ())
    #(560
      "special case hash"
      #vu8(53 57 50 52 53 50 51 55 52 52)
      #vu8(48 69 2 33 0 230 155 82 56 38 94 163 93 119 228 221 23 34 136 216 206 161 152 16 161 2 146 97 125 89 118 81 157 197 117 124 184 2 32 75 3 197 188 71 232 38 189 178 115 40 171 211 141 48 86 215 116 118 178 19 15 61 246 236 72 145 175 8 186 30 41)
      #t
      ())
    #(561
      "special case hash"
      #vu8(49 52 57 53 53 56 54 54 50 49)
      #vu8(48 68 2 32 95 157 125 124 135 13 8 95 193 212 159 255 105 228 162 117 129 40 0 210 207 137 115 231 50 88 102 203 64 250 43 111 2 32 109 31 84 145 217 247 23 165 151 161 95 213 64 64 100 134 215 106 68 105 123 63 13 157 109 206 246 102 159 138 10 86)
      #t
      ())
    #(562
      "special case hash"
      #vu8(52 48 48 53 51 49 52 52 48 54)
      #vu8(48 68 2 32 10 125 91 25 89 247 29 249 248 23 20 110 228 155 213 200 155 67 30 121 147 226 253 236 171 104 88 149 125 166 133 174 2 32 15 138 173 45 37 70 144 189 193 63 52 164 254 196 74 2 253 116 90 66 45 240 92 203 181 70 53 168 184 107 150 9)
      #t
      ())
    #(563
      "special case hash"
      #vu8(51 48 57 54 52 53 55 53 49 50)
      #vu8(48 68 2 32 121 232 139 245 118 183 75 192 124 161 66 57 95 218 40 240 61 61 94 100 11 11 79 240 117 44 109 148 205 85 52 8 2 32 50 206 160 91 210 215 6 200 246 3 106 80 126 42 183 118 96 4 240 144 78 46 92 88 98 116 156 0 115 36 93 106)
      #t
      ())
    #(564
      "special case hash"
      #vu8(50 55 56 52 48 50 53 54 50 48)
      #vu8(48 69 2 33 0 157 84 224 55 160 2 18 179 119 188 136 116 121 139 141 160 128 86 75 189 247 224 117 145 184 97 40 88 9 208 20 136 2 32 24 180 229 87 102 122 130 189 149 150 95 7 6 248 26 41 36 63 189 216 105 104 167 235 235 67 6 157 179 177 140 127)
      #t
      ())
    #(565
      "special case hash"
      #vu8(50 54 49 56 55 56 55 52 49 56)
      #vu8(48 68 2 32 38 100 241 255 169 130 254 219 204 124 171 27 139 198 226 203 66 2 24 210 166 7 122 208 142 89 27 169 254 171 51 189 2 32 73 245 199 203 81 94 131 135 42 61 65 180 205 184 95 36 42 217 214 26 91 252 1 222 191 187 82 198 200 75 167 40)
      #t
      ())
    #(566
      "special case hash"
      #vu8(49 54 52 50 54 50 53 50 54 50)
      #vu8(48 69 2 32 88 39 81 131 68 132 79 214 167 222 115 203 176 166 190 253 234 123 19 210 222 228 71 83 23 240 241 143 252 129 82 75 2 33 0 176 163 52 177 244 183 116 165 162 137 245 83 34 77 40 109 35 158 248 169 9 41 237 45 145 66 62 2 78 183 250 102)
      #t
      ())
    #(567
      "special case hash"
      #vu8(54 56 50 52 49 56 57 52 51 54)
      #vu8(48 70 2 33 0 151 171 25 189 19 156 172 49 147 37 134 146 24 177 188 225 17 135 93 99 251 18 9 138 4 176 205 89 182 253 211 163 2 33 0 188 226 99 21 197 219 199 184 207 195 20 37 169 184 155 204 234 122 169 71 125 113 26 77 55 127 131 61 204 40 248 32)
      #t
      ())
    #(568
      "special case hash"
      #vu8(52 56 52 50 52 53 52 50 53)
      #vu8(48 68 2 32 82 198 131 20 78 68 17 154 226 1 55 73 212 150 78 246 117 9 39 143 109 56 186 134 154 220 250 105 151 14 18 61 2 32 52 121 145 1 103 64 143 69 189 164 32 166 38 236 156 78 199 17 193 39 75 224 146 25 139 65 135 192 24 181 98 202)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 188 117 232 75 200 81 118 163 5 89 219 132 62 95 187 54 40 82 97 32 218 233 34 125 224 23 147 74 177 5 38 192 236 203 108 48 240 120 26 203 107 112 54 238 109 210 185 183 215 124 150 50 71 38 110 67)
  :der-encode
  #t
  :tests
  '(#(569
      "k*G has a large x-coordinate"
      #vu8(77 115 103)
      #vu8(48 48 2 15 0 233 92 31 71 15 193 236 34 214 186 163 163 213 193 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 58)
      #t
      ())
    #(570
      "r too large"
      #vu8(77 115 103)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 255 255 255 255 255 255 255 255 255 254 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 58)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 11 254 250 105 212 151 15 119 226 89 9 155 1 187 184 105 36 142 72 89 237 32 195 213 13 216 48 129 225 244 126 184 47 16 247 17 102 129 106 210 165 51 179 65 136 63 156 221 136 86 124 15 169 178 49 46)
  :der-encode
  #t
  :tests
  '(#(571
      "r,s are large"
      #vu8(77 115 103)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 60 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 59)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 105 98 122 76 9 87 252 118 223 22 152 195 123 156 110 254 223 7 104 249 121 125 168 71 73 166 182 7 11 169 13 167 69 21 208 2 243 236 198 251 199 97 156 102 185 98 219 151 243 97 147 63 178 249 185 67)
  :der-encode
  #t
  :tests
  '(#(572
      "r and s^-1 have a large Hamming weight"
      #vu8(77 115 103)
      #vu8(48 60 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 2 28 61 80 82 105 27 141 200 157 235 173 54 4 102 242 163 158 130 232 174 42 239 183 124 60 146 173 124 209)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 101 20 161 208 170 143 127 81 110 254 229 82 208 148 143 108 68 202 162 245 184 72 153 16 117 60 116 24 225 38 168 170 221 33 63 111 56 226 123 22 185 47 214 169 208 27 16 236 109 177 15 42 231 226 76 49)
  :der-encode
  #t
  :tests
  '(#(573
      "r and s^-1 have a large Hamming weight"
      #vu8(77 115 103)
      #vu8(48 61 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 2 29 0 191 25 171 77 62 191 90 26 73 215 101 144 147 8 218 168 140 43 123 227 150 157 181 82 234 48 86 43)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 90 31 208 109 12 106 231 76 208 139 138 148 176 19 87 193 16 235 147 4 206 88 185 61 231 176 46 0 44 130 78 202 67 134 197 252 251 166 130 249 220 216 139 153 245 254 144 246 198 32 197 13 66 5 9 228)
  :der-encode
  #t
  :tests
  '(#(574
      "small r and s"
      #vu8(77 115 103)
      #vu8(48 6 2 1 3 2 1 1)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 153 194 115 55 4 4 101 60 118 140 93 99 142 146 9 232 30 187 3 225 50 163 102 154 60 35 200 199 192 104 224 87 44 9 169 104 234 164 185 39 129 254 10 167 48 48 153 179 116 185 194 250 93 160 88 52)
  :der-encode
  #t
  :tests
  '(#(575
      "small r and s"
      #vu8(77 115 103)
      #vu8(48 6 2 1 3 2 1 3)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 190 210 20 108 140 98 221 195 19 39 199 243 61 58 143 235 44 62 248 228 65 79 229 95 53 69 20 69 54 226 136 246 151 132 226 162 209 186 116 139 11 62 7 255 195 26 240 127 212 44 81 154 92 72 93 99)
  :der-encode
  #t
  :tests
  '(#(576
      "small r and s"
      #vu8(77 115 103)
      #vu8(48 6 2 1 3 2 1 4)
      #t
      ())
    #(577
      "r is larger than n"
      #vu8(77 115 103)
      #vu8(48 34 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 64 2 1 4)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 168 51 33 174 206 164 161 252 166 190 26 221 122 147 171 103 158 241 101 238 36 153 158 237 245 10 45 202 0 209 187 81 34 197 57 209 118 105 231 184 5 209 239 60 131 248 27 153 26 240 195 128 66 159 173 133)
  :der-encode
  #t
  :tests
  '(#(578
      "s is larger than n"
      #vu8(77 115 103)
      #vu8(48 34 2 1 3 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 111 0 196)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 72 174 160 180 203 203 235 163 17 215 217 10 58 104 195 175 50 217 170 211 234 158 204 183 87 53 153 166 221 94 32 33 189 144 50 40 226 212 111 170 157 210 148 160 121 63 129 173 53 47 68 142 62 59 93 220)
  :der-encode
  #t
  :tests
  '(#(579
      "small r and s^-1"
      #vu8(77 115 103)
      #vu8(48 35 2 2 1 0 2 29 0 201 147 38 76 153 50 100 201 147 38 76 153 50 100 17 210 229 91 50 20 168 214 117 40 129 42 85 171)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 59 17 113 58 127 215 170 81 107 162 82 154 210 138 196 206 155 109 220 13 155 244 190 95 210 53 184 28 19 146 119 183 114 82 124 210 232 87 210 18 64 47 128 215 243 194 55 228 115 5 9 1 47 171 151 198)
  :der-encode
  #t
  :tests
  '(#(580
      "smallish r and s^-1"
      #vu8(77 115 103)
      #vu8(48 39 2 7 45 155 77 52 121 82 204 2 28 62 133 213 100 116 181 197 95 190 134 96 132 66 168 75 43 240 147 183 215 95 83 164 114 80 225 199 12)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 123 27 242 177 31 67 247 111 98 50 112 73 154 50 84 80 168 147 53 144 192 158 19 43 131 20 112 51 16 148 133 210 162 133 10 160 237 69 126 141 231 3 152 38 94 162 124 190 162 165 60 195 169 93 185 152)
  :der-encode
  #t
  :tests
  '(#(581
      "100-bit r and small s^-1"
      #vu8(77 115 103)
      #vu8(48 45 2 13 16 51 230 126 55 179 43 68 85 128 191 78 251 2 28 2 253 2 253 2 253 2 253 2 253 2 253 2 253 0 67 164 253 45 163 23 36 115 8 199 77 198 184)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 56 36 60 244 229 72 70 96 86 68 132 212 151 239 42 254 82 143 40 253 168 195 105 125 16 117 10 119 181 200 122 27 48 144 229 146 240 71 209 186 68 184 243 186 30 192 118 253 142 129 21 198 253 103 31 34)
  :der-encode
  #t
  :tests
  '(#(582
      "small r and 100 bit s^-1"
      #vu8(77 115 103)
      #vu8(48 35 2 2 1 0 2 29 0 208 84 52 171 172 216 89 237 116 24 94 117 183 81 198 217 246 12 121 33 218 207 187 142 25 205 186 142)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 49 71 23 49 5 21 157 90 102 84 46 137 29 197 193 232 49 195 144 215 101 86 162 31 70 179 241 94 217 104 12 110 170 65 54 16 14 135 191 166 89 43 143 5 154 225 69 12 241 9 128 105 16 73 165 229)
  :der-encode
  #t
  :tests
  '(#(583
      "100-bit r and s^-1"
      #vu8(77 115 103)
      #vu8(48 46 2 13 6 37 34 187 211 236 190 124 57 233 62 124 36 2 29 0 208 84 52 171 172 216 89 237 116 24 94 117 183 81 198 217 246 12 121 33 218 207 187 142 25 205 186 142)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 118 21 45 57 223 98 203 215 99 25 222 125 53 189 177 163 153 75 175 79 92 165 252 152 78 149 2 28 177 179 163 128 98 46 187 210 102 65 62 240 186 21 209 33 175 197 210 213 27 167 151 157 162 156 64 7)
  :der-encode
  #t
  :tests
  '(#(584
      "r and s^-1 are close to n"
      #vu8(77 115 103)
      #vu8(48 61 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 41 189 2 28 85 85 85 85 85 85 85 85 85 85 85 85 85 85 7 139 160 61 165 106 6 159 13 193 201 116 14 20)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 142 125 64 68 208 174 206 140 129 79 210 228 165 64 214 206 20 227 233 36 152 164 246 210 118 1 112 224 231 237 176 184 231 33 87 180 38 130 120 122 67 247 134 50 181 188 141 92 160 132 176 141 221 116 41 2)
  :der-encode
  #t
  :tests
  '(#(585
      "s == 1"
      #vu8(77 115 103)
      #vu8(48 33 2 28 85 85 85 85 85 85 85 85 85 85 85 85 85 85 7 139 160 61 165 106 6 159 13 193 201 116 14 20 2 1 1)
      #t
      ())
    #(586
      "s == 0"
      #vu8(77 115 103)
      #vu8(48 33 2 28 85 85 85 85 85 85 85 85 85 85 85 85 85 85 7 139 160 61 165 106 6 159 13 193 201 116 14 20 2 1 0)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 134 238 245 152 4 11 199 206 183 207 7 240 238 114 228 233 71 220 18 0 35 191 85 44 11 72 65 112 191 250 99 56 82 230 198 226 164 29 97 207 34 58 134 182 236 252 246 130 204 168 195 135 148 146 95 77)
  :der-encode
  #t
  :tests
  '(#(587
      "point at infinity during verify"
      #vu8(77 115 103)
      #vu8(48 60 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 139 81 112 92 120 31 9 238 148 162 174 46 21 30 2 28 85 85 85 85 85 85 85 85 85 85 85 85 85 85 7 139 160 61 165 106 6 159 13 193 201 116 14 20)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 165 18 145 255 164 161 100 213 0 196 146 138 42 174 210 2 198 170 153 125 100 125 69 218 202 110 147 209 95 63 23 202 77 136 162 143 193 78 210 221 25 40 7 68 223 158 17 222 177 90 119 128 159 168 221 236)
  :der-encode
  #t
  :tests
  '(#(588
      "edge case for signature malleability"
      #vu8(77 115 103)
      #vu8(48 60 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 139 81 112 92 120 31 9 238 148 162 174 46 21 31 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 139 81 112 92 120 31 9 238 148 162 174 46 21 30)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 77 59 209 249 20 54 234 236 201 110 117 80 12 10 43 61 157 188 30 30 213 150 91 101 123 38 141 143 18 78 26 184 241 99 58 10 223 230 215 104 164 32 202 103 115 87 204 172 151 75 199 196 91 159 38 255)
  :der-encode
  #t
  :tests
  '(#(589
      "edge case for signature malleability"
      #vu8(77 115 103)
      #vu8(48 60 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 139 81 112 92 120 31 9 238 148 162 174 46 21 31 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 139 81 112 92 120 31 9 238 148 162 174 46 21 31)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 183 253 110 22 137 97 39 178 212 52 31 180 28 66 116 121 123 115 155 213 183 86 196 115 127 143 238 85 235 1 217 20 228 223 223 96 110 145 152 191 3 223 199 115 74 189 15 173 212 25 62 208 81 95 60 215)
  :der-encode
  #t
  :tests
  '(#(590
      "u1 == 1"
      #vu8(77 115 103)
      #vu8(48 60 2 28 85 85 85 85 85 85 85 85 85 85 85 85 85 85 7 139 160 61 165 106 6 159 13 193 201 116 14 20 2 28 11 4 31 136 77 100 140 195 69 228 96 0 120 235 121 7 8 204 173 87 109 74 190 60 148 58 163 40)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 22 31 233 107 172 31 21 30 5 101 167 178 195 192 137 215 157 245 210 152 231 202 72 150 79 221 134 87 76 98 71 219 212 31 35 90 20 151 54 18 46 150 230 115 80 84 218 197 140 35 64 49 21 63 184 47)
  :der-encode
  #t
  :tests
  '(#(591
      "u1 == n - 1"
      #vu8(77 115 103)
      #vu8(48 61 2 28 85 85 85 85 85 85 85 85 85 85 85 85 85 85 7 139 160 61 165 106 6 159 13 193 201 116 14 20 2 29 0 244 251 224 119 178 155 115 60 186 27 159 255 135 19 157 155 215 236 66 230 166 146 107 8 200 33 135 21)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 136 45 255 35 156 223 154 8 18 202 175 56 74 222 135 73 113 49 230 251 140 161 132 194 127 159 180 214 0 50 251 230 73 117 26 181 188 56 111 9 220 171 86 166 223 101 99 72 10 75 236 94 215 34 152 177)
  :der-encode
  #t
  :tests
  '(#(592
      "u2 == 1"
      #vu8(77 115 103)
      #vu8(48 60 2 28 85 85 85 85 85 85 85 85 85 85 85 85 85 85 7 139 160 61 165 106 6 159 13 193 201 116 14 20 2 28 85 85 85 85 85 85 85 85 85 85 85 85 85 85 7 139 160 61 165 106 6 159 13 193 201 116 14 20)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 205 143 150 58 22 148 232 50 65 167 23 47 120 43 33 23 134 188 71 179 28 229 202 214 171 200 101 193 147 16 213 144 160 158 20 108 8 254 68 61 247 110 194 46 169 90 98 169 12 122 206 241 18 126 77 113)
  :der-encode
  #t
  :tests
  '(#(593
      "u2 == n - 1"
      #vu8(77 115 103)
      #vu8(48 61 2 28 85 85 85 85 85 85 85 85 85 85 85 85 85 85 7 139 160 61 165 106 6 159 13 193 201 116 14 20 2 29 0 170 170 170 170 170 170 170 170 170 170 170 170 170 170 15 23 64 123 74 212 13 62 27 131 146 232 28 41)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 181 100 133 46 203 6 94 82 219 43 12 249 172 221 52 153 185 176 4 83 49 167 142 39 170 177 45 23 59 204 191 83 117 252 153 96 72 131 242 59 131 244 111 62 60 54 196 109 218 86 34 123 119 20 151 237)
  :der-encode
  #t
  :tests
  '(#(594
      "edge case for u1"
      #vu8(77 115 103)
      #vu8(48 61 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 29 0 174 86 181 45 111 33 132 65 23 76 32 0 40 77 226 25 152 191 132 155 220 87 5 151 196 80 253 54)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 198 120 15 229 46 72 216 144 169 236 224 212 237 162 171 154 215 193 140 191 169 253 116 114 21 252 44 209 68 99 212 23 184 177 83 131 41 10 18 204 61 95 26 93 36 223 38 7 191 115 219 198 230 29 13 200)
  :der-encode
  #t
  :tests
  '(#(595
      "edge case for u1"
      #vu8(77 115 103)
      #vu8(48 61 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 29 0 171 173 204 197 202 250 125 144 217 242 13 31 63 190 24 36 30 56 205 110 153 130 17 53 168 8 254 182)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 17 18 133 204 148 56 144 208 31 14 244 150 160 171 153 197 248 121 18 121 65 25 55 23 236 254 192 173 53 206 163 40 98 180 152 85 128 164 39 125 96 98 33 15 244 42 82 158 184 120 185 1 24 55 67 222)
  :der-encode
  #t
  :tests
  '(#(596
      "edge case for u1"
      #vu8(77 115 103)
      #vu8(48 61 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 29 0 171 112 81 215 228 139 159 133 46 37 140 190 222 31 38 174 220 46 134 44 169 246 60 115 20 198 171 19)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 167 12 247 117 237 12 60 107 201 126 124 67 232 85 198 53 208 181 148 1 30 89 223 18 168 226 142 225 72 218 17 59 1 69 70 150 219 224 102 192 54 128 85 0 10 146 173 16 24 241 246 242 204 248 162 107)
  :der-encode
  #t
  :tests
  '(#(597
      "edge case for u1"
      #vu8(77 115 103)
      #vu8(48 60 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 28 120 123 137 231 44 175 234 71 244 251 224 119 178 155 5 104 117 254 183 247 112 16 101 40 187 238 41 166)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 162 228 32 53 180 254 9 110 202 203 75 26 6 86 90 246 76 252 194 176 79 1 120 188 16 7 50 218 0 242 245 14 165 157 42 57 204 238 46 181 236 162 22 196 116 141 161 141 120 57 7 150 63 92 179 228)
  :der-encode
  #t
  :tests
  '(#(598
      "edge case for u1"
      #vu8(77 115 103)
      #vu8(48 61 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 29 0 184 158 114 202 254 164 127 79 190 7 123 41 183 51 35 86 91 103 19 185 128 144 226 164 168 216 110 213)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 243 120 150 63 94 240 137 59 95 137 213 143 115 233 245 222 105 40 67 99 123 141 159 48 26 119 83 116 245 62 134 39 180 45 45 109 84 12 14 35 141 74 188 149 118 183 242 2 169 119 116 226 238 158 88 166)
  :der-encode
  #t
  :tests
  '(#(599
      "edge case for u1"
      #vu8(77 115 103)
      #vu8(48 60 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 28 113 60 229 149 253 72 254 159 124 14 246 83 110 103 48 9 214 21 55 52 237 68 156 3 245 84 179 109)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 75 232 120 108 240 225 46 48 11 97 128 188 251 131 154 133 127 138 169 157 199 126 84 150 210 143 205 18 43 91 154 39 73 100 68 150 98 250 101 248 175 12 161 245 210 140 112 165 192 168 93 99 140 184 175 254)
  :der-encode
  #t
  :tests
  '(#(600
      "edge case for u1"
      #vu8(77 115 103)
      #vu8(48 60 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 28 44 175 234 71 244 251 224 119 178 155 115 60 186 27 119 67 41 123 45 232 28 169 57 141 114 236 61 245)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 158 93 175 27 254 162 140 224 57 168 185 90 8 161 51 80 52 221 76 184 254 98 171 92 128 131 173 39 254 165 75 214 47 44 246 186 123 226 187 40 35 247 62 187 59 179 31 163 207 102 56 193 30 206 232 187)
  :der-encode
  #t
  :tests
  '(#(601
      "edge case for u1"
      #vu8(77 115 103)
      #vu8(48 61 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 29 0 168 212 165 105 72 111 61 223 116 89 239 255 235 216 37 150 20 89 45 240 37 177 166 121 122 51 171 162)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 132 98 133 224 209 209 95 128 162 55 122 72 213 35 60 97 248 207 247 76 214 35 111 255 41 54 192 6 100 123 108 14 155 200 162 80 248 179 179 178 86 93 208 182 95 57 77 178 165 197 139 242 113 202 74 34)
  :der-encode
  #t
  :tests
  '(#(602
      "edge case for u1"
      #vu8(77 115 103)
      #vu8(48 60 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 28 81 169 74 210 144 222 123 190 232 179 223 255 215 177 52 137 71 249 107 162 55 134 35 173 152 11 45 7)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 236 193 186 91 161 214 133 193 196 161 81 70 20 91 55 111 46 66 149 12 56 118 242 22 9 136 166 138 181 133 66 186 247 250 84 47 186 183 124 199 201 63 242 137 105 227 124 240 243 255 191 231 254 2 220 81)
  :der-encode
  #t
  :tests
  '(#(603
      "edge case for u1"
      #vu8(77 115 103)
      #vu8(48 61 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 29 0 250 125 240 59 217 77 185 158 93 13 207 255 195 137 90 31 92 82 153 146 93 55 202 39 18 62 216 169)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 44 187 33 11 95 109 9 173 232 182 86 110 158 79 18 44 170 0 50 121 140 255 143 163 203 54 161 12 121 120 4 76 224 125 149 134 1 243 228 147 35 49 55 128 50 94 211 158 180 237 19 11 76 112 85 26)
  :der-encode
  #t
  :tests
  '(#(604
      "edge case for u1"
      #vu8(77 115 103)
      #vu8(48 61 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 29 0 213 184 40 235 242 69 207 194 151 18 198 95 111 15 30 168 222 115 187 53 94 233 178 220 56 145 106 168)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 117 65 8 187 97 51 54 219 152 134 203 169 15 94 74 158 78 253 38 202 214 3 255 101 1 100 53 13 227 53 235 71 58 165 193 158 157 40 211 16 8 121 217 12 115 62 15 132 54 254 245 154 90 250 16 22)
  :der-encode
  #t
  :tests
  '(#(605
      "edge case for u2"
      #vu8(77 115 103)
      #vu8(48 60 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 178 54 74 232 80 20 177 73 184 108 116 30 184 190)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 39 60 49 28 197 206 116 209 208 27 1 113 136 71 45 224 75 56 183 45 52 171 250 230 38 102 121 180 236 100 173 203 60 165 36 124 245 152 169 203 102 204 34 231 158 49 241 102 28 120 28 24 113 252 193 163)
  :der-encode
  #t
  :tests
  '(#(606
      "edge case for u2"
      #vu8(77 115 103)
      #vu8(48 61 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 29 0 133 95 91 45 200 228 110 196 40 165 147 247 50 25 207 101 218 231 147 232 52 110 48 204 55 1 48 156)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 189 83 179 181 44 217 19 78 145 226 249 11 165 0 131 192 7 218 167 207 245 205 171 228 32 142 193 184 212 177 20 189 205 63 89 154 237 222 118 198 234 105 147 209 213 120 216 250 249 133 29 19 109 76 170 79)
  :der-encode
  #t
  :tests
  '(#(607
      "edge case for u2"
      #vu8(77 115 103)
      #vu8(48 60 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 28 45 181 246 26 234 129 114 118 175 32 100 225 4 199 163 14 50 3 76 181 38 221 10 172 250 86 86 111)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 1 76 191 134 158 212 83 76 217 211 47 197 187 128 109 93 250 97 170 211 232 30 221 69 2 197 148 133 148 120 37 123 94 38 119 15 123 198 247 224 132 212 126 29 124 65 64 184 54 52 78 95 232 76 6 148)
  :der-encode
  #t
  :tests
  '(#(608
      "edge case for u2"
      #vu8(77 115 103)
      #vu8(48 61 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 29 0 132 166 199 81 62 95 72 192 127 255 255 255 255 255 135 19 243 203 161 41 62 79 62 149 89 127 230 189)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 3 198 216 116 5 224 129 172 45 201 24 138 254 217 158 184 127 19 189 123 128 231 54 63 210 26 118 146 160 146 184 184 53 68 147 226 68 71 54 169 199 139 243 86 252 223 7 132 145 32 152 106 251 152 250 3)
  :der-encode
  #t
  :tests
  '(#(609
      "edge case for u2"
      #vu8(77 115 103)
      #vu8(48 60 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 28 108 117 19 229 244 140 7 255 255 255 255 255 255 255 157 33 253 27 49 84 76 177 60 168 106 117 178 94)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 35 166 146 239 235 239 42 192 246 150 208 249 82 219 212 53 164 64 42 173 46 220 50 98 193 158 12 47 112 82 120 133 154 236 124 19 179 255 102 208 78 162 38 199 222 46 221 110 105 9 155 157 26 14 75 201)
  :der-encode
  #t
  :tests
  '(#(610
      "edge case for u2"
      #vu8(77 115 103)
      #vu8(48 61 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 29 0 216 234 39 203 233 24 15 255 255 255 255 255 255 255 58 67 250 54 98 168 153 98 121 80 212 235 100 188)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 178 252 243 246 73 205 215 248 1 42 193 210 36 63 7 202 15 248 254 117 201 245 155 190 127 52 7 230 156 105 164 111 223 22 23 75 176 229 156 227 215 18 156 250 253 116 230 218 205 179 219 190 109 119 41 67)
  :der-encode
  #t
  :tests
  '(#(611
      "edge case for u2"
      #vu8(77 115 103)
      #vu8(48 60 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 28 62 95 72 192 127 255 255 255 255 255 255 255 255 255 199 36 150 140 14 207 158 215 131 116 74 115 55 179)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 33 182 140 43 37 18 2 146 231 240 97 109 104 38 15 192 243 254 159 29 255 15 203 136 201 240 19 134 7 173 164 246 102 154 28 82 230 132 17 60 234 253 79 73 204 17 159 170 140 203 179 131 78 152 83 185)
  :der-encode
  #t
  :tests
  '(#(612
      "edge case for u2"
      #vu8(77 115 103)
      #vu8(48 61 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 29 0 191 255 255 255 255 255 255 255 255 255 255 255 255 255 61 135 187 68 200 51 187 56 77 15 34 76 205 222)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 164 211 102 157 155 121 122 126 43 7 234 142 137 172 47 11 193 170 145 79 120 142 147 186 188 196 241 93 70 178 108 0 218 216 220 81 98 189 234 174 194 163 138 100 147 3 187 218 252 2 181 168 174 138 191 29)
  :der-encode
  #t
  :tests
  '(#(613
      "edge case for u2"
      #vu8(77 115 103)
      #vu8(48 60 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 100 108 149 208 160 41 98 147 112 216 232 61 113 127)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 53 211 29 5 70 217 134 33 230 41 239 128 147 100 230 31 6 157 82 9 235 7 223 2 172 160 174 217 173 231 88 208 153 130 150 211 173 173 241 178 7 96 129 167 135 165 46 79 45 100 124 179 240 111 249 174)
  :der-encode
  #t
  :tests
  '(#(614
      "edge case for u2"
      #vu8(77 115 103)
      #vu8(48 60 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 28 63 255 255 255 255 255 255 255 255 255 255 255 255 255 139 81 112 92 120 31 9 238 148 162 174 46 21 32)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 178 67 205 228 50 96 165 153 96 12 227 39 56 147 105 238 33 45 97 190 134 3 166 170 157 12 192 235 176 102 165 205 62 135 123 117 244 94 248 150 153 103 60 93 58 123 231 56 93 233 147 88 60 233 178 13)
  :der-encode
  #t
  :tests
  '(#(615
      "edge case for u2"
      #vu8(77 115 103)
      #vu8(48 61 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 29 0 150 218 251 13 117 64 185 59 87 144 50 112 130 99 92 216 137 94 30 121 157 93 25 249 43 89 64 86)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 192 225 214 238 196 9 50 55 75 223 208 131 48 146 57 111 137 139 72 165 88 214 114 252 234 151 219 119 191 72 184 214 62 150 24 222 33 250 43 216 31 218 117 82 52 10 141 0 254 166 243 63 71 133 127 9)
  :der-encode
  #t
  :tests
  '(#(616
      "point duplication during verification"
      #vu8(77 115 103)
      #vu8(48 61 2 29 0 196 69 3 218 232 93 213 33 7 128 240 41 40 179 217 39 23 28 87 143 134 3 209 107 36 6 99 199 2 28 35 197 187 251 2 93 13 17 188 151 221 4 4 22 252 195 35 36 204 143 89 54 237 136 218 45 194 83)
      #t
      ("PointDuplication"))))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 192 225 214 238 196 9 50 55 75 223 208 131 48 146 57 111 137 139 72 165 88 214 114 252 234 151 219 119 64 183 71 41 193 105 231 33 222 5 212 39 224 37 138 172 203 245 114 255 1 89 12 192 184 122 128 248)
  :der-encode
  #t
  :tests
  '(#(617
      "duplication bug"
      #vu8(77 115 103)
      #vu8(48 61 2 29 0 196 69 3 218 232 93 213 33 7 128 240 41 40 179 217 39 23 28 87 143 134 3 209 107 36 6 99 199 2 28 35 197 187 251 2 93 13 17 188 151 221 4 4 22 252 195 35 36 204 143 89 54 237 136 218 45 194 83)
      #f
      ("PointDuplication"))))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 49 64 101 32 53 155 31 183 20 185 4 42 130 26 149 142 66 54 57 239 124 77 70 59 51 36 10 141 154 129 61 57 6 195 59 7 69 22 148 181 138 230 134 40 152 180 236 218 211 234 62 9 84 162 122 177)
  :der-encode
  #t
  :tests
  '(#(618
      "comparison with point at infinity "
      #vu8(77 115 103)
      #vu8(48 60 2 28 85 85 85 85 85 85 85 85 85 85 85 85 85 85 7 139 160 61 165 106 6 159 13 193 201 116 14 20 2 28 51 51 51 51 51 51 51 51 51 51 51 51 51 51 4 134 249 190 150 114 208 197 213 13 223 69 162 12)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 83 136 53 56 216 102 9 33 122 77 156 39 153 46 43 215 4 164 187 18 251 145 37 60 212 244 150 250 0 179 47 58 45 21 58 82 187 87 118 80 205 241 183 58 52 5 53 199 231 61 235 89 154 169 80 136)
  :der-encode
  #t
  :tests
  '(#(619
      "extreme value for k and edgecase s"
      #vu8(77 115 103)
      #vu8(48 60 2 28 112 106 70 220 118 220 183 103 152 230 14 109 137 71 71 136 209 109 193 128 50 210 104 253 26 112 79 166 2 28 85 85 85 85 85 85 85 85 85 85 85 85 85 85 7 139 160 61 165 106 6 159 13 193 201 116 14 20)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 85 104 19 144 0 248 207 100 150 66 142 82 79 16 92 176 68 126 228 23 171 10 29 132 44 131 30 115 237 4 101 193 198 230 35 195 172 198 163 52 155 180 26 212 27 116 28 206 70 13 110 114 208 8 196 125)
  :der-encode
  #t
  :tests
  '(#(620
      "extreme value for k and s^-1"
      #vu8(77 115 103)
      #vu8(48 61 2 28 112 106 70 220 118 220 183 103 152 230 14 109 137 71 71 136 209 109 193 128 50 210 104 253 26 112 79 166 2 29 0 219 109 182 219 109 182 219 109 182 219 109 182 219 108 238 212 192 158 132 199 126 189 145 22 225 115 145 235)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 104 130 4 8 165 221 16 204 66 61 96 239 187 91 109 122 171 50 109 201 94 64 3 15 17 138 213 155 178 169 47 100 159 195 149 144 78 168 60 28 119 241 238 151 37 162 211 226 14 226 190 209 46 84 179 230)
  :der-encode
  #t
  :tests
  '(#(621
      "extreme value for k and s^-1"
      #vu8(77 115 103)
      #vu8(48 60 2 28 112 106 70 220 118 220 183 103 152 230 14 109 137 71 71 136 209 109 193 128 50 210 104 253 26 112 79 166 2 28 51 51 51 51 51 51 51 51 51 51 51 51 51 51 4 134 249 190 150 114 208 197 213 13 223 69 162 12)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 100 214 52 74 3 232 133 143 72 40 131 201 207 101 51 100 193 202 21 169 180 99 140 61 72 84 235 83 66 7 2 38 180 234 85 178 39 229 64 223 182 172 211 181 111 216 41 211 75 227 16 165 240 181 116 37)
  :der-encode
  #t
  :tests
  '(#(622
      "extreme value for k and s^-1"
      #vu8(77 115 103)
      #vu8(48 61 2 28 112 106 70 220 118 220 183 103 152 230 14 109 137 71 71 136 209 109 193 128 50 210 104 253 26 112 79 166 2 29 0 204 204 204 204 204 204 204 204 204 204 204 204 204 204 18 27 230 250 89 203 67 23 84 55 125 22 136 49)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 147 162 6 61 194 6 200 194 119 230 121 32 178 16 44 250 91 71 232 98 237 112 248 100 238 107 140 182 193 99 56 142 99 100 113 21 227 112 146 206 160 67 196 94 9 248 254 198 236 220 153 182 251 199 108 228)
  :der-encode
  #t
  :tests
  '(#(623
      "extreme value for k and s^-1"
      #vu8(77 115 103)
      #vu8(48 60 2 28 112 106 70 220 118 220 183 103 152 230 14 109 137 71 71 136 209 109 193 128 50 210 104 253 26 112 79 166 2 28 36 146 73 36 146 73 36 146 73 36 146 73 36 146 39 206 32 26 107 118 149 31 152 46 122 232 152 82)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 173 42 25 110 106 161 176 51 79 195 203 215 83 60 35 127 150 222 85 124 236 188 185 99 0 27 115 21 192 96 96 190 162 170 221 159 199 10 152 173 30 16 191 238 92 52 178 154 106 207 166 158 112 141 28 124)
  :der-encode
  #t
  :tests
  '(#(624
      "extreme value for k"
      #vu8(77 115 103)
      #vu8(48 60 2 28 112 106 70 220 118 220 183 103 152 230 14 109 137 71 71 136 209 109 193 128 50 210 104 253 26 112 79 166 2 28 14 177 14 90 185 95 172 222 212 6 16 41 214 58 70 244 111 18 148 116 17 242 234 86 26 89 32 87)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 1 156 176 195 125 189 55 106 20 233 233 67 135 103 48 126 143 108 242 231 150 137 181 130 136 47 52 125 2 177 20 104 203 26 119 130 86 158 72 183 247 46 72 47 95 192 218 114 147 136 228 180 121 220 118 181)
  :der-encode
  #t
  :tests
  '(#(625
      "extreme value for k and edgecase s"
      #vu8(77 115 103)
      #vu8(48 61 2 29 0 183 14 12 189 107 180 191 127 50 19 144 185 74 3 193 211 86 194 17 34 52 50 128 214 17 92 29 33 2 28 85 85 85 85 85 85 85 85 85 85 85 85 85 85 7 139 160 61 165 106 6 159 13 193 201 116 14 20)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 251 209 212 239 242 28 117 47 100 138 194 198 142 58 169 191 228 40 33 194 202 68 165 115 128 237 96 238 162 71 217 83 212 89 176 73 21 120 59 105 251 67 22 167 189 127 24 90 136 230 181 1 60 248 136 250)
  :der-encode
  #t
  :tests
  '(#(626
      "extreme value for k and s^-1"
      #vu8(77 115 103)
      #vu8(48 62 2 29 0 183 14 12 189 107 180 191 127 50 19 144 185 74 3 193 211 86 194 17 34 52 50 128 214 17 92 29 33 2 29 0 219 109 182 219 109 182 219 109 182 219 109 182 219 108 238 212 192 158 132 199 126 189 145 22 225 115 145 235)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 10 48 22 70 103 185 243 221 133 69 137 254 98 49 0 14 40 119 235 153 140 75 103 162 214 222 143 61 191 27 36 127 192 170 173 93 235 209 198 123 154 43 238 38 179 28 220 79 105 243 188 113 207 69 156 43)
  :der-encode
  #t
  :tests
  '(#(627
      "extreme value for k and s^-1"
      #vu8(77 115 103)
      #vu8(48 61 2 29 0 183 14 12 189 107 180 191 127 50 19 144 185 74 3 193 211 86 194 17 34 52 50 128 214 17 92 29 33 2 28 51 51 51 51 51 51 51 51 51 51 51 51 51 51 4 134 249 190 150 114 208 197 213 13 223 69 162 12)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 81 38 255 172 180 149 1 104 164 32 221 71 156 225 178 101 134 225 163 19 192 69 70 251 217 198 15 233 78 7 74 179 38 239 206 250 209 145 38 65 117 163 88 144 159 234 31 221 140 200 11 32 155 167 50 27)
  :der-encode
  #t
  :tests
  '(#(628
      "extreme value for k and s^-1"
      #vu8(77 115 103)
      #vu8(48 62 2 29 0 183 14 12 189 107 180 191 127 50 19 144 185 74 3 193 211 86 194 17 34 52 50 128 214 17 92 29 33 2 29 0 204 204 204 204 204 204 204 204 204 204 204 204 204 204 18 27 230 250 89 203 67 23 84 55 125 22 136 49)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 145 178 93 217 161 37 154 116 46 93 142 144 154 192 153 131 104 92 130 163 228 205 185 24 88 230 206 15 187 120 89 158 202 197 17 103 36 233 203 11 122 174 181 173 69 176 152 216 197 159 37 103 221 27 18 152)
  :der-encode
  #t
  :tests
  '(#(629
      "extreme value for k and s^-1"
      #vu8(77 115 103)
      #vu8(48 61 2 29 0 183 14 12 189 107 180 191 127 50 19 144 185 74 3 193 211 86 194 17 34 52 50 128 214 17 92 29 33 2 28 36 146 73 36 146 73 36 146 73 36 146 73 36 146 39 206 32 26 107 118 149 31 152 46 122 232 152 82)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 91 195 74 60 82 164 251 217 14 185 10 174 164 17 113 238 3 126 75 40 17 186 22 139 1 177 61 113 133 42 23 194 36 61 81 122 140 56 204 84 227 158 79 121 131 197 3 61 78 202 194 101 164 75 119 60)
  :der-encode
  #t
  :tests
  '(#(630
      "extreme value for k"
      #vu8(77 115 103)
      #vu8(48 61 2 29 0 183 14 12 189 107 180 191 127 50 19 144 185 74 3 193 211 86 194 17 34 52 50 128 214 17 92 29 33 2 28 14 177 14 90 185 95 172 222 212 6 16 41 214 58 70 244 111 18 148 116 17 242 234 86 26 89 32 87)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 183 14 12 189 107 180 191 127 50 19 144 185 74 3 193 211 86 194 17 34 52 50 128 214 17 92 29 33 189 55 99 136 181 247 35 251 76 34 223 230 205 67 117 160 90 7 71 100 68 213 129 153 133 0 126 52)
  :der-encode
  #t
  :tests
  '(#(631
      "testing point duplication"
      #vu8(77 115 103)
      #vu8(48 60 2 28 11 4 31 136 77 100 140 195 69 228 96 0 120 235 121 7 8 204 173 87 109 74 190 60 148 58 163 40 2 28 36 146 73 36 146 73 36 146 73 36 146 73 36 146 39 206 32 26 107 118 149 31 152 46 122 232 152 81)
      #f
      ())
    #(632
      "testing point duplication"
      #vu8(77 115 103)
      #vu8(48 61 2 29 0 244 251 224 119 178 155 115 60 186 27 159 255 135 19 157 155 215 236 66 230 166 146 107 8 200 33 135 21 2 28 36 146 73 36 146 73 36 146 73 36 146 73 36 146 39 206 32 26 107 118 149 31 152 46 122 232 152 81)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 183 14 12 189 107 180 191 127 50 19 144 185 74 3 193 211 86 194 17 34 52 50 128 214 17 92 29 33 66 200 156 119 74 8 220 4 179 221 32 25 50 188 138 94 165 248 184 155 187 42 126 102 122 255 129 205)
  :der-encode
  #t
  :tests
  '(#(633
      "testing point duplication"
      #vu8(77 115 103)
      #vu8(48 60 2 28 11 4 31 136 77 100 140 195 69 228 96 0 120 235 121 7 8 204 173 87 109 74 190 60 148 58 163 40 2 28 36 146 73 36 146 73 36 146 73 36 146 73 36 146 39 206 32 26 107 118 149 31 152 46 122 232 152 81)
      #f
      ())
    #(634
      "testing point duplication"
      #vu8(77 115 103)
      #vu8(48 61 2 29 0 244 251 224 119 178 155 115 60 186 27 159 255 135 19 157 155 215 236 66 230 166 146 107 8 200 33 135 21 2 28 36 146 73 36 146 73 36 146 73 36 146 73 36 146 39 206 32 26 107 118 149 31 152 46 122 232 152 81)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 215 5 209 111 128 152 126 45 155 26 105 87 210 156 226 47 235 247 209 15 165 21 21 49 130 65 92 131 97 186 172 164 177 252 16 94 229 206 128 213 20 236 18 56 190 174 32 55 166 248 54 37 89 54 32 212 96 129 158 134 130 22 9 38)
  :der-encode
  #t
  :tests
  '(#(635
      "k*G has a large x-coordinate"
      #vu8(84 101 115 116)
      #vu8(48 53 2 16 67 25 5 83 88 232 97 123 12 70 53 61 3 156 218 171 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 78)
      #t
      ())
    #(636
      "r too large"
      #vu8(84 101 115 116)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 252 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 78)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 60 216 210 248 29 105 83 176 132 76 9 215 181 96 213 39 205 46 246 112 86 137 62 173 175 165 44 133 1 56 125 89 238 65 253 180 209 4 2 206 122 12 94 59 116 122 223 163 164 144 182 42 107 119 25 6 137 3 72 92 11 182 220 45)
  :der-encode
  #t
  :tests
  '(#(637
      "r,s are large"
      #vu8(84 101 115 116)
      #vu8(48 70 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 79 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 78)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 130 64 205 129 237 217 28 182 147 97 51 80 140 57 21 16 14 129 243 50 196 84 93 65 24 155 72 17 150 133 19 120 224 91 6 231 45 74 27 255 128 234 93 181 20 170 47 147 234 109 214 217 192 174 39 183 131 125 196 50 249 206 137 217)
  :der-encode
  #t
  :tests
  '(#(638
      "r and s^-1 have a large Hamming weight"
      #vu8(84 101 115 116)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 33 0 144 145 53 189 182 121 146 134 23 15 94 173 45 228 246 81 20 83 254 80 145 79 61 242 222 84 163 99 131 223 141 212)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 176 98 148 115 86 116 139 15 193 127 23 4 198 90 161 220 166 225 191 230 119 151 86 250 97 109 145 234 173 19 223 44 11 56 193 127 61 6 114 231 64 156 252 89 146 169 159 255 18 184 74 79 132 50 41 59 67 17 19 241 178 251 87 157)
  :der-encode
  #t
  :tests
  '(#(639
      "r and s^-1 have a large Hamming weight"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 39 180 87 124 160 9 55 111 113 48 63 213 221 34 125 206 245 222 183 115 173 95 90 132 54 6 68 102 156 162 73 165)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 74 3 239 159 146 235 38 140 175 166 1 7 36 137 165 99 128 250 13 196 49 113 215 113 40 19 179 161 154 30 181 229 62 33 62 40 166 8 206 154 47 74 23 253 131 12 102 84 1 138 121 179 224 38 61 145 168 186 144 98 45 246 242 240)
  :der-encode
  #t
  :tests
  '(#(640
      "small r and s"
      #vu8(84 101 115 116)
      #vu8(48 6 2 1 5 2 1 1)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 9 17 148 193 203 161 127 52 226 134 180 131 55 1 96 106 65 206 242 97 119 173 168 133 11 96 30 161 248 89 231 1 39 36 47 206 199 8 130 135 88 64 60 226 254 80 25 131 167 152 78 98 9 244 214 185 93 185 173 119 118 127 85 235)
  :der-encode
  #t
  :tests
  '(#(641
      "small r and s"
      #vu8(84 101 115 116)
      #vu8(48 6 2 1 5 2 1 3)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 16 60 110 204 239 245 158 113 234 143 86 254 227 164 178 177 72 232 28 43 219 221 57 193 149 129 44 150 220 251 65 167 35 3 161 147 220 89 27 225 80 184 131 215 112 236 81 235 180 235 206 139 9 4 44 46 203 22 196 72 216 229 123 245)
  :der-encode
  #t
  :tests
  '(#(642
      "small r and s"
      #vu8(84 101 115 116)
      #vu8(48 6 2 1 5 2 1 5)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 59 102 184 41 254 96 70 56 188 178 191 232 194 34 40 190 103 57 12 32 17 27 210 180 81 70 137 39 232 127 182 234 188 142 89 192 9 54 23 88 178 116 186 44 173 54 181 143 222 72 90 62 208 157 173 231 103 18 250 158 156 74 194 18)
  :der-encode
  #t
  :tests
  '(#(643
      "small r and s"
      #vu8(84 101 115 116)
      #vu8(48 6 2 1 5 2 1 6)
      #t
      ())
    #(644
      "r is larger than n"
      #vu8(84 101 115 116)
      #vu8(48 38 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 37 86 2 1 6)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 79 242 246 194 78 74 51 205 113 192 159 220 188 116 166 35 57 97 184 116 184 200 224 235 148 88 32 146 203 197 12 48 132 250 149 71 175 218 92 102 51 95 63 147 125 76 121 175 161 32 72 107 83 65 57 213 154 232 45 97 234 210 100 32)
  :der-encode
  #t
  :tests
  '(#(645
      "s is larger than n"
      #vu8(84 101 115 116)
      #vu8(48 38 2 1 5 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 117 251 216)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 132 185 89 8 11 179 8 89 205 83 194 251 151 60 241 77 96 205 170 142 224 5 135 136 155 91 198 87 172 88 129 117 160 44 229 193 229 60 177 150 17 60 120 180 203 141 199 211 96 229 234 120 80 176 246 101 11 12 69 175 44 60 215 202)
  :der-encode
  #t
  :tests
  '(#(646
      "small r and s^-1"
      #vu8(84 101 115 116)
      #vu8(48 39 2 2 1 0 2 33 0 143 30 60 120 98 197 139 22 187 118 237 219 183 110 221 187 81 106 244 246 63 45 116 215 110 13 40 201 187 117 234 136)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 223 64 131 189 110 203 218 90 119 174 87 142 93 131 95 167 247 74 7 235 185 30 5 112 225 255 50 165 99 53 78 153 37 175 128 176 154 22 125 158 246 71 223 40 226 217 172 208 212 188 79 45 238 197 114 56 24 237 175 144 113 227 17 248)
  :der-encode
  #t
  :tests
  '(#(647
      "smallish r and s^-1"
      #vu8(84 101 115 116)
      #vu8(48 44 2 7 45 155 77 52 121 82 214 2 33 0 239 48 67 231 50 149 129 219 179 151 68 151 113 10 177 21 5 238 28 135 255 144 123 238 186 221 25 90 15 254 109 122)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 194 86 154 60 155 248 193 131 140 168 33 247 186 111 0 12 200 103 157 39 143 55 54 180 20 163 74 124 149 106 3 119 3 135 234 133 188 79 40 128 75 74 145 201 183 214 91 198 67 76 151 88 6 121 90 183 212 65 164 233 104 58 235 9)
  :der-encode
  #t
  :tests
  '(#(648
      "100-bit r and small s^-1"
      #vu8(84 101 115 116)
      #vu8(48 50 2 13 16 51 230 126 55 179 43 68 85 128 191 78 255 2 33 0 139 116 139 116 0 0 0 0 139 116 139 116 139 116 139 116 102 231 105 173 74 22 211 220 216 113 41 184 233 29 27 77)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 74 159 125 162 166 195 89 161 101 64 194 113 119 74 107 241 197 134 53 124 151 130 86 244 74 100 150 216 6 112 150 138 196 150 231 58 68 86 63 141 86 251 215 187 158 78 58 227 4 200 111 44 80 142 183 119 176 57 36 117 91 235 64 212)
  :der-encode
  #t
  :tests
  '(#(649
      "small r and 100 bit s^-1"
      #vu8(84 101 115 116)
      #vu8(48 39 2 2 1 0 2 33 0 239 159 107 164 217 124 9 208 49 120 250 32 180 170 173 131 190 60 249 203 130 74 135 159 236 50 112 252 75 129 239 91)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 135 65 70 67 43 60 210 201 226 98 4 192 163 65 54 153 96 103 212 102 221 228 145 122 143 242 58 142 149 202 16 107 112 155 61 80 151 110 248 179 133 168 19 188 53 243 162 7 16 189 198 237 212 101 230 244 58 196 134 103 3 166 96 140)
  :der-encode
  #t
  :tests
  '(#(650
      "100-bit r and s^-1"
      #vu8(84 101 115 116)
      #vu8(48 50 2 13 6 37 34 187 211 236 190 124 57 233 62 124 37 2 33 0 239 159 107 164 217 124 9 208 49 120 250 32 180 170 173 131 190 60 249 203 130 74 135 159 236 50 112 252 75 129 239 91)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 122 115 109 142 50 106 156 166 43 190 37 163 78 164 227 99 59 73 154 150 175 167 170 163 252 243 253 136 248 224 126 222 179 228 88 121 216 98 43 147 232 24 68 58 104 110 134 158 237 167 191 154 228 106 163 234 252 196 138 89 52 134 70 39)
  :der-encode
  #t
  :tests
  '(#(651
      "r and s^-1 are close to n"
      #vu8(84 101 115 116)
      #vu8(48 69 2 33 0 255 255 255 255 0 0 0 0 255 255 255 255 255 255 255 255 188 230 250 173 167 23 158 132 243 185 202 194 252 99 36 213 2 32 85 85 85 85 0 0 0 0 85 85 85 85 85 85 85 85 62 247 168 228 141 7 223 129 166 147 67 150 84 33 12 112)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 232 77 155 35 46 151 26 67 56 38 48 249 151 37 228 35 236 30 203 65 229 81 114 233 198 151 72 160 63 13 89 136 97 139 21 180 39 173 131 54 59 208 65 255 117 250 201 142 242 238 146 55 20 231 209 223 227 23 83 121 60 117 136 212)
  :der-encode
  #t
  :tests
  '(#(652
      "s == 1"
      #vu8(84 101 115 116)
      #vu8(48 37 2 32 85 85 85 85 0 0 0 0 85 85 85 85 85 85 85 85 62 247 168 228 141 7 223 129 166 147 67 150 84 33 12 112 2 1 1)
      #t
      ())
    #(653
      "s == 0"
      #vu8(84 101 115 116)
      #vu8(48 37 2 32 85 85 85 85 0 0 0 0 85 85 85 85 85 85 85 85 62 247 168 228 141 7 223 129 166 147 67 150 84 33 12 112 2 1 0)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 2 3 115 111 203 25 139 21 216 215 160 200 15 102 221 221 21 37 146 64 170 120 208 138 174 103 196 103 222 4 80 52 52 56 52 56 213 4 30 169 163 135 238 142 77 78 132 180 71 27 22 12 107 207 37 104 176 114 248 242 14 135 169 150)
  :der-encode
  #t
  :tests
  '(#(654
      "point at infinity during verify"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 128 0 0 0 127 255 255 255 255 255 255 255 222 115 125 86 211 139 207 66 121 220 229 97 126 49 146 168 2 32 85 85 85 85 0 0 0 0 85 85 85 85 85 85 85 85 62 247 168 228 141 7 223 129 166 147 67 150 84 33 12 112)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 120 216 68 220 127 22 183 59 31 42 57 115 13 165 216 205 153 254 46 112 161 132 130 56 78 55 220 210 191 234 2 225 237 101 114 224 30 183 168 209 19 208 44 102 108 69 239 34 211 185 166 166 222 169 154 164 58 129 131 194 110 117 211 54)
  :der-encode
  #t
  :tests
  '(#(655
      "edge case for signature malleability"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 128 0 0 0 127 255 255 255 255 255 255 255 222 115 125 86 211 139 207 66 121 220 229 97 126 49 146 169 2 32 127 255 255 255 128 0 0 0 127 255 255 255 255 255 255 255 222 115 125 86 211 139 207 66 121 220 229 97 126 49 146 168)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 222 198 200 37 125 222 148 17 14 172 200 192 157 46 87 137 204 91 235 129 169 88 176 43 77 98 218 149 153 167 64 20 102 250 225 97 65 116 190 99 151 11 131 246 82 68 33 6 123 6 221 111 78 156 86 186 202 78 52 79 221 105 15 29)
  :der-encode
  #t
  :tests
  '(#(656
      "edge case for signature malleability"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 128 0 0 0 127 255 255 255 255 255 255 255 222 115 125 86 211 139 207 66 121 220 229 97 126 49 146 169 2 32 127 255 255 255 128 0 0 0 127 255 255 255 255 255 255 255 222 115 125 86 211 139 207 66 121 220 229 97 126 49 146 169)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 161 127 91 117 163 94 214 70 35 202 92 191 31 145 149 18 146 219 12 35 240 194 234 36 195 208 202 208 152 140 171 192 131 167 166 24 98 92 34 137 64 115 11 79 163 238 100 250 236 187 47 194 15 221 231 197 139 58 63 99 0 66 77 198)
  :der-encode
  #t
  :tests
  '(#(657
      "u1 == 1"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 85 85 85 85 0 0 0 0 85 85 85 85 85 85 85 85 62 247 168 228 141 7 223 129 166 147 67 150 84 33 12 112 2 32 83 46 170 189 149 116 136 13 191 118 185 184 204 0 131 44 32 166 236 17 61 104 34 153 85 13 122 110 15 52 94 37)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 4 186 12 186 41 26 55 219 19 243 59 249 13 171 98 140 4 236 131 147 160 32 4 25 233 234 161 235 204 159 181 195 31 58 10 14 104 35 164 155 98 90 213 123 18 163 45 64 71 151 15 195 66 143 15 0 73 236 244 38 93 193 47 98)
  :der-encode
  #t
  :tests
  '(#(658
      "u1 == n - 1"
      #vu8(84 101 115 116)
      #vu8(48 69 2 32 85 85 85 85 0 0 0 0 85 85 85 85 85 85 85 85 62 247 168 228 141 7 223 129 166 147 67 150 84 33 12 112 2 33 0 172 209 85 65 106 139 119 243 64 137 70 71 51 255 124 211 156 64 14 156 105 175 123 235 158 172 80 84 237 46 199 44)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 105 43 108 130 142 15 238 214 61 138 234 162 183 50 47 156 203 232 114 58 30 211 159 34 159 32 74 67 75 137 0 239 161 246 246 171 203 56 234 59 143 222 56 185 140 124 39 31 39 74 245 106 140 86 40 220 51 41 6 154 228 221 87 22)
  :der-encode
  #t
  :tests
  '(#(659
      "u2 == 1"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 85 85 85 85 0 0 0 0 85 85 85 85 85 85 85 85 62 247 168 228 141 7 223 129 166 147 67 150 84 33 12 112 2 32 85 85 85 85 0 0 0 0 85 85 85 85 85 85 85 85 62 247 168 228 141 7 223 129 166 147 67 150 84 33 12 112)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 0 206 253 145 98 209 62 100 203 147 104 122 156 216 249 117 94 187 90 62 247 99 47 128 15 132 135 24 116 204 239 9 84 62 203 234 247 232 4 78 247 33 190 47 181 245 73 228 184 72 13 37 135 64 78 191 125 187 239 44 84 188 12 177)
  :der-encode
  #t
  :tests
  '(#(660
      "u2 == n - 1"
      #vu8(84 101 115 116)
      #vu8(48 69 2 32 85 85 85 85 0 0 0 0 85 85 85 85 85 85 85 85 62 247 168 228 141 7 223 129 166 147 67 150 84 33 12 112 2 33 0 170 170 170 170 0 0 0 0 170 170 170 170 170 170 170 170 125 239 81 201 26 15 191 3 77 38 135 44 168 66 24 225)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 185 117 24 59 66 85 28 245 47 41 29 92 25 33 253 94 18 245 12 140 133 164 190 185 222 3 239 163 240 242 68 134 34 67 1 142 104 102 223 146 45 195 19 97 32 32 49 31 242 30 36 44 227 251 21 188 120 196 6 178 90 180 48 145)
  :der-encode
  #t
  :tests
  '(#(661
      "edge case for u1"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 113 15 142 62 220 124 45 90 63 210 61 232 68 0 43 185 73 217 247 148 246 213 64 95 109 151 193 187 3 221 43 210)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 194 95 29 22 111 62 33 28 223 4 42 38 248 171 246 9 77 72 184 209 113 145 215 78 215 23 20 146 116 70 105 153 101 208 109 214 168 138 191 164 158 139 76 93 166 187 146 40 81 150 154 223 150 4 181 172 207 181 42 17 78 119 204 219)
  :der-encode
  #t
  :tests
  '(#(662
      "edge case for u1"
      #vu8(84 101 115 116)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 33 0 237 255 188 39 15 114 44 36 48 105 167 229 244 3 53 166 26 88 82 92 123 77 178 231 168 226 105 39 79 254 78 27)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 143 229 232 130 67 167 110 65 160 4 35 98 24 163 195 162 214 238 227 152 162 60 58 11 0 141 127 1 100 203 192 202 152 162 13 27 220 245 115 81 60 124 253 155 131 198 62 58 130 212 1 39 200 151 105 124 134 184 203 56 122 247 242 64)
  :der-encode
  #t
  :tests
  '(#(663
      "edge case for u1"
      #vu8(84 101 115 116)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 33 0 162 90 220 174 16 94 215 255 79 149 210 52 78 36 238 82 51 20 195 225 120 82 93 0 121 4 182 137 25 186 77 83)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 2 20 130 86 181 48 251 196 112 199 179 65 151 11 56 36 62 206 230 213 168 64 163 123 236 162 239 179 126 141 255 44 192 173 190 160 136 36 130 167 72 156 167 3 163 153 134 75 169 135 238 182 221 183 56 175 83 168 53 115 71 60 179 13)
  :der-encode
  #t
  :tests
  '(#(664
      "edge case for u1"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 46 67 72 198 69 112 125 206 103 96 215 115 222 63 62 135 52 105 36 178 246 75 211 221 2 151 231 102 181 128 94 187)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 163 77 176 18 206 110 218 30 156 115 117 197 252 243 229 78 214 152 225 150 21 18 66 115 179 166 33 208 33 199 111 142 119 116 88 214 245 90 54 76 34 30 57 225 32 93 85 16 187 79 187 125 223 8 216 216 253 222 19 209 214 223 127 20)
  :der-encode
  #t
  :tests
  '(#(665
      "edge case for u1"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 52 140 103 59 7 220 227 146 13 119 61 227 243 232 116 8 134 158 145 109 188 247 151 216 249 104 79 182 119 83 209 220)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 185 122 243 254 120 190 21 242 145 43 98 113 221 138 67 186 219 109 210 161 179 21 178 206 122 227 123 78 119 120 4 29 147 13 113 238 25 146 210 70 100 149 196 33 2 208 142 129 21 76 48 83 7 209 220 213 45 15 164 196 121 178 120 231)
  :der-encode
  #t
  :tests
  '(#(666
      "edge case for u1"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 105 24 206 118 15 185 199 36 26 238 123 199 231 208 232 17 13 61 34 219 121 239 47 177 242 208 159 108 238 167 163 184)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 129 231 25 138 60 63 35 144 28 237 199 161 214 239 246 233 191 129 16 142 108 53 205 133 89 19 154 243 19 93 188 187 158 241 86 133 48 41 26 128 97 185 12 159 66 133 238 252 186 153 13 69 112 164 227 183 183 55 82 91 93 88 0 52)
  :der-encode
  #t
  :tests
  '(#(667
      "edge case for u1"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 115 179 198 148 57 29 142 173 222 63 62 135 64 137 70 71 21 172 32 228 193 38 187 246 216 100 214 72 150 159 91 90)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 171 77 121 44 161 33 209 219 163 156 185 222 100 81 73 194 171 87 62 139 236 198 221 255 60 201 150 15 24 141 223 115 127 144 186 35 102 65 83 233 50 98 255 115 53 84 21 25 88 88 215 190 19 21 166 148 86 56 109 230 130 133 163 200)
  :der-encode
  #t
  :tests
  '(#(668
      "edge case for u1"
      #vu8(84 101 115 116)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 33 0 187 7 172 122 134 148 140 44 41 137 161 109 177 147 14 241 184 156 225 18 89 81 151 101 104 119 229 60 65 69 127 40)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 81 132 18 182 154 244 58 174 8 68 118 166 141 89 187 222 81 251 250 158 91 232 5 99 245 135 201 194 101 47 136 239 45 59 144 210 91 170 107 219 123 12 85 229 36 10 58 152 251 194 74 254 216 82 62 222 193 199 5 3 252 16 242 51)
  :der-encode
  #t
  :tests
  '(#(669
      "edge case for u1"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 39 228 216 44 182 192 97 221 147 55 198 155 249 51 46 211 209 152 102 45 111 34 153 68 63 98 200 97 24 125 182 72)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 160 143 20 166 68 185 169 53 223 254 164 118 30 186 245 146 209 246 111 230 205 55 58 167 245 211 112 175 52 248 53 45 165 75 91 196 2 92 243 53 144 10 145 76 41 52 236 47 236 122 57 109 10 122 255 202 215 50 165 116 28 122 170 245)
  :der-encode
  #t
  :tests
  '(#(670
      "edge case for u1"
      #vu8(84 101 115 116)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 33 0 231 197 207 58 172 46 136 146 59 119 133 5 21 255 246 161 45 19 179 86 223 233 236 39 92 61 216 26 233 70 9 164)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 204 242 41 106 106 137 182 43 144 115 157 56 175 74 227 162 14 159 69 113 91 144 4 70 57 36 16 97 227 63 143 140 170 206 0 70 73 30 234 161 198 233 164 114 185 109 136 244 175 131 231 255 27 184 68 56 199 224 88 3 68 18 174 8)
  :der-encode
  #t
  :tests
  '(#(671
      "edge case for u1"
      #vu8(84 101 115 116)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 33 0 199 120 56 223 145 193 233 83 224 22 225 11 221 255 234 35 23 249 254 227 43 172 254 85 60 237 233 229 122 116 143 104)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 148 176 252 21 37 188 171 248 43 31 52 137 94 88 25 160 108 2 178 62 4 0 34 118 225 101 249 98 200 110 57 39 190 124 42 180 208 178 83 3 32 79 179 42 31 130 146 144 39 146 34 94 22 166 210 219 251 41 251 200 154 156 51 118)
  :der-encode
  #t
  :tests
  '(#(672
      "edge case for u1"
      #vu8(84 101 115 116)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 33 0 142 240 113 192 35 131 210 166 192 45 194 23 187 255 212 70 115 13 3 24 176 66 94 37 134 34 9 7 248 133 249 127)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 83 81 243 126 29 224 200 140 80 133 39 216 152 130 209 131 204 220 242 239 202 64 126 219 6 39 202 223 209 109 230 236 68 180 181 124 223 150 13 50 235 204 76 151 132 126 237 33 132 37 133 59 91 103 94 183 129 183 102 161 161 48 3 73)
  :der-encode
  #t
  :tests
  '(#(673
      "edge case for u1"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 86 104 170 160 181 69 187 249 160 68 163 35 153 255 190 105 206 32 7 78 52 215 189 245 207 86 40 42 118 151 99 150)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 116 139 186 252 50 14 103 53 203 100 1 151 16 162 105 198 194 181 209 71 189 200 49 50 92 178 251 39 106 201 113 166 157 101 94 154 117 91 201 216 0 173 33 238 63 212 217 128 217 58 122 73 168 197 204 211 112 5 23 117 120 245 17 99)
  :der-encode
  #t
  :tests
  '(#(674
      "edge case for u1"
      #vu8(84 101 115 116)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 33 0 209 45 110 86 136 47 108 0 39 202 233 26 39 18 119 40 247 253 223 71 143 180 253 194 182 95 64 166 11 14 185 82)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 20 179 187 215 92 94 28 12 54 83 90 147 77 74 184 81 18 65 11 59 144 250 151 163 28 51 3 137 100 253 133 204 17 47 125 131 127 143 156 54 180 96 214 54 201 101 165 248 24 242 181 12 93 0 251 63 151 5 86 29 214 99 24 131)
  :der-encode
  #t
  :tests
  '(#(675
      "edge case for u2"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 127 255 255 255 170 170 170 170 255 255 255 255 255 255 255 255 233 162 83 143 55 178 138 44 81 61 238 64 254 203 183 26)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 216 35 83 60 4 205 142 220 109 111 149 10 142 8 173 224 74 155 175 162 241 74 89 3 86 147 86 113 174 147 5 191 67 23 141 31 136 182 165 122 150 146 76 38 95 13 219 117 181 131 18 144 123 25 90 203 89 215 121 115 3 18 55 117)
  :der-encode
  #t
  :tests
  '(#(676
      "edge case for u2"
      #vu8(84 101 115 116)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 33 0 182 47 38 181 242 162 178 111 109 232 109 66 173 138 19 218 58 179 204 205 4 89 178 1 222 0 158 82 106 223 33 242)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 219 43 52 8 179 22 125 145 3 6 36 198 50 142 140 227 236 16 140 16 85 117 194 243 210 9 185 46 101 75 171 105 195 67 24 19 156 80 176 128 44 110 97 47 15 211 24 157 128 13 247 201 150 213 215 183 195 214 190 130 131 111 162 88)
  :der-encode
  #t
  :tests
  '(#(677
      "edge case for u2"
      #vu8(84 101 115 116)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 33 0 187 29 154 201 73 221 116 140 208 43 187 231 73 189 53 28 213 123 56 187 97 64 61 112 6 134 170 123 76 144 133 30)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 9 23 156 231 197 146 37 57 34 22 69 59 42 193 233 209 120 194 72 55 223 174 38 188 29 215 171 96 99 133 39 66 85 86 180 46 51 2 137 243 184 38 178 219 122 134 209 157 69 194 134 10 89 242 190 29 220 195 182 145 249 90 146 85)
  :der-encode
  #t
  :tests
  '(#(678
      "edge case for u2"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 102 117 90 0 99 140 218 236 28 115 37 19 202 2 52 236 229 37 69 218 193 31 129 110 129 143 114 91 79 96 170 242)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 1 149 159 184 222 218 86 229 70 123 126 75 33 78 164 194 208 194 251 41 215 15 241 155 107 30 204 235 214 86 141 126 217 219 215 122 145 130 151 253 151 11 255 1 225 52 63 105 37 22 125 181 161 77 9 138 33 28 57 204 58 65 51 152)
  :der-encode
  #t
  :tests
  '(#(679
      "edge case for u2"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 85 160 12 159 205 174 187 96 50 81 60 160 35 78 207 255 233 142 190 73 47 223 2 228 140 164 142 152 43 235 54 105)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 86 127 31 220 56 126 83 80 200 82 180 232 248 186 157 109 148 126 28 93 215 204 198 26 89 56 36 93 214 188 171 58 153 96 190 186 249 25 81 79 149 53 194 46 170 240 181 129 40 87 151 14 38 102 34 103 177 243 235 16 17 19 10 17)
  :der-encode
  #t
  :tests
  '(#(680
      "edge case for u2"
      #vu8(84 101 115 116)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 33 0 171 64 25 63 155 93 118 192 100 162 121 64 70 157 159 255 211 29 124 146 95 190 5 201 25 73 29 48 87 214 108 210)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 52 153 249 116 255 76 166 187 178 245 22 130 253 95 81 118 47 157 214 221 40 85 38 38 96 179 109 70 211 228 190 194 244 152 250 226 72 120 7 226 32 17 145 82 240 18 36 118 198 77 79 164 109 220 232 92 69 70 99 15 13 92 94 129)
  :der-encode
  #t
  :tests
  '(#(681
      "edge case for u2"
      #vu8(84 101 115 116)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 33 0 202 2 52 235 181 253 203 19 202 2 52 236 255 255 255 255 203 13 173 187 199 245 73 248 162 107 68 8 208 220 134 0)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 44 92 1 102 44 240 12 25 41 89 98 87 219 19 178 110 207 48 208 243 236 75 159 3 81 176 242 112 148 71 52 38 233 134 160 134 6 13 8 110 238 130 45 221 47 199 68 36 122 1 84 181 127 122 105 197 29 159 218 250 72 78 74 199)
  :der-encode
  #t
  :tests
  '(#(682
      "edge case for u2"
      #vu8(84 101 115 116)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 33 0 191 255 255 255 62 163 103 126 8 43 147 16 87 38 32 174 25 147 58 158 101 178 133 89 135 17 199 114 152 129 90 211)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 145 212 203 168 19 160 77 134 219 174 148 194 59 230 245 44 21 119 65 131 190 123 165 178 217 243 207 1 11 22 5 1 144 11 138 223 234 100 145 1 154 154 192 128 213 22 2 90 84 27 244 185 82 176 173 123 228 177 135 75 2 253 84 74)
  :der-encode
  #t
  :tests
  '(#(683
      "edge case for u2"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 38 102 102 102 59 187 187 187 230 102 102 102 102 102 102 102 91 55 144 46 2 63 171 124 143 5 93 134 229 204 65 244)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 239 127 208 163 163 99 134 99 131 48 236 173 65 225 163 179 2 175 54 150 8 49 208 33 12 97 75 148 142 138 161 36 239 13 109 128 14 64 71 214 211 193 190 15 222 175 17 252 216 202 181 171 89 199 48 235 52 17 110 53 168 199 208 152)
  :der-encode
  #t
  :tests
  '(#(684
      "edge case for u2"
      #vu8(84 101 115 116)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 33 0 191 255 255 255 54 219 109 183 164 146 73 36 146 73 36 146 20 108 87 63 76 109 252 141 8 164 67 226 88 151 11 9)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 165 33 218 177 60 201 21 45 140 167 112 53 166 7 254 160 108 85 204 60 165 219 235 134 140 234 146 234 254 147 223 42 123 251 155 40 83 25 150 99 94 106 92 202 162 130 106 64 108 225 17 27 219 156 46 12 163 101 0 65 138 47 67 222)
  :der-encode
  #t
  :tests
  '(#(685
      "edge case for u2"
      #vu8(84 101 115 116)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 33 0 191 255 255 255 42 170 170 171 127 255 255 255 255 255 255 255 200 21 208 230 11 62 89 110 203 26 211 162 124 253 73 196)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 71 77 88 164 238 193 110 13 86 95 33 135 254 17 212 232 231 162 104 58 18 243 139 79 192 29 18 55 168 26 16 151 110 85 247 59 183 205 218 70 189 182 126 247 127 111 210 150 157 242 182 121 32 251 89 69 253 227 165 23 166 222 212 205)
  :der-encode
  #t
  :tests
  '(#(686
      "edge case for u2"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 127 255 255 255 85 85 85 85 255 255 255 255 255 255 255 255 211 68 167 30 111 101 20 88 162 123 220 129 253 151 110 55)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 105 45 165 205 67 9 217 166 229 203 82 92 55 218 143 160 135 159 123 87 32 140 218 187 244 125 34 58 91 35 166 33 64 224 218 167 140 253 210 7 167 56 154 174 214 23 56 177 127 197 252 62 106 94 211 57 125 41 2 233 18 94 106 180)
  :der-encode
  #t
  :tests
  '(#(687
      "edge case for u2"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 63 255 255 255 128 0 0 0 127 255 255 255 255 255 255 255 222 115 125 86 211 139 207 66 121 220 229 97 126 49 146 170)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 133 104 155 62 7 117 199 113 138 144 39 159 20 168 8 44 252 212 209 241 103 146 116 244 233 184 128 92 87 10 6 112 22 127 204 92 167 52 85 46 9 175 163 100 15 74 3 78 21 185 183 202 102 30 199 255 112 211 242 64 235 231 5 177)
  :der-encode
  #t
  :tests
  '(#(688
      "edge case for u2"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 93 142 205 100 164 238 186 70 104 21 221 243 164 222 154 142 106 189 156 93 176 160 30 184 3 67 85 61 166 72 66 143)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 1 88 19 119 85 185 1 247 151 169 13 76 168 136 126 2 60 178 239 99 178 186 44 13 69 94 218 239 66 207 35 126 42 150 79 192 13 55 122 133 146 184 182 26 175 167 164 170 167 199 185 253 43 65 214 224 225 123 209 186 86 119 237 205)
  :der-encode
  #t
  :tests
  '(#(689
      "point duplication during verification"
      #vu8(84 101 115 116)
      #vu8(48 69 2 32 111 35 71 202 183 221 118 133 143 224 85 90 195 188 153 4 140 74 172 175 223 182 188 190 5 234 108 66 196 147 69 105 2 33 0 242 29 144 126 56 144 145 109 196 250 31 71 3 193 229 13 63 84 221 247 56 62 68 2 58 65 222 86 42 161 142 216)
      #t
      ("PointDuplication"))))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 1 88 19 119 85 185 1 247 151 169 13 76 168 136 126 2 60 178 239 99 178 186 44 13 69 94 218 239 66 207 35 126 213 105 176 62 242 200 133 123 109 71 73 229 80 88 91 85 88 56 70 3 212 190 41 31 30 132 46 69 169 136 18 50)
  :der-encode
  #t
  :tests
  '(#(690
      "duplication bug"
      #vu8(84 101 115 116)
      #vu8(48 69 2 32 111 35 71 202 183 221 118 133 143 224 85 90 195 188 153 4 140 74 172 175 223 182 188 190 5 234 108 66 196 147 69 105 2 33 0 242 29 144 126 56 144 145 109 196 250 31 71 3 193 229 13 63 84 221 247 56 62 68 2 58 65 222 86 42 161 142 216)
      #f
      ("PointDuplication"))))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 56 160 132 255 204 196 174 47 130 4 190 42 188 169 251 138 212 171 40 59 42 165 15 19 182 187 35 71 173 171 198 156 166 153 121 155 119 177 204 109 173 39 30 136 184 153 193 41 49 152 110 149 142 31 92 245 101 61 221 247 56 147 101 226)
  :der-encode
  #t
  :tests
  '(#(691
      "point with x-coordinate 0"
      #vu8(84 101 115 116)
      #vu8(48 37 2 1 1 2 32 85 85 85 85 0 0 0 0 85 85 85 85 85 85 85 85 62 247 168 228 141 7 223 129 166 147 67 150 84 33 12 112)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 122 135 111 191 130 29 150 197 85 195 83 147 211 178 210 232 9 166 216 57 176 177 21 217 100 218 62 145 158 248 37 4 115 61 207 65 216 51 176 83 11 135 167 177 165 47 125 145 191 161 153 19 247 21 24 134 145 59 22 13 224 124 214 155)
  :der-encode
  #t
  :tests
  '(#(692
      "point with x-coordinate 0"
      #vu8(84 101 115 116)
      #vu8(48 69 2 33 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 32 51 51 51 51 0 0 0 0 51 51 51 51 51 51 51 51 37 199 203 188 84 158 82 231 99 241 245 90 50 122 58 169)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 102 76 226 115 50 13 145 141 139 219 46 97 32 27 69 73 179 107 124 220 84 227 59 132 173 182 242 193 10 172 131 30 73 230 136 49 241 139 218 41 115 172 61 118 191 188 140 94 225 204 238 210 221 134 46 45 199 201 21 199 54 206 241 244)
  :der-encode
  #t
  :tests
  '(#(693
      "comparison with point at infinity "
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 85 85 85 85 0 0 0 0 85 85 85 85 85 85 85 85 62 247 168 228 141 7 223 129 166 147 67 150 84 33 12 112 2 32 51 51 51 51 0 0 0 0 51 51 51 51 51 51 51 51 37 199 203 188 84 158 82 231 99 241 245 90 50 122 58 169)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 150 22 145 165 233 96 208 122 48 29 187 173 77 134 36 126 194 125 112 137 250 235 61 221 26 221 57 94 255 241 224 254 114 84 98 44 195 113 134 108 223 153 13 44 83 119 121 14 55 209 241 81 152 23 240 154 35 27 210 96 169 231 138 235)
  :der-encode
  #t
  :tests
  '(#(694
      "extreme value for k and edgecase s"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 124 242 123 24 141 3 79 126 138 82 56 3 4 181 26 195 192 137 105 226 119 242 27 53 166 11 72 252 71 102 153 120 2 32 85 85 85 85 0 0 0 0 85 85 85 85 85 85 85 85 62 247 168 228 141 7 223 129 166 147 67 150 84 33 12 112)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 93 40 62 19 206 140 166 13 168 104 227 176 251 51 230 180 241 7 71 147 39 78 41 40 37 14 113 226 172 166 62 156 33 77 199 79 162 83 113 251 77 158 80 109 65 142 217 161 191 214 208 200 187 101 145 211 224 244 69 5 168 72 134 206)
  :der-encode
  #t
  :tests
  '(#(695
      "extreme value for k and s^-1"
      #vu8(84 101 115 116)
      #vu8(48 69 2 32 124 242 123 24 141 3 79 126 138 82 56 3 4 181 26 195 192 137 105 226 119 242 27 53 166 11 72 252 71 102 153 120 2 33 0 182 219 109 182 36 146 73 37 73 36 146 73 36 146 73 36 98 91 215 160 155 236 76 168 27 205 217 248 253 107 99 204)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 15 195 81 218 3 138 224 128 59 209 216 101 20 174 4 98 249 248 33 101 81 217 49 90 169 210 151 247 146 238 246 163 65 199 78 237 120 111 45 51 218 53 54 12 167 170 146 94 117 63 0 214 7 122 30 158 95 195 57 214 52 1 156 115)
  :der-encode
  #t
  :tests
  '(#(696
      "extreme value for k and s^-1"
      #vu8(84 101 115 116)
      #vu8(48 69 2 32 124 242 123 24 141 3 79 126 138 82 56 3 4 181 26 195 192 137 105 226 119 242 27 53 166 11 72 252 71 102 153 120 2 33 0 204 204 204 204 0 0 0 0 204 204 204 204 204 204 204 204 151 31 46 241 82 121 75 157 143 199 213 104 201 232 234 167)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 161 227 76 143 22 209 56 103 63 238 85 192 128 84 124 43 253 77 231 85 0 101 246 56 50 43 186 148 48 206 75 96 102 43 233 187 81 38 99 170 77 125 248 171 63 59 65 129 197 212 74 123 223 66 67 102 32 183 216 166 184 26 201 54)
  :der-encode
  #t
  :tests
  '(#(697
      "extreme value for k and s^-1"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 124 242 123 24 141 3 79 126 138 82 56 3 4 181 26 195 192 137 105 226 119 242 27 53 166 11 72 252 71 102 153 120 2 32 51 51 51 51 0 0 0 0 51 51 51 51 51 51 51 51 37 199 203 188 84 158 82 231 99 241 245 90 50 122 58 170)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 126 26 138 131 56 215 253 140 244 29 50 42 48 45 32 120 168 122 35 199 24 97 80 237 124 218 110 82 129 124 27 223 208 169 19 90 137 210 28 232 33 226 144 20 178 137 131 73 37 77 116 130 114 178 212 235 141 89 238 52 198 21 55 127)
  :der-encode
  #t
  :tests
  '(#(698
      "extreme value for k and s^-1"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 124 242 123 24 141 3 79 126 138 82 56 3 4 181 26 195 192 137 105 226 119 242 27 53 166 11 72 252 71 102 153 120 2 32 73 36 146 72 219 109 182 219 182 219 109 182 219 109 182 219 90 139 35 13 11 43 81 220 215 235 240 201 254 247 193 133)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 92 25 254 34 122 97 171 198 92 97 238 122 1 140 201 87 27 44 111 102 62 163 53 131 247 106 104 111 100 190 7 139 123 74 13 115 73 64 246 19 213 43 196 134 115 180 87 194 207 120 73 36 144 165 204 86 6 192 84 29 23 178 77 219)
  :der-encode
  #t
  :tests
  '(#(699
      "extreme value for k"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 124 242 123 24 141 3 79 126 138 82 56 3 4 181 26 195 192 137 105 226 119 242 27 53 166 11 72 252 71 102 153 120 2 32 22 164 80 46 39 129 225 26 200 44 188 157 30 221 140 152 21 132 209 62 24 65 30 47 110 4 120 195 68 22 227 187)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 219 2 209 243 66 29 96 14 157 158 249 228 116 25 219 163 32 142 237 8 194 212 24 154 93 182 58 190 178 115 150 102 224 237 38 150 123 154 218 158 215 255 228 128 130 127 144 160 210 16 213 253 142 198 40 227 23 21 230 178 65 37 81 42)
  :der-encode
  #t
  :tests
  '(#(700
      "extreme value for k and edgecase s"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 107 23 209 242 225 44 66 71 248 188 230 229 99 164 64 242 119 3 125 129 45 235 51 160 244 161 57 69 216 152 194 150 2 32 85 85 85 85 0 0 0 0 85 85 85 85 85 85 85 85 62 247 168 228 141 7 223 129 166 147 67 150 84 33 12 112)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 98 34 209 150 38 85 80 24 147 194 158 68 19 149 182 192 87 17 189 62 213 160 239 114 207 171 51 139 136 34 156 75 170 174 7 156 180 74 26 240 112 54 42 170 82 14 226 76 172 38 38 66 59 11 248 26 241 197 67 17 216 226 253 35)
  :der-encode
  #t
  :tests
  '(#(701
      "extreme value for k and s^-1"
      #vu8(84 101 115 116)
      #vu8(48 69 2 32 107 23 209 242 225 44 66 71 248 188 230 229 99 164 64 242 119 3 125 129 45 235 51 160 244 161 57 69 216 152 194 150 2 33 0 182 219 109 182 36 146 73 37 73 36 146 73 36 146 73 36 98 91 215 160 155 236 76 168 27 205 217 248 253 107 99 204)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 76 207 162 76 103 243 222 247 250 129 188 153 199 11 176 65 156 9 82 186 89 159 76 3 54 29 161 132 176 76 220 165 219 118 183 151 247 244 29 156 114 154 34 25 71 138 126 98 151 40 223 135 8 0 190 140 246 202 122 10 130 21 59 250)
  :der-encode
  #t
  :tests
  '(#(702
      "extreme value for k and s^-1"
      #vu8(84 101 115 116)
      #vu8(48 69 2 32 107 23 209 242 225 44 66 71 248 188 230 229 99 164 64 242 119 3 125 129 45 235 51 160 244 161 57 69 216 152 194 150 2 33 0 204 204 204 204 0 0 0 0 204 204 204 204 204 204 204 204 151 31 46 241 82 121 75 157 143 199 213 104 201 232 234 167)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 234 28 114 201 16 52 3 107 172 113 64 43 110 158 204 74 243 219 222 122 153 220 87 64 97 233 159 239 255 157 132 218 183 221 5 126 117 183 138 198 245 110 52 235 4 143 10 157 41 213 208 85 64 140 144 208 43 194 234 145 140 24 203 99)
  :der-encode
  #t
  :tests
  '(#(703
      "extreme value for k and s^-1"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 107 23 209 242 225 44 66 71 248 188 230 229 99 164 64 242 119 3 125 129 45 235 51 160 244 161 57 69 216 152 194 150 2 32 51 51 51 51 0 0 0 0 51 51 51 51 51 51 51 51 37 199 203 188 84 158 82 231 99 241 245 90 50 122 58 170)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 194 135 154 102 216 108 178 11 130 11 119 149 218 45 166 43 56 146 79 120 23 209 205 53 13 147 105 136 233 14 121 188 84 49 167 38 143 246 147 28 122 117 157 224 36 239 249 11 203 1 119 33 109 182 253 31 58 170 161 31 163 182 160 131)
  :der-encode
  #t
  :tests
  '(#(704
      "extreme value for k and s^-1"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 107 23 209 242 225 44 66 71 248 188 230 229 99 164 64 242 119 3 125 129 45 235 51 160 244 161 57 69 216 152 194 150 2 32 73 36 146 72 219 109 182 219 182 219 109 182 219 109 182 219 90 139 35 13 11 43 81 220 215 235 240 201 254 247 193 133)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 171 28 15 39 63 116 171 194 184 72 199 80 6 242 239 60 84 194 109 242 119 17 176 101 88 244 85 7 154 238 11 163 223 81 15 46 206 246 217 160 89 151 199 118 241 74 214 69 108 23 159 10 19 175 23 113 228 214 195 127 164 139 71 242)
  :der-encode
  #t
  :tests
  '(#(705
      "extreme value for k"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 107 23 209 242 225 44 66 71 248 188 230 229 99 164 64 242 119 3 125 129 45 235 51 160 244 161 57 69 216 152 194 150 2 32 22 164 80 46 39 129 225 26 200 44 188 157 30 221 140 152 21 132 209 62 24 65 30 47 110 4 120 195 68 22 227 187)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 107 23 209 242 225 44 66 71 248 188 230 229 99 164 64 242 119 3 125 129 45 235 51 160 244 161 57 69 216 152 194 150 79 227 66 226 254 26 127 155 142 231 235 74 124 15 158 22 43 206 51 87 107 49 94 206 203 182 64 104 55 191 81 245)
  :der-encode
  #t
  :tests
  '(#(706
      "testing point duplication"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 83 46 170 189 149 116 136 13 191 118 185 184 204 0 131 44 32 166 236 17 61 104 34 153 85 13 122 110 15 52 94 37 2 32 36 146 73 36 109 182 219 109 219 109 182 219 109 182 219 109 173 69 145 134 133 149 168 238 107 245 248 100 255 123 224 194)
      #f
      ())
    #(707
      "testing point duplication"
      #vu8(84 101 115 116)
      #vu8(48 69 2 33 0 172 209 85 65 106 139 119 243 64 137 70 71 51 255 124 211 156 64 14 156 105 175 123 235 158 172 80 84 237 46 199 44 2 32 36 146 73 36 109 182 219 109 219 109 182 219 109 182 219 109 173 69 145 134 133 149 168 238 107 245 248 100 255 123 224 194)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 107 23 209 242 225 44 66 71 248 188 230 229 99 164 64 242 119 3 125 129 45 235 51 160 244 161 57 69 216 152 194 150 176 28 189 28 1 229 128 101 113 24 20 181 131 240 97 233 212 49 204 169 148 206 161 49 52 73 191 151 200 64 174 10)
  :der-encode
  #t
  :tests
  '(#(708
      "testing point duplication"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 83 46 170 189 149 116 136 13 191 118 185 184 204 0 131 44 32 166 236 17 61 104 34 153 85 13 122 110 15 52 94 37 2 32 36 146 73 36 109 182 219 109 219 109 182 219 109 182 219 109 173 69 145 134 133 149 168 238 107 245 248 100 255 123 224 194)
      #f
      ())
    #(709
      "testing point duplication"
      #vu8(84 101 115 116)
      #vu8(48 69 2 33 0 172 209 85 65 106 139 119 243 64 137 70 71 51 255 124 211 156 64 14 156 105 175 123 235 158 172 80 84 237 46 199 44 2 32 36 146 73 36 109 182 219 109 219 109 182 219 109 182 219 109 173 69 145 134 133 149 168 238 107 245 248 100 255 123 224 194)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 75 244 229 47 149 132 39 235 181 145 95 184 201 89 85 81 180 211 163 253 171 103 186 221 157 108 48 147 244 37 186 67 99 13 247 31 66 240 235 124 234 169 77 159 100 72 168 93 211 3 49 88 130 73 253 47 220 11 48 158 199 237 132 129 188 22 242 120 0 193 61 125 183 0 252 130 225 177 200 84 90 160 192 211 181 110 59 254 120 159 193 138 145 104 135 194)
  :der-encode
  #t
  :tests
  '(#(710
      "k*G has a large x-coordinate"
      #vu8(49 50 51 52 48 48)
      #vu8(48 77 2 24 56 156 178 126 11 200 210 31 167 229 242 76 183 79 88 133 19 19 230 150 51 58 214 139 2 49 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 199 99 77 129 244 55 45 223 88 26 13 178 72 176 167 122 236 236 25 106 204 197 41 112)
      #t
      ())
    #(711
      "r too large"
      #vu8(49 50 51 52 48 48)
      #vu8(48 102 2 49 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 255 255 0 0 0 0 0 0 0 0 255 255 255 254 2 49 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 199 99 77 129 244 55 45 223 88 26 13 178 72 176 167 122 236 236 25 106 204 197 41 112)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 54 35 187 41 107 136 246 38 208 249 38 86 191 1 111 17 91 114 18 119 204 180 147 7 57 191 189 129 249 193 231 52 99 14 6 133 211 46 21 78 11 74 92 98 228 56 81 246 118 131 86 180 165 118 76 18 140 123 17 5 227 215 120 168 157 30 1 218 41 126 222 27 196 49 44 37 131 224 187 221 210 22 19 88 61 208 154 184 149 198 59 228 121 249 69 118)
  :der-encode
  #t
  :tests
  '(#(712
      "r,s are large"
      #vu8(49 50 51 52 48 48)
      #vu8(48 102 2 49 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 199 99 77 129 244 55 45 223 88 26 13 178 72 176 167 122 236 236 25 106 204 197 41 114 2 49 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 199 99 77 129 244 55 45 223 88 26 13 178 72 176 167 122 236 236 25 106 204 197 41 113)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 213 22 203 138 200 228 69 123 105 61 81 146 190 235 108 231 217 164 107 239 72 238 207 62 168 35 40 111 16 31 152 209 48 245 162 109 198 254 194 54 98 239 240 127 20 72 111 213 132 86 147 46 116 137 75 127 14 59 176 223 211 98 80 43 55 101 221 128 163 23 114 9 251 34 29 201 181 26 175 68 112 178 69 57 20 5 190 245 20 23 107 19 162 103 167 32)
  :der-encode
  #t
  :tests
  '(#(713
      "r and s^-1 have a large Hamming weight"
      #vu8(49 50 51 52 48 48)
      #vu8(48 101 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 49 0 209 174 229 95 220 42 113 107 162 250 188 181 112 32 183 46 83 155 240 92 121 2 249 142 16 91 248 61 76 193 12 42 21 154 60 247 224 29 116 157 34 5 244 218 107 216 252 241)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 168 56 12 211 80 38 225 59 248 123 230 147 205 182 231 90 130 215 101 180 1 155 82 158 141 39 124 74 246 201 219 39 235 181 211 248 110 136 173 217 213 182 17 134 240 76 131 169 146 161 135 80 124 115 115 37 210 204 98 74 206 243 205 3 107 250 153 224 193 81 139 230 92 136 187 81 249 0 249 65 35 172 171 173 129 209 81 48 211 173 231 255 126 67 100 225)
  :der-encode
  #t
  :tests
  '(#(714
      "r and s^-1 have a large Hamming weight"
      #vu8(49 50 51 52 48 48)
      #vu8(48 101 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 49 0 182 182 129 220 72 79 79 2 15 211 247 230 38 216 142 220 109 237 27 56 46 243 225 67 214 8 135 181 19 148 38 8 50 212 216 242 239 112 69 143 159 169 14 56 194 225 158 79)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 85 79 47 208 183 0 169 244 86 135 82 182 115 217 192 210 157 201 108 16 254 103 227 140 109 109 51 155 250 254 5 249 112 218 140 61 33 100 232 32 49 48 122 68 189 50 37 17 113 49 43 97 181 145 19 255 11 211 184 169 164 147 77 242 98 170 128 150 248 64 233 216 191 250 93 116 145 222 216 123 56 196 150 249 185 228 240 186 16 137 248 211 255 200 138 159)
  :der-encode
  #t
  :tests
  '(#(715
      "small r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 2 2 1 1)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 68 238 51 53 250 119 210 251 2 228 189 112 116 244 94 89 138 135 156 15 168 34 236 113 140 33 220 19 184 52 64 237 196 227 193 10 24 88 66 62 3 4 76 158 255 34 89 28 208 39 196 153 51 229 81 5 87 214 180 178 198 246 111 229 220 185 48 42 59 19 253 198 128 72 195 252 172 136 186 21 43 106 152 51 200 127 220 98 128 175 197 209 26 183 193 7)
  :der-encode
  #t
  :tests
  '(#(716
      "small r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 2 2 1 2)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 226 248 127 114 227 198 108 115 3 127 231 118 7 212 42 210 217 196 204 21 152 147 180 185 184 176 54 93 58 119 102 219 232 103 139 2 226 182 143 88 229 164 247 104 16 97 163 144 227 143 33 66 129 133 66 190 246 178 188 58 44 79 67 201 94 82 89 214 189 84 1 83 19 120 199 202 18 90 31 108 198 9 212 250 223 197 201 169 147 88 238 119 255 120 12 141)
  :der-encode
  #t
  :tests
  '(#(717
      "small r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 2 2 1 3)
      #t
      ())
    #(718
      "r is larger than n"
      #vu8(49 50 51 52 48 48)
      #vu8(48 54 2 49 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 199 99 77 129 244 55 45 223 88 26 13 178 72 176 167 122 236 236 25 106 204 197 41 117 2 1 3)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 5 230 124 68 252 12 188 154 142 179 67 180 214 245 150 199 208 12 172 93 168 89 76 175 69 183 32 147 151 73 98 20 196 45 133 106 1 92 229 137 188 155 168 101 164 250 181 171 136 160 28 123 93 9 239 175 135 143 203 145 2 251 56 117 168 56 26 242 52 209 197 147 7 110 69 34 37 165 111 81 103 79 52 113 38 211 0 155 68 220 187 0 58 100 217 95)
  :der-encode
  #t
  :tests
  '(#(719
      "s is larger than n"
      #vu8(49 50 51 52 48 48)
      #vu8(48 54 2 1 2 2 49 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 199 99 77 129 244 55 45 223 88 26 13 178 72 176 167 122 236 236 25 106 204 215 255 250)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 11 176 63 206 60 1 235 207 8 115 171 209 52 168 104 47 95 184 219 255 162 45 166 116 4 126 92 62 113 228 61 229 130 237 106 187 144 140 46 79 170 93 150 24 98 120 182 193 186 59 34 18 62 104 204 197 111 23 221 121 255 21 86 87 6 247 26 11 97 35 199 122 243 205 136 240 175 2 76 197 37 151 129 81 110 220 175 95 233 144 100 110 123 102 153 157)
  :der-encode
  #t
  :tests
  '(#(720
      "small r and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 54 2 2 1 0 2 48 72 145 34 68 137 18 36 72 145 34 68 137 18 36 72 145 34 68 137 18 36 72 145 34 52 124 231 155 196 55 244 208 113 170 169 44 125 108 136 42 232 115 77 193 140 176 213 83)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 88 242 70 9 13 94 73 134 59 192 191 45 80 31 247 47 85 28 95 28 94 103 158 180 144 100 253 2 226 33 162 112 115 38 236 45 20 11 204 129 122 250 173 80 101 118 21 102 73 124 130 63 215 54 136 44 191 120 251 146 177 165 88 155 103 232 6 116 151 199 16 164 203 179 157 238 44 84 49 188 69 207 185 108 159 132 84 56 92 159 43 62 242 211 211 26)
  :der-encode
  #t
  :tests
  '(#(721
      "smallish r and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 7 45 155 77 52 121 82 205 2 49 0 206 117 21 18 86 27 111 87 199 83 66 132 138 63 249 140 207 156 63 2 25 182 182 141 0 68 158 108 151 26 133 210 226 206 115 85 75 89 33 157 84 210 8 59 70 50 115 81)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 252 105 132 221 104 48 209 72 95 178 88 26 69 167 145 216 220 162 199 39 199 61 61 68 200 159 0 130 193 134 138 245 202 116 180 202 74 226 40 2 100 10 158 191 232 199 174 18 153 141 99 165 181 173 27 114 184 153 240 177 50 228 149 42 170 25 212 31 222 234 72 177 237 107 131 88 221 29 178 7 253 102 224 20 83 173 64 246 123 131 106 220 128 45 95 232)
  :der-encode
  #t
  :tests
  '(#(722
      "100-bit r and small s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 65 2 13 16 51 230 126 55 179 43 68 85 128 191 78 251 2 48 42 213 42 213 42 213 42 213 42 213 42 213 42 213 42 213 42 213 42 213 42 213 42 213 33 92 81 179 32 228 96 84 47 156 195 137 104 204 223 66 99 104 64 4 235 121 164 82)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 27 141 239 89 34 48 61 100 126 142 176 126 59 173 146 249 36 183 155 118 158 239 22 142 117 65 222 31 78 13 40 174 151 51 235 152 207 138 31 182 221 82 202 2 200 199 91 81 199 170 75 246 121 212 157 129 20 18 32 116 218 143 96 68 164 39 55 23 150 165 101 74 97 6 22 45 95 104 106 187 115 235 216 150 171 8 199 6 38 135 241 33 113 251 228 163)
  :der-encode
  #t
  :tests
  '(#(723
      "small r and 100 bit s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 54 2 2 1 0 2 48 119 161 114 223 227 122 44 83 240 185 42 182 15 10 143 8 95 73 219 253 147 7 25 214 249 229 135 234 104 174 87 203 73 205 53 168 140 248 198 172 236 2 240 87 163 128 122 91)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 23 52 160 57 168 138 22 194 255 74 169 125 35 153 18 31 86 245 46 240 30 213 229 8 135 247 54 246 91 110 81 214 232 120 106 187 78 6 61 165 209 186 129 45 255 153 132 3 204 214 152 230 194 150 213 205 105 23 143 138 130 72 26 134 93 163 49 98 127 28 75 50 79 188 2 179 110 139 94 213 138 49 247 40 233 4 210 3 163 136 117 83 2 25 87 101)
  :der-encode
  #t
  :tests
  '(#(724
      "100-bit r and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 65 2 13 6 37 34 187 211 236 190 124 57 233 62 124 36 2 48 119 161 114 223 227 122 44 83 240 185 42 182 15 10 143 8 95 73 219 253 147 7 25 214 249 229 135 234 104 174 87 203 73 205 53 168 140 248 198 172 236 2 240 87 163 128 122 91)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 82 202 71 221 169 145 114 203 131 33 73 90 207 152 133 72 41 89 136 236 151 60 27 78 169 70 44 83 229 118 138 112 74 147 100 16 238 132 123 93 191 30 157 12 19 29 166 199 135 164 112 39 230 101 87 146 235 0 45 66 40 238 114 247 200 20 201 160 206 203 255 38 121 72 248 28 153 3 172 16 235 53 246 203 134 54 146 36 237 96 152 17 205 243 144 244)
  :der-encode
  #t
  :tests
  '(#(725
      "r and s^-1 are close to n"
      #vu8(49 50 51 52 48 48)
      #vu8(48 101 2 49 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 199 99 77 129 244 55 45 223 88 26 13 178 72 176 167 122 236 236 25 106 204 197 40 243 2 48 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 66 118 111 43 81 103 185 245 29 94 4 144 194 229 141 40 249 164 8 120 238 236 99 38)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 189 61 145 240 3 225 138 219 234 115 7 157 78 186 35 185 31 193 127 206 193 76 158 177 90 25 63 188 156 163 156 140 116 124 215 162 201 98 62 5 221 88 124 203 184 171 76 68 58 219 10 7 6 170 94 167 166 128 66 8 47 204 239 201 121 97 42 122 26 61 105 75 0 121 59 3 248 155 255 134 106 139 151 200 231 121 144 194 147 96 206 121 80 54 199 100)
  :der-encode
  #t
  :tests
  '(#(726
      "s == 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 53 2 48 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 66 118 111 43 81 103 185 245 29 94 4 144 194 229 141 40 249 164 8 120 238 236 99 38 2 1 1)
      #t
      ())
    #(727
      "s == 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 53 2 48 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 66 118 111 43 81 103 185 245 29 94 4 144 194 229 141 40 249 164 8 120 238 236 99 38 2 1 0)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 248 150 53 60 195 168 175 221 84 62 195 174 240 98 202 151 188 50 237 23 36 234 56 185 64 184 192 234 14 35 179 65 135 175 190 112 218 248 219 170 91 81 21 87 229 210 189 218 196 189 38 93 166 124 238 175 202 99 111 111 76 4 114 242 42 157 2 226 40 145 132 247 59 187 112 10 232 252 146 30 255 73 32 242 144 191 203 73 251 178 50 204 19 162 16 40)
  :der-encode
  #t
  :tests
  '(#(728
      "point at infinity during verify"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 227 177 166 192 250 27 150 239 172 13 6 217 36 88 83 189 118 118 12 181 102 98 148 185 2 48 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 66 118 111 43 81 103 185 245 29 94 4 144 194 229 141 40 249 164 8 120 238 236 99 38)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 55 13 158 46 49 199 18 200 2 128 146 248 2 49 157 127 223 91 51 25 168 81 141 8 190 211 137 21 8 199 6 12 254 34 54 225 143 161 79 224 119 9 60 234 230 51 229 67 15 215 154 172 249 209 110 204 25 177 45 96 251 164 153 141 252 104 39 2 236 124 139 221 74 89 0 53 119 59 140 156 87 10 199 220 212 20 224 50 82 247 160 230 245 59 88 99)
  :der-encode
  #t
  :tests
  '(#(729
      "edge case for signature malleability"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 227 177 166 192 250 27 150 239 172 13 6 217 36 88 83 189 118 118 12 181 102 98 148 185 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 227 177 166 192 250 27 150 239 172 13 6 217 36 88 83 189 118 118 12 181 102 98 148 185)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 148 30 108 250 53 110 87 45 204 202 235 89 75 6 149 93 153 220 75 240 121 88 252 152 255 161 125 225 28 117 33 191 44 122 168 255 38 9 82 252 183 170 192 120 237 230 123 71 144 167 138 2 150 176 65 161 15 0 61 241 153 141 164 204 74 22 20 235 203 245 210 57 67 31 51 217 13 48 35 237 193 128 46 141 182 218 188 186 230 124 195 20 218 42 171 171)
  :der-encode
  #t
  :tests
  '(#(730
      "edge case for signature malleability"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 227 177 166 192 250 27 150 239 172 13 6 217 36 88 83 189 118 118 12 181 102 98 148 185 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 227 177 166 192 250 27 150 239 172 13 6 217 36 88 83 189 118 118 12 181 102 98 148 186)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 62 207 213 138 60 229 131 134 110 4 113 209 110 179 193 10 65 30 195 184 103 31 58 4 118 155 30 216 70 74 113 207 28 118 216 217 183 227 103 11 190 113 45 111 85 74 147 131 217 128 216 190 223 87 71 13 107 69 204 26 208 198 66 109 199 10 14 75 233 1 16 106 54 102 59 252 171 4 252 184 96 8 119 123 146 68 81 32 213 227 100 29 151 57 99 98)
  :der-encode
  #t
  :tests
  '(#(731
      "u1 == 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 101 2 48 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 66 118 111 43 81 103 185 245 29 94 4 144 194 229 141 40 249 164 8 120 238 236 99 38 2 49 0 249 177 39 240 216 30 188 209 123 123 160 234 19 28 102 13 52 11 5 206 85 124 130 22 14 15 121 61 224 125 56 23 144 35 148 40 113 172 183 0 45 250 253 255 252 141 234 206)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 65 80 204 208 250 69 170 46 246 181 4 45 219 177 184 124 95 253 17 21 168 254 89 149 100 25 72 172 218 130 167 177 144 118 45 132 53 44 215 77 28 160 30 121 246 143 156 180 235 17 190 157 73 76 24 28 21 110 35 231 126 83 43 223 10 32 195 204 116 186 140 41 177 243 235 43 217 145 41 238 13 112 255 13 89 63 13 122 109 104 135 231 197 89 48 210)
  :der-encode
  #t
  :tests
  '(#(732
      "u1 == n - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 66 118 111 43 81 103 185 245 29 94 4 144 194 229 141 40 249 164 8 120 238 236 99 38 2 48 6 78 216 15 39 225 67 46 132 132 95 21 236 227 153 242 203 244 250 49 170 131 125 233 185 83 212 68 19 185 245 199 199 246 121 137 215 3 240 122 190 241 27 106 208 55 62 165)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 231 143 226 193 27 234 199 9 14 224 175 127 237 70 154 140 206 189 60 204 196 238 159 204 200 239 63 192 69 91 105 170 160 130 220 19 225 216 79 52 2 108 182 240 175 158 153 47 243 78 187 167 27 243 164 5 11 242 142 64 132 181 197 245 212 9 142 196 111 16 163 27 2 251 75 242 12 201 54 47 111 2 166 110 128 47 129 117 7 83 95 172 62 192 176 153)
  :der-encode
  #t
  :tests
  '(#(733
      "u2 == 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 66 118 111 43 81 103 185 245 29 94 4 144 194 229 141 40 249 164 8 120 238 236 99 38 2 48 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 66 118 111 43 81 103 185 245 29 94 4 144 194 229 141 40 249 164 8 120 238 236 99 38)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 238 36 171 138 52 208 90 246 132 147 147 87 243 39 89 204 90 20 243 199 23 82 154 32 174 168 224 197 150 93 138 65 230 137 37 246 136 71 25 148 183 32 33 186 81 178 140 9 10 85 105 60 146 173 12 186 233 237 207 81 94 43 76 6 11 136 141 130 200 30 74 59 106 23 59 98 237 4 164 111 169 93 177 162 243 148 153 128 251 162 227 113 38 60 79 169)
  :der-encode
  #t
  :tests
  '(#(734
      "u2 == n - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 101 2 48 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 66 118 111 43 81 103 185 245 29 94 4 144 194 229 141 40 249 164 8 120 238 236 99 38 2 49 0 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 132 236 222 86 162 207 115 234 58 188 9 33 133 203 26 81 243 72 16 241 221 216 198 77)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 61 46 145 96 85 201 46 27 54 19 63 89 55 179 124 27 1 2 131 78 183 112 8 163 186 156 61 164 70 233 6 89 113 214 139 169 19 9 24 81 225 12 255 91 76 216 117 193 57 170 122 173 252 44 175 113 7 177 122 225 174 168 178 153 214 27 241 90 202 12 179 253 111 31 253 232 25 43 254 88 240 130 43 187 193 245 91 221 246 180 254 156 143 43 14 172)
  :der-encode
  #t
  :tests
  '(#(735
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 48 83 59 13 80 72 10 62 240 126 126 138 248 177 9 119 89 188 3 172 154 28 126 214 7 90 5 40 105 245 127 18 178 133 97 49 98 208 142 231 170 185 254 84 170 169 132 163 154)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 174 89 102 151 66 122 162 80 21 108 5 172 67 56 228 137 128 167 240 147 234 31 31 230 112 152 180 63 101 57 193 178 10 231 67 56 249 191 39 13 51 102 60 80 171 232 253 0 28 166 165 39 50 219 116 171 21 210 242 73 163 216 57 8 15 137 131 103 223 214 73 146 205 206 39 8 222 170 213 35 162 162 54 180 52 0 66 66 65 201 26 53 181 48 250 80)
  :der-encode
  #t
  :tests
  '(#(736
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 101 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 49 0 212 154 37 57 134 187 170 140 233 195 211 128 131 19 211 156 59 149 10 71 131 114 237 192 9 188 5 102 183 59 231 176 93 173 7 55 225 105 96 37 124 193 109 182 236 108 98 15)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 136 115 143 153 129 221 77 31 171 182 10 216 60 45 214 223 201 218 48 34 9 174 62 83 73 138 136 59 110 57 163 139 234 217 176 39 9 243 82 211 230 182 87 129 84 234 178 82 147 136 160 92 107 159 58 64 40 171 185 149 10 81 245 38 78 205 117 128 164 35 253 236 148 114 250 238 181 127 146 227 28 70 190 242 167 129 254 94 218 208 38 0 159 25 130 98)
  :der-encode
  #t
  :tests
  '(#(737
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 48 40 80 144 176 214 166 130 11 187 163 148 239 190 229 194 74 34 129 232 37 210 246 197 95 183 168 91 130 81 219 0 247 90 176 124 201 147 206 175 102 79 60 17 107 175 52 176 33)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 244 33 84 19 17 201 79 221 121 252 41 143 138 177 163 173 253 8 2 159 218 212 57 169 77 76 234 17 247 231 153 188 67 150 9 242 251 123 227 243 73 213 94 72 77 10 13 54 179 83 48 187 219 236 30 117 242 152 68 131 217 107 242 16 215 34 193 131 2 146 255 195 90 47 106 33 164 181 5 25 245 101 240 36 187 204 201 114 40 162 248 173 143 173 192 213)
  :der-encode
  #t
  :tests
  '(#(738
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 101 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 49 0 179 154 244 168 30 228 174 121 6 78 216 15 39 225 67 46 132 132 95 21 236 227 153 242 164 61 37 5 160 168 199 44 87 49 244 253 150 116 32 177 0 14 63 117 80 46 215 183)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 57 155 228 207 196 57 249 79 36 33 203 211 76 44 217 11 174 83 235 96 221 250 252 165 47 114 117 209 101 209 79 166 89 182 54 113 59 93 75 57 230 47 212 139 174 20 29 14 27 35 227 180 240 194 2 237 123 89 219 120 163 92 18 172 105 140 96 62 171 20 79 208 154 194 237 143 68 149 246 7 228 210 200 122 35 206 46 195 62 65 12 164 126 204 37 85)
  :der-encode
  #t
  :tests
  '(#(739
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 101 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 49 0 175 74 129 238 74 231 144 100 237 128 242 126 20 50 232 72 69 241 94 206 57 159 44 191 40 223 130 156 205 48 245 239 98 236 35 149 123 131 125 115 254 78 21 110 220 205 68 101)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 21 120 187 255 114 19 124 75 202 51 215 56 90 137 43 233 76 176 89 249 9 29 223 232 144 52 95 113 42 159 186 95 199 112 132 206 193 16 132 237 4 132 145 96 74 7 246 108 118 187 170 135 47 7 16 216 42 8 217 221 221 131 60 123 231 199 232 226 101 244 145 69 21 126 180 232 232 40 0 118 163 126 229 135 50 113 219 81 0 52 218 25 218 36 65 91)
  :der-encode
  #t
  :tests
  '(#(740
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 48 94 149 3 220 149 207 32 201 219 1 228 252 40 101 208 144 139 226 189 156 115 62 89 126 138 91 183 183 166 42 189 255 109 190 57 120 174 86 83 109 15 176 17 114 236 213 95 87)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 51 186 69 28 133 231 41 5 143 131 4 16 119 164 105 94 180 125 249 62 113 139 9 164 97 140 117 58 200 3 205 117 193 169 18 144 194 255 90 99 83 137 208 113 73 87 29 171 31 199 216 167 23 118 133 31 242 68 255 99 47 230 249 46 22 82 229 40 72 147 196 36 79 231 117 216 239 197 137 216 35 221 3 243 145 144 39 240 4 83 123 216 238 9 243 163)
  :der-encode
  #t
  :tests
  '(#(741
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 48 30 228 174 121 6 78 216 15 39 225 67 46 132 132 95 21 236 227 153 242 203 244 250 49 163 174 142 218 184 77 195 51 10 57 247 9 56 227 145 43 213 151 83 222 90 237 48 136)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 4 7 113 227 57 2 22 254 210 198 32 139 223 91 254 168 58 177 145 91 22 110 98 101 105 241 46 253 65 10 57 183 231 199 111 112 240 1 40 67 162 109 235 244 204 195 61 218 229 188 95 126 98 208 84 234 195 28 208 34 175 219 113 183 198 56 242 76 48 203 173 14 243 94 210 252 153 23 243 86 233 195 240 67 145 178 29 16 53 39 75 129 83 127 203 243)
  :der-encode
  #t
  :tests
  '(#(742
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 101 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 49 0 187 81 205 59 168 235 32 31 83 221 180 227 78 8 192 255 125 255 147 120 16 103 132 215 152 213 163 68 11 214 220 52 190 58 14 174 248 119 102 25 160 201 127 239 177 87 32 179)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 152 211 241 110 28 81 10 147 62 100 142 120 208 21 136 49 159 0 46 148 117 223 137 66 162 168 157 176 102 107 183 200 139 50 187 36 129 64 228 74 196 171 40 17 27 43 121 35 153 169 38 244 166 111 190 40 255 101 192 159 131 6 137 58 236 9 75 137 208 254 82 158 53 119 197 236 243 10 121 68 202 175 83 15 69 117 235 17 63 207 76 32 13 45 212 189)
  :der-encode
  #t
  :tests
  '(#(743
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 101 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 49 0 231 7 226 103 234 99 83 132 166 218 9 130 49 73 245 203 122 203 178 158 145 13 38 48 197 251 90 251 196 42 168 67 99 73 178 20 163 184 251 148 129 236 153 158 0 80 145 248)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 209 253 96 47 238 248 11 233 229 90 25 209 169 121 156 114 168 153 17 12 106 194 31 179 194 19 87 6 152 9 213 145 168 119 91 100 209 134 122 140 255 241 36 246 165 227 164 245 249 84 128 100 240 27 154 248 134 135 5 73 58 55 160 55 25 59 72 245 59 124 121 115 2 63 83 230 206 255 104 48 202 47 122 20 239 81 83 109 69 58 244 59 48 88 216 169)
  :der-encode
  #t
  :tests
  '(#(744
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 101 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 49 0 172 196 242 175 183 245 193 15 129 129 117 7 78 246 136 166 67 252 83 101 227 129 41 248 109 94 37 23 254 184 27 44 210 184 220 79 120 33 191 208 50 237 196 192 35 64 133 217)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 130 243 118 4 246 102 100 194 136 61 186 109 152 57 124 40 16 69 203 245 159 29 22 221 219 19 129 18 106 36 101 83 168 180 210 170 234 72 173 145 133 161 100 95 101 86 125 49 138 77 123 25 241 210 228 67 76 154 142 202 211 150 48 74 188 130 34 27 186 176 103 153 53 7 28 114 253 151 94 123 2 28 4 177 209 110 163 111 194 208 81 239 90 142 17 124)
  :der-encode
  #t
  :tests
  '(#(745
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 101 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 49 0 131 39 108 7 147 240 161 151 66 66 47 138 246 113 204 249 101 250 125 24 213 65 190 244 192 91 144 227 3 248 145 211 144 8 67 158 15 218 75 250 213 238 154 106 206 126 52 12)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 240 82 223 194 123 248 166 211 111 55 57 242 57 185 129 245 181 63 224 141 153 158 198 131 176 30 67 231 89 97 86 32 107 160 139 139 159 89 34 158 47 189 206 5 241 228 15 153 144 240 253 251 112 41 249 179 232 198 20 77 173 3 57 32 139 124 220 179 130 10 85 66 89 219 157 39 175 221 24 244 167 80 41 108 89 186 214 182 45 240 118 249 13 83 190 13)
  :der-encode
  #t
  :tests
  '(#(746
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 101 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 49 0 148 40 72 88 107 83 65 5 221 209 202 119 223 114 225 37 17 64 244 18 233 123 98 175 191 133 212 130 35 9 23 107 89 101 69 61 238 63 171 112 158 20 21 107 61 252 236 202)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 248 119 189 110 42 146 115 227 34 163 41 142 163 173 209 61 17 4 179 33 114 40 54 105 202 102 136 240 203 89 21 36 167 241 93 212 20 150 104 30 218 152 147 154 174 114 159 237 232 92 163 124 129 239 25 227 220 154 177 105 8 163 114 13 134 135 90 81 166 166 217 50 227 116 146 166 236 122 52 78 171 196 130 55 127 20 137 31 189 29 167 250 239 250 17 120)
  :der-encode
  #t
  :tests
  '(#(747
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 237 33 25 213 252 18 100 159 200 8 175 59 109 144 55 211 164 78 179 35 153 151 13 208)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 20 36 155 188 254 236 234 176 108 117 101 77 54 28 13 248 213 107 50 14 163 188 29 70 39 236 10 47 75 143 163 87 116 69 105 70 100 245 105 169 31 72 7 65 56 30 73 74 40 71 159 33 134 215 21 165 103 136 246 112 115 5 106 160 203 11 106 127 120 147 231 123 154 105 118 239 102 99 216 2 38 137 109 127 67 187 80 46 27 77 73 85 138 39 221 139)
  :der-encode
  #t
  :tests
  '(#(748
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 48 121 185 92 1 59 4 114 222 4 216 250 238 195 183 121 195 159 231 41 234 132 251 85 76 208 145 199 23 140 47 5 78 171 188 98 195 225 207 186 194 194 230 157 122 164 93 144 114)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 80 164 56 201 142 233 64 37 206 19 226 125 54 184 40 13 72 67 88 88 54 235 71 1 26 7 12 215 119 41 36 86 132 160 219 49 253 233 128 98 3 73 199 150 131 43 44 108 189 183 45 186 159 63 156 200 120 85 159 80 182 189 18 144 241 10 107 204 188 30 238 247 112 139 27 114 5 144 34 152 121 121 227 82 33 197 18 89 243 55 199 40 138 47 134 188)
  :der-encode
  #t
  :tests
  '(#(749
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 101 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 49 0 191 212 13 12 170 77 157 66 56 31 61 114 162 86 131 245 43 3 161 237 150 251 114 208 63 8 220 185 168 188 143 35 193 164 89 222 171 3 188 211 147 150 192 209 233 5 60 129)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 77 63 197 220 250 247 65 17 60 218 60 226 248 223 244 201 18 20 62 77 54 49 76 54 29 126 213 101 107 104 68 139 204 161 20 186 158 129 36 40 18 52 102 11 119 38 221 205 104 13 223 239 126 160 123 251 206 222 16 128 61 56 215 33 22 49 202 17 70 96 120 129 158 182 110 17 146 26 183 255 163 196 86 12 115 46 119 89 95 212 8 233 23 221 154 252)
  :der-encode
  #t
  :tests
  '(#(750
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 48 76 125 33 157 185 175 148 206 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 239 21 207 16 88 200 216 186 30 99 76 65 34 219 149 236 31 172 212 187 19 235 240 154)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 99 214 92 223 235 31 26 66 0 15 67 189 29 221 19 5 55 167 182 246 53 232 210 189 129 169 125 161 104 34 17 131 218 67 60 167 132 41 253 43 51 197 249 72 149 169 193 58 169 209 213 234 50 135 37 101 58 90 157 0 248 90 85 22 35 111 59 20 40 168 98 146 135 211 176 72 122 46 130 221 87 249 59 178 170 61 151 131 220 116 19 30 19 117 96 52)
  :der-encode
  #t
  :tests
  '(#(751
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 101 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 49 0 210 25 219 154 249 76 231 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 209 137 189 182 217 239 123 232 80 76 163 116 117 110 165 184 241 94 68 6 125 32 155 155)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 210 44 156 52 139 151 69 113 31 87 222 186 195 160 125 249 10 82 124 6 189 2 168 69 79 65 67 125 84 34 78 7 22 152 240 63 220 100 177 214 82 65 78 220 63 34 57 196 154 233 129 42 75 146 240 153 214 101 154 101 150 145 118 141 87 229 48 237 60 145 213 69 87 129 96 88 80 153 122 88 34 31 34 162 69 28 57 50 71 6 6 194 63 58 177 184)
  :der-encode
  #t
  :tests
  '(#(752
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 101 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 49 0 164 51 183 53 242 153 207 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 219 176 45 235 191 167 201 241 72 127 57 54 162 44 163 246 245 208 110 162 45 124 13 195)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 49 240 92 12 41 233 218 73 170 47 187 237 238 119 12 104 209 15 133 231 247 126 114 172 60 250 156 134 35 162 187 66 238 178 242 74 200 242 174 247 171 12 75 71 130 49 64 3 91 179 47 193 236 4 187 255 94 171 150 224 112 201 56 186 27 83 254 99 151 15 100 154 224 46 42 74 218 66 10 36 155 111 124 82 94 44 75 155 13 85 98 174 38 242 39 140)
  :der-encode
  #t
  :tests
  '(#(753
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 101 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 49 0 185 175 148 206 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 214 239 238 252 135 108 159 35 33 123 68 60 128 99 126 249 57 233 17 33 159 150 193 121)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 188 38 238 201 94 38 201 128 188 3 52 38 76 188 252 38 184 151 195 87 28 150 206 154 178 166 123 73 187 15 38 166 39 47 220 39 128 109 122 76 87 42 224 247 129 73 241 243 200 175 95 65 185 157 32 102 1 129 101 81 63 179 181 94 66 85 220 208 101 150 71 237 85 225 226 96 44 174 78 251 214 234 225 223 226 255 99 226 199 72 212 172 199 67 1 57)
  :der-encode
  #t
  :tests
  '(#(754
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 101 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 49 0 162 118 39 98 118 39 98 118 39 98 118 39 98 118 39 98 118 39 98 118 39 98 118 39 61 114 40 212 248 75 118 155 224 253 87 185 126 76 30 188 174 154 95 99 94 128 233 223)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 111 160 150 77 208 84 37 10 241 118 137 28 12 130 43 1 59 112 240 89 195 71 23 44 175 198 179 108 209 108 243 176 249 209 159 37 152 189 13 88 10 193 108 70 172 177 103 212 55 91 239 112 28 0 45 204 4 15 213 72 36 177 76 194 223 1 84 235 32 231 68 100 225 254 123 131 52 38 221 125 99 107 242 215 150 3 253 222 93 218 171 35 171 12 244 38)
  :der-encode
  #t
  :tests
  '(#(755
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 48 115 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 22 228 217 244 45 78 202 34 223 64 58 12 87 139 134 240 169 169 63 232 153 149 199 237)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 186 164 231 18 238 7 134 165 171 14 90 93 175 220 220 248 123 56 131 10 178 236 134 250 237 218 159 223 101 51 47 106 150 136 38 148 18 240 80 53 101 48 212 102 74 127 184 205 236 196 106 144 27 1 110 107 184 163 54 173 154 166 241 154 191 154 218 105 112 93 28 144 91 234 251 149 164 79 82 175 67 222 75 248 12 5 12 249 150 183 121 109 252 238 142 27)
  :der-encode
  #t
  :tests
  '(#(756
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 218 66 51 171 248 36 201 63 144 17 94 118 219 32 111 167 72 157 102 71 51 46 27 163)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 129 231 138 82 174 6 149 88 63 122 96 26 185 182 251 250 244 52 242 190 250 31 140 131 61 89 222 182 39 169 39 194 244 45 72 235 97 127 224 66 245 132 225 5 194 60 35 23 207 34 213 101 245 243 180 37 239 121 55 223 98 155 104 100 218 199 18 100 178 136 193 169 135 33 15 82 48 113 49 156 227 246 68 17 145 10 194 55 101 196 38 110 97 81 18 188)
  :der-encode
  #t
  :tests
  '(#(757
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 48 63 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 227 177 166 192 250 27 150 239 172 13 6 217 36 88 83 189 118 118 12 181 102 98 148 187)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 65 250 135 101 177 157 49 8 3 30 40 201 167 129 163 133 201 193 11 43 253 66 230 67 126 92 75 215 17 207 42 3 23 80 132 125 23 168 47 147 118 163 10 225 130 166 214 231 28 32 175 150 50 65 71 212 21 90 77 12 134 124 168 227 110 186 32 79 190 210 8 126 15 203 220 139 170 190 7 187 49 35 249 247 37 158 119 28 217 241 173 23 209 162 55 135)
  :der-encode
  #t
  :tests
  '(#(758
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 101 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 49 0 223 234 6 134 85 38 206 161 28 15 158 185 81 43 65 250 149 129 208 246 203 125 185 104 3 54 21 29 206 121 222 129 140 223 51 200 121 218 50 39 64 65 109 30 90 229 50 250)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 229 133 160 103 214 223 243 122 231 241 127 129 88 49 25 182 18 145 89 115 69 241 7 172 255 226 55 160 143 72 134 212 253 249 79 230 49 130 230 20 60 153 190 37 167 183 216 107 87 44 30 6 221 44 123 148 184 115 240 87 143 203 43 153 214 14 36 110 81 36 93 8 4 237 212 75 50 240 240 0 200 248 248 143 29 74 101 254 165 29 187 180 171 30 40 35)
  :der-encode
  #t
  :tests
  '(#(759
      "point duplication during verification"
      #vu8(49 50 51 52 48 48)
      #vu8(48 101 2 49 0 179 118 153 224 213 24 164 211 112 219 218 170 234 55 136 133 15 160 63 129 134 209 247 143 223 186 230 84 10 166 112 179 28 138 218 15 255 62 115 123 214 149 32 86 15 224 206 96 2 48 100 173 180 213 26 147 249 107 237 70 101 222 45 78 17 105 204 149 129 158 198 233 51 62 223 213 192 124 161 52 206 239 124 149 149 123 113 154 227 73 252 67 158 170 73 251 190 52)
      #t
      ("PointDuplication"))))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 229 133 160 103 214 223 243 122 231 241 127 129 88 49 25 182 18 145 89 115 69 241 7 172 255 226 55 160 143 72 134 212 253 249 79 230 49 130 230 20 60 153 190 37 167 183 216 107 168 211 225 249 34 211 132 107 71 140 15 168 112 52 212 102 41 241 219 145 174 219 162 247 251 18 43 180 205 15 15 254 55 7 7 111 226 181 154 1 90 226 68 76 84 225 215 220)
  :der-encode
  #t
  :tests
  '(#(760
      "duplication bug"
      #vu8(49 50 51 52 48 48)
      #vu8(48 101 2 49 0 179 118 153 224 213 24 164 211 112 219 218 170 234 55 136 133 15 160 63 129 134 209 247 143 223 186 230 84 10 166 112 179 28 138 218 15 255 62 115 123 214 149 32 86 15 224 206 96 2 48 100 173 180 213 26 147 249 107 237 70 101 222 45 78 17 105 204 149 129 158 198 233 51 62 223 213 192 124 161 52 206 239 124 149 149 123 113 154 227 73 252 67 158 170 73 251 190 52)
      #f
      ("PointDuplication"))))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 180 215 140 204 188 237 128 101 192 235 220 51 11 70 112 236 153 48 146 115 228 66 185 190 52 17 150 193 4 62 68 65 252 87 185 20 8 85 149 191 199 85 198 79 196 9 240 186 1 254 227 28 187 186 237 92 19 35 240 156 135 223 155 7 18 193 46 153 115 63 162 62 249 27 78 108 166 102 176 157 215 84 14 191 16 104 161 81 85 188 6 158 61 89 92 140)
  :der-encode
  #t
  :tests
  '(#(761
      "point with x-coordinate 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 53 2 1 1 2 48 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 66 118 111 43 81 103 185 245 29 94 4 144 194 229 141 40 249 164 8 120 238 236 99 38)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 110 60 104 190 83 170 222 129 239 137 224 150 216 65 226 132 90 35 51 30 126 200 166 168 57 213 141 7 250 1 108 9 115 237 117 222 79 153 23 123 253 199 77 181 102 233 209 90 73 114 234 8 229 119 206 31 97 193 58 108 161 186 209 222 239 41 130 238 1 162 130 111 0 43 118 159 44 70 9 141 59 175 240 104 164 5 208 156 163 132 13 47 175 228 228 110)
  :der-encode
  #t
  :tests
  '(#(762
      "point with x-coordinate 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 101 2 49 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 48 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 39 224 169 25 253 164 162 198 68 210 2 189 65 188 238 75 200 252 5 21 92 39 110 176)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 177 1 205 179 235 162 14 17 42 219 180 187 210 203 71 154 105 229 144 164 78 169 2 99 24 50 171 250 184 175 44 48 65 179 223 127 22 101 178 198 235 83 63 84 98 23 16 10 26 97 170 153 81 87 138 212 240 10 225 115 57 168 166 241 53 155 189 10 195 85 103 142 212 223 33 51 143 8 118 60 29 55 2 236 19 43 99 76 123 204 1 24 239 177 208 221)
  :der-encode
  #t
  :tests
  '(#(763
      "comparison with point at infinity "
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 66 118 111 43 81 103 185 245 29 94 4 144 194 229 141 40 249 164 8 120 238 236 99 38 2 48 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 39 224 169 25 253 164 162 198 68 210 2 189 65 188 238 75 200 252 5 21 92 39 110 176)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 103 97 4 74 4 10 73 121 219 38 155 74 55 126 66 241 27 75 224 206 36 97 31 103 118 116 220 247 112 245 136 124 164 219 86 83 3 40 56 9 230 214 95 127 198 188 39 54 5 199 218 164 3 252 165 53 73 247 95 243 55 41 9 100 45 2 183 253 202 193 230 130 66 129 77 110 146 90 176 26 128 131 108 251 179 85 129 150 0 121 226 251 68 192 209 134)
  :der-encode
  #t
  :tests
  '(#(764
      "extreme value for k and edgecase s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 8 217 153 5 123 163 210 217 105 38 0 69 197 91 151 240 137 2 89 89 166 244 52 214 81 210 7 209 159 185 110 158 79 224 232 110 190 14 100 248 91 150 169 199 82 149 223 97 2 48 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 66 118 111 43 81 103 185 245 29 94 4 144 194 229 141 40 249 164 8 120 238 236 99 38)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 105 34 197 145 80 47 1 4 111 238 86 23 191 22 73 111 88 57 136 34 230 154 250 131 53 48 143 54 192 154 142 212 55 32 159 239 207 251 189 240 164 135 107 53 163 199 171 38 85 133 77 184 37 185 75 63 39 229 248 146 211 187 182 199 36 14 201 34 137 77 211 89 142 145 252 198 19 74 43 143 209 84 225 121 4 102 144 98 6 240 246 35 65 110 99 161)
  :der-encode
  #t
  :tests
  '(#(765
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 8 217 153 5 123 163 210 217 105 38 0 69 197 91 151 240 137 2 89 89 166 244 52 214 81 210 7 209 159 185 110 158 79 224 232 110 190 14 100 248 91 150 169 199 82 149 223 97 2 48 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 28 123 230 128 71 117 152 214 195 113 111 171 193 61 206 200 106 253 40 51 212 28 42 126)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 137 45 172 14 112 15 194 157 24 2 217 164 73 166 245 107 33 114 203 27 125 136 16 19 205 59 49 192 237 176 82 242 211 64 200 153 90 68 119 188 185 34 95 236 21 102 114 51 204 108 52 174 23 68 84 68 81 111 216 253 34 238 131 247 158 176 119 30 191 246 103 122 197 212 224 137 248 122 28 114 223 149 122 203 36 73 42 220 215 195 129 107 142 12 117 177)
  :der-encode
  #t
  :tests
  '(#(766
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 8 217 153 5 123 163 210 217 105 38 0 69 197 91 151 240 137 2 89 89 166 244 52 214 81 210 7 209 159 185 110 158 79 224 232 110 190 14 100 248 91 150 169 199 82 149 223 97 2 48 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 79 193 82 51 251 73 69 140 137 164 5 122 131 121 220 151 145 248 10 42 184 78 221 97)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 1 99 65 23 230 71 140 224 86 139 10 36 105 35 123 186 198 255 9 106 203 126 81 64 114 191 119 18 60 181 27 160 204 62 141 105 40 77 83 77 142 109 30 135 108 236 242 34 49 229 239 4 220 150 118 44 231 213 239 51 72 173 30 36 26 199 151 174 59 99 14 162 73 175 197 19 154 244 155 142 246 139 50 248 18 214 181 20 33 3 99 212 152 239 194 140)
  :der-encode
  #t
  :tests
  '(#(767
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 101 2 48 8 217 153 5 123 163 210 217 105 38 0 69 197 91 151 240 137 2 89 89 166 244 52 214 81 210 7 209 159 185 110 158 79 224 232 110 190 14 100 248 91 150 169 199 82 149 223 97 2 49 0 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 119 161 251 77 248 237 232 82 206 118 8 55 197 54 202 227 90 244 15 64 20 118 76 18)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 103 91 220 121 216 36 56 135 254 27 48 93 18 172 16 210 233 192 189 224 112 166 227 57 76 213 246 173 251 206 218 117 73 139 14 122 121 76 114 18 244 43 233 63 97 103 68 86 62 150 209 191 111 149 205 190 250 119 73 17 186 6 70 61 138 144 160 201 215 60 150 153 176 97 215 121 220 82 73 110 142 233 185 174 156 93 77 144 232 156 209 21 125 129 24 149)
  :der-encode
  #t
  :tests
  '(#(768
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 101 2 48 8 217 153 5 123 163 210 217 105 38 0 69 197 91 151 240 137 2 89 89 166 244 52 214 81 210 7 209 159 185 110 158 79 224 232 110 190 14 100 248 91 150 169 199 82 149 223 97 2 49 0 219 109 182 219 109 182 219 109 182 219 109 182 219 109 182 219 109 182 219 109 182 219 109 182 170 231 103 1 172 193 149 8 148 168 158 6 135 114 216 178 129 238 241 54 248 168 254 245)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 15 209 170 184 159 71 181 101 184 22 13 252 196 51 182 64 138 222 177 71 60 3 107 38 183 221 236 113 79 180 208 231 221 117 108 136 70 158 134 226 24 129 62 173 142 142 118 118 241 204 149 92 65 57 224 7 28 0 121 236 29 119 22 78 5 105 189 244 83 131 126 139 51 201 133 53 160 231 201 198 30 242 71 98 6 123 180 107 97 22 234 121 9 166 155 35)
  :der-encode
  #t
  :tests
  '(#(769
      "extreme value for k"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 8 217 153 5 123 163 210 217 105 38 0 69 197 91 151 240 137 2 89 89 166 244 52 214 81 210 7 209 159 185 110 158 79 224 232 110 190 14 100 248 91 150 169 199 82 149 223 97 2 48 14 177 14 90 185 95 47 38 164 7 0 177 48 15 184 195 231 84 213 196 83 217 56 78 204 225 218 163 129 53 164 138 10 150 194 78 252 42 118 208 11 222 29 122 238 223 127 106)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 52 215 78 192 136 186 182 198 50 57 104 209 244 104 153 56 18 246 144 214 237 202 91 151 96 77 113 142 18 184 205 253 217 109 66 229 125 51 175 227 18 240 238 60 61 10 19 247 134 244 146 43 178 193 59 223 119 82 163 236 182 147 147 233 151 189 101 70 28 70 134 126 190 239 98 150 178 63 44 86 223 99 172 253 230 72 243 245 0 45 188 35 159 253 21 130)
  :der-encode
  #t
  :tests
  '(#(770
      "extreme value for k and edgecase s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 101 2 49 0 170 135 202 34 190 139 5 55 142 177 199 30 243 32 173 116 110 29 59 98 139 167 155 152 89 247 65 224 130 84 42 56 85 2 242 93 191 85 41 108 58 84 94 56 114 118 10 183 2 48 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 66 118 111 43 81 103 185 245 29 94 4 144 194 229 141 40 249 164 8 120 238 236 99 38)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 67 118 201 137 62 146 119 41 108 118 106 131 171 190 54 179 77 167 166 49 248 203 253 50 161 136 141 224 221 20 85 162 26 21 62 162 214 28 250 80 113 252 107 225 42 101 143 107 41 11 161 168 238 140 120 181 221 88 249 255 202 203 34 149 86 130 238 160 36 41 195 250 140 220 182 73 250 77 0 124 134 147 227 248 243 192 165 243 196 222 122 81 190 170 152 9)
  :der-encode
  #t
  :tests
  '(#(771
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 101 2 49 0 170 135 202 34 190 139 5 55 142 177 199 30 243 32 173 116 110 29 59 98 139 167 155 152 89 247 65 224 130 84 42 56 85 2 242 93 191 85 41 108 58 84 94 56 114 118 10 183 2 48 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 28 123 230 128 71 117 152 214 195 113 111 171 193 61 206 200 106 253 40 51 212 28 42 126)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 16 135 143 196 128 127 103 50 162 60 136 62 131 142 56 199 135 247 8 143 148 193 130 75 132 103 62 139 158 171 22 222 21 68 174 75 242 198 254 63 228 251 52 59 116 135 226 180 48 54 255 67 149 51 210 47 149 29 174 150 101 132 186 251 35 178 23 220 173 47 143 78 14 105 153 192 196 208 240 118 99 75 232 5 246 118 253 42 89 194 127 159 231 197 217 91)
  :der-encode
  #t
  :tests
  '(#(772
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 101 2 49 0 170 135 202 34 190 139 5 55 142 177 199 30 243 32 173 116 110 29 59 98 139 167 155 152 89 247 65 224 130 84 42 56 85 2 242 93 191 85 41 108 58 84 94 56 114 118 10 183 2 48 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 79 193 82 51 251 73 69 140 137 164 5 122 131 121 220 151 145 248 10 42 184 78 221 97)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 3 107 37 62 59 74 200 139 184 88 90 43 50 185 120 118 106 147 30 90 208 208 230 83 162 227 75 68 214 221 204 13 56 110 32 196 222 242 216 187 63 141 161 40 193 234 198 159 156 142 59 95 245 221 226 32 90 243 89 179 151 77 82 117 141 122 186 232 18 184 178 117 225 69 44 78 89 203 98 233 182 119 29 52 125 189 29 234 118 28 112 41 28 197 224 166)
  :der-encode
  #t
  :tests
  '(#(773
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 102 2 49 0 170 135 202 34 190 139 5 55 142 177 199 30 243 32 173 116 110 29 59 98 139 167 155 152 89 247 65 224 130 84 42 56 85 2 242 93 191 85 41 108 58 84 94 56 114 118 10 183 2 49 0 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 119 161 251 77 248 237 232 82 206 118 8 55 197 54 202 227 90 244 15 64 20 118 76 18)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 39 131 193 190 146 47 206 21 88 100 236 180 29 10 49 110 25 58 85 132 62 128 25 47 31 229 86 119 47 61 235 208 75 159 201 60 39 188 111 53 57 56 136 106 64 68 25 148 26 53 44 236 51 105 70 66 79 163 194 8 234 113 5 245 84 158 221 232 104 138 189 48 83 68 191 79 102 221 167 234 188 218 111 133 87 201 175 136 16 152 4 215 2 233 103 11)
  :der-encode
  #t
  :tests
  '(#(774
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 102 2 49 0 170 135 202 34 190 139 5 55 142 177 199 30 243 32 173 116 110 29 59 98 139 167 155 152 89 247 65 224 130 84 42 56 85 2 242 93 191 85 41 108 58 84 94 56 114 118 10 183 2 49 0 219 109 182 219 109 182 219 109 182 219 109 182 219 109 182 219 109 182 219 109 182 219 109 182 170 231 103 1 172 193 149 8 148 168 158 6 135 114 216 178 129 238 241 54 248 168 254 245)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 250 146 83 140 220 116 3 104 202 241 100 128 255 19 4 206 187 190 89 164 106 122 132 96 55 38 185 89 45 16 91 224 105 223 28 97 181 151 79 39 231 85 47 121 125 233 124 219 98 14 3 164 109 168 98 228 176 137 186 251 184 13 248 240 85 200 244 121 145 179 163 221 178 176 137 174 219 47 21 132 26 106 91 94 20 193 220 54 179 193 85 196 247 77 52 9)
  :der-encode
  #t
  :tests
  '(#(775
      "extreme value for k"
      #vu8(49 50 51 52 48 48)
      #vu8(48 101 2 49 0 170 135 202 34 190 139 5 55 142 177 199 30 243 32 173 116 110 29 59 98 139 167 155 152 89 247 65 224 130 84 42 56 85 2 242 93 191 85 41 108 58 84 94 56 114 118 10 183 2 48 14 177 14 90 185 95 47 38 164 7 0 177 48 15 184 195 231 84 213 196 83 217 56 78 204 225 218 163 129 53 164 138 10 150 194 78 252 42 118 208 11 222 29 122 238 223 127 106)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 170 135 202 34 190 139 5 55 142 177 199 30 243 32 173 116 110 29 59 98 139 167 155 152 89 247 65 224 130 84 42 56 85 2 242 93 191 85 41 108 58 84 94 56 114 118 10 183 54 23 222 74 150 38 44 111 93 158 152 191 146 146 220 41 248 244 29 189 40 154 20 124 233 218 49 19 181 240 184 192 10 96 177 206 29 126 129 157 122 67 29 124 144 234 14 95)
  :der-encode
  #t
  :tests
  '(#(776
      "testing point duplication"
      #vu8(49 50 51 52 48 48)
      #vu8(48 101 2 49 0 249 177 39 240 216 30 188 209 123 123 160 234 19 28 102 13 52 11 5 206 85 124 130 22 14 15 121 61 224 125 56 23 144 35 148 40 113 172 183 0 45 250 253 255 252 141 234 206 2 48 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 28 123 230 128 71 117 152 214 195 113 111 171 193 61 206 200 106 253 40 51 212 28 42 126)
      #f
      ())
    #(777
      "testing point duplication"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 6 78 216 15 39 225 67 46 132 132 95 21 236 227 153 242 203 244 250 49 170 131 125 233 185 83 212 68 19 185 245 199 199 246 121 137 215 3 240 122 190 241 27 106 208 55 62 165 2 48 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 28 123 230 128 71 117 152 214 195 113 111 171 193 61 206 200 106 253 40 51 212 28 42 126)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 170 135 202 34 190 139 5 55 142 177 199 30 243 32 173 116 110 29 59 98 139 167 155 152 89 247 65 224 130 84 42 56 85 2 242 93 191 85 41 108 58 84 94 56 114 118 10 183 201 232 33 181 105 217 211 144 162 97 103 64 109 109 35 214 7 11 226 66 215 101 235 131 22 37 206 236 74 15 71 62 245 159 78 48 226 129 126 98 133 188 226 132 111 21 241 160)
  :der-encode
  #t
  :tests
  '(#(778
      "testing point duplication"
      #vu8(49 50 51 52 48 48)
      #vu8(48 101 2 49 0 249 177 39 240 216 30 188 209 123 123 160 234 19 28 102 13 52 11 5 206 85 124 130 22 14 15 121 61 224 125 56 23 144 35 148 40 113 172 183 0 45 250 253 255 252 141 234 206 2 48 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 28 123 230 128 71 117 152 214 195 113 111 171 193 61 206 200 106 253 40 51 212 28 42 126)
      #f
      ())
    #(779
      "testing point duplication"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 6 78 216 15 39 225 67 46 132 132 95 21 236 227 153 242 203 244 250 49 170 131 125 233 185 83 212 68 19 185 245 199 199 246 121 137 215 3 240 122 190 241 27 106 208 55 62 165 2 48 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 28 123 230 128 71 117 152 214 195 113 111 171 193 61 206 200 106 253 40 51 212 28 42 126)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 1 29 47 201 148 223 32 75 99 240 90 232 66 12 163 144 85 155 128 196 152 142 246 57 185 92 70 158 92 178 76 242 22 84 12 190 188 71 11 202 160 70 102 18 219 222 109 3 9 140 105 150 224 160 95 2 144 33 131 206 186 75 83 15 79 53 0 169 158 76 220 138 80 192 217 141 135 9 68 229 101 72 220 76 246 187 191 61 105 120 239 188 143 200 119 139 51 225 50 210 193 133 194 8 68 207 61 243 148 213 34 37 147 23 227 147 31 1 48 242 63 101 0 200 128 243 168 49 154 180 74 14)
  :der-encode
  #t
  :tests
  '(#(780
      "k*G has a large x-coordinate"
      #vu8(84 101 115 116)
      #vu8(48 103 2 33 5 174 121 120 124 64 208 105 148 128 51 254 183 8 246 90 47 196 74 54 71 118 99 184 81 68 144 72 225 110 199 155 245 2 66 1 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 250 81 134 135 131 191 47 150 107 127 204 1 72 247 9 165 208 59 181 201 184 137 156 71 174 187 111 183 30 145 56 100 6)
      #t
      ())
    #(781
      "r too large"
      #vu8(84 101 115 116)
      #vu8(48 129 136 2 66 1 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 2 66 1 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 250 81 134 135 131 191 47 150 107 127 204 1 72 247 9 165 208 59 181 201 184 137 156 71 174 187 111 183 30 145 56 100 6)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 1 154 2 156 119 254 208 76 171 26 184 147 127 218 129 40 252 25 191 140 65 168 242 66 246 169 202 111 10 232 19 193 112 155 139 3 226 106 146 152 254 89 249 158 55 6 255 194 140 67 210 106 17 105 13 47 253 129 90 51 234 50 144 118 105 120 0 18 91 42 75 99 95 81 79 213 214 50 21 103 47 49 26 229 147 92 23 116 237 93 138 68 137 123 104 25 30 99 105 171 38 223 145 94 32 102 169 67 229 154 53 119 49 157 172 90 134 100 11 200 199 24 210 177 89 71 159 221 34 209 20 65)
  :der-encode
  #t
  :tests
  '(#(782
      "r,s are large"
      #vu8(84 101 115 116)
      #vu8(48 129 136 2 66 1 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 250 81 134 135 131 191 47 150 107 127 204 1 72 247 9 165 208 59 181 201 184 137 156 71 174 187 111 183 30 145 56 100 7 2 66 1 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 250 81 134 135 131 191 47 150 107 127 204 1 72 247 9 165 208 59 181 201 184 137 156 71 174 187 111 183 30 145 56 100 6)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 0 235 98 135 128 64 180 202 12 140 97 175 231 225 149 226 46 57 95 105 199 133 154 194 183 152 2 150 112 152 50 85 115 181 109 61 101 183 188 243 17 27 196 133 158 29 8 22 197 65 71 58 193 255 207 74 44 199 214 230 170 89 27 161 23 175 0 91 234 38 202 199 206 33 53 132 181 211 90 178 45 139 69 220 136 255 38 237 186 221 72 122 169 140 202 167 22 19 187 123 121 220 230 122 155 195 109 62 152 15 193 13 67 19 172 32 196 207 39 30 204 31 74 218 179 149 19 151 26 164 251 157)
  :der-encode
  #t
  :tests
  '(#(783
      "r and s^-1 have a large Hamming weight"
      #vu8(84 101 115 116)
      #vu8(48 129 136 2 66 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 2 66 0 149 225 159 210 183 85 214 3 191 153 69 98 217 161 31 99 207 78 173 236 189 192 236 181 163 148 229 69 41 232 218 88 165 39 188 109 133 114 80 67 120 99 98 171 77 230 203 199 216 14 98 90 224 169 136 97 174 161 199 191 113 9 201 31 102)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 1 41 107 4 159 25 121 120 91 51 119 197 226 142 223 76 39 135 242 19 242 131 107 234 245 214 20 7 135 10 222 133 125 80 131 224 29 135 40 176 221 222 27 161 187 62 121 22 23 237 219 2 165 44 120 4 151 145 202 82 182 70 249 49 23 194 0 185 119 167 17 165 3 12 78 246 153 8 51 41 97 50 32 59 173 189 188 1 64 124 74 206 180 156 150 182 88 252 119 255 31 101 90 215 78 19 68 226 252 85 201 28 127 195 67 35 85 25 45 179 210 192 60 209 52 186 56 122 211 172 222 64)
  :der-encode
  #t
  :tests
  '(#(784
      "r and s^-1 have a large Hamming weight"
      #vu8(84 101 115 116)
      #vu8(48 129 135 2 66 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 2 65 21 131 118 69 88 58 55 167 166 101 249 131 197 227 71 246 93 202 71 100 122 168 15 210 73 138 121 29 68 217 178 133 10 21 26 110 134 252 231 215 187 129 78 114 79 241 27 158 247 38 191 54 198 231 84 140 55 248 42 36 144 40 118 238 25)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 0 95 80 89 48 131 73 249 235 187 77 28 85 192 175 204 246 33 98 236 29 209 46 243 237 144 102 86 146 79 253 153 202 185 240 107 14 178 24 207 240 120 164 103 122 92 225 204 7 101 43 201 118 174 252 115 44 40 246 126 240 120 164 52 233 153 0 165 209 77 243 16 99 13 118 236 3 203 111 155 149 191 26 34 67 129 5 200 140 217 253 61 172 128 248 87 173 211 130 113 216 186 144 22 132 178 109 67 109 74 133 154 212 205 165 233 103 123 115 202 179 243 229 228 26 61 121 150 96 114 121 171)
  :der-encode
  #t
  :tests
  '(#(785
      "small r and s"
      #vu8(84 101 115 116)
      #vu8(48 6 2 1 1 2 1 1)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 0 31 183 6 66 116 186 59 89 80 240 10 2 124 178 207 66 209 237 105 200 157 148 77 160 65 94 144 134 243 92 133 180 74 253 214 53 205 193 250 222 44 231 30 98 72 94 36 60 235 159 7 90 17 20 118 48 46 96 215 215 139 18 7 205 167 0 107 66 82 7 113 114 51 32 89 169 198 15 150 104 147 253 167 231 51 119 222 188 186 154 143 105 206 232 245 157 103 162 202 137 47 173 29 244 70 49 97 241 87 199 193 23 193 187 253 220 136 68 28 76 138 188 99 102 123 229 193 255 34 246 226)
  :der-encode
  #t
  :tests
  '(#(786
      "small r and s"
      #vu8(84 101 115 116)
      #vu8(48 6 2 1 1 2 1 2)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 1 135 125 66 193 16 169 251 227 114 62 104 78 160 28 85 38 151 168 232 54 120 20 92 186 220 46 39 195 62 118 239 46 216 133 231 175 119 248 51 19 33 59 4 16 123 75 146 248 10 235 253 103 15 209 70 123 43 185 51 58 194 128 234 155 97 1 172 244 232 90 12 203 223 196 112 54 56 194 30 180 91 74 147 219 63 167 71 179 101 35 133 53 205 174 228 252 86 170 149 133 75 78 201 196 81 105 58 175 114 169 13 102 211 0 210 33 27 220 31 160 207 133 229 194 74 224 142 242 162 66 72)
  :der-encode
  #t
  :tests
  '(#(787
      "small r and s"
      #vu8(84 101 115 116)
      #vu8(48 6 2 1 1 2 1 3)
      #t
      ())
    #(788
      "r is larger than n"
      #vu8(84 101 115 116)
      #vu8(48 71 2 66 1 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 250 81 134 135 131 191 47 150 107 127 204 1 72 247 9 165 208 59 181 201 184 137 156 71 174 187 111 183 30 145 56 100 10 2 1 3)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 1 110 175 44 48 67 177 10 216 169 155 231 248 204 196 147 21 25 182 236 89 50 111 106 6 243 116 203 79 134 225 35 125 240 242 109 246 169 12 248 108 48 212 46 59 208 88 60 116 72 48 222 207 120 52 69 69 244 182 218 234 103 74 136 45 185 0 109 253 9 50 10 151 109 89 44 77 57 211 9 13 111 74 211 153 43 112 14 62 144 237 26 19 70 35 140 117 244 186 244 147 190 140 28 22 131 142 206 194 217 153 66 102 4 47 249 198 36 134 146 150 238 155 2 59 187 18 212 11 192 175 7)
  :der-encode
  #t
  :tests
  '(#(789
      "s is larger than n"
      #vu8(84 101 115 116)
      #vu8(48 71 2 1 1 2 66 1 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 250 81 134 135 131 191 47 150 107 127 204 1 72 247 9 165 208 59 181 201 184 137 156 71 174 187 111 183 30 145 75 58 144)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 1 139 112 223 57 106 107 216 65 141 230 161 247 232 15 145 91 204 7 145 41 205 203 74 28 118 176 225 210 87 105 16 241 174 22 243 194 118 113 140 132 28 3 225 140 226 67 235 174 90 166 24 240 156 221 244 112 52 18 36 165 1 111 111 4 232 1 122 211 198 16 43 40 33 32 13 55 60 255 213 97 74 103 11 235 220 230 242 68 179 77 206 135 221 135 88 120 107 122 40 41 205 83 229 147 37 220 235 233 75 86 64 185 209 202 119 92 82 113 106 89 109 158 58 8 64 255 219 214 75 242 71)
  :der-encode
  #t
  :tests
  '(#(790
      "small r and s^-1"
      #vu8(84 101 115 116)
      #vu8(48 72 2 2 1 0 2 66 1 239 223 191 126 253 251 247 239 223 191 126 253 251 247 239 223 191 126 253 251 247 239 223 191 126 253 251 247 239 223 191 126 248 123 77 225 252 146 221 117 118 57 64 138 80 190 225 7 100 227 38 253 210 250 48 141 253 227 229 36 63 223 74 197 172)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 0 19 51 121 136 100 69 136 8 253 107 16 166 200 37 23 64 218 109 98 52 64 205 241 227 89 110 131 18 181 143 35 105 45 106 2 16 209 104 44 6 164 118 244 71 3 77 122 52 105 118 208 194 206 26 88 63 150 247 154 83 86 185 160 128 185 0 100 61 35 181 33 41 47 169 105 102 183 247 51 207 32 139 107 231 86 71 223 134 226 226 204 218 64 171 51 96 171 29 99 30 241 63 230 110 179 224 143 174 161 148 69 182 249 62 131 35 225 125 226 144 147 31 173 190 43 106 125 44 223 51 215)
  :der-encode
  #t
  :tests
  '(#(791
      "smallish r and s^-1"
      #vu8(84 101 115 116)
      #vu8(48 77 2 7 45 155 77 52 121 82 205 2 66 1 0 80 141 7 52 19 222 130 146 117 231 101 9 253 129 207 244 154 223 76 128 237 45 221 74 121 55 209 217 24 121 104 120 254 194 76 196 101 112 152 44 63 184 245 233 44 205 203 62 103 127 7 233 189 13 176 184 72 20 190 28 121 73 176 222)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 1 83 250 11 225 249 209 153 186 98 177 234 112 72 147 233 179 75 77 145 227 143 22 174 140 67 207 59 169 227 183 176 155 31 147 207 135 101 83 99 174 254 147 150 52 138 175 183 26 239 193 86 120 144 80 223 70 248 64 59 4 110 26 144 106 175 1 194 196 26 127 160 13 15 122 234 236 161 86 77 171 232 112 201 9 113 130 85 27 28 239 235 166 180 103 62 85 122 27 41 117 135 17 57 67 226 92 0 194 26 84 244 95 40 14 15 188 81 22 100 147 53 103 247 156 189 14 158 42 90 218 117)
  :der-encode
  #t
  :tests
  '(#(792
      "100-bit r and small s^-1"
      #vu8(84 101 115 116)
      #vu8(48 83 2 13 16 51 230 126 55 179 43 68 85 128 191 78 255 2 66 1 60 195 60 195 60 195 60 195 60 195 60 195 60 195 60 195 60 195 60 195 60 195 60 195 60 195 60 195 60 195 60 195 57 63 99 42 255 211 234 163 200 251 100 80 123 213 153 100 151 189 88 143 185 227 148 124 9 124 237 117 70 181 124 137 152)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 1 82 48 69 153 186 33 252 249 239 36 123 153 223 18 173 167 20 201 6 115 243 23 0 167 20 188 202 166 71 246 48 128 137 164 56 217 90 70 32 100 98 75 140 22 212 45 102 15 60 22 162 122 130 61 241 221 3 152 137 144 40 239 139 230 192 0 226 230 26 39 232 251 240 176 175 177 195 148 142 139 137 55 91 110 94 203 93 221 70 225 210 194 161 150 186 174 30 248 214 142 79 10 146 74 155 107 248 94 80 252 207 113 157 182 16 170 0 79 175 206 248 61 153 108 209 239 203 208 8 40 166)
  :der-encode
  #t
  :tests
  '(#(793
      "small r and 100 bit s^-1"
      #vu8(84 101 115 116)
      #vu8(48 72 2 2 1 0 2 66 0 134 236 191 84 171 89 164 225 149 240 190 20 2 237 216 101 123 185 70 24 250 181 15 47 226 15 229 235 188 159 240 228 145 57 126 211 19 204 145 141 67 142 237 185 181 236 180 217 223 163 5 48 53 5 186 242 84 0 237 140 32 252 63 196 123)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 0 208 58 204 238 221 183 216 246 0 65 32 93 239 130 224 158 100 188 89 129 28 246 80 45 234 143 114 169 168 231 221 60 106 176 62 62 109 77 19 27 104 133 125 10 233 111 212 181 157 79 172 130 11 16 100 143 178 130 223 148 229 210 156 98 211 1 11 1 200 83 10 8 155 7 177 178 163 79 218 157 254 151 18 59 28 14 249 124 124 158 182 79 68 166 193 172 242 16 17 87 216 89 106 155 219 219 84 173 121 179 180 163 109 208 103 100 202 176 36 117 28 63 132 205 10 60 215 20 215 228 156)
  :der-encode
  #t
  :tests
  '(#(794
      "100-bit r and s^-1"
      #vu8(84 101 115 116)
      #vu8(48 83 2 13 6 37 34 187 211 236 190 124 57 233 62 124 36 2 66 0 134 236 191 84 171 89 164 225 149 240 190 20 2 237 216 101 123 185 70 24 250 181 15 47 226 15 229 235 188 159 240 228 145 57 126 211 19 204 145 141 67 142 237 185 181 236 180 217 223 163 5 48 53 5 186 242 84 0 237 140 32 252 63 196 123)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 1 217 41 186 182 16 91 237 201 197 241 133 76 227 100 116 34 72 78 147 58 71 44 130 47 63 200 140 118 132 84 3 154 160 220 30 196 247 82 21 125 70 2 94 173 7 34 179 203 134 246 130 51 62 136 237 230 189 47 116 135 8 72 115 173 70 0 88 136 36 51 96 176 139 166 35 141 124 130 215 73 32 251 124 141 92 202 249 43 44 71 136 46 115 14 106 104 165 98 71 77 60 76 217 205 19 3 87 76 41 10 237 218 194 19 204 131 27 110 113 12 156 209 54 137 44 172 199 172 142 46 154)
  :der-encode
  #t
  :tests
  '(#(795
      "r and s^-1 are close to n"
      #vu8(84 101 115 116)
      #vu8(48 129 136 2 66 1 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 250 81 134 135 131 191 47 150 107 127 204 1 72 247 9 165 208 59 181 201 184 137 156 71 174 187 111 183 30 145 56 99 138 2 66 1 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 81 139 175 5 2 127 117 14 242 85 50 171 133 250 6 110 138 210 121 49 37 177 18 218 116 124 245 36 191 11 122 237 91)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 1 123 254 58 218 74 26 6 231 50 244 132 241 131 13 12 11 113 196 123 116 250 80 109 227 171 222 166 209 57 171 33 221 114 199 177 193 48 53 240 255 209 37 67 61 1 0 167 3 3 55 185 157 209 98 107 145 202 87 35 51 88 83 160 246 127 0 125 40 68 124 47 196 194 159 199 74 131 142 48 234 227 153 226 130 182 7 255 240 97 162 123 13 105 50 28 204 60 235 15 195 174 134 165 140 119 64 40 218 253 16 139 216 116 184 196 79 52 245 171 157 46 49 202 119 210 170 179 204 94 172 219)
  :der-encode
  #t
  :tests
  '(#(796
      "s == 1"
      #vu8(84 101 115 116)
      #vu8(48 71 2 66 0 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 168 197 215 130 129 63 186 135 121 42 153 85 194 253 3 55 69 105 60 152 146 216 137 109 58 62 122 146 95 133 189 118 173 2 1 1)
      #t
      ())
    #(797
      "s == 0"
      #vu8(84 101 115 116)
      #vu8(48 71 2 66 0 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 168 197 215 130 129 63 186 135 121 42 153 85 194 253 3 55 69 105 60 152 146 216 137 109 58 62 122 146 95 133 189 118 173 2 1 0)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 1 59 115 190 14 196 241 139 54 253 194 10 172 150 117 88 10 32 204 114 94 208 222 111 234 99 171 97 17 180 170 236 198 155 31 223 5 187 28 122 113 196 183 165 161 234 175 242 59 225 86 4 244 5 181 236 211 179 237 106 254 168 228 156 214 73 0 145 33 128 201 129 244 128 210 184 183 67 137 136 176 58 12 94 253 189 45 160 148 240 130 247 250 87 236 196 31 222 140 101 211 201 216 15 52 249 18 78 21 29 165 93 150 210 169 185 145 103 45 231 148 73 188 193 192 25 43 118 80 174 144 183)
  :der-encode
  #t
  :tests
  '(#(798
      "point at infinity during verify"
      #vu8(84 101 115 116)
      #vu8(48 129 136 2 66 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 40 195 67 193 223 151 203 53 191 230 0 164 123 132 210 232 29 218 228 220 68 206 35 215 93 183 219 143 72 156 50 4 2 66 0 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 168 197 215 130 129 63 186 135 121 42 153 85 194 253 3 55 69 105 60 152 146 216 137 109 58 62 122 146 95 133 189 118 173)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 0 67 235 134 42 90 77 206 109 228 176 144 27 145 223 148 250 178 120 195 38 172 52 152 196 129 174 63 73 184 147 171 139 49 216 9 114 60 2 163 202 81 84 229 213 185 224 212 63 222 140 189 251 184 9 183 70 32 134 116 131 129 125 120 159 216 1 127 71 126 1 150 138 193 41 119 175 255 195 147 245 19 35 206 77 186 14 208 211 199 0 170 107 59 111 180 146 153 123 4 189 9 246 74 118 115 177 38 35 77 194 91 2 57 99 58 92 211 130 40 150 251 209 213 226 113 3 138 47 59 121 181)
  :der-encode
  #t
  :tests
  '(#(799
      "edge case for signature malleability"
      #vu8(84 101 115 116)
      #vu8(48 129 136 2 66 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 40 195 67 193 223 151 203 53 191 230 0 164 123 132 210 232 29 218 228 220 68 206 35 215 93 183 219 143 72 156 50 6 2 66 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 40 195 67 193 223 151 203 53 191 230 0 164 123 132 210 232 29 218 228 220 68 206 35 215 93 183 219 143 72 156 50 4)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 0 25 133 209 157 19 29 118 207 29 168 136 123 49 78 46 235 72 29 20 31 130 65 254 196 108 242 119 159 162 4 35 100 168 160 195 101 98 30 247 46 24 196 78 228 182 9 127 121 85 32 96 215 167 101 213 143 82 64 57 78 102 194 59 207 168 0 29 178 42 97 109 136 105 58 189 40 156 199 125 220 90 203 208 2 32 222 117 218 4 154 88 186 48 70 142 44 162 86 167 35 186 18 160 157 69 135 30 173 195 116 118 205 46 82 204 223 30 6 201 169 78 197 47 117 210 154 25 1 47 198 150)
  :der-encode
  #t
  :tests
  '(#(800
      "edge case for signature malleability"
      #vu8(84 101 115 116)
      #vu8(48 129 136 2 66 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 40 195 67 193 223 151 203 53 191 230 0 164 123 132 210 232 29 218 228 220 68 206 35 215 93 183 219 143 72 156 50 6 2 66 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 40 195 67 193 223 151 203 53 191 230 0 164 123 132 210 232 29 218 228 220 68 206 35 215 93 183 219 143 72 156 50 5)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 1 192 30 171 155 166 221 210 30 51 66 16 52 172 214 172 146 58 64 159 171 52 158 3 128 191 170 84 180 4 137 0 134 165 225 47 176 158 19 82 113 44 253 225 90 188 37 99 7 154 115 211 51 201 199 156 103 15 176 107 93 128 42 169 183 118 0 167 106 40 208 63 101 124 97 191 135 255 120 231 115 58 6 149 86 210 189 99 139 121 49 106 183 11 90 40 9 188 138 152 162 168 67 35 141 74 190 38 152 178 170 106 237 225 178 84 27 243 220 208 7 207 156 213 196 212 150 156 79 127 252 203)
  :der-encode
  #t
  :tests
  '(#(801
      "u1 == 1"
      #vu8(84 101 115 116)
      #vu8(48 129 135 2 66 0 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 168 197 215 130 129 63 186 135 121 42 153 85 194 253 3 55 69 105 60 152 146 216 137 109 58 62 122 146 95 133 189 118 173 2 65 0 198 238 158 51 207 92 103 21 161 209 72 253 115 247 49 136 132 180 26 220 185 22 2 30 43 192 232 0 165 197 221 151 245 20 33 120 246 174 136 200 253 217 142 26 251 12 228 200 210 197 75 95 55 179 11 125 161 153 123 179 59 11 138 49)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 0 24 99 101 199 53 136 128 122 81 0 84 18 219 0 75 69 245 247 190 58 96 116 230 17 144 66 151 141 191 188 90 67 30 22 204 147 7 71 230 205 117 17 80 91 76 147 73 206 223 144 138 90 157 189 51 205 176 174 204 191 105 69 68 87 251 0 20 98 10 41 162 105 29 128 56 211 158 30 77 231 196 36 60 140 66 96 30 113 153 69 193 41 124 26 75 16 215 65 90 243 123 241 237 13 220 144 48 188 229 48 24 93 253 252 70 88 255 99 95 107 217 102 11 236 200 255 158 202 79 221 250)
  :der-encode
  #t
  :tests
  '(#(802
      "u1 == n - 1"
      #vu8(84 101 115 116)
      #vu8(48 129 136 2 66 0 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 168 197 215 130 129 63 186 135 121 42 153 85 194 253 3 55 69 105 60 152 146 216 137 109 58 62 122 146 95 133 189 118 173 2 66 1 255 57 17 97 204 48 163 152 234 94 46 183 2 140 8 206 119 123 75 229 35 70 233 253 225 212 63 23 255 90 58 34 98 92 114 102 10 200 129 13 162 129 242 115 45 251 252 193 7 104 240 126 89 81 233 60 49 25 214 59 107 86 44 217 216)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 0 46 42 116 107 85 224 91 193 48 211 116 200 171 184 191 101 26 46 43 2 84 4 240 133 69 190 252 185 92 159 127 104 31 111 91 155 242 235 196 93 76 133 114 146 29 58 181 220 225 68 234 93 80 235 236 137 184 200 240 16 234 49 73 72 99 0 140 129 111 18 45 93 99 181 254 160 13 26 0 237 35 87 127 126 247 212 143 57 115 86 131 83 212 104 54 142 199 124 188 158 60 80 18 131 155 116 131 48 135 213 27 163 230 128 171 83 117 190 104 14 168 193 143 123 97 159 50 177 65 242 129)
  :der-encode
  #t
  :tests
  '(#(803
      "u2 == 1"
      #vu8(84 101 115 116)
      #vu8(48 129 136 2 66 0 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 168 197 215 130 129 63 186 135 121 42 153 85 194 253 3 55 69 105 60 152 146 216 137 109 58 62 122 146 95 133 189 118 173 2 66 0 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 168 197 215 130 129 63 186 135 121 42 153 85 194 253 3 55 69 105 60 152 146 216 137 109 58 62 122 146 95 133 189 118 173)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 0 211 121 247 152 38 176 65 152 223 55 26 176 81 157 26 127 10 79 25 157 97 73 202 139 127 19 165 218 9 203 160 36 251 231 212 255 127 215 168 169 59 92 188 175 60 104 36 63 99 13 71 216 242 182 82 182 167 214 177 197 34 167 95 169 242 1 198 96 114 45 149 200 60 107 148 87 148 74 204 103 30 136 30 141 23 176 115 98 242 248 39 153 69 111 47 21 214 98 211 106 160 157 90 82 54 40 141 60 19 130 227 226 48 143 70 134 125 83 197 136 163 112 133 127 174 77 50 240 163 221 175)
  :der-encode
  #t
  :tests
  '(#(804
      "u2 == n - 1"
      #vu8(84 101 115 116)
      #vu8(48 129 136 2 66 0 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 168 197 215 130 129 63 186 135 121 42 153 85 194 253 3 55 69 105 60 152 146 216 137 109 58 62 122 146 95 133 189 118 173 2 66 1 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 81 139 175 5 2 127 117 14 242 85 50 171 133 250 6 110 138 210 121 49 37 177 18 218 116 124 245 36 191 11 122 237 92)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 1 185 204 140 171 106 243 239 206 98 161 93 225 242 173 187 178 42 77 45 116 232 220 243 47 236 10 148 163 218 53 8 222 29 74 7 63 82 69 249 108 154 106 163 2 30 84 234 163 83 58 120 23 196 229 121 68 171 33 116 84 155 107 147 235 80 1 113 44 221 131 102 196 81 24 240 22 22 58 115 71 25 143 73 90 42 155 196 39 144 141 188 109 212 179 48 245 110 28 29 244 169 136 111 127 214 60 73 18 74 222 96 213 191 142 107 122 195 214 157 56 249 196 219 216 161 34 22 56 39 44 203)
  :der-encode
  #t
  :tests
  '(#(805
      "edge case for u1"
      #vu8(84 101 115 116)
      #vu8(48 129 134 2 66 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 64 66 79 138 17 69 30 205 7 53 240 109 169 209 82 101 216 44 60 8 244 61 178 0 180 185 64 77 85 140 151 73 221 81 177 96 125 167 143 130 237 169 243 47 94 83 174 246 237 155 151 25 31 189 59 174 127 53 221 211 230 105 3 216 187)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 0 56 38 201 26 170 51 161 131 222 63 110 19 77 134 83 8 174 188 121 14 146 135 188 122 225 54 237 89 191 3 190 68 167 181 180 58 24 202 138 241 161 78 140 168 142 254 28 101 248 148 151 108 86 196 138 240 11 90 193 243 203 205 245 136 182 1 172 59 206 95 174 60 43 182 220 241 157 156 39 94 178 235 86 20 82 58 4 191 14 127 152 164 165 11 231 248 12 140 206 232 169 231 183 76 138 240 118 52 23 4 167 172 35 118 154 66 7 23 34 125 111 125 27 188 252 236 247 32 236 172 57)
  :der-encode
  #t
  :tests
  '(#(806
      "edge case for u1"
      #vu8(84 101 115 116)
      #vu8(48 129 135 2 66 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 65 65 238 171 125 61 126 128 147 124 173 11 134 211 229 62 20 131 1 102 194 239 168 157 241 142 198 248 143 198 168 165 128 96 26 145 147 75 169 34 189 116 99 81 160 8 172 79 134 220 196 209 58 127 240 148 32 248 151 181 43 248 138 76 146 105)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 0 200 97 179 213 151 125 175 211 33 196 46 171 25 19 162 241 167 52 233 251 26 33 143 51 192 42 148 29 175 164 30 127 95 165 180 215 63 82 199 76 53 230 38 43 28 74 21 69 197 205 223 169 18 254 68 46 231 161 106 170 224 197 195 246 67 0 96 29 185 129 171 149 147 201 64 87 35 202 168 109 134 44 87 91 92 84 164 135 70 124 35 64 228 149 242 109 187 21 135 87 13 16 211 134 9 179 140 80 9 72 5 95 89 107 41 1 148 177 230 110 168 208 111 250 117 84 209 216 251 107 24)
  :der-encode
  #t
  :tests
  '(#(807
      "edge case for u1"
      #vu8(84 101 115 116)
      #vu8(48 129 136 2 66 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 66 1 162 235 37 194 211 249 219 21 243 32 164 221 66 226 54 249 138 93 140 103 116 193 47 152 46 43 206 108 94 22 203 83 219 197 45 166 224 145 32 17 112 199 177 20 99 112 8 101 18 11 86 15 16 110 20 72 197 127 149 122 59 236 40 219 144)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 0 31 2 218 54 56 41 238 8 180 204 147 70 78 45 123 22 242 194 98 239 121 119 164 180 212 15 19 132 180 11 222 104 8 18 136 96 229 83 159 185 30 146 49 4 128 36 153 154 188 225 143 31 190 234 137 131 72 117 73 164 4 59 83 2 56 0 117 74 5 154 142 161 27 202 76 31 44 83 111 187 217 16 197 3 134 172 213 84 194 116 120 9 13 250 146 153 159 39 226 110 156 95 12 85 31 123 2 170 21 35 219 245 96 99 247 187 112 4 214 73 4 193 174 195 91 199 58 239 226 232 8)
  :der-encode
  #t
  :tests
  '(#(808
      "edge case for u1"
      #vu8(84 101 115 116)
      #vu8(48 129 136 2 66 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 66 0 165 33 164 69 254 128 29 209 255 57 17 97 204 48 163 152 234 94 46 183 2 140 8 206 119 123 75 229 35 70 233 253 223 255 37 97 45 76 100 11 151 47 68 0 229 191 89 123 52 44 196 160 229 228 213 12 165 121 206 138 10 224 156 9 19)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 0 46 206 41 98 239 71 17 244 155 22 151 172 127 173 7 89 22 119 103 161 4 183 106 216 119 73 200 58 226 129 139 246 106 185 217 80 159 115 251 21 62 171 139 84 96 125 204 167 61 60 56 9 117 175 163 238 57 55 50 180 74 89 52 153 44 1 24 106 216 11 241 35 186 53 189 91 33 179 217 94 44 103 42 211 180 133 240 120 98 8 88 207 178 79 27 246 30 173 144 251 26 39 35 236 80 28 43 122 151 205 209 252 62 150 78 134 210 60 3 10 42 185 13 166 243 151 29 164 246 140 153)
  :der-encode
  #t
  :tests
  '(#(809
      "edge case for u1"
      #vu8(84 101 115 116)
      #vu8(48 129 135 2 66 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 65 26 68 95 232 1 221 31 243 145 22 28 195 10 57 142 165 226 235 112 40 192 140 231 119 180 190 82 52 110 159 222 29 67 166 225 141 240 180 42 66 61 204 91 186 114 214 234 163 72 45 0 117 15 57 92 114 247 181 40 193 78 100 148 253 143)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 1 171 152 31 80 122 172 108 8 169 175 141 121 99 192 204 149 217 164 23 106 48 189 54 217 184 185 102 105 121 18 245 105 8 121 44 207 21 198 202 65 129 81 170 46 132 28 23 120 63 132 20 250 77 92 34 46 73 192 7 173 202 177 10 160 52 0 141 26 22 136 168 57 147 16 132 202 237 227 55 88 32 134 86 131 114 146 32 154 135 127 188 28 18 235 86 255 152 80 141 35 72 61 110 54 166 212 126 15 34 23 210 88 205 220 198 242 239 254 36 60 10 51 102 78 10 186 14 70 218 51 185)
  :der-encode
  #t
  :tests
  '(#(810
      "edge case for u1"
      #vu8(84 101 115 116)
      #vu8(48 129 135 2 66 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 65 52 136 191 208 3 186 63 231 34 44 57 134 20 115 29 75 197 214 224 81 129 25 206 239 105 124 164 104 221 63 188 58 135 77 195 27 225 104 84 132 123 152 183 116 229 173 213 70 144 90 0 234 30 114 184 229 239 106 81 130 156 201 41 251 30)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 0 254 250 207 66 86 97 200 211 162 24 63 196 206 17 185 167 151 152 185 35 103 30 66 198 147 193 11 238 6 216 167 180 97 239 164 163 37 115 202 199 160 22 79 43 163 233 244 131 102 184 173 6 65 112 251 231 152 102 75 21 56 157 142 141 164 1 127 75 41 203 26 224 159 100 10 106 190 183 138 132 103 116 34 190 251 128 65 99 65 56 106 222 228 218 231 2 199 225 106 232 61 2 69 49 225 182 59 1 172 178 196 110 76 14 37 222 86 145 91 212 201 14 241 19 232 119 145 8 250 226 103)
  :der-encode
  #t
  :tests
  '(#(811
      "edge case for u1"
      #vu8(84 101 115 116)
      #vu8(48 129 136 2 66 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 66 1 254 128 29 209 255 57 17 97 204 48 163 152 234 94 46 183 2 140 8 206 119 123 75 229 35 70 233 253 225 212 63 23 249 176 3 48 79 182 38 156 159 85 7 104 83 123 53 249 100 67 85 106 98 181 236 119 149 139 216 228 32 77 99 84 206)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 1 186 86 63 36 61 133 144 35 59 229 151 69 220 142 49 30 135 182 169 227 43 221 189 244 15 13 200 122 17 189 209 215 93 88 211 18 195 109 200 226 114 34 54 144 218 27 106 5 141 93 171 86 242 252 111 41 113 33 165 171 40 140 38 158 117 1 224 52 210 229 221 185 14 253 72 147 228 134 148 180 207 92 133 232 189 202 251 188 174 81 136 13 151 226 45 20 216 56 248 22 46 219 14 2 111 91 168 139 21 14 63 44 31 196 158 210 66 151 147 183 110 146 241 175 169 240 24 5 16 92 216)
  :der-encode
  #t
  :tests
  '(#(812
      "edge case for u1"
      #vu8(84 101 115 116)
      #vu8(48 129 136 2 66 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 66 1 65 40 21 26 125 51 164 101 118 126 135 104 16 80 102 122 229 40 175 60 67 207 197 158 60 60 28 128 55 217 65 177 43 237 107 121 239 203 202 207 37 173 70 34 108 92 43 43 191 161 54 14 35 195 49 219 103 206 222 71 217 176 170 63 210)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 0 36 52 204 162 124 57 101 211 12 26 195 118 4 254 205 86 240 212 172 112 28 29 122 76 199 53 119 74 16 145 54 92 193 167 203 94 45 102 216 153 49 85 31 220 224 76 13 239 21 3 226 236 43 120 32 193 153 174 153 14 54 53 35 134 229 1 90 59 215 219 98 249 181 249 111 80 241 76 240 179 21 170 161 52 43 244 53 37 201 205 46 176 77 43 131 236 33 64 79 229 31 103 81 29 30 231 41 103 231 131 107 131 22 232 34 132 119 248 147 62 69 223 85 183 95 235 164 49 153 83 198)
  :der-encode
  #t
  :tests
  '(#(813
      "edge case for u1"
      #vu8(84 101 115 116)
      #vu8(48 129 136 2 66 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 66 1 155 207 39 85 154 179 36 242 160 235 201 93 5 158 222 204 214 19 96 66 50 218 149 200 77 65 212 217 144 174 123 178 209 43 141 41 125 153 251 134 182 69 114 214 252 226 163 78 79 165 225 104 246 137 77 74 26 130 142 44 109 187 223 49 162)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 0 62 234 183 36 27 73 130 95 141 179 144 67 195 7 169 219 187 98 108 204 48 105 49 198 168 141 66 69 37 122 224 5 118 45 84 148 75 138 151 149 15 211 190 2 238 91 203 181 161 0 104 178 48 193 189 33 0 48 115 3 59 91 64 114 226 0 137 178 19 74 250 255 29 126 25 252 35 212 65 16 96 142 251 198 226 184 18 10 22 166 59 223 242 224 101 252 201 66 231 150 198 219 223 241 79 193 121 171 105 78 232 101 232 58 40 231 14 139 166 53 101 194 250 47 49 172 62 113 189 196 106)
  :der-encode
  #t
  :tests
  '(#(814
      "edge case for u1"
      #vu8(84 101 115 116)
      #vu8(48 129 136 2 66 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 66 0 182 205 56 25 69 113 48 65 199 153 3 86 55 10 0 161 8 136 206 144 93 242 199 146 34 106 150 202 219 97 223 148 188 66 119 192 74 251 205 171 243 118 240 45 42 106 221 244 5 42 215 103 59 26 225 225 236 73 175 56 144 102 129 7 146)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 1 127 184 56 239 154 107 200 135 110 242 24 138 95 13 54 251 118 100 38 115 236 34 47 35 244 156 253 216 96 197 5 52 211 71 118 9 195 161 22 94 147 223 175 204 16 52 214 207 118 41 108 208 47 86 227 63 80 239 162 2 205 215 221 10 23 1 0 210 117 188 184 54 156 52 207 48 70 209 152 255 175 76 206 187 3 19 154 173 142 68 1 49 15 118 62 120 180 173 13 216 127 166 224 67 139 244 48 178 193 15 37 248 129 157 197 70 182 176 102 19 234 240 104 197 156 236 178 187 145 104 74)
  :der-encode
  #t
  :tests
  '(#(815
      "edge case for u1"
      #vu8(84 101 115 116)
      #vu8(48 129 136 2 66 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 66 0 255 222 216 58 247 93 112 153 124 101 7 201 43 23 86 205 19 233 225 251 133 225 38 255 165 163 95 217 85 57 180 91 14 127 234 147 131 11 208 9 190 234 236 104 245 81 173 87 113 80 15 88 76 102 48 76 151 194 200 241 156 20 26 69 167)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 1 61 42 85 24 196 91 96 47 123 62 238 46 38 26 153 122 167 138 90 131 28 68 227 173 161 111 219 12 241 179 41 38 158 251 21 44 254 142 78 8 7 123 103 204 39 171 74 228 41 149 183 169 151 30 254 82 72 23 92 181 215 202 99 247 138 0 210 182 118 202 61 65 248 237 139 182 83 9 222 110 197 55 153 65 165 247 74 109 112 221 202 225 247 54 92 231 31 222 240 62 55 42 163 20 8 168 165 28 195 76 172 84 246 171 115 102 217 135 88 183 249 63 201 118 224 254 81 243 135 27 130)
  :der-encode
  #t
  :tests
  '(#(816
      "edge case for u1"
      #vu8(84 101 115 116)
      #vu8(48 129 136 2 66 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 66 1 255 189 176 117 238 186 225 50 248 202 15 146 86 46 173 154 39 211 195 247 11 194 77 255 75 70 191 178 170 115 104 182 28 255 213 39 6 23 160 19 125 213 216 209 234 163 90 174 226 160 30 176 152 204 96 153 47 133 145 227 56 40 52 139 78)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 0 172 78 154 209 250 216 5 74 46 19 32 63 204 72 147 51 149 91 251 119 98 174 212 91 97 231 81 130 111 138 19 11 83 7 193 242 240 82 0 29 195 159 151 31 25 93 106 156 106 90 181 208 37 151 130 42 137 42 226 190 103 20 59 242 174 0 92 224 253 130 227 80 184 95 45 122 46 219 213 149 161 232 144 161 67 238 154 23 241 74 237 49 149 13 81 125 69 126 149 238 22 15 129 139 126 122 230 183 33 53 80 69 22 180 187 219 200 87 24 244 66 163 220 154 33 238 77 160 243 39 182)
  :der-encode
  #t
  :tests
  '(#(817
      "edge case for u1"
      #vu8(84 101 115 116)
      #vu8(48 129 136 2 66 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 66 0 255 156 136 176 230 24 81 204 117 47 23 91 129 70 4 103 59 189 165 242 145 163 116 254 240 234 31 139 255 173 29 17 49 46 57 51 5 100 64 134 209 64 249 57 150 253 254 96 131 180 120 63 44 168 244 158 24 140 235 29 181 171 22 108 236)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 0 157 26 239 192 17 96 135 116 221 230 177 87 76 247 151 53 105 27 204 208 213 52 151 149 85 185 35 228 128 63 73 110 9 109 149 175 125 191 128 37 149 83 18 207 49 128 242 177 36 225 64 75 168 189 70 44 248 199 80 189 21 125 187 24 241 1 110 55 54 86 37 226 131 198 68 118 118 190 194 152 65 10 54 185 200 198 75 165 161 182 145 121 23 157 216 184 243 232 230 89 204 172 12 223 28 66 241 116 211 88 10 0 130 193 49 168 134 94 80 173 154 249 8 142 178 214 63 11 71 104 174)
  :der-encode
  #t
  :tests
  '(#(818
      "edge case for u1"
      #vu8(84 101 115 116)
      #vu8(48 129 136 2 66 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 66 0 209 117 146 225 105 252 237 138 249 144 82 110 161 113 27 124 197 46 198 51 186 96 151 204 23 21 231 54 47 11 101 169 237 226 150 211 112 72 144 8 184 99 216 138 49 184 4 50 137 5 171 7 136 55 10 36 98 191 202 189 29 246 20 109 200)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 1 15 88 36 209 29 16 15 156 29 234 31 68 15 255 230 174 241 67 168 252 154 172 158 100 225 79 123 175 243 166 42 90 233 246 221 64 221 54 139 101 35 154 168 2 49 134 158 42 167 170 36 240 88 209 122 108 53 146 70 189 245 236 133 215 5 1 45 7 194 81 254 203 207 80 22 168 234 158 60 70 188 83 24 75 186 150 29 74 232 157 171 250 161 174 227 52 220 249 72 36 207 26 111 132 14 154 139 161 206 191 187 152 129 172 200 232 6 40 77 5 129 183 200 89 143 62 126 70 109 234 9)
  :der-encode
  #t
  :tests
  '(#(819
      "edge case for u2"
      #vu8(84 101 115 116)
      #vu8(48 129 135 2 66 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 65 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 84)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 1 181 87 246 252 33 241 110 106 142 81 178 144 75 36 251 140 117 200 254 228 177 176 255 151 95 205 84 196 145 160 229 39 88 163 136 48 56 219 207 33 241 158 87 145 70 60 45 149 43 180 176 182 66 143 10 231 54 155 65 209 217 118 97 178 148 0 247 92 133 147 249 236 245 74 38 204 140 123 65 143 159 188 164 41 104 133 185 54 112 147 153 66 245 220 246 203 74 3 194 52 77 4 17 223 30 90 84 134 82 83 76 75 125 188 206 148 1 105 114 82 38 126 135 69 208 113 56 142 236 131 46)
  :der-encode
  #t
  :tests
  '(#(820
      "edge case for u2"
      #vu8(84 101 115 116)
      #vu8(48 129 136 2 66 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 66 0 159 87 112 143 169 126 186 148 198 212 120 44 221 78 51 187 149 193 53 59 222 9 82 50 227 226 186 178 119 187 93 43 72 245 90 83 255 233 40 208 52 194 153 112 169 229 243 132 160 3 144 125 61 155 130 168 104 23 204 97 251 23 244 197 158)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 0 206 2 43 84 58 24 31 221 49 48 206 53 146 97 120 167 240 239 151 28 95 232 72 176 45 193 191 104 200 131 178 154 163 83 105 171 209 153 237 98 142 168 55 58 150 96 161 192 133 65 74 44 102 222 1 40 192 143 131 134 239 236 160 13 63 0 162 156 112 75 170 234 2 20 171 148 68 233 45 71 219 89 196 72 198 85 148 183 9 197 189 67 7 137 124 152 208 188 203 74 159 53 28 81 210 39 62 242 187 132 214 135 195 5 231 99 107 85 253 62 56 84 180 179 76 167 186 113 39 106 202)
  :der-encode
  #t
  :tests
  '(#(821
      "edge case for u2"
      #vu8(84 101 115 116)
      #vu8(48 129 135 2 66 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 65 104 217 143 169 7 54 239 243 233 15 143 207 229 8 56 182 250 11 242 205 231 123 197 30 63 65 1 156 128 6 244 233 203 174 173 206 125 187 68 70 45 166 66 91 233 207 218 236 178 52 196 23 73 206 105 91 225 181 234 210 230 177 32 95 53)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 0 64 13 25 79 81 216 2 24 192 41 110 151 139 155 122 94 187 13 55 61 33 233 237 127 75 232 174 37 234 91 111 206 181 128 220 69 16 130 101 37 254 19 141 26 78 32 204 41 60 83 13 186 75 133 195 210 155 184 116 134 124 54 132 105 106 1 83 123 163 195 44 31 31 155 45 158 128 248 143 252 220 74 165 36 110 129 69 184 124 55 212 115 4 66 52 216 173 40 198 171 213 161 134 237 10 182 28 110 114 221 239 119 176 153 245 30 220 88 235 235 67 58 237 6 69 3 202 73 76 76 115)
  :der-encode
  #t
  :tests
  '(#(822
      "edge case for u2"
      #vu8(84 101 115 116)
      #vu8(48 129 136 2 66 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 66 0 233 122 230 107 205 76 174 54 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 104 188 151 38 240 45 191 133 152 169 139 62 80 119 239 246 242 73 30 182 120 237 4 15 179 56 192 132 169 234 138 76)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 0 120 38 111 87 157 202 19 234 20 51 140 50 160 214 129 45 253 152 114 10 42 30 162 191 164 75 162 179 254 21 198 48 99 200 204 121 60 150 238 150 12 245 55 227 74 208 202 250 70 33 146 207 98 133 203 140 72 217 57 155 245 82 212 252 106 1 152 190 222 97 38 137 210 40 152 65 228 144 91 231 102 219 168 160 123 0 164 212 169 111 154 16 113 96 169 178 110 179 47 218 121 150 52 224 7 238 80 227 79 107 37 86 13 126 237 23 40 212 181 237 196 83 125 244 245 8 145 10 206 247 54)
  :der-encode
  #t
  :tests
  '(#(823
      "edge case for u2"
      #vu8(84 101 115 116)
      #vu8(48 129 136 2 66 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 66 1 174 102 188 212 202 227 111 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 251 57 84 33 47 139 234 87 141 147 230 133 229 219 163 41 129 27 37 66 187 57 130 51 226 148 75 206 177 146 99 50 93)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 0 92 88 92 15 173 236 154 52 252 192 128 65 84 241 76 181 102 139 153 127 46 9 109 160 151 75 35 233 144 46 52 153 149 96 55 161 120 165 33 8 51 80 126 30 16 142 229 205 153 79 101 158 62 140 170 222 157 41 88 237 72 246 105 145 195 1 40 44 25 105 166 142 25 12 97 30 192 50 35 82 239 1 199 80 220 135 70 74 160 16 36 178 193 12 157 75 106 74 41 249 158 167 64 219 141 175 171 101 237 117 66 54 1 101 77 104 244 223 100 46 128 164 231 156 161 45 251 14 228 36 4)
  :der-encode
  #t
  :tests
  '(#(824
      "edge case for u2"
      #vu8(84 101 115 116)
      #vu8(48 129 136 2 66 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 66 1 92 205 121 169 149 198 223 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 33 33 186 219 88 165 24 175 168 1 10 130 192 60 173 49 250 148 187 189 233 104 32 22 109 39 230 68 147 142 0 177)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 0 145 157 12 191 247 4 61 226 235 2 78 94 206 122 89 222 20 177 189 139 8 66 137 88 116 48 5 110 53 14 73 19 107 248 146 117 123 56 151 53 231 117 179 82 215 116 55 111 226 158 98 228 1 82 83 80 46 76 204 41 159 37 117 118 106 0 64 60 223 164 159 228 100 119 148 214 121 253 40 137 195 166 194 166 81 235 176 78 79 238 132 104 189 76 36 13 139 167 34 9 126 174 189 82 71 180 190 188 110 135 59 39 1 28 73 209 248 161 49 234 15 122 86 122 140 42 124 23 50 137 226)
  :der-encode
  #t
  :tests
  '(#(825
      "edge case for u2"
      #vu8(84 101 115 116)
      #vu8(48 129 136 2 66 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 66 1 205 76 174 54 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 250 225 141 204 17 223 247 82 98 51 217 35 160 178 2 203 41 231 19 242 45 232 187 106 176 161 40 33 197 171 190 63 35)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 1 60 137 182 142 226 22 92 229 131 226 154 107 70 48 62 81 228 155 101 131 185 127 164 143 201 127 72 202 138 208 221 212 221 208 157 250 223 207 112 149 240 202 24 150 52 50 132 28 78 255 145 95 97 56 208 239 89 30 138 228 190 159 74 153 117 0 16 130 156 41 107 73 232 62 162 32 24 189 29 75 227 12 195 59 252 226 5 170 186 84 82 225 4 159 120 190 222 11 0 58 226 194 123 175 192 205 127 122 193 18 16 137 40 139 254 55 226 33 225 143 90 79 221 125 115 179 192 229 174 106 209)
  :der-encode
  #t
  :tests
  '(#(826
      "edge case for u2"
      #vu8(84 101 115 116)
      #vu8(48 129 135 2 66 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 65 34 232 186 46 139 162 232 186 46 139 162 232 186 46 139 162 232 186 46 139 162 232 186 46 139 162 232 186 46 139 162 232 185 196 195 247 60 200 22 20 63 172 52 18 182 45 228 198 61 176 143 140 87 228 197 140 49 241 180 87 202 94 87 226 10)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 1 217 28 160 255 121 7 151 168 60 59 225 200 36 37 175 145 114 8 8 122 166 115 94 235 211 73 132 15 217 251 195 186 89 98 238 17 248 4 51 56 193 179 243 80 65 113 250 168 232 68 72 128 182 165 197 90 230 102 124 82 202 7 237 63 121 1 243 71 134 194 220 113 112 74 195 70 52 16 10 142 145 42 124 64 99 120 32 233 124 211 45 87 57 215 3 75 199 246 135 75 144 238 148 204 224 118 98 163 178 117 178 63 162 10 231 252 131 112 208 91 174 239 224 40 97 104 189 52 23 209 63)
  :der-encode
  #t
  :tests
  '(#(827
      "edge case for u2"
      #vu8(84 101 115 116)
      #vu8(48 129 136 2 66 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 66 1 5 144 178 22 66 200 89 11 33 100 44 133 144 178 22 66 200 89 11 33 100 44 133 144 178 22 66 200 89 11 33 100 41 142 181 126 90 255 147 67 89 122 84 45 49 50 249 231 52 253 195 5 18 94 14 193 57 197 247 128 238 142 140 185 194)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 0 64 175 47 77 220 30 82 114 178 174 211 88 183 119 111 40 240 220 153 111 119 47 149 31 37 209 47 159 139 15 61 224 209 193 210 155 99 183 74 149 13 180 116 112 26 52 200 221 128 59 89 78 149 123 214 163 235 126 147 139 228 81 31 76 121 1 192 27 66 201 115 213 95 184 153 110 64 238 104 225 18 229 138 137 46 171 3 44 92 221 109 179 159 178 193 22 146 232 179 206 189 187 220 8 251 61 149 162 167 96 112 5 8 159 69 44 222 185 130 27 90 17 132 1 252 208 41 201 173 36 132)
  :der-encode
  #t
  :tests
  '(#(828
      "edge case for u2"
      #vu8(84 101 115 116)
      #vu8(48 129 136 2 66 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 66 1 164 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 68 69 225 6 112 237 4 55 201 219 65 37 172 65 117 251 215 14 155 209 121 154 133 244 76 160 168 230 26 51 84 232 8)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 0 105 224 180 129 219 153 248 148 240 120 15 132 113 157 225 106 236 89 156 118 94 186 80 184 97 84 119 7 60 50 194 106 177 228 231 174 93 31 149 37 19 173 50 50 37 32 59 79 12 101 162 74 131 104 205 50 44 35 233 32 73 209 33 116 124 1 119 144 30 55 158 94 114 79 65 100 135 254 231 7 126 106 234 129 229 37 12 170 60 255 187 125 27 34 112 170 117 75 79 218 229 30 68 48 80 195 60 123 132 33 199 179 197 56 196 154 103 74 52 226 39 140 126 160 157 144 12 245 133 29 207)
  :der-encode
  #t
  :tests
  '(#(829
      "edge case for u2"
      #vu8(84 101 115 116)
      #vu8(48 129 136 2 66 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 66 1 213 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 79 166 219 220 217 20 132 235 192 213 33 86 158 76 94 251 37 145 11 31 13 222 241 157 4 16 197 12 115 230 141 185 95)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 0 169 194 197 127 26 46 145 196 238 107 61 3 192 146 59 88 208 236 64 157 248 142 79 48 101 186 129 72 191 207 127 113 206 178 241 161 233 157 200 48 8 75 22 153 52 84 231 225 141 162 60 26 30 119 25 148 145 219 84 24 174 40 183 108 103 0 28 151 238 114 4 147 180 39 253 51 161 60 142 135 232 66 236 150 230 144 60 201 124 176 246 147 64 73 139 253 198 245 67 202 128 68 236 165 17 234 231 240 221 86 42 172 19 242 195 243 86 210 22 196 43 115 221 173 71 86 208 50 246 151 144)
  :der-encode
  #t
  :tests
  '(#(830
      "edge case for u2"
      #vu8(84 101 115 116)
      #vu8(48 129 136 2 66 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 66 1 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 164 252 49 50 46 105 218 65 22 42 118 171 243 161 180 80 122 230 96 116 99 52 70 242 89 102 26 97 201 59 227 14 181)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 1 223 154 110 165 168 53 126 130 158 96 187 167 17 209 31 134 162 221 40 197 239 219 249 104 233 100 109 251 176 210 127 168 191 77 129 212 98 85 193 152 223 74 39 230 202 49 86 144 177 234 104 121 82 151 195 101 34 155 214 149 155 41 100 180 163 1 170 180 90 33 30 144 18 178 188 105 171 192 88 138 13 232 226 197 147 52 205 56 163 194 33 222 250 183 137 249 207 180 96 135 148 168 197 17 80 167 131 229 149 106 10 159 154 47 84 124 222 130 209 181 214 207 81 197 102 96 75 80 188 247 141)
  :der-encode
  #t
  :tests
  '(#(831
      "edge case for u2"
      #vu8(84 101 115 116)
      #vu8(48 129 136 2 66 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 66 1 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 250 81 134 135 131 191 47 150 107 127 204 1 72 247 9 165 208 59 181 201 184 137 156 71 174 187 111 183 30 145 56 100 11)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 1 223 48 239 38 225 96 21 58 20 104 165 221 208 107 2 204 177 100 223 227 172 140 127 21 246 141 79 25 7 239 139 233 202 220 107 231 5 162 41 68 35 64 103 11 209 24 110 216 38 211 155 164 194 49 27 29 247 148 0 26 41 60 2 124 223 0 19 79 48 228 67 85 4 16 42 84 195 68 237 128 0 156 225 185 197 9 44 64 186 50 223 128 83 147 106 140 216 169 65 174 82 132 80 95 209 174 12 83 2 8 108 147 165 130 131 13 36 187 100 98 114 221 157 210 242 21 4 37 162 215 229)
  :der-encode
  #t
  :tests
  '(#(832
      "edge case for u2"
      #vu8(84 101 115 116)
      #vu8(48 129 136 2 66 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 66 1 52 108 199 212 131 155 119 249 244 135 199 231 242 132 28 91 125 5 249 102 243 189 226 143 31 160 128 206 64 3 122 116 227 0 26 43 0 189 57 238 76 147 7 46 153 99 114 73 65 56 60 240 129 44 2 209 200 56 173 69 2 161 44 97 159)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 1 64 15 163 188 135 72 46 193 186 117 52 106 18 158 200 247 148 86 231 214 52 59 42 107 226 36 144 136 75 143 139 137 17 76 14 95 149 88 215 98 122 222 174 83 255 140 227 123 175 148 185 157 4 247 80 152 202 142 62 119 198 190 2 188 62 1 105 13 119 8 6 189 233 244 210 118 2 147 171 166 7 96 102 241 118 46 132 72 240 208 135 36 239 49 31 247 89 111 53 232 182 169 52 109 230 91 234 146 75 157 48 187 151 46 59 56 135 129 114 249 4 3 120 160 219 71 41 158 151 152 86)
  :der-encode
  #t
  :tests
  '(#(833
      "point duplication during verification"
      #vu8(84 101 115 116)
      #vu8(48 129 136 2 66 0 144 200 208 215 24 203 157 141 129 9 78 109 6 143 177 60 22 180 223 140 119 186 198 118 221 223 227 230 136 85 190 208 107 155 168 208 248 168 14 220 224 58 159 172 125 165 97 226 75 28 210 45 69 146 57 161 70 105 90 103 31 129 247 58 175 2 66 0 162 79 189 96 47 247 1 43 107 0 233 170 22 131 180 91 250 45 98 220 118 135 55 232 218 146 202 213 47 6 158 251 234 82 106 204 104 9 111 192 239 153 96 198 185 137 191 137 34 174 163 143 212 99 208 44 14 124 37 227 54 243 43 8 116)
      #t
      ("PointDuplication"))))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 1 64 15 163 188 135 72 46 193 186 117 52 106 18 158 200 247 148 86 231 214 52 59 42 107 226 36 144 136 75 143 139 137 17 76 14 95 149 88 215 98 122 222 174 83 255 140 227 123 175 148 185 157 4 247 80 152 202 142 62 119 198 190 2 188 62 0 150 242 136 247 249 66 22 11 45 137 253 108 84 89 248 159 153 14 137 209 123 183 15 47 120 219 16 206 224 8 166 144 202 23 73 86 203 146 25 164 21 109 180 98 207 68 104 209 196 199 120 126 141 6 251 252 135 95 36 184 214 97 104 103 169)
  :der-encode
  #t
  :tests
  '(#(834
      "duplication bug"
      #vu8(84 101 115 116)
      #vu8(48 129 136 2 66 0 144 200 208 215 24 203 157 141 129 9 78 109 6 143 177 60 22 180 223 140 119 186 198 118 221 223 227 230 136 85 190 208 107 155 168 208 248 168 14 220 224 58 159 172 125 165 97 226 75 28 210 45 69 146 57 161 70 105 90 103 31 129 247 58 175 2 66 0 162 79 189 96 47 247 1 43 107 0 233 170 22 131 180 91 250 45 98 220 118 135 55 232 218 146 202 213 47 6 158 251 234 82 106 204 104 9 111 192 239 153 96 198 185 137 191 137 34 174 163 143 212 99 208 44 14 124 37 227 54 243 43 8 116)
      #f
      ("PointDuplication"))))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 0 154 123 82 225 223 240 24 5 129 67 206 241 92 112 42 122 9 78 129 179 230 101 181 41 135 164 176 119 208 12 125 28 195 152 189 190 22 125 42 60 30 217 218 255 32 247 104 172 179 253 150 44 6 177 252 22 89 58 41 23 52 8 15 64 192 0 142 68 180 68 163 246 104 3 255 56 70 242 38 220 247 36 236 60 230 146 230 122 201 145 224 98 174 74 14 85 90 26 209 132 144 93 50 49 195 240 88 174 64 194 102 84 123 7 106 124 132 32 214 167 233 74 163 0 52 42 238 237 28 95 125)
  :der-encode
  #t
  :tests
  '(#(835
      "point with x-coordinate 0"
      #vu8(84 101 115 116)
      #vu8(48 71 2 1 1 2 66 0 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 168 197 215 130 129 63 186 135 121 42 153 85 194 253 3 55 69 105 60 152 146 216 137 109 58 62 122 146 95 133 189 118 173)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 0 226 111 240 32 11 115 20 80 173 23 187 111 239 26 110 56 122 62 196 28 212 216 8 35 74 100 39 46 129 156 34 2 102 190 121 197 173 174 55 130 84 100 158 200 204 160 94 201 40 21 184 185 235 60 236 88 105 58 166 171 208 186 25 26 189 1 239 197 54 255 112 15 54 17 211 88 225 130 145 71 13 132 84 115 181 117 11 117 37 205 55 9 67 47 242 250 135 116 58 249 40 148 167 166 70 168 47 210 77 63 110 12 196 122 182 115 214 134 48 215 112 189 13 114 75 13 96 222 107 81 246)
  :der-encode
  #t
  :tests
  '(#(836
      "point with x-coordinate 0"
      #vu8(84 101 115 116)
      #vu8(48 129 135 2 66 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 65 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 101 67 129 78 77 140 163 30 21 127 245 153 219 100 155 135 144 11 241 40 88 27 133 167 239 191 22 87 210 233 216 20 1)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 1 119 212 19 11 176 255 85 151 243 165 31 90 0 249 2 19 193 216 88 83 137 130 157 237 99 24 9 193 128 166 101 99 100 72 49 66 174 218 211 20 134 255 39 162 170 171 176 237 48 136 150 148 61 223 150 89 14 22 101 69 11 163 76 158 135 0 43 186 96 154 216 164 180 200 148 211 3 179 135 44 79 99 147 158 25 174 145 210 27 26 131 204 34 96 112 15 142 14 193 152 166 243 141 166 42 110 165 114 30 19 100 165 167 240 47 96 245 232 222 83 169 124 225 28 134 102 213 136 203 205 179)
  :der-encode
  #t
  :tests
  '(#(837
      "comparison with point at infinity "
      #vu8(84 101 115 116)
      #vu8(48 129 135 2 66 0 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 168 197 215 130 129 63 186 135 121 42 153 85 194 253 3 55 69 105 60 152 146 216 137 109 58 62 122 146 95 133 189 118 173 2 65 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 101 67 129 78 77 140 163 30 21 127 245 153 219 100 155 135 144 11 241 40 88 27 133 167 239 191 22 87 210 233 216 20 1)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 0 88 211 27 159 59 163 79 56 79 36 120 253 96 213 76 250 105 59 188 84 114 16 40 28 0 9 88 156 2 68 186 25 88 242 186 145 173 247 106 41 108 119 86 110 142 170 236 19 43 92 189 85 91 19 237 236 12 15 10 224 97 232 201 161 177 1 135 40 176 221 2 209 49 252 104 5 183 81 104 201 130 163 253 185 63 232 92 162 181 48 209 216 57 203 83 76 14 188 2 26 227 114 57 38 163 0 39 55 180 183 150 193 38 136 215 104 131 77 5 226 81 104 24 67 138 56 192 35 181 47 207)
  :der-encode
  #t
  :tests
  '(#(838
      "extreme value for k and edgecase s"
      #vu8(84 101 115 116)
      #vu8(48 129 135 2 65 67 60 33 144 36 39 126 126 104 47 203 40 129 72 194 130 116 116 3 39 155 28 204 6 53 44 110 85 5 215 105 190 151 179 178 4 218 110 245 85 7 170 16 74 58 53 197 175 65 207 47 163 100 214 15 217 103 244 62 57 51 186 109 120 61 2 66 0 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 168 197 215 130 129 63 186 135 121 42 153 85 194 253 3 55 69 105 60 152 146 216 137 109 58 62 122 146 95 133 189 118 173)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 0 81 249 129 147 128 117 95 171 88 244 150 168 31 132 101 85 75 207 144 117 84 233 17 88 3 102 33 82 150 211 166 216 27 162 44 236 152 106 227 48 16 214 65 107 241 219 59 102 55 246 77 36 11 111 75 92 126 162 41 248 126 15 205 105 159 1 129 36 135 39 94 103 44 54 71 18 120 63 228 168 165 55 41 227 252 144 19 138 254 91 134 156 80 104 203 93 69 84 225 167 241 216 172 157 215 143 188 169 172 171 78 167 145 49 29 102 224 30 4 130 1 180 13 159 56 61 10 11 6 141 170)
  :der-encode
  #t
  :tests
  '(#(839
      "extreme value for k and s^-1"
      #vu8(84 101 115 116)
      #vu8(48 129 134 2 65 67 60 33 144 36 39 126 126 104 47 203 40 129 72 194 130 116 116 3 39 155 28 204 6 53 44 110 85 5 215 105 190 151 179 178 4 218 110 245 85 7 170 16 74 58 53 197 175 65 207 47 163 100 214 15 217 103 244 62 57 51 186 109 120 61 2 65 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 145 121 92 92 128 137 6 204 88 127 248 146 120 35 74 133 102 227 245 101 245 202 132 10 61 136 125 172 114 20 190 233 184)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 1 252 165 182 218 75 150 95 44 136 177 79 122 88 68 206 111 130 118 210 245 208 55 57 219 38 108 79 93 133 252 155 55 25 190 69 58 200 0 79 2 127 113 76 240 122 193 178 124 123 42 30 249 39 5 210 165 123 189 235 245 33 100 118 21 182 1 168 218 188 219 191 53 16 165 9 36 77 205 154 242 114 171 197 96 179 13 135 78 146 173 82 197 43 166 75 25 50 91 37 14 21 231 235 91 4 161 144 235 101 142 12 246 99 240 38 92 5 191 74 184 235 150 10 112 132 197 20 37 13 231 144)
  :der-encode
  #t
  :tests
  '(#(840
      "extreme value for k and s^-1"
      #vu8(84 101 115 116)
      #vu8(48 129 135 2 65 67 60 33 144 36 39 126 126 104 47 203 40 129 72 194 130 116 116 3 39 155 28 204 6 53 44 110 85 5 215 105 190 151 179 178 4 218 110 245 85 7 170 16 74 58 53 197 175 65 207 47 163 100 214 15 217 103 244 62 57 51 186 109 120 61 2 66 1 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 149 14 5 57 54 50 140 120 85 255 214 103 109 146 110 30 64 47 196 161 96 110 22 159 190 252 89 95 75 167 96 80 7)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 0 76 134 67 229 70 167 27 147 24 92 165 131 174 80 152 193 230 192 176 211 63 194 214 24 135 15 148 56 177 197 149 219 200 146 0 132 86 95 0 116 218 250 202 120 186 194 85 140 166 35 194 81 246 213 48 50 140 39 52 160 65 56 33 223 229 0 29 138 192 167 37 27 130 4 111 156 242 206 103 158 18 119 15 134 129 164 63 14 39 229 83 104 15 197 35 66 149 172 36 33 42 37 200 87 225 82 53 6 118 228 229 44 163 4 65 129 182 113 16 206 1 41 250 11 220 21 164 213 167 14 142)
  :der-encode
  #t
  :tests
  '(#(841
      "extreme value for k and s^-1"
      #vu8(84 101 115 116)
      #vu8(48 129 134 2 65 67 60 33 144 36 39 126 126 104 47 203 40 129 72 194 130 116 116 3 39 155 28 204 6 53 44 110 85 5 215 105 190 151 179 178 4 218 110 245 85 7 170 16 74 58 53 197 175 65 207 47 163 100 214 15 217 103 244 62 57 51 186 109 120 61 2 65 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 101 67 129 78 77 140 163 30 21 127 245 153 219 100 155 135 144 11 241 40 88 27 133 167 239 191 22 87 210 233 216 20 2)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 0 166 89 124 118 149 96 70 252 208 60 68 78 154 78 19 185 251 117 26 201 31 180 252 186 95 211 58 255 97 243 48 95 167 184 49 229 34 122 92 4 112 229 225 253 228 162 94 83 159 194 55 115 187 58 44 244 30 238 15 198 120 208 80 112 90 1 246 245 174 74 59 153 68 115 103 144 116 246 238 101 121 197 0 94 111 216 96 205 77 210 158 7 212 71 88 35 175 107 232 175 93 65 75 186 71 180 46 96 27 151 102 13 16 166 98 227 123 81 128 232 230 155 51 197 247 215 152 218 24 190 73)
  :der-encode
  #t
  :tests
  '(#(842
      "extreme value for k and s^-1"
      #vu8(84 101 115 116)
      #vu8(48 129 135 2 65 67 60 33 144 36 39 126 126 104 47 203 40 129 72 194 130 116 116 3 39 155 28 204 6 53 44 110 85 5 215 105 190 151 179 178 4 218 110 245 85 7 170 16 74 58 53 197 175 65 207 47 163 100 214 15 217 103 244 62 57 51 186 109 120 61 2 66 1 182 219 109 182 219 109 182 219 109 182 219 109 182 219 109 182 219 109 182 219 109 182 219 109 182 219 109 182 219 109 182 219 104 216 42 43 3 54 40 202 18 255 211 110 208 211 191 32 105 87 192 99 194 191 24 61 113 50 242 10 172 124 121 122 81)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 1 167 47 160 70 177 21 117 103 185 145 58 138 97 16 127 180 221 14 18 178 180 6 239 33 155 118 127 147 19 15 57 213 73 152 116 92 81 209 175 245 27 104 215 141 52 65 141 97 40 191 147 204 219 225 95 100 118 130 78 11 49 27 210 103 173 0 243 228 215 25 97 5 90 76 23 99 252 30 239 160 128 15 132 172 124 123 188 79 216 237 119 59 121 183 10 153 224 29 26 108 0 150 94 225 255 102 101 9 58 164 35 249 211 4 121 42 247 164 244 20 28 58 42 93 144 5 36 149 74 149 212)
  :der-encode
  #t
  :tests
  '(#(843
      "extreme value for k"
      #vu8(84 101 115 116)
      #vu8(48 129 134 2 65 67 60 33 144 36 39 126 126 104 47 203 40 129 72 194 130 116 116 3 39 155 28 204 6 53 44 110 85 5 215 105 190 151 179 178 4 218 110 245 85 7 170 16 74 58 53 197 175 65 207 47 163 100 214 15 217 103 244 62 57 51 186 109 120 61 2 65 14 177 14 90 185 95 47 38 164 7 0 177 48 15 184 195 200 213 56 79 251 236 241 253 185 225 30 103 203 127 214 167 245 3 230 226 90 192 155 184 139 108 57 131 223 118 77 77 114 188 41 32 226 51 240 247 151 74 35 74 33 176 11 180 71)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 0 207 109 241 202 240 47 144 152 190 80 46 24 122 146 79 190 140 193 15 4 34 221 102 191 217 249 21 108 242 45 131 15 8 75 141 179 164 238 88 143 177 8 186 23 129 3 161 170 69 170 104 127 233 179 1 115 121 27 110 254 222 75 96 7 116 0 53 155 150 231 36 254 134 154 187 149 244 84 154 244 14 19 198 100 209 160 9 173 2 5 180 84 241 164 149 88 26 119 14 92 130 170 152 75 210 165 205 45 53 154 223 72 124 57 46 68 16 72 254 96 194 105 111 250 149 140 128 125 224 151 201)
  :der-encode
  #t
  :tests
  '(#(844
      "extreme value for k and edgecase s"
      #vu8(84 101 115 116)
      #vu8(48 129 136 2 66 0 198 133 142 6 183 4 4 233 205 158 62 203 102 35 149 180 66 156 100 129 57 5 63 181 33 248 40 175 96 107 77 61 186 161 75 94 119 239 231 89 40 254 29 193 39 162 255 168 222 51 72 179 193 133 106 66 155 249 126 126 49 194 229 189 102 2 66 0 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 168 197 215 130 129 63 186 135 121 42 153 85 194 253 3 55 69 105 60 152 146 216 137 109 58 62 122 146 95 133 189 118 173)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 0 111 131 156 79 35 239 4 11 58 153 145 212 124 156 77 239 111 219 14 207 111 195 184 41 93 7 114 155 235 55 80 92 180 233 177 13 104 151 47 3 182 239 93 102 150 3 193 81 94 38 205 243 167 255 93 52 205 79 112 231 173 75 148 162 123 0 84 223 151 120 93 184 33 109 154 94 33 17 139 198 204 169 89 125 137 198 109 177 223 144 201 200 48 58 73 0 26 184 84 253 57 211 193 143 46 179 115 106 8 39 167 81 1 24 112 193 219 106 0 19 189 191 97 117 194 251 254 39 217 31 229)
  :der-encode
  #t
  :tests
  '(#(845
      "extreme value for k and s^-1"
      #vu8(84 101 115 116)
      #vu8(48 129 135 2 66 0 198 133 142 6 183 4 4 233 205 158 62 203 102 35 149 180 66 156 100 129 57 5 63 181 33 248 40 175 96 107 77 61 186 161 75 94 119 239 231 89 40 254 29 193 39 162 255 168 222 51 72 179 193 133 106 66 155 249 126 126 49 194 229 189 102 2 65 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 145 121 92 92 128 137 6 204 88 127 248 146 120 35 74 133 102 227 245 101 245 202 132 10 61 136 125 172 114 20 190 233 184)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 1 80 36 109 212 39 202 204 230 110 109 229 122 140 192 223 226 73 150 159 63 207 78 214 77 227 65 51 158 185 3 49 219 31 5 71 82 146 206 156 41 145 109 166 92 234 182 230 126 242 220 225 59 30 23 184 209 162 222 127 252 21 4 243 253 157 1 146 135 240 145 134 210 167 239 214 196 188 86 144 66 157 195 26 23 221 234 83 212 170 102 42 88 170 17 254 180 8 1 220 156 117 12 24 125 67 81 245 153 12 221 22 113 171 144 151 186 172 5 18 184 202 55 245 87 254 203 245 144 250 253 106)
  :der-encode
  #t
  :tests
  '(#(846
      "extreme value for k and s^-1"
      #vu8(84 101 115 116)
      #vu8(48 129 136 2 66 0 198 133 142 6 183 4 4 233 205 158 62 203 102 35 149 180 66 156 100 129 57 5 63 181 33 248 40 175 96 107 77 61 186 161 75 94 119 239 231 89 40 254 29 193 39 162 255 168 222 51 72 179 193 133 106 66 155 249 126 126 49 194 229 189 102 2 66 1 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 149 14 5 57 54 50 140 120 85 255 214 103 109 146 110 30 64 47 196 161 96 110 22 159 190 252 89 95 75 167 96 80 7)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 0 212 43 39 20 69 36 30 78 81 54 207 142 91 112 110 212 64 50 52 204 165 72 33 115 113 105 233 166 13 236 84 116 95 29 192 119 197 237 157 96 194 245 114 197 229 116 159 79 68 49 149 37 97 194 163 13 154 195 18 251 195 229 220 157 202 1 121 183 166 59 103 179 69 170 134 93 177 77 145 71 179 96 148 161 33 100 38 62 88 142 32 153 106 216 20 178 241 255 217 104 23 32 48 91 59 3 246 185 72 219 3 167 216 154 242 239 247 219 222 160 196 17 148 14 216 12 206 109 155 52 198)
  :der-encode
  #t
  :tests
  '(#(847
      "extreme value for k and s^-1"
      #vu8(84 101 115 116)
      #vu8(48 129 135 2 66 0 198 133 142 6 183 4 4 233 205 158 62 203 102 35 149 180 66 156 100 129 57 5 63 181 33 248 40 175 96 107 77 61 186 161 75 94 119 239 231 89 40 254 29 193 39 162 255 168 222 51 72 179 193 133 106 66 155 249 126 126 49 194 229 189 102 2 65 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 101 67 129 78 77 140 163 30 21 127 245 153 219 100 155 135 144 11 241 40 88 27 133 167 239 191 22 87 210 233 216 20 2)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 0 112 120 14 163 194 231 59 36 0 244 79 72 163 147 182 201 1 156 250 120 138 165 227 210 114 236 190 201 220 13 188 179 81 135 217 87 94 31 95 21 186 242 47 80 46 60 169 40 124 82 36 245 135 251 175 29 136 148 161 195 59 214 209 42 166 0 14 11 205 113 132 132 237 159 77 164 215 122 151 246 181 164 47 248 44 15 37 211 36 26 176 178 161 222 36 25 190 224 69 69 234 21 157 142 86 78 195 187 145 38 124 236 73 43 251 155 252 171 168 253 164 232 128 81 252 175 201 138 63 83 54)
  :der-encode
  #t
  :tests
  '(#(848
      "extreme value for k and s^-1"
      #vu8(84 101 115 116)
      #vu8(48 129 136 2 66 0 198 133 142 6 183 4 4 233 205 158 62 203 102 35 149 180 66 156 100 129 57 5 63 181 33 248 40 175 96 107 77 61 186 161 75 94 119 239 231 89 40 254 29 193 39 162 255 168 222 51 72 179 193 133 106 66 155 249 126 126 49 194 229 189 102 2 66 1 182 219 109 182 219 109 182 219 109 182 219 109 182 219 109 182 219 109 182 219 109 182 219 109 182 219 109 182 219 109 182 219 104 216 42 43 3 54 40 202 18 255 211 110 208 211 191 32 105 87 192 99 194 191 24 61 113 50 242 10 172 124 121 122 81)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 1 249 136 233 39 145 241 77 219 255 53 234 177 221 221 54 243 22 123 81 78 149 199 13 254 110 97 106 119 160 6 71 33 248 174 248 113 212 196 130 82 78 86 71 255 32 32 79 164 218 250 234 168 13 211 183 217 144 7 229 146 174 91 88 153 22 0 58 146 153 186 93 251 89 145 201 78 136 15 246 198 20 149 140 238 229 94 44 229 178 44 11 251 14 180 55 89 180 132 140 224 7 72 46 116 33 174 245 200 218 0 11 162 36 172 180 219 191 115 73 141 115 112 92 6 182 127 38 126 90 138 16)
  :der-encode
  #t
  :tests
  '(#(849
      "extreme value for k"
      #vu8(84 101 115 116)
      #vu8(48 129 135 2 66 0 198 133 142 6 183 4 4 233 205 158 62 203 102 35 149 180 66 156 100 129 57 5 63 181 33 248 40 175 96 107 77 61 186 161 75 94 119 239 231 89 40 254 29 193 39 162 255 168 222 51 72 179 193 133 106 66 155 249 126 126 49 194 229 189 102 2 65 14 177 14 90 185 95 47 38 164 7 0 177 48 15 184 195 200 213 56 79 251 236 241 253 185 225 30 103 203 127 214 167 245 3 230 226 90 192 155 184 139 108 57 131 223 118 77 77 114 188 41 32 226 51 240 247 151 74 35 74 33 176 11 180 71)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 0 198 133 142 6 183 4 4 233 205 158 62 203 102 35 149 180 66 156 100 129 57 5 63 181 33 248 40 175 96 107 77 61 186 161 75 94 119 239 231 89 40 254 29 193 39 162 255 168 222 51 72 179 193 133 106 66 155 249 126 126 49 194 229 189 102 1 24 57 41 106 120 154 59 192 4 92 138 95 180 44 125 27 217 152 245 68 73 87 155 68 104 23 175 189 23 39 62 102 44 151 238 114 153 94 244 38 64 197 80 185 1 63 173 7 97 53 60 112 134 162 114 194 64 136 190 148 118 159 209 102 80)
  :der-encode
  #t
  :tests
  '(#(850
      "testing point duplication"
      #vu8(84 101 115 116)
      #vu8(48 129 134 2 65 0 198 238 158 51 207 92 103 21 161 209 72 253 115 247 49 136 132 180 26 220 185 22 2 30 43 192 232 0 165 197 221 151 245 20 33 120 246 174 136 200 253 217 142 26 251 12 228 200 210 197 75 95 55 179 11 125 161 153 123 179 59 11 138 49 2 65 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 145 121 92 92 128 137 6 204 88 127 248 146 120 35 74 133 102 227 245 101 245 202 132 10 61 136 125 172 114 20 190 233 184)
      #f
      ())
    #(851
      "testing point duplication"
      #vu8(84 101 115 116)
      #vu8(48 129 135 2 66 1 255 57 17 97 204 48 163 152 234 94 46 183 2 140 8 206 119 123 75 229 35 70 233 253 225 212 63 23 255 90 58 34 98 92 114 102 10 200 129 13 162 129 242 115 45 251 252 193 7 104 240 126 89 81 233 60 49 25 214 59 107 86 44 217 216 2 65 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 145 121 92 92 128 137 6 204 88 127 248 146 120 35 74 133 102 227 245 101 245 202 132 10 61 136 125 172 114 20 190 233 184)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 0 198 133 142 6 183 4 4 233 205 158 62 203 102 35 149 180 66 156 100 129 57 5 63 181 33 248 40 175 96 107 77 61 186 161 75 94 119 239 231 89 40 254 29 193 39 162 255 168 222 51 72 179 193 133 106 66 155 249 126 126 49 194 229 189 102 0 231 198 214 149 135 101 196 63 251 163 117 160 75 211 130 228 38 103 10 187 182 168 100 187 151 232 80 66 232 216 193 153 211 104 17 141 102 161 11 217 191 58 175 70 254 192 82 248 158 202 195 143 121 93 141 61 191 119 65 107 137 96 46 153 175)
  :der-encode
  #t
  :tests
  '(#(852
      "testing point duplication"
      #vu8(84 101 115 116)
      #vu8(48 129 134 2 65 0 198 238 158 51 207 92 103 21 161 209 72 253 115 247 49 136 132 180 26 220 185 22 2 30 43 192 232 0 165 197 221 151 245 20 33 120 246 174 136 200 253 217 142 26 251 12 228 200 210 197 75 95 55 179 11 125 161 153 123 179 59 11 138 49 2 65 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 145 121 92 92 128 137 6 204 88 127 248 146 120 35 74 133 102 227 245 101 245 202 132 10 61 136 125 172 114 20 190 233 184)
      #f
      ())
    #(853
      "testing point duplication"
      #vu8(84 101 115 116)
      #vu8(48 129 135 2 66 1 255 57 17 97 204 48 163 152 234 94 46 183 2 140 8 206 119 123 75 229 35 70 233 253 225 212 63 23 255 90 58 34 98 92 114 102 10 200 129 13 162 129 242 115 45 251 252 193 7 104 240 126 89 81 233 60 49 25 214 59 107 86 44 217 216 2 65 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 145 121 92 92 128 137 6 204 88 127 248 146 120 35 74 133 102 227 245 101 245 202 132 10 61 136 125 172 114 20 190 233 184)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 135 59 1 195 251 209 133 47 183 2 158 87 30 176 182 238 122 44 216 92 220 51 80 51 43 175 21 177 155 120 146 205 130 127 212 24 21 74 132 54 162 219 207 240 255 222 36 205 20 54 224 129 97 167 201 193 171 249 54 197 51 191 34 150)
  :der-encode
  #t
  :tests
  '(#(854
      "k*G has a large x-coordinate"
      #vu8(84 101 115 116)
      #vu8(48 54 2 17 0 226 2 123 128 31 196 121 48 143 245 57 154 136 37 252 207 2 33 0 169 251 87 219 161 238 169 188 62 102 10 144 157 131 141 113 140 57 122 163 181 97 166 247 144 30 14 130 151 72 86 164)
      #t
      ())
    #(855
      "r too large"
      #vu8(84 101 115 116)
      #vu8(48 70 2 33 0 169 251 87 219 161 238 169 188 62 102 10 144 157 131 141 114 110 59 246 35 213 38 32 40 32 19 72 29 31 110 83 118 2 33 0 169 251 87 219 161 238 169 188 62 102 10 144 157 131 141 113 140 57 122 163 181 97 166 247 144 30 14 130 151 72 86 164)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 6 84 249 75 78 226 7 148 219 149 166 79 86 252 77 130 49 24 200 162 223 119 194 93 196 154 182 23 42 67 165 203 62 67 238 193 206 171 119 242 39 168 79 192 161 133 238 54 136 23 65 153 0 17 119 36 237 212 118 252 23 206 12 153)
  :der-encode
  #t
  :tests
  '(#(856
      "r,s are large"
      #vu8(84 101 115 116)
      #vu8(48 70 2 33 0 169 251 87 219 161 238 169 188 62 102 10 144 157 131 141 113 140 57 122 163 181 97 166 247 144 30 14 130 151 72 86 163 2 33 0 169 251 87 219 161 238 169 188 62 102 10 144 157 131 141 113 140 57 122 163 181 97 166 247 144 30 14 130 151 72 86 162)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 11 220 182 200 253 20 9 24 72 105 226 102 201 122 89 152 45 156 54 1 20 193 236 95 213 64 43 198 56 252 178 126 5 81 50 229 172 18 33 188 79 200 145 97 210 213 110 17 56 128 41 46 74 61 77 158 67 151 155 182 110 93 200 25)
  :der-encode
  #t
  :tests
  '(#(857
      "r and s^-1 have a large Hamming weight"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 2 32 74 184 222 10 81 72 27 196 87 148 185 36 81 143 45 214 172 92 206 49 243 34 141 98 76 90 137 111 121 162 214 162)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 101 107 208 144 60 203 211 53 246 96 144 214 237 46 209 169 166 5 97 66 197 204 197 92 56 131 138 127 56 71 164 132 90 230 220 157 134 222 11 111 51 3 68 217 237 22 131 182 236 146 24 77 140 175 12 120 55 177 168 114 65 37 215 201)
  :der-encode
  #t
  :tests
  '(#(858
      "r and s^-1 have a large Hamming weight"
      #vu8(84 101 115 116)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 2 33 0 139 27 95 137 245 187 116 202 164 45 54 230 1 169 243 194 11 78 108 145 206 185 138 82 251 250 159 129 120 27 138 23)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 55 148 83 78 178 245 117 215 148 143 179 49 85 59 51 174 175 57 95 102 25 60 111 158 171 213 225 178 163 11 35 12 154 251 99 203 65 114 15 78 145 91 99 13 75 8 143 180 252 234 77 8 73 243 204 2 58 108 165 147 87 248 92 54)
  :der-encode
  #t
  :tests
  '(#(859
      "small r and s"
      #vu8(84 101 115 116)
      #vu8(48 6 2 1 1 2 1 1)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 56 14 200 124 254 157 166 158 67 131 87 217 246 142 215 186 89 212 59 22 75 28 183 235 219 90 139 162 95 251 42 191 131 47 142 252 228 107 28 138 90 196 180 195 150 87 67 46 11 252 247 27 252 203 8 226 54 98 15 68 65 72 102 92)
  :der-encode
  #t
  :tests
  '(#(860
      "small r and s"
      #vu8(84 101 115 116)
      #vu8(48 6 2 1 1 2 1 2)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 27 147 80 88 134 9 77 110 29 240 57 48 0 180 29 9 121 6 253 240 52 53 231 113 8 45 219 110 125 83 179 71 40 94 205 44 178 84 245 20 197 102 179 207 255 197 13 176 63 37 145 85 190 54 143 231 19 232 168 51 167 71 249 129)
  :der-encode
  #t
  :tests
  '(#(861
      "small r and s"
      #vu8(84 101 115 116)
      #vu8(48 6 2 1 1 2 1 3)
      #t
      ())
    #(862
      "r is larger than n"
      #vu8(84 101 115 116)
      #vu8(48 38 2 33 0 169 251 87 219 161 238 169 188 62 102 10 144 157 131 141 113 140 57 122 163 181 97 166 247 144 30 14 130 151 72 86 168 2 1 3)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 3 209 192 238 64 16 162 123 31 173 220 223 37 109 11 110 178 165 188 194 86 230 133 211 121 245 186 32 233 57 25 244 101 139 226 160 109 94 179 32 92 45 189 182 125 85 65 57 19 181 29 121 76 89 233 29 62 91 120 61 83 94 245 188)
  :der-encode
  #t
  :tests
  '(#(863
      "s is larger than n"
      #vu8(84 101 115 116)
      #vu8(48 38 2 1 1 2 33 0 169 251 87 219 161 238 169 188 62 102 10 144 157 131 141 113 140 57 122 163 181 97 166 247 144 30 14 130 151 91 45 46)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 103 124 204 162 87 251 103 48 231 68 222 80 19 191 152 234 128 3 227 32 184 202 112 136 138 53 26 167 176 248 144 111 84 202 38 106 82 103 80 62 26 169 12 116 166 112 6 191 241 168 70 28 233 82 107 242 102 176 43 57 68 138 2 25)
  :der-encode
  #t
  :tests
  '(#(864
      "small r and s^-1"
      #vu8(84 101 115 116)
      #vu8(48 38 2 2 1 1 2 32 40 39 55 5 132 253 235 159 93 90 159 185 87 154 9 57 14 251 111 157 153 182 79 193 136 216 188 224 92 45 78 237)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 153 164 179 255 221 166 128 150 61 106 111 41 217 94 182 193 198 83 101 84 55 224 40 185 45 143 169 11 110 49 100 156 40 203 174 10 53 222 58 209 14 70 44 104 84 233 93 251 93 253 233 203 5 117 7 92 32 76 207 46 221 219 247 37)
  :der-encode
  #t
  :tests
  '(#(865
      "smallish r and s^-1"
      #vu8(84 101 115 116)
      #vu8(48 43 2 7 45 155 77 52 121 82 206 2 32 73 55 160 135 115 29 244 254 188 44 58 129 221 251 171 93 195 175 149 8 23 244 27 89 13 21 110 212 9 173 40 105)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 99 174 183 168 201 155 86 153 34 41 12 250 242 37 225 53 195 17 2 97 152 118 5 210 46 223 55 163 198 103 45 52 26 202 190 90 100 240 201 186 32 198 101 56 26 210 77 39 83 71 171 111 84 251 153 45 13 63 67 108 25 208 92 238)
  :der-encode
  #t
  :tests
  '(#(866
      "100-bit r and small s^-1"
      #vu8(84 101 115 116)
      #vu8(48 50 2 13 16 51 230 126 55 179 43 68 85 128 191 78 251 2 33 0 145 130 125 3 187 109 172 49 148 11 165 110 216 132 137 4 143 241 115 240 191 32 202 178 13 204 8 111 202 55 242 133)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 142 47 223 86 6 3 13 76 2 17 123 102 66 105 156 209 11 159 121 27 175 166 149 42 102 53 147 154 165 119 255 58 53 12 216 233 135 37 117 108 211 132 147 126 5 153 243 142 231 204 22 232 84 116 201 188 109 107 188 180 166 174 58 130)
  :der-encode
  #t
  :tests
  '(#(867
      "small r and 100 bit s^-1"
      #vu8(84 101 115 116)
      #vu8(48 38 2 2 1 1 2 32 62 179 95 231 232 51 31 113 228 198 59 69 243 73 169 157 71 165 231 129 121 142 87 159 35 134 25 93 56 39 187 21)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 136 84 180 21 228 227 75 179 225 154 28 75 218 103 38 15 5 24 195 32 105 107 110 99 147 179 199 130 61 138 48 167 14 89 68 3 34 92 99 218 81 56 235 144 103 232 111 99 141 145 121 59 100 16 104 140 52 205 246 200 210 172 96 26)
  :der-encode
  #t
  :tests
  '(#(868
      "100-bit r and s^-1"
      #vu8(84 101 115 116)
      #vu8(48 49 2 13 6 37 34 187 211 236 190 124 57 233 62 124 37 2 32 62 179 95 231 232 51 31 113 228 198 59 69 243 73 169 157 71 165 231 129 121 142 87 159 35 134 25 93 56 39 187 21)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 89 95 59 239 233 172 52 118 62 185 157 106 149 248 180 90 148 8 68 6 241 101 234 87 129 204 211 157 146 59 97 35 37 8 186 218 246 26 233 195 119 66 240 59 143 191 72 65 62 249 197 18 207 166 58 41 156 27 234 125 106 124 197 131)
  :der-encode
  #t
  :tests
  '(#(869
      "r and s^-1 are close to n"
      #vu8(84 101 115 116)
      #vu8(48 69 2 33 0 169 251 87 219 161 238 169 188 62 102 10 144 157 131 141 113 140 57 122 163 181 97 166 247 144 30 14 130 151 72 86 40 2 32 56 169 29 73 53 250 56 148 20 204 174 48 52 129 47 37 217 104 126 54 145 203 55 167 218 180 175 128 221 24 28 226)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 15 76 48 208 9 159 29 28 231 133 113 71 7 241 1 114 192 136 28 209 174 197 218 244 248 73 70 38 136 36 143 160 11 231 129 66 196 83 134 23 131 13 205 46 248 20 203 227 60 125 207 92 246 251 149 33 127 122 118 209 24 224 41 237)
  :der-encode
  #t
  :tests
  '(#(870
      "s == 1"
      #vu8(84 101 115 116)
      #vu8(48 37 2 32 56 169 29 73 53 250 56 148 20 204 174 48 52 129 47 37 217 104 126 54 145 203 55 167 218 180 175 128 221 24 28 226 2 1 1)
      #t
      ())
    #(871
      "s == 0"
      #vu8(84 101 115 116)
      #vu8(48 37 2 32 56 169 29 73 53 250 56 148 20 204 174 48 52 129 47 37 217 104 126 54 145 203 55 167 218 180 175 128 221 24 28 226 2 1 0)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 88 102 213 63 158 20 187 84 120 65 54 25 36 25 86 140 6 15 48 215 223 215 113 245 163 228 214 160 232 194 89 124 67 167 115 185 77 125 10 112 107 155 163 72 131 137 112 94 41 214 128 159 147 169 47 166 151 134 101 115 100 18 146 2)
  :der-encode
  #t
  :tests
  '(#(872
      "point at infinity during verify"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 84 253 171 237 208 247 84 222 31 51 5 72 78 193 198 184 198 28 189 81 218 176 211 123 200 15 7 65 75 164 43 83 2 32 56 169 29 73 53 250 56 148 20 204 174 48 52 129 47 37 217 104 126 54 145 203 55 167 218 180 175 128 221 24 28 226)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 79 214 213 120 81 255 62 189 158 13 175 243 18 222 39 45 139 8 214 124 199 78 101 144 32 80 218 148 161 50 252 234 131 79 2 220 170 205 94 89 234 9 229 132 66 227 47 202 92 3 115 165 74 254 14 114 247 40 155 4 244 37 27 129)
  :der-encode
  #t
  :tests
  '(#(873
      "edge case for signature malleability"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 84 253 171 237 208 247 84 222 31 51 5 72 78 193 198 184 198 28 189 81 218 176 211 123 200 15 7 65 75 164 43 83 2 32 84 253 171 237 208 247 84 222 31 51 5 72 78 193 198 184 198 28 189 81 218 176 211 123 200 15 7 65 75 164 43 83)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 148 81 26 73 95 179 100 105 149 40 181 174 200 88 248 216 161 132 55 109 177 127 97 236 29 130 72 10 219 241 193 121 65 179 201 118 11 146 251 70 122 225 213 149 82 125 216 20 74 41 221 204 44 108 75 240 152 47 96 216 161 43 73 62)
  :der-encode
  #t
  :tests
  '(#(874
      "edge case for signature malleability"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 84 253 171 237 208 247 84 222 31 51 5 72 78 193 198 184 198 28 189 81 218 176 211 123 200 15 7 65 75 164 43 83 2 32 84 253 171 237 208 247 84 222 31 51 5 72 78 193 198 184 198 28 189 81 218 176 211 123 200 15 7 65 75 164 43 84)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 166 15 103 152 137 54 235 9 81 101 72 53 90 103 49 224 76 98 242 251 91 233 150 104 168 25 211 241 237 207 232 172 105 30 201 66 170 169 5 112 197 166 28 59 219 108 1 8 88 41 230 59 135 236 181 232 15 169 211 5 177 243 225 81)
  :der-encode
  #t
  :tests
  '(#(875
      "u1 == 1"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 56 169 29 73 53 250 56 148 20 204 174 48 52 129 47 37 217 104 126 54 145 203 55 167 218 180 175 128 221 24 28 226 2 32 83 46 170 189 149 116 136 13 191 118 185 184 204 0 131 44 32 166 236 17 61 104 34 153 85 13 122 110 15 52 94 37)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 166 139 175 51 103 188 93 40 242 78 170 116 12 203 79 17 95 2 232 224 216 109 56 157 47 6 121 213 34 162 31 59 87 211 49 40 159 175 45 197 15 149 212 226 203 250 122 206 97 193 251 190 115 198 40 215 142 120 241 237 87 233 130 229)
  :der-encode
  #t
  :tests
  '(#(876
      "u1 == n - 1"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 56 169 29 73 53 250 56 148 20 204 174 48 52 129 47 37 217 104 126 54 145 203 55 167 218 180 175 128 221 24 28 226 2 32 86 204 173 30 12 122 33 174 126 239 80 215 209 131 10 69 107 146 142 146 119 249 132 94 59 16 148 20 136 19 248 130)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 15 213 202 152 20 181 221 11 183 221 231 102 9 120 91 198 30 217 73 15 255 248 230 125 77 140 182 125 224 152 45 221 166 27 144 223 81 219 68 175 138 219 191 213 36 183 235 61 209 235 101 45 19 221 10 46 23 4 155 237 26 210 11 35)
  :der-encode
  #t
  :tests
  '(#(877
      "u2 == 1"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 56 169 29 73 53 250 56 148 20 204 174 48 52 129 47 37 217 104 126 54 145 203 55 167 218 180 175 128 221 24 28 226 2 32 56 169 29 73 53 250 56 148 20 204 174 48 52 129 47 37 217 104 126 54 145 203 55 167 218 180 175 128 221 24 28 226)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 114 137 225 53 85 234 86 143 232 145 81 214 30 92 7 47 75 53 137 118 0 174 123 249 226 178 170 14 95 179 240 243 62 49 72 174 132 202 45 11 248 199 113 191 51 11 224 116 179 82 77 123 240 210 190 162 245 174 62 193 1 204 161 5)
  :der-encode
  #t
  :tests
  '(#(878
      "u2 == n - 1"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 56 169 29 73 53 250 56 148 20 204 174 48 52 129 47 37 217 104 126 54 145 203 55 167 218 180 175 128 221 24 28 226 2 32 113 82 58 146 107 244 113 40 41 153 92 96 105 2 94 75 178 208 252 109 35 150 111 79 181 105 95 1 186 48 57 197)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 14 92 152 91 85 129 87 235 142 167 23 237 150 98 186 82 29 60 84 22 77 127 226 206 58 175 241 211 149 249 12 7 109 213 217 173 4 154 83 123 104 73 116 41 122 31 145 234 219 59 122 151 22 78 195 129 239 187 59 5 38 102 16 71)
  :der-encode
  #t
  :tests
  '(#(879
      "edge case for u1"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 84 99 86 51 18 118 101 237 255 73 150 195 35 44 5 137 228 74 204 230 251 152 152 133 161 185 45 165 140 212 60 68)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 56 154 12 108 87 57 122 14 93 208 220 35 143 242 83 168 45 48 115 180 227 252 168 181 255 181 242 5 195 70 81 211 8 165 53 115 10 105 135 223 151 23 17 28 130 114 250 211 172 31 251 95 235 94 4 84 22 130 201 68 8 99 244 37)
  :der-encode
  #t
  :tests
  '(#(880
      "edge case for u1"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 2 142 184 246 251 142 90 56 51 112 11 86 135 241 121 72 190 238 207 124 115 170 156 20 67 14 243 202 1 96 32 54)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 24 23 200 145 67 33 246 212 222 164 147 107 17 80 5 85 229 124 32 101 29 182 180 120 118 28 142 161 213 134 50 168 0 103 188 205 174 147 137 202 76 182 227 39 155 24 150 68 143 242 41 81 229 6 83 38 131 52 135 6 110 238 220 249)
  :der-encode
  #t
  :tests
  '(#(881
      "edge case for u1"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 124 4 235 127 55 48 226 49 161 198 248 106 17 4 47 26 145 75 2 189 131 202 142 130 103 15 155 249 209 125 158 0)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 68 110 146 94 180 127 185 233 134 118 44 58 213 96 14 68 1 139 137 40 190 124 97 254 228 56 219 143 15 215 107 24 84 32 121 109 237 167 74 185 80 139 166 196 94 130 109 189 71 172 191 148 62 135 135 116 120 214 205 27 136 37 239 173)
  :der-encode
  #t
  :tests
  '(#(882
      "edge case for u1"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 59 59 39 38 134 209 56 8 73 136 174 35 8 157 87 181 116 251 171 233 131 225 222 53 105 68 66 194 185 102 0 112)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 119 66 209 79 255 23 243 118 116 243 241 212 223 152 36 39 218 197 69 114 42 234 253 143 62 255 189 64 137 9 0 175 105 58 50 170 11 131 220 79 226 122 64 158 122 53 245 40 39 88 45 156 151 248 74 205 36 164 195 227 219 103 205 198)
  :der-encode
  #t
  :tests
  '(#(883
      "edge case for u1"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 46 103 171 37 110 36 96 72 184 21 76 107 209 45 231 95 22 87 249 178 14 141 160 155 236 161 73 165 23 203 251 27)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 92 192 123 10 2 97 156 112 27 91 33 18 238 30 129 82 170 42 125 135 136 12 35 16 64 145 66 4 110 150 45 244 14 116 232 25 30 46 199 111 143 158 60 84 165 155 199 158 198 139 255 64 126 74 212 214 152 143 65 155 86 113 242 91)
  :der-encode
  #t
  :tests
  '(#(884
      "edge case for u1"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 92 207 86 74 220 72 192 145 112 42 152 215 162 91 206 190 44 175 243 100 29 27 65 55 217 66 147 74 47 151 246 54)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 85 152 38 127 40 160 208 149 202 201 212 182 228 248 21 124 115 212 141 106 118 183 44 143 58 129 21 236 254 94 40 167 45 101 17 54 209 62 3 156 228 193 52 221 85 114 255 220 153 107 238 1 139 61 1 67 157 246 42 83 140 234 200 167)
  :der-encode
  #t
  :tests
  '(#(885
      "edge case for u1"
      #vu8(84 101 115 116)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 33 0 129 151 220 120 214 204 238 150 119 223 93 153 243 130 200 12 25 221 13 120 186 187 184 104 16 216 57 139 12 145 20 20)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 128 226 95 33 205 123 139 226 186 180 24 49 148 237 189 34 176 202 83 253 112 243 68 228 41 136 163 150 176 242 198 226 153 30 39 217 193 76 29 187 94 24 137 149 106 115 40 21 157 169 219 172 8 43 147 178 137 204 144 178 143 150 166 90)
  :der-encode
  #t
  :tests
  '(#(886
      "edge case for u1"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 117 82 216 206 69 103 75 34 55 53 177 194 208 148 101 129 205 6 45 73 74 137 244 47 88 240 238 27 197 192 243 24)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 104 13 228 95 209 230 195 136 25 174 75 221 67 214 20 130 117 47 164 62 129 56 169 163 144 54 76 236 243 107 78 242 139 144 222 47 38 15 116 127 238 138 150 58 227 8 52 154 166 184 22 230 190 129 64 53 203 198 132 72 234 226 114 114)
  :der-encode
  #t
  :tests
  '(#(887
      "edge case for u1"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 42 152 142 235 93 145 39 151 20 235 21 15 174 164 131 142 222 6 177 101 103 220 115 145 149 21 210 143 240 74 18 215)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 82 217 232 231 231 167 40 242 74 97 239 55 19 55 90 222 148 45 112 141 155 192 97 245 0 253 50 212 147 244 143 189 15 56 131 209 165 86 128 246 154 15 230 144 157 165 95 80 110 153 55 131 126 36 78 32 85 0 25 161 123 169 195 112)
  :der-encode
  #t
  :tests
  '(#(888
      "edge case for u1"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 85 152 1 168 143 120 67 206 63 28 115 205 122 87 135 231 167 238 173 188 185 201 14 113 238 100 224 221 10 116 26 99)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 160 12 96 35 81 9 53 44 88 149 99 165 144 214 26 219 227 77 132 189 221 110 130 194 244 46 251 135 21 39 1 23 120 3 84 113 222 59 114 221 195 202 246 152 24 36 170 76 227 1 64 86 16 21 109 235 144 234 154 163 22 168 186 102)
  :der-encode
  #t
  :tests
  '(#(889
      "edge case for u1"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 43 102 86 143 6 61 16 215 63 119 168 107 232 193 133 34 181 201 71 73 59 252 194 47 29 136 74 10 68 9 252 65)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 87 88 249 228 2 164 186 253 130 89 77 13 38 237 71 165 248 233 197 5 38 211 75 52 180 125 8 117 185 254 123 20 4 243 248 9 83 118 213 77 252 16 216 60 147 138 24 23 90 100 81 126 59 70 78 221 5 143 91 134 38 216 55 197)
  :der-encode
  #t
  :tests
  '(#(890
      "edge case for u1"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 62 2 117 191 155 152 113 24 208 227 124 53 8 130 23 141 72 165 129 94 193 229 71 65 51 135 205 252 232 190 207 0)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 47 161 216 172 13 2 218 131 169 152 247 103 189 133 75 26 4 62 56 61 81 89 231 7 126 53 237 58 156 168 25 66 18 215 251 43 149 232 103 237 11 36 228 80 147 214 57 241 254 214 129 98 170 81 230 10 210 228 93 224 18 184 233 74)
  :der-encode
  #t
  :tests
  '(#(891
      "edge case for u2"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 99 83 199 243 224 164 227 62 191 119 88 218 223 43 217 208 132 19 40 225 60 117 226 82 133 95 90 43 135 194 199 140)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 62 9 128 95 228 153 209 188 215 164 56 143 224 60 75 211 234 246 55 28 219 62 122 253 116 140 222 82 174 137 124 2 25 230 94 155 119 239 117 77 119 20 12 32 184 200 144 116 149 15 126 113 203 199 217 126 13 200 121 55 26 163 48 108)
  :der-encode
  #t
  :tests
  '(#(892
      "edge case for u2"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 20 137 155 198 255 94 114 51 143 60 152 71 250 101 49 196 51 127 222 63 207 28 140 50 247 104 251 163 164 2 169 100)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 126 105 144 157 188 84 67 66 165 190 233 175 118 99 71 82 111 234 155 234 82 107 216 162 114 141 128 37 60 1 194 4 163 73 11 101 131 198 191 68 163 121 27 97 162 152 220 24 190 85 211 89 60 36 184 160 19 116 127 152 119 246 110 97)
  :der-encode
  #t
  :tests
  '(#(893
      "edge case for u2"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 114 101 92 94 79 28 239 202 34 244 19 166 18 229 191 221 123 169 174 113 5 63 104 176 199 77 154 115 89 0 19 195)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 107 230 33 152 138 245 23 162 46 21 73 203 35 65 109 194 207 141 138 204 221 141 8 55 8 230 214 85 241 85 204 254 142 184 114 119 33 147 86 151 42 59 208 218 197 245 73 172 82 49 92 67 224 237 234 157 110 36 242 255 149 32 41 208)
  :der-encode
  #t
  :tests
  '(#(894
      "edge case for u2"
      #vu8(84 101 115 116)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 33 0 162 3 13 191 1 216 201 222 41 0 220 56 69 253 164 228 198 188 4 156 76 213 113 122 156 98 155 158 210 157 24 89)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 90 230 175 174 121 117 34 80 177 234 2 244 156 215 90 168 153 65 134 49 4 17 114 178 227 219 49 202 122 187 42 178 43 239 31 121 131 137 162 22 176 50 36 25 253 122 118 228 68 139 61 26 190 66 91 71 216 67 7 228 85 58 211 82)
  :der-encode
  #t
  :tests
  '(#(895
      "edge case for u2"
      #vu8(84 101 115 116)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 33 0 161 219 114 147 182 240 21 148 184 8 113 142 97 164 214 66 223 244 254 226 251 71 17 103 239 122 180 41 89 164 115 231)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 24 53 2 82 80 124 194 110 74 18 191 62 72 62 2 222 231 72 9 56 44 142 100 12 166 53 176 108 39 181 26 78 151 87 143 62 240 63 174 131 122 23 141 80 169 201 77 122 246 29 96 112 221 19 167 36 9 146 94 198 179 49 50 108)
  :der-encode
  #t
  :tests
  '(#(896
      "edge case for u2"
      #vu8(84 101 115 116)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 33 0 153 187 141 75 203 241 129 109 49 170 216 140 37 198 31 20 51 176 131 34 65 44 123 216 78 215 89 208 28 0 145 39)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 9 67 204 16 68 86 216 122 113 43 138 175 113 19 212 59 230 68 4 220 208 248 237 112 122 227 40 110 61 181 50 63 67 134 39 83 171 27 5 227 248 212 37 73 133 20 202 241 120 167 96 46 190 67 167 28 238 236 109 161 79 136 14 76)
  :der-encode
  #t
  :tests
  '(#(897
      "edge case for u2"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 65 206 232 42 105 87 239 2 171 58 160 122 51 21 172 204 13 13 102 194 8 29 83 2 70 214 230 129 135 60 144 209)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 100 147 19 57 172 221 168 39 100 160 2 41 216 210 102 177 49 18 35 2 250 62 180 64 207 218 114 207 129 173 85 78 146 221 255 161 231 105 14 252 26 74 132 8 225 227 197 229 153 170 152 17 242 109 81 133 44 156 238 171 223 229 229 199)
  :der-encode
  #t
  :tests
  '(#(898
      "edge case for u2"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 116 109 97 87 46 202 231 116 105 30 120 9 18 25 134 217 185 50 121 176 9 52 255 29 239 31 71 152 218 137 173 76)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 1 141 117 94 85 64 105 47 135 182 224 24 100 190 60 194 114 164 104 243 252 205 213 53 204 12 47 28 117 224 171 208 76 124 113 85 240 233 104 109 224 252 188 249 58 57 213 12 46 42 223 139 3 98 103 107 49 233 164 155 220 170 219 183)
  :der-encode
  #t
  :tests
  '(#(899
      "edge case for u2"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 40 27 38 160 144 137 104 9 159 142 31 97 15 79 53 131 24 186 162 17 7 183 145 239 111 36 203 36 70 119 166 75)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 83 238 63 117 237 114 117 85 12 75 22 4 246 143 188 76 65 16 6 177 61 168 9 213 174 106 20 203 55 186 254 245 125 38 34 45 45 114 54 185 215 227 172 66 37 16 13 104 118 76 55 199 123 128 242 79 124 101 229 121 209 61 151 39)
  :der-encode
  #t
  :tests
  '(#(900
      "edge case for u2"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 70 167 143 231 193 73 198 125 126 238 177 181 190 87 179 161 8 38 81 194 120 235 196 165 10 190 180 87 15 133 143 27)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 134 253 37 222 37 11 214 233 194 114 212 163 231 242 142 222 169 52 183 240 67 5 11 118 90 183 85 32 15 78 41 0 162 35 130 153 120 60 41 10 11 77 79 59 254 55 100 87 25 150 112 0 70 111 41 136 46 137 95 84 195 235 127 143)
  :der-encode
  #t
  :tests
  '(#(901
      "edge case for u2"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 32 20 253 171 237 208 247 84 222 31 51 5 72 78 193 198 184 198 28 189 81 218 176 211 123 200 15 7 65 75 164 43 85)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 28 194 194 66 166 61 68 185 15 103 243 90 202 159 213 204 11 37 211 132 238 150 72 160 82 121 212 118 249 170 116 140 108 176 114 247 51 108 248 159 72 53 66 114 28 155 167 17 151 233 191 56 114 153 217 128 126 247 146 75 158 124 8 60)
  :der-encode
  #t
  :tests
  '(#(902
      "edge case for u2"
      #vu8(84 101 115 116)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 33 0 142 48 90 28 248 133 204 195 48 173 15 27 88 52 166 167 131 241 148 138 93 80 135 212 43 181 212 122 248 36 53 53)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 69 51 56 46 28 174 219 237 139 223 165 244 140 88 189 252 183 93 104 17 18 43 176 22 207 66 228 87 152 159 180 56 109 52 184 153 32 12 221 88 186 47 170 29 1 105 218 138 84 84 222 80 208 138 46 127 83 98 214 15 110 199 197 222)
  :der-encode
  #t
  :tests
  '(#(903
      "point duplication during verification"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 7 76 3 86 3 225 235 73 171 83 130 129 155 248 42 248 41 41 181 0 198 231 136 65 193 178 195 255 84 166 21 221 2 32 68 8 138 6 133 223 25 85 105 98 134 204 8 61 53 175 168 210 137 89 39 64 91 7 49 234 220 216 167 35 55 153)
      #t
      ("PointDuplication"))))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 69 51 56 46 28 174 219 237 139 223 165 244 140 88 189 252 183 93 104 17 18 43 176 22 207 66 228 87 152 159 180 56 60 198 159 66 129 225 204 99 132 54 96 115 156 25 178 232 25 231 23 211 4 155 241 168 204 176 114 13 176 166 141 153)
  :der-encode
  #t
  :tests
  '(#(904
      "duplication bug"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 7 76 3 86 3 225 235 73 171 83 130 129 155 248 42 248 41 41 181 0 198 231 136 65 193 178 195 255 84 166 21 221 2 32 68 8 138 6 133 223 25 85 105 98 134 204 8 61 53 175 168 210 137 89 39 64 91 7 49 234 220 216 167 35 55 153)
      #f
      ("PointDuplication"))))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 169 1 30 55 18 225 55 239 35 25 185 100 198 27 162 51 83 153 203 73 209 111 25 57 202 127 3 195 124 19 187 15 147 253 185 77 96 179 74 169 230 145 155 98 194 77 178 229 122 7 213 147 105 47 138 233 36 238 55 165 159 47 205 78)
  :der-encode
  #t
  :tests
  '(#(905
      "comparison with point at infinity "
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 56 169 29 73 53 250 56 148 20 204 174 48 52 129 47 37 217 104 126 54 145 203 55 167 218 180 175 128 221 24 28 226 2 32 33 255 17 146 83 150 33 242 114 225 53 80 31 128 181 227 130 113 229 83 241 19 135 203 28 210 207 179 183 219 68 135)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 97 101 20 209 30 46 155 79 99 114 89 129 241 211 58 14 40 151 59 199 113 154 76 194 150 151 0 145 60 210 241 177 96 113 247 30 255 33 210 188 37 79 207 254 222 71 165 59 107 78 4 26 185 123 99 80 213 148 133 23 110 201 215 43)
  :der-encode
  #t
  :tests
  '(#(906
      "extreme value for k and edgecase s"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 116 60 241 184 181 205 79 46 181 95 138 163 105 89 58 196 54 239 4 65 102 105 158 55 213 26 20 194 206 19 234 14 2 32 56 169 29 73 53 250 56 148 20 204 174 48 52 129 47 37 217 104 126 54 145 203 55 167 218 180 175 128 221 24 28 226)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 136 151 195 109 218 130 118 205 80 107 137 82 23 38 97 24 140 14 14 121 61 58 228 119 188 119 65 247 55 222 210 112 22 15 74 132 246 103 142 143 76 145 228 98 248 13 131 112 23 84 196 190 47 202 191 140 165 7 191 134 82 55 92 127)
  :der-encode
  #t
  :tests
  '(#(907
      "extreme value for k and s^-1"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 116 60 241 184 181 205 79 46 181 95 138 163 105 89 58 196 54 239 4 65 102 105 158 55 213 26 20 194 206 19 234 14 2 32 121 106 99 83 188 207 11 134 117 182 153 213 2 203 174 44 136 187 87 153 129 142 228 249 249 58 10 93 71 124 208 46)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 88 150 26 176 41 45 23 56 252 78 86 9 9 180 59 111 143 86 116 178 234 128 37 80 181 12 120 133 99 113 246 175 134 81 62 69 28 243 73 191 25 240 54 47 52 69 239 180 160 208 131 138 36 51 59 148 48 84 248 38 209 190 221 39)
  :der-encode
  #t
  :tests
  '(#(908
      "extreme value for k and s^-1"
      #vu8(84 101 115 116)
      #vu8(48 69 2 32 116 60 241 184 181 205 79 46 181 95 138 163 105 89 58 196 54 239 4 65 102 105 158 55 213 26 20 194 206 19 234 14 2 33 0 135 252 70 73 78 88 135 201 203 132 213 64 126 2 215 142 9 199 149 79 196 78 31 44 115 75 62 206 223 109 18 31)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 57 37 189 238 166 226 246 72 174 109 163 152 139 58 62 169 32 56 41 210 141 164 88 79 96 227 188 190 95 130 250 48 105 130 47 241 148 89 157 59 88 15 114 252 242 168 100 196 19 138 18 219 217 128 194 179 226 215 239 135 12 145 204 110)
  :der-encode
  #t
  :tests
  '(#(909
      "extreme value for k and s^-1"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 116 60 241 184 181 205 79 46 181 95 138 163 105 89 58 196 54 239 4 65 102 105 158 55 213 26 20 194 206 19 234 14 2 32 33 255 17 146 83 150 33 242 114 225 53 80 31 128 181 227 130 113 229 83 241 19 135 203 28 210 207 179 183 219 68 136)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 49 31 18 204 3 246 74 253 246 168 52 137 38 36 29 90 175 188 251 110 96 77 80 188 159 136 1 143 106 204 27 119 148 12 56 146 134 126 89 83 115 12 49 22 211 247 114 254 183 119 48 44 223 130 81 147 248 29 25 235 78 114 110 182)
  :der-encode
  #t
  :tests
  '(#(910
      "extreme value for k and s^-1"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 116 60 241 184 181 205 79 46 181 95 138 163 105 89 58 196 54 239 4 65 102 105 158 55 213 26 20 194 206 19 234 14 2 32 48 144 244 135 229 31 158 53 200 175 112 187 154 183 223 69 3 126 35 10 51 210 193 253 150 228 4 37 79 203 134 121)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 48 41 27 202 78 185 60 65 153 29 174 192 253 46 135 194 119 141 149 141 154 142 47 164 230 211 131 93 72 91 194 62 66 23 246 132 207 221 131 109 124 246 9 154 52 198 130 97 229 160 148 173 181 179 228 169 38 47 245 149 124 27 27 168)
  :der-encode
  #t
  :tests
  '(#(911
      "extreme value for k"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 116 60 241 184 181 205 79 46 181 95 138 163 105 89 58 196 54 239 4 65 102 105 158 55 213 26 20 194 206 19 234 14 2 32 119 71 45 154 40 180 236 231 28 244 19 166 142 172 14 180 35 161 111 180 98 177 244 135 6 254 212 140 164 55 189 45)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 161 44 124 19 173 255 98 106 211 31 251 139 163 133 195 9 45 177 175 228 162 168 232 135 216 16 167 34 4 129 100 205 139 31 62 103 253 233 255 7 3 241 228 41 247 72 200 71 153 117 70 171 24 80 235 192 4 83 93 204 212 83 207 129)
  :der-encode
  #t
  :tests
  '(#(912
      "extreme value for k and edgecase s"
      #vu8(84 101 115 116)
      #vu8(48 69 2 33 0 139 210 174 185 203 126 87 203 44 75 72 47 252 129 183 175 185 222 39 225 227 189 35 194 58 68 83 189 154 206 50 98 2 32 56 169 29 73 53 250 56 148 20 204 174 48 52 129 47 37 217 104 126 54 145 203 55 167 218 180 175 128 221 24 28 226)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 139 10 2 230 147 89 254 94 17 225 95 118 82 119 212 187 211 30 137 138 125 170 31 202 34 214 132 16 55 200 215 171 126 119 30 18 77 182 195 92 138 232 210 98 20 12 78 71 222 48 29 139 15 221 252 37 167 51 139 8 171 45 105 139)
  :der-encode
  #t
  :tests
  '(#(913
      "extreme value for k and s^-1"
      #vu8(84 101 115 116)
      #vu8(48 69 2 33 0 139 210 174 185 203 126 87 203 44 75 72 47 252 129 183 175 185 222 39 225 227 189 35 194 58 68 83 189 154 206 50 98 2 32 121 106 99 83 188 207 11 134 117 182 153 213 2 203 174 44 136 187 87 153 129 142 228 249 249 58 10 93 71 124 208 46)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 113 77 8 108 16 22 188 60 115 203 224 8 254 66 228 65 138 241 20 225 122 213 253 6 179 87 244 67 187 249 71 208 23 255 50 226 153 253 126 62 199 61 147 55 71 83 166 45 34 115 36 162 93 175 71 236 93 6 48 255 226 192 33 154)
  :der-encode
  #t
  :tests
  '(#(914
      "extreme value for k and s^-1"
      #vu8(84 101 115 116)
      #vu8(48 70 2 33 0 139 210 174 185 203 126 87 203 44 75 72 47 252 129 183 175 185 222 39 225 227 189 35 194 58 68 83 189 154 206 50 98 2 33 0 135 252 70 73 78 88 135 201 203 132 213 64 126 2 215 142 9 199 149 79 196 78 31 44 115 75 62 206 223 109 18 31)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 88 226 96 190 170 33 119 246 26 26 162 75 112 177 4 243 237 124 233 151 225 231 100 242 247 175 136 9 200 50 153 172 65 204 229 16 210 171 209 185 174 93 109 98 27 247 100 118 195 128 76 29 157 240 220 243 104 255 33 70 137 242 10 146)
  :der-encode
  #t
  :tests
  '(#(915
      "extreme value for k and s^-1"
      #vu8(84 101 115 116)
      #vu8(48 69 2 33 0 139 210 174 185 203 126 87 203 44 75 72 47 252 129 183 175 185 222 39 225 227 189 35 194 58 68 83 189 154 206 50 98 2 32 33 255 17 146 83 150 33 242 114 225 53 80 31 128 181 227 130 113 229 83 241 19 135 203 28 210 207 179 183 219 68 136)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 110 127 25 211 244 184 165 68 63 75 70 4 70 9 156 113 193 172 164 247 227 180 1 82 226 94 51 46 20 205 183 216 51 41 90 252 12 180 248 221 71 133 137 236 50 253 48 222 113 108 55 136 195 95 21 241 160 235 63 230 202 208 133 254)
  :der-encode
  #t
  :tests
  '(#(916
      "extreme value for k and s^-1"
      #vu8(84 101 115 116)
      #vu8(48 69 2 33 0 139 210 174 185 203 126 87 203 44 75 72 47 252 129 183 175 185 222 39 225 227 189 35 194 58 68 83 189 154 206 50 98 2 32 48 144 244 135 229 31 158 53 200 175 112 187 154 183 223 69 3 126 35 10 51 210 193 253 150 228 4 37 79 203 134 121)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 168 136 137 156 13 87 17 104 67 23 48 215 242 64 24 211 64 240 161 79 212 93 139 167 71 160 40 222 65 221 56 114 69 65 195 142 135 246 47 47 18 148 146 60 40 247 155 56 2 222 182 99 67 102 241 125 62 91 105 158 156 76 133 52)
  :der-encode
  #t
  :tests
  '(#(917
      "extreme value for k"
      #vu8(84 101 115 116)
      #vu8(48 69 2 33 0 139 210 174 185 203 126 87 203 44 75 72 47 252 129 183 175 185 222 39 225 227 189 35 194 58 68 83 189 154 206 50 98 2 32 119 71 45 154 40 180 236 231 28 244 19 166 142 172 14 180 35 161 111 180 98 177 244 135 6 254 212 140 164 55 189 45)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 139 210 174 185 203 126 87 203 44 75 72 47 252 129 183 175 185 222 39 225 227 189 35 194 58 68 83 189 154 206 50 98 84 126 248 53 195 218 196 253 151 248 70 26 20 97 29 201 194 119 69 19 45 237 142 84 92 29 84 199 47 4 105 151)
  :der-encode
  #t
  :tests
  '(#(918
      "testing point duplication"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 83 46 170 189 149 116 136 13 191 118 185 184 204 0 131 44 32 166 236 17 61 104 34 153 85 13 122 110 15 52 94 37 2 32 24 72 122 67 242 143 207 26 228 87 184 93 205 91 239 162 129 191 17 133 25 233 96 254 203 114 2 18 167 229 195 60)
      #f
      ())
    #(919
      "testing point duplication"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 86 204 173 30 12 122 33 174 126 239 80 215 209 131 10 69 107 146 142 146 119 249 132 94 59 16 148 20 136 19 248 130 2 32 24 72 122 67 242 143 207 26 228 87 184 93 205 91 239 162 129 191 17 133 25 233 96 254 203 114 2 18 167 229 195 60)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 139 210 174 185 203 126 87 203 44 75 72 47 252 129 183 175 185 222 39 225 227 189 35 194 58 68 83 189 154 206 50 98 85 124 95 165 222 19 228 190 166 109 196 118 137 34 111 168 171 196 177 16 167 56 145 211 195 245 243 85 240 105 233 224)
  :der-encode
  #t
  :tests
  '(#(920
      "testing point duplication"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 83 46 170 189 149 116 136 13 191 118 185 184 204 0 131 44 32 166 236 17 61 104 34 153 85 13 122 110 15 52 94 37 2 32 24 72 122 67 242 143 207 26 228 87 184 93 205 91 239 162 129 191 17 133 25 233 96 254 203 114 2 18 167 229 195 60)
      #f
      ())
    #(921
      "testing point duplication"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 86 204 173 30 12 122 33 174 126 239 80 215 209 131 10 69 107 146 142 146 119 249 132 94 59 16 148 20 136 19 248 130 2 32 24 72 122 67 242 143 207 26 228 87 184 93 205 91 239 162 129 191 17 133 25 233 96 254 203 114 2 18 167 229 195 60)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 35 30 167 111 148 20 228 102 114 101 201 117 6 102 179 139 110 155 222 103 251 7 79 120 210 94 123 24 7 164 90 70 24 46 38 43 64 56 204 104 104 81 111 191 18 189 77 202 32 124 23 86 78 90 4 156 96 181 213 221 9 199 61 34)
  :der-encode
  #t
  :tests
  '(#(922
      "k*G has a large x-coordinate"
      #vu8(84 101 115 116)
      #vu8(48 54 2 17 0 226 2 123 128 31 196 121 48 143 245 57 154 136 37 252 206 2 33 0 169 251 87 219 161 238 169 188 62 102 10 144 157 131 141 113 140 57 122 163 181 97 166 247 144 30 14 130 151 72 86 164)
      #t
      ())
    #(923
      "r too large"
      #vu8(84 101 115 116)
      #vu8(48 70 2 33 0 169 251 87 219 161 238 169 188 62 102 10 144 157 131 141 114 110 59 246 35 213 38 32 40 32 19 72 29 31 110 83 117 2 33 0 169 251 87 219 161 238 169 188 62 102 10 144 157 131 141 113 140 57 122 163 181 97 166 247 144 30 14 130 151 72 86 164)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 133 212 190 30 105 203 155 90 12 59 230 253 7 87 107 255 166 30 154 67 11 47 164 168 14 248 96 202 109 226 164 229 128 3 207 200 222 1 219 145 211 125 199 109 30 59 217 90 234 71 195 1 241 185 135 205 45 218 245 233 27 231 127 21)
  :der-encode
  #t
  :tests
  '(#(924
      "r,s are large"
      #vu8(84 101 115 116)
      #vu8(48 70 2 33 0 169 251 87 219 161 238 169 188 62 102 10 144 157 131 141 113 140 57 122 163 181 97 166 247 144 30 14 130 151 72 86 164 2 33 0 169 251 87 219 161 238 169 188 62 102 10 144 157 131 141 113 140 57 122 163 181 97 166 247 144 30 14 130 151 72 86 163)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 59 10 79 30 77 132 198 191 210 3 160 234 4 215 169 65 155 205 89 176 255 135 87 96 151 1 182 24 129 237 163 183 155 200 71 100 202 160 221 8 21 202 6 252 11 56 215 232 64 234 188 207 148 86 151 67 137 68 213 133 151 114 174 180)
  :der-encode
  #t
  :tests
  '(#(925
      "r and s^-1 have a large Hamming weight"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 2 32 74 184 222 10 81 72 27 196 87 148 185 36 81 143 45 214 172 92 206 49 243 34 141 98 76 90 137 111 121 162 214 162)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 90 64 252 241 95 151 73 37 78 188 201 200 225 254 206 187 18 72 245 206 41 221 220 38 112 35 87 190 222 191 160 21 78 37 225 155 107 99 254 8 145 79 64 98 192 165 100 172 83 51 99 47 16 134 65 84 100 214 113 98 107 196 220 86)
  :der-encode
  #t
  :tests
  '(#(926
      "r and s^-1 have a large Hamming weight"
      #vu8(84 101 115 116)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 2 33 0 139 27 95 137 245 187 116 202 164 45 54 230 1 169 243 194 11 78 108 145 206 185 138 82 251 250 159 129 120 27 138 23)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 78 228 175 249 134 132 25 144 109 89 70 179 204 51 143 164 219 146 161 208 22 165 198 198 151 6 45 44 57 223 245 122 122 48 140 55 162 97 10 188 158 96 70 102 197 52 149 189 67 89 144 62 71 17 149 112 147 89 132 179 77 17 128 24)
  :der-encode
  #t
  :tests
  '(#(927
      "small r and s"
      #vu8(84 101 115 116)
      #vu8(48 6 2 1 1 2 1 1)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 94 245 239 191 174 181 203 76 44 159 141 183 108 219 111 131 42 218 189 168 195 168 130 233 159 154 178 61 137 98 183 203 51 9 122 212 246 126 156 187 144 184 187 210 183 31 69 84 129 138 197 174 177 243 150 172 109 73 98 110 221 81 176 194)
  :der-encode
  #t
  :tests
  '(#(928
      "small r and s"
      #vu8(84 101 115 116)
      #vu8(48 6 2 1 1 2 1 2)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 62 132 3 86 108 75 212 93 193 163 227 63 252 68 72 44 16 62 171 21 3 39 229 40 121 217 31 174 196 180 27 162 127 168 113 41 206 211 19 206 7 62 151 114 240 212 134 45 135 156 57 229 209 81 46 26 71 228 51 3 217 221 251 29)
  :der-encode
  #t
  :tests
  '(#(929
      "small r and s"
      #vu8(84 101 115 116)
      #vu8(48 6 2 1 1 2 1 3)
      #t
      ())
    #(930
      "r is larger than n"
      #vu8(84 101 115 116)
      #vu8(48 38 2 33 0 169 251 87 219 161 238 169 188 62 102 10 144 157 131 141 113 140 57 122 163 181 97 166 247 144 30 14 130 151 72 86 168 2 1 3)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 20 3 60 17 87 120 196 112 52 168 220 210 9 18 250 61 250 124 104 170 242 75 92 171 196 200 208 50 243 39 88 248 85 236 42 140 48 51 162 168 50 252 47 73 109 143 192 103 84 123 191 253 55 231 234 115 20 187 168 160 226 227 139 200)
  :der-encode
  #t
  :tests
  '(#(931
      "s is larger than n"
      #vu8(84 101 115 116)
      #vu8(48 38 2 1 1 2 33 0 169 251 87 219 161 238 169 188 62 102 10 144 157 131 141 113 140 57 122 163 181 97 166 247 144 30 14 130 151 91 45 46)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 138 159 204 96 16 58 44 165 178 196 216 136 67 226 36 120 90 43 5 64 189 137 161 77 47 50 10 149 58 172 93 120 159 33 83 166 100 170 126 21 12 14 38 121 33 137 70 150 198 206 203 171 168 84 69 127 196 44 157 36 134 74 8 161)
  :der-encode
  #t
  :tests
  '(#(932
      "small r and s^-1"
      #vu8(84 101 115 116)
      #vu8(48 38 2 2 1 2 2 32 40 39 55 5 132 253 235 159 93 90 159 185 87 154 9 57 14 251 111 157 153 182 79 193 136 216 188 224 92 45 78 237)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 126 184 111 142 93 42 223 124 196 203 216 132 156 163 172 129 21 64 253 53 246 11 214 145 219 198 102 168 148 238 110 92 108 29 170 111 175 98 49 141 197 241 219 167 54 248 65 187 33 175 70 170 106 193 127 120 102 32 24 212 95 189 204 63)
  :der-encode
  #t
  :tests
  '(#(933
      "smallish r and s^-1"
      #vu8(84 101 115 116)
      #vu8(48 43 2 7 45 155 77 52 121 82 204 2 32 73 55 160 135 115 29 244 254 188 44 58 129 221 251 171 93 195 175 149 8 23 244 27 89 13 21 110 212 9 173 40 105)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 18 6 227 168 2 245 155 142 215 7 71 69 48 195 122 140 37 239 223 177 188 178 207 234 60 129 59 88 235 102 126 23 21 231 141 199 1 112 242 114 12 240 51 20 50 214 17 72 89 30 188 252 77 32 198 163 253 1 175 217 250 106 158 128)
  :der-encode
  #t
  :tests
  '(#(934
      "100-bit r and small s^-1"
      #vu8(84 101 115 116)
      #vu8(48 50 2 13 16 51 230 126 55 179 43 68 85 128 191 78 252 2 33 0 145 130 125 3 187 109 172 49 148 11 165 110 216 132 137 4 143 241 115 240 191 32 202 178 13 204 8 111 202 55 242 133)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 138 51 201 1 123 160 241 158 212 76 189 247 201 129 112 36 195 240 149 168 153 173 175 220 254 125 214 245 31 254 249 81 140 86 192 156 207 203 226 37 8 56 99 14 38 118 75 169 225 188 16 146 188 206 198 19 92 41 243 31 97 124 20 202)
  :der-encode
  #t
  :tests
  '(#(935
      "small r and 100 bit s^-1"
      #vu8(84 101 115 116)
      #vu8(48 38 2 2 1 2 2 32 62 179 95 231 232 51 31 113 228 198 59 69 243 73 169 157 71 165 231 129 121 142 87 159 35 134 25 93 56 39 187 21)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 165 213 192 239 195 144 31 48 139 244 37 27 176 204 40 68 229 171 206 233 9 109 17 129 52 253 113 77 19 242 208 48 142 248 6 113 199 27 214 191 110 51 51 37 181 97 179 192 195 209 164 219 26 199 237 139 15 224 155 59 50 83 205 86)
  :der-encode
  #t
  :tests
  '(#(936
      "100-bit r and s^-1"
      #vu8(84 101 115 116)
      #vu8(48 49 2 13 6 37 34 187 211 236 190 124 57 233 62 124 37 2 32 62 179 95 231 232 51 31 113 228 198 59 69 243 73 169 157 71 165 231 129 121 142 87 159 35 134 25 93 56 39 187 21)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 138 237 228 100 131 85 69 30 154 200 46 72 15 238 92 76 144 73 45 5 62 206 111 119 209 83 135 139 81 225 58 78 156 63 215 226 41 236 119 171 146 186 108 165 112 5 203 37 49 59 54 41 211 52 9 177 93 52 202 190 8 254 195 26)
  :der-encode
  #t
  :tests
  '(#(937
      "r and s^-1 are close to n"
      #vu8(84 101 115 116)
      #vu8(48 69 2 33 0 169 251 87 219 161 238 169 188 62 102 10 144 157 131 141 113 140 57 122 163 181 97 166 247 144 30 14 130 151 72 86 41 2 32 56 169 29 73 53 250 56 148 20 204 174 48 52 129 47 37 217 104 126 54 145 203 55 167 218 180 175 128 221 24 28 226)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 163 232 45 63 78 83 45 168 242 251 98 126 7 67 108 134 146 62 123 205 48 85 112 98 80 7 66 87 250 211 241 5 45 1 198 215 230 208 101 195 178 94 79 133 210 17 224 96 32 141 125 173 56 165 107 189 57 127 120 90 183 120 32 168)
  :der-encode
  #t
  :tests
  '(#(938
      "s == 1"
      #vu8(84 101 115 116)
      #vu8(48 37 2 32 56 169 29 73 53 250 56 148 20 204 174 48 52 129 47 37 217 104 126 54 145 203 55 167 218 180 175 128 221 24 28 228 2 1 1)
      #t
      ())
    #(939
      "s == 0"
      #vu8(84 101 115 116)
      #vu8(48 37 2 32 56 169 29 73 53 250 56 148 20 204 174 48 52 129 47 37 217 104 126 54 145 203 55 167 218 180 175 128 221 24 28 228 2 1 0)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 147 132 97 57 26 211 1 128 143 38 22 155 35 153 149 7 222 101 233 175 138 247 225 248 228 128 51 103 101 239 74 139 58 133 141 189 30 242 204 162 146 3 238 115 141 172 178 14 12 87 241 188 119 101 58 11 180 146 155 193 252 79 231 146)
  :der-encode
  #t
  :tests
  '(#(940
      "point at infinity during verify"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 84 253 171 237 208 247 84 222 31 51 5 72 78 193 198 184 198 28 189 81 218 176 211 123 200 15 7 65 75 164 43 83 2 32 56 169 29 73 53 250 56 148 20 204 174 48 52 129 47 37 217 104 126 54 145 203 55 167 218 180 175 128 221 24 28 226)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 168 72 119 76 96 113 53 157 19 79 49 42 183 20 193 51 25 107 220 132 204 182 57 61 181 32 69 94 211 137 154 39 116 205 27 79 214 243 58 6 177 192 213 155 25 72 171 117 254 115 149 209 249 40 234 113 118 33 237 238 205 22 175 19)
  :der-encode
  #t
  :tests
  '(#(941
      "edge case for signature malleability"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 84 253 171 237 208 247 84 222 31 51 5 72 78 193 198 184 198 28 189 81 218 176 211 123 200 15 7 65 75 164 43 83 2 32 84 253 171 237 208 247 84 222 31 51 5 72 78 193 198 184 198 28 189 81 218 176 211 123 200 15 7 65 75 164 43 83)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 91 228 133 45 27 209 61 77 189 116 191 130 111 170 8 50 46 196 50 74 197 163 17 176 237 96 16 127 223 253 246 239 59 7 131 170 109 222 248 41 19 113 206 11 88 49 66 226 130 105 43 153 58 250 129 253 2 52 145 146 20 6 179 241)
  :der-encode
  #t
  :tests
  '(#(942
      "edge case for signature malleability"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 84 253 171 237 208 247 84 222 31 51 5 72 78 193 198 184 198 28 189 81 218 176 211 123 200 15 7 65 75 164 43 83 2 32 84 253 171 237 208 247 84 222 31 51 5 72 78 193 198 184 198 28 189 81 218 176 211 123 200 15 7 65 75 164 43 84)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 149 216 30 29 217 121 15 245 97 220 149 73 83 113 57 114 80 70 97 34 239 70 30 191 112 109 227 158 31 53 146 159 24 115 110 150 19 28 12 185 44 80 77 194 96 37 219 32 189 18 78 206 156 92 4 24 43 63 13 215 155 189 170 85)
  :der-encode
  #t
  :tests
  '(#(943
      "u1 == 1"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 56 169 29 73 53 250 56 148 20 204 174 48 52 129 47 37 217 104 126 54 145 203 55 167 218 180 175 128 221 24 28 224 2 32 83 46 170 189 149 116 136 13 191 118 185 184 204 0 131 44 32 166 236 17 61 104 34 153 85 13 122 110 15 52 94 37)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 130 253 40 185 250 212 163 36 242 241 18 76 140 59 244 87 123 106 198 99 83 119 208 29 197 57 57 157 252 72 254 142 84 67 90 194 250 6 244 231 75 142 199 39 106 24 91 21 65 145 130 54 110 75 238 51 83 53 162 184 127 39 169 188)
  :der-encode
  #t
  :tests
  '(#(944
      "u1 == n - 1"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 56 169 29 73 53 250 56 148 20 204 174 48 52 129 47 37 217 104 126 54 145 203 55 167 218 180 175 128 221 24 28 224 2 32 86 204 173 30 12 122 33 174 126 239 80 215 209 131 10 69 107 146 142 146 119 249 132 94 59 16 148 20 136 19 248 130)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 46 194 202 36 13 112 138 238 19 245 31 69 227 216 28 175 58 188 10 18 5 108 100 115 244 172 119 208 106 146 67 89 48 116 145 57 4 217 56 61 199 147 167 82 187 41 8 91 235 188 189 34 16 128 240 81 55 234 38 51 224 12 159 56)
  :der-encode
  #t
  :tests
  '(#(945
      "u2 == 1"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 56 169 29 73 53 250 56 148 20 204 174 48 52 129 47 37 217 104 126 54 145 203 55 167 218 180 175 128 221 24 28 224 2 32 56 169 29 73 53 250 56 148 20 204 174 48 52 129 47 37 217 104 126 54 145 203 55 167 218 180 175 128 221 24 28 224)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 55 233 109 212 156 236 77 165 83 37 120 35 0 213 107 173 133 206 176 187 137 166 143 72 157 88 176 202 184 131 189 215 69 104 66 67 134 93 112 66 105 206 177 216 104 45 211 112 196 181 69 110 189 163 61 96 219 160 193 251 168 73 61 183)
  :der-encode
  #t
  :tests
  '(#(946
      "u2 == n - 1"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 56 169 29 73 53 250 56 148 20 204 174 48 52 129 47 37 217 104 126 54 145 203 55 167 218 180 175 128 221 24 28 224 2 32 113 82 58 146 107 244 113 40 41 153 92 96 105 2 94 75 178 208 252 109 35 150 111 79 181 105 95 1 186 48 57 199)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 159 120 124 75 19 43 114 45 28 90 52 4 46 133 135 208 1 179 121 160 248 132 191 242 19 53 169 30 126 57 59 121 138 28 30 175 21 32 6 139 110 137 18 34 164 52 233 198 31 52 144 255 253 216 85 228 245 71 101 16 90 111 204 214)
  :der-encode
  #t
  :tests
  '(#(947
      "edge case for u1"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 84 99 86 51 18 118 101 237 255 73 150 195 35 44 5 137 228 74 204 230 251 152 152 133 161 185 45 165 140 212 60 68)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 133 176 171 80 252 210 129 79 158 152 113 47 208 139 247 126 149 185 95 160 163 32 59 20 233 214 69 17 244 152 221 83 90 247 147 193 30 85 76 231 135 230 228 64 55 206 20 73 239 78 202 111 16 135 231 43 128 158 18 143 237 80 193 231)
  :der-encode
  #t
  :tests
  '(#(948
      "edge case for u1"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 2 142 184 246 251 142 90 56 51 112 11 86 135 241 121 72 190 238 207 124 115 170 156 20 67 14 243 202 1 96 32 54)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 130 149 140 87 45 91 61 182 225 133 103 54 27 113 91 30 58 234 42 57 159 10 60 7 35 250 127 57 172 110 201 151 32 24 21 184 171 68 18 163 99 52 132 74 251 107 64 114 144 36 2 130 180 3 97 18 221 246 31 40 16 87 200 98)
  :der-encode
  #t
  :tests
  '(#(949
      "edge case for u1"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 124 4 235 127 55 48 226 49 161 198 248 106 17 4 47 26 145 75 2 189 131 202 142 130 103 15 155 249 209 125 158 0)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 50 105 147 14 194 132 52 27 13 52 255 170 24 127 105 202 77 21 153 218 168 95 247 194 239 6 157 117 214 42 46 24 158 178 181 237 24 58 24 195 105 98 110 78 255 8 244 47 185 211 40 109 226 188 219 124 20 85 7 189 87 227 122 120)
  :der-encode
  #t
  :tests
  '(#(950
      "edge case for u1"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 59 59 39 38 134 209 56 8 73 136 174 35 8 157 87 181 116 251 171 233 131 225 222 53 105 68 66 194 185 102 0 112)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 46 189 183 194 202 236 64 115 88 154 253 229 110 15 126 205 137 131 252 200 14 172 20 80 175 130 220 164 50 140 155 113 152 80 157 135 114 97 226 247 27 5 5 158 113 249 248 31 233 20 102 229 30 161 184 98 20 7 206 24 47 250 219 69)
  :der-encode
  #t
  :tests
  '(#(951
      "edge case for u1"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 46 103 171 37 110 36 96 72 184 21 76 107 209 45 231 95 22 87 249 178 14 141 160 155 236 161 73 165 23 203 251 27)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 43 182 9 178 146 109 129 98 128 168 16 67 119 171 171 1 15 235 21 160 197 55 8 27 223 61 81 82 206 148 229 118 90 132 237 6 209 26 75 253 223 220 84 101 177 192 228 248 145 17 156 220 186 170 213 46 238 57 176 70 175 178 198 203)
  :der-encode
  #t
  :tests
  '(#(952
      "edge case for u1"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 92 207 86 74 220 72 192 145 112 42 152 215 162 91 206 190 44 175 243 100 29 27 65 55 217 66 147 74 47 151 246 54)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 92 82 206 116 248 23 139 54 52 100 242 26 211 90 240 228 235 148 76 100 0 101 144 176 13 31 17 12 230 109 25 182 150 119 124 93 208 30 124 82 43 204 215 4 173 235 35 102 151 97 126 247 11 43 162 74 123 142 25 176 47 193 221 136)
  :der-encode
  #t
  :tests
  '(#(953
      "edge case for u1"
      #vu8(84 101 115 116)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 33 0 129 151 220 120 214 204 238 150 119 223 93 153 243 130 200 12 25 221 13 120 186 187 184 104 16 216 57 139 12 145 20 20)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 47 254 58 52 65 31 245 111 124 125 232 86 1 207 74 7 191 179 150 35 239 102 12 235 10 180 73 59 232 145 19 98 115 80 40 118 76 110 120 18 25 93 121 46 188 126 89 84 117 95 62 53 194 132 103 247 42 120 144 187 191 64 63 127)
  :der-encode
  #t
  :tests
  '(#(954
      "edge case for u1"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 117 82 216 206 69 103 75 34 55 53 177 194 208 148 101 129 205 6 45 73 74 137 244 47 88 240 238 27 197 192 243 24)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 100 170 12 137 162 182 18 182 130 8 3 149 218 134 1 216 209 156 215 202 22 60 1 238 141 1 45 218 206 142 130 236 65 20 255 33 42 38 42 37 247 152 62 241 202 168 252 92 120 26 6 70 44 127 85 110 105 241 100 170 249 236 15 64)
  :der-encode
  #t
  :tests
  '(#(955
      "edge case for u1"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 42 152 142 235 93 145 39 151 20 235 21 15 174 164 131 142 222 6 177 101 103 220 115 145 149 21 210 143 240 74 18 215)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 128 175 102 194 83 185 58 203 77 92 6 210 47 186 77 254 193 73 210 67 175 159 173 150 185 176 171 121 43 163 140 79 23 30 179 90 238 10 214 147 214 172 99 173 242 129 56 64 241 62 100 50 203 73 138 217 235 3 86 246 171 231 213 3)
  :der-encode
  #t
  :tests
  '(#(956
      "edge case for u1"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 85 152 1 168 143 120 67 206 63 28 115 205 122 87 135 231 167 238 173 188 185 201 14 113 238 100 224 221 10 116 26 99)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 32 209 160 107 214 253 166 46 10 158 232 190 136 104 18 52 208 74 81 154 68 178 90 133 21 116 108 68 170 213 120 114 38 208 14 243 236 3 163 75 7 239 187 241 24 91 198 206 31 48 237 120 8 18 220 235 239 224 70 252 155 230 217 220)
  :der-encode
  #t
  :tests
  '(#(957
      "edge case for u1"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 43 102 86 143 6 61 16 215 63 119 168 107 232 193 133 34 181 201 71 73 59 252 194 47 29 136 74 10 68 9 252 65)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 155 63 192 236 208 252 18 111 162 197 57 224 240 177 235 50 40 130 150 100 200 65 119 90 77 53 3 37 0 168 160 69 34 222 82 19 86 121 158 83 228 58 79 90 98 221 252 152 170 228 163 203 159 10 226 9 98 36 223 30 132 233 13 214)
  :der-encode
  #t
  :tests
  '(#(958
      "edge case for u1"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 62 2 117 191 155 152 113 24 208 227 124 53 8 130 23 141 72 165 129 94 193 229 71 65 51 135 205 252 232 190 207 0)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 38 89 0 101 107 115 215 243 2 52 25 81 61 56 9 169 247 85 50 128 117 100 81 164 245 185 105 111 78 196 99 11 139 74 179 37 213 250 136 49 177 102 153 153 61 196 156 200 125 184 112 253 23 137 134 150 20 101 59 56 224 199 66 25)
  :der-encode
  #t
  :tests
  '(#(959
      "edge case for u2"
      #vu8(84 101 115 116)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 33 0 155 252 229 61 22 159 27 210 212 68 7 11 19 173 8 246 93 123 167 23 206 65 25 250 96 20 9 172 100 218 228 110)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 44 38 190 156 54 146 15 0 102 236 120 22 207 145 14 153 207 241 237 42 79 118 242 118 42 138 155 178 49 34 71 21 47 89 79 9 214 172 50 207 11 118 30 234 138 41 186 103 81 23 101 255 197 198 124 160 147 233 42 9 23 27 78 74)
  :der-encode
  #t
  :tests
  '(#(960
      "edge case for u2"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 115 204 21 152 80 5 0 43 118 13 233 180 70 89 145 95 19 92 138 177 145 91 165 200 59 44 128 182 193 168 41 105)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 12 222 29 66 117 224 31 87 229 167 137 104 182 218 41 215 4 177 45 126 225 95 253 191 103 237 181 57 55 245 117 80 76 149 162 241 2 87 31 118 92 80 154 137 172 122 108 237 95 237 229 91 51 158 237 144 50 244 155 214 39 247 82 128)
  :der-encode
  #t
  :tests
  '(#(961
      "edge case for u2"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 39 52 235 64 168 50 35 229 90 86 189 210 90 218 161 134 71 102 150 212 56 190 28 70 169 168 196 66 188 122 139 63)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 55 149 175 129 158 210 186 253 199 8 113 143 79 11 16 193 54 42 224 33 11 215 198 60 79 36 60 167 206 114 94 137 39 149 43 2 175 117 84 245 15 78 12 113 21 11 106 3 200 100 71 155 254 202 0 167 153 161 50 18 40 140 28 1)
  :der-encode
  #t
  :tests
  '(#(962
      "edge case for u2"
      #vu8(84 101 115 116)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 33 0 159 90 245 10 204 124 41 233 161 223 34 26 211 123 172 181 218 60 221 68 127 81 95 166 75 36 31 253 145 14 174 63)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 89 220 223 143 216 42 214 170 207 41 197 136 255 223 154 234 181 76 137 246 114 156 220 12 40 109 92 17 91 181 48 144 113 212 174 192 40 2 163 158 128 31 121 62 135 201 109 251 127 244 20 173 178 78 96 159 216 17 131 94 89 71 187 180)
  :der-encode
  #t
  :tests
  '(#(963
      "edge case for u2"
      #vu8(84 101 115 116)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 33 0 159 38 38 38 104 155 60 50 53 233 62 141 163 5 67 221 251 222 42 248 18 147 138 56 15 68 64 182 69 24 125 167)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 19 57 4 225 249 71 134 117 142 99 221 243 130 189 37 181 151 147 206 22 232 29 195 63 121 78 149 129 205 232 218 100 74 9 159 227 182 125 172 228 129 202 233 63 10 231 236 233 5 229 255 59 65 28 10 106 45 180 226 10 34 143 230 31)
  :der-encode
  #t
  :tests
  '(#(964
      "edge case for u2"
      #vu8(84 101 115 116)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 33 0 148 80 244 113 47 71 206 168 45 108 114 138 168 134 250 74 107 130 219 76 111 197 109 120 142 106 114 233 242 232 164 167)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 109 54 207 93 100 62 76 119 190 40 163 14 247 77 80 22 197 223 203 164 241 129 70 122 13 141 65 156 40 192 233 1 15 9 218 213 171 144 103 155 59 175 108 206 121 216 216 124 7 0 90 134 129 51 220 200 152 218 129 194 199 96 174 85)
  :der-encode
  #t
  :tests
  '(#(965
      "edge case for u2"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 31 21 109 154 43 208 91 111 122 44 39 200 15 155 183 63 141 84 10 204 35 177 55 5 217 20 131 214 129 227 78 223)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 52 106 76 40 77 95 90 171 101 119 250 142 170 179 244 101 189 141 201 159 145 192 252 50 125 13 207 159 51 2 147 194 74 204 159 108 130 180 3 183 143 151 179 30 95 94 186 222 229 36 41 113 106 59 212 132 71 132 151 174 100 157 46 102)
  :der-encode
  #t
  :tests
  '(#(966
      "edge case for u2"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 51 213 140 193 41 148 13 90 245 63 95 138 111 216 45 67 14 38 223 144 139 246 73 232 209 245 35 92 253 53 222 74)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 106 246 31 132 56 77 229 89 16 144 203 59 109 140 89 32 148 243 112 44 36 1 238 227 146 201 32 164 62 146 115 144 168 127 71 166 213 219 158 136 172 32 1 225 132 58 60 228 198 100 188 51 174 220 206 245 241 4 243 211 133 1 202 146)
  :der-encode
  #t
  :tests
  '(#(967
      "edge case for u2"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 30 169 161 191 7 138 94 155 156 22 173 3 177 57 173 167 116 126 141 7 239 107 8 168 202 177 88 142 204 72 246 208)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 108 152 145 52 132 214 89 172 139 178 210 222 201 101 5 234 220 163 177 217 112 58 113 197 88 101 91 138 159 53 19 198 111 144 94 201 54 148 26 87 152 114 12 50 132 124 33 102 169 30 135 95 102 209 148 155 155 252 155 58 114 23 200 10)
  :der-encode
  #t
  :tests
  '(#(968
      "edge case for u2"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 13 254 114 158 139 79 141 233 106 34 3 133 137 214 132 123 46 189 211 139 231 32 140 253 48 10 4 214 50 109 114 57)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 12 48 164 13 186 209 36 197 15 200 180 0 10 81 84 85 35 56 79 220 12 220 38 124 247 52 246 95 181 89 2 253 70 48 228 234 237 23 193 35 69 239 201 200 181 222 127 192 66 113 191 101 237 224 62 227 223 70 104 169 97 157 147 95)
  :der-encode
  #t
  :tests
  '(#(969
      "edge case for u2"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 105 251 87 219 161 238 169 188 62 102 10 144 157 131 141 113 140 57 122 163 181 97 166 247 144 30 14 130 151 72 86 169)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 108 163 252 37 131 154 149 175 64 62 55 121 75 173 138 8 224 248 127 206 183 172 104 70 135 4 40 72 7 246 86 1 104 31 135 201 90 85 241 226 16 254 150 242 216 156 51 11 69 250 3 64 6 197 40 12 229 193 119 15 9 17 56 182)
  :der-encode
  #t
  :tests
  '(#(970
      "edge case for u2"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 104 152 33 142 37 16 102 208 204 94 100 49 124 47 23 123 233 208 8 187 247 15 225 159 28 227 105 98 169 225 112 243)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 59 13 49 228 236 57 241 148 20 110 63 233 100 139 186 78 108 217 213 202 95 141 209 48 76 222 192 211 150 178 84 71 28 27 70 51 191 53 229 63 207 221 110 200 189 29 48 233 77 52 40 9 225 158 101 30 162 101 185 176 155 114 64 193)
  :der-encode
  #t
  :tests
  '(#(971
      "point duplication during verification"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 91 34 151 66 150 192 147 252 201 147 14 20 33 91 177 152 117 167 209 239 178 239 224 21 77 78 97 150 221 179 77 68 2 32 68 8 138 6 133 223 25 85 105 98 134 204 8 61 53 175 168 210 137 89 39 64 91 7 49 234 220 216 167 35 55 153)
      #t
      ("PointDuplication"))))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 59 13 49 228 236 57 241 148 20 110 63 233 100 139 186 78 108 217 213 202 95 141 209 48 76 222 192 211 150 178 84 71 141 224 17 167 226 184 196 124 110 136 155 199 224 102 92 137 33 7 206 25 243 135 187 9 125 173 142 108 131 252 18 182)
  :der-encode
  #t
  :tests
  '(#(972
      "duplication bug"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 91 34 151 66 150 192 147 252 201 147 14 20 33 91 177 152 117 167 209 239 178 239 224 21 77 78 97 150 221 179 77 68 2 32 68 8 138 6 133 223 25 85 105 98 134 204 8 61 53 175 168 210 137 89 39 64 91 7 49 234 220 216 167 35 55 153)
      #f
      ("PointDuplication"))))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 82 152 115 25 100 74 130 122 109 130 8 51 82 72 118 136 243 62 32 149 250 234 203 200 62 201 196 229 62 3 56 241 21 183 237 7 24 195 178 29 168 174 66 160 179 115 94 180 252 127 218 219 236 136 63 53 69 105 139 211 48 92 8 67)
  :der-encode
  #t
  :tests
  '(#(973
      "comparison with point at infinity "
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 56 169 29 73 53 250 56 148 20 204 174 48 52 129 47 37 217 104 126 54 145 203 55 167 218 180 175 128 221 24 28 226 2 32 33 255 17 146 83 150 33 242 114 225 53 80 31 128 181 227 130 113 229 83 241 19 135 203 28 210 207 179 183 219 68 135)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 29 48 204 28 136 181 135 254 36 141 20 174 131 145 226 32 69 23 97 29 172 212 62 234 146 121 83 39 211 225 119 72 127 144 131 113 48 195 40 185 57 109 129 6 16 148 233 116 29 7 87 138 217 55 225 43 69 85 20 99 134 108 131 103)
  :der-encode
  #t
  :tests
  '(#(974
      "extreme value for k and edgecase s"
      #vu8(84 101 115 116)
      #vu8(48 69 2 33 0 131 56 66 124 124 244 209 28 185 129 217 177 135 147 227 119 156 73 76 80 44 117 189 115 158 87 141 226 167 0 87 141 2 32 56 169 29 73 53 250 56 148 20 204 174 48 52 129 47 37 217 104 126 54 145 203 55 167 218 180 175 128 221 24 28 226)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 18 47 112 233 133 121 186 179 61 113 118 100 134 141 86 213 176 6 131 181 213 50 9 30 237 127 86 201 185 190 229 207 34 105 174 152 194 196 12 205 175 68 120 81 227 107 212 214 197 212 111 87 215 236 216 164 204 65 85 20 228 129 191 17)
  :der-encode
  #t
  :tests
  '(#(975
      "extreme value for k and s^-1"
      #vu8(84 101 115 116)
      #vu8(48 69 2 33 0 131 56 66 124 124 244 209 28 185 129 217 177 135 147 227 119 156 73 76 80 44 117 189 115 158 87 141 226 167 0 87 141 2 32 121 106 99 83 188 207 11 134 117 182 153 213 2 203 174 44 136 187 87 153 129 142 228 249 249 58 10 93 71 124 208 46)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 144 76 61 26 147 154 199 94 219 231 198 108 188 183 81 247 171 54 155 104 73 48 234 170 60 84 66 3 103 171 0 154 126 155 131 71 238 77 182 102 231 139 232 112 167 50 198 244 113 194 11 44 191 97 204 229 157 129 71 94 74 62 106 15)
  :der-encode
  #t
  :tests
  '(#(976
      "extreme value for k and s^-1"
      #vu8(84 101 115 116)
      #vu8(48 70 2 33 0 131 56 66 124 124 244 209 28 185 129 217 177 135 147 227 119 156 73 76 80 44 117 189 115 158 87 141 226 167 0 87 141 2 33 0 135 252 70 73 78 88 135 201 203 132 213 64 126 2 215 142 9 199 149 79 196 78 31 44 115 75 62 206 223 109 18 31)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 63 158 52 245 18 184 88 139 107 44 67 132 252 187 57 89 121 230 20 46 193 61 138 249 55 199 37 24 93 19 41 178 84 235 169 240 7 88 225 100 44 105 74 25 88 180 247 155 29 233 117 149 244 146 215 238 185 112 130 79 50 109 145 78)
  :der-encode
  #t
  :tests
  '(#(977
      "extreme value for k and s^-1"
      #vu8(84 101 115 116)
      #vu8(48 69 2 33 0 131 56 66 124 124 244 209 28 185 129 217 177 135 147 227 119 156 73 76 80 44 117 189 115 158 87 141 226 167 0 87 141 2 32 33 255 17 146 83 150 33 242 114 225 53 80 31 128 181 227 130 113 229 83 241 19 135 203 28 210 207 179 183 219 68 136)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 68 36 240 158 79 134 146 49 228 123 30 52 38 236 38 158 91 239 25 236 100 204 150 218 91 46 253 210 17 107 131 240 122 134 61 37 116 59 178 96 166 56 222 100 151 150 198 118 225 56 5 134 92 139 185 218 195 142 22 250 229 75 12 239)
  :der-encode
  #t
  :tests
  '(#(978
      "extreme value for k and s^-1"
      #vu8(84 101 115 116)
      #vu8(48 69 2 33 0 131 56 66 124 124 244 209 28 185 129 217 177 135 147 227 119 156 73 76 80 44 117 189 115 158 87 141 226 167 0 87 141 2 32 48 144 244 135 229 31 158 53 200 175 112 187 154 183 223 69 3 126 35 10 51 210 193 253 150 228 4 37 79 203 134 121)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 57 93 62 13 235 198 243 245 195 60 221 107 93 11 78 69 124 253 148 167 194 155 5 164 144 255 78 3 151 215 61 202 73 38 143 170 121 11 81 149 91 41 122 160 111 187 124 111 146 185 213 136 208 67 37 65 95 8 209 251 233 124 124 9)
  :der-encode
  #t
  :tests
  '(#(979
      "extreme value for k"
      #vu8(84 101 115 116)
      #vu8(48 69 2 33 0 131 56 66 124 124 244 209 28 185 129 217 177 135 147 227 119 156 73 76 80 44 117 189 115 158 87 141 226 167 0 87 141 2 32 119 71 45 154 40 180 236 231 28 244 19 166 142 172 14 180 35 161 111 180 98 177 244 135 6 254 212 140 164 55 189 45)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 45 55 57 32 191 63 153 87 233 45 50 139 227 11 156 62 245 218 13 239 80 84 69 119 25 77 22 127 245 94 85 253 81 210 27 229 6 224 170 35 63 173 56 105 209 151 228 71 77 42 144 57 133 12 34 154 183 114 229 16 192 107 32 213)
  :der-encode
  #t
  :tests
  '(#(980
      "extreme value for k and edgecase s"
      #vu8(84 101 115 116)
      #vu8(48 69 2 33 0 163 232 235 60 193 207 231 183 115 34 19 178 58 101 97 73 175 161 66 196 122 175 188 43 121 161 145 86 46 19 5 244 2 32 56 169 29 73 53 250 56 148 20 204 174 48 52 129 47 37 217 104 126 54 145 203 55 167 218 180 175 128 221 24 28 226)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 143 153 236 228 68 46 166 236 43 78 65 44 97 103 248 71 163 236 120 25 152 20 140 213 130 85 201 234 52 211 121 180 8 10 3 36 105 231 188 198 79 12 56 123 54 82 82 57 9 6 4 193 21 254 137 186 226 228 98 204 194 108 65 123)
  :der-encode
  #t
  :tests
  '(#(981
      "extreme value for k and s^-1"
      #vu8(84 101 115 116)
      #vu8(48 69 2 33 0 163 232 235 60 193 207 231 183 115 34 19 178 58 101 97 73 175 161 66 196 122 175 188 43 121 161 145 86 46 19 5 244 2 32 121 106 99 83 188 207 11 134 117 182 153 213 2 203 174 44 136 187 87 153 129 142 228 249 249 58 10 93 71 124 208 46)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 6 189 23 208 211 84 236 215 232 199 236 201 2 11 26 120 23 67 178 70 38 113 209 158 207 126 230 145 55 210 62 38 9 197 246 5 208 207 27 140 233 107 77 27 112 57 89 157 212 230 114 111 210 123 52 174 204 159 192 125 144 173 127 248)
  :der-encode
  #t
  :tests
  '(#(982
      "extreme value for k and s^-1"
      #vu8(84 101 115 116)
      #vu8(48 70 2 33 0 163 232 235 60 193 207 231 183 115 34 19 178 58 101 97 73 175 161 66 196 122 175 188 43 121 161 145 86 46 19 5 244 2 33 0 135 252 70 73 78 88 135 201 203 132 213 64 126 2 215 142 9 199 149 79 196 78 31 44 115 75 62 206 223 109 18 31)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 95 137 76 187 114 84 157 237 17 212 26 188 195 11 208 99 78 164 80 138 209 27 50 58 116 163 26 149 190 91 124 153 153 109 125 226 40 173 12 35 9 190 18 163 58 134 193 112 135 15 74 147 184 246 206 76 47 52 123 158 204 113 91 187)
  :der-encode
  #t
  :tests
  '(#(983
      "extreme value for k and s^-1"
      #vu8(84 101 115 116)
      #vu8(48 69 2 33 0 163 232 235 60 193 207 231 183 115 34 19 178 58 101 97 73 175 161 66 196 122 175 188 43 121 161 145 86 46 19 5 244 2 32 33 255 17 146 83 150 33 242 114 225 53 80 31 128 181 227 130 113 229 83 241 19 135 203 28 210 207 179 183 219 68 136)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 120 225 212 190 80 104 37 13 44 178 102 57 126 114 124 6 110 95 47 116 122 134 102 205 138 240 112 213 185 237 106 65 104 165 70 190 200 116 223 170 19 0 66 30 44 231 100 107 109 253 142 126 90 197 168 33 41 215 89 255 228 174 239 255)
  :der-encode
  #t
  :tests
  '(#(984
      "extreme value for k and s^-1"
      #vu8(84 101 115 116)
      #vu8(48 69 2 33 0 163 232 235 60 193 207 231 183 115 34 19 178 58 101 97 73 175 161 66 196 122 175 188 43 121 161 145 86 46 19 5 244 2 32 48 144 244 135 229 31 158 53 200 175 112 187 154 183 223 69 3 126 35 10 51 210 193 253 150 228 4 37 79 203 134 121)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 142 234 73 24 1 93 93 11 242 216 188 4 122 27 44 237 29 166 136 158 228 223 165 132 97 163 81 206 54 191 248 248 25 126 222 14 146 177 0 31 15 216 44 246 111 150 245 20 113 212 138 109 255 245 42 236 98 169 225 163 97 205 125 73)
  :der-encode
  #t
  :tests
  '(#(985
      "extreme value for k"
      #vu8(84 101 115 116)
      #vu8(48 69 2 33 0 163 232 235 60 193 207 231 183 115 34 19 178 58 101 97 73 175 161 66 196 122 175 188 43 121 161 145 86 46 19 5 244 2 32 119 71 45 154 40 180 236 231 28 244 19 166 142 172 14 180 35 161 111 180 98 177 244 135 6 254 212 140 164 55 189 45)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 163 232 235 60 193 207 231 183 115 34 19 178 58 101 97 73 175 161 66 196 122 175 188 43 121 161 145 86 46 19 5 244 45 153 108 130 52 57 197 109 127 123 34 225 70 68 65 126 105 188 182 222 57 208 39 0 29 171 232 243 91 37 201 190)
  :der-encode
  #t
  :tests
  '(#(986
      "testing point duplication"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 83 46 170 189 149 116 136 13 191 118 185 184 204 0 131 44 32 166 236 17 61 104 34 153 85 13 122 110 15 52 94 37 2 32 24 72 122 67 242 143 207 26 228 87 184 93 205 91 239 162 129 191 17 133 25 233 96 254 203 114 2 18 167 229 195 60)
      #f
      ())
    #(987
      "testing point duplication"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 86 204 173 30 12 122 33 174 126 239 80 215 209 131 10 69 107 146 142 146 119 249 132 94 59 16 148 20 136 19 248 130 2 32 24 72 122 67 242 143 207 26 228 87 184 93 205 91 239 162 129 191 17 133 25 233 96 254 203 114 2 18 167 229 195 60)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 163 232 235 60 193 207 231 183 115 34 19 178 58 101 97 73 175 161 66 196 122 175 188 43 121 161 145 86 46 19 5 244 124 97 235 89 109 180 228 78 190 234 231 175 87 63 75 244 4 127 63 69 155 85 249 40 2 103 95 41 196 72 137 185)
  :der-encode
  #t
  :tests
  '(#(988
      "testing point duplication"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 83 46 170 189 149 116 136 13 191 118 185 184 204 0 131 44 32 166 236 17 61 104 34 153 85 13 122 110 15 52 94 37 2 32 24 72 122 67 242 143 207 26 228 87 184 93 205 91 239 162 129 191 17 133 25 233 96 254 203 114 2 18 167 229 195 60)
      #f
      ())
    #(989
      "testing point duplication"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 86 204 173 30 12 122 33 174 126 239 80 215 209 131 10 69 107 146 142 146 119 249 132 94 59 16 148 20 136 19 248 130 2 32 24 72 122 67 242 143 207 26 228 87 184 93 205 91 239 162 129 191 17 133 25 233 96 254 203 114 2 18 167 229 195 60)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 178 30 205 72 204 70 251 48 110 213 78 136 173 182 21 32 132 87 189 37 126 126 157 129 219 91 209 245 97 0 167 174 187 19 134 70 85 7 187 243 134 34 76 179 131 129 94 27 171 229 97 220 182 244 154 240 7 62 27 253 163 102 6 110 246 36 64 252 129 222 199 236 160 33 203 12 5 9 29 251)
  :der-encode
  #t
  :tests
  '(#(990
      "k*G has a large x-coordinate"
      #vu8(49 50 51 52 48 48)
      #vu8(48 66 2 21 1 64 100 251 76 34 74 139 36 138 13 147 63 118 66 189 86 172 237 155 18 2 41 0 211 94 71 32 54 188 79 183 225 60 120 94 210 1 224 101 249 143 207 165 182 143 18 163 45 72 46 199 238 134 88 233 134 145 85 91 68 197 147 14)
      #t
      ())
    #(991
      "r too large"
      #vu8(49 50 51 52 48 48)
      #vu8(48 86 2 41 0 211 94 71 32 54 188 79 183 225 60 120 94 210 1 224 101 249 143 207 166 246 244 13 239 79 146 185 236 120 147 236 40 252 212 18 177 241 179 46 35 2 41 0 211 94 71 32 54 188 79 183 225 60 120 94 210 1 224 101 249 143 207 165 182 143 18 163 45 72 46 199 238 134 88 233 134 145 85 91 68 197 147 14)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 156 151 1 222 47 253 178 150 230 213 106 95 60 24 158 203 176 228 68 142 56 237 101 218 70 238 170 81 167 179 78 101 10 145 218 149 250 241 121 0 30 10 152 165 152 82 58 52 196 145 141 65 128 248 125 100 30 70 38 206 17 250 58 36 74 191 178 69 7 54 105 61 56 101 35 9 36 14 189 169)
  :der-encode
  #t
  :tests
  '(#(992
      "r,s are large"
      #vu8(49 50 51 52 48 48)
      #vu8(48 86 2 41 0 211 94 71 32 54 188 79 183 225 60 120 94 210 1 224 101 249 143 207 165 182 143 18 163 45 72 46 199 238 134 88 233 134 145 85 91 68 197 147 15 2 41 0 211 94 71 32 54 188 79 183 225 60 120 94 210 1 224 101 249 143 207 165 182 143 18 163 45 72 46 199 238 134 88 233 134 145 85 91 68 197 147 14)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 182 240 221 200 52 239 138 103 144 54 129 234 2 183 136 252 255 130 209 35 7 200 195 244 164 75 48 215 197 246 20 218 252 201 168 57 153 31 142 228 39 83 142 48 174 81 2 178 4 57 87 221 97 36 251 163 161 182 1 192 75 221 175 108 146 159 253 242 247 121 111 215 9 140 56 125 188 11 38 251)
  :der-encode
  #t
  :tests
  '(#(993
      "r and s^-1 have a large Hamming weight"
      #vu8(49 50 51 52 48 48)
      #vu8(48 85 2 40 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 2 41 0 140 7 54 85 77 188 68 96 99 232 225 95 41 127 212 182 111 168 135 153 69 187 181 194 39 20 169 100 95 79 164 239 157 113 14 175 166 178 38 216)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 109 244 67 33 212 165 246 175 99 224 27 121 187 96 142 160 74 198 243 95 121 80 68 160 79 244 0 245 71 253 52 217 183 140 18 196 89 120 249 111 181 41 1 206 206 72 170 180 50 195 219 220 188 14 39 11 44 201 185 145 92 193 255 182 154 54 93 132 195 145 134 196 129 119 56 122 169 238 10 72)
  :der-encode
  #t
  :tests
  '(#(994
      "r and s^-1 have a large Hamming weight"
      #vu8(49 50 51 52 48 48)
      #vu8(48 84 2 40 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 2 40 84 7 205 213 147 172 181 1 252 40 72 53 31 157 46 107 84 87 211 222 67 195 19 14 59 116 230 169 36 43 60 206 28 36 240 148 241 24 188 214)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 78 73 111 5 106 181 208 127 150 86 44 104 54 67 68 14 49 254 162 109 53 230 197 182 158 239 170 65 7 211 69 200 7 191 39 159 46 162 107 96 40 133 57 118 111 199 38 203 158 132 29 181 220 251 187 121 44 173 227 193 239 100 182 157 203 218 127 94 73 123 69 90 145 28 226 240 235 202 202 173)
  :der-encode
  #t
  :tests
  '(#(995
      "small r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 2 1 1)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 17 224 148 244 112 148 142 78 170 106 161 63 171 78 6 51 134 233 26 99 143 162 38 217 136 208 105 61 234 113 156 169 95 97 228 147 233 131 90 244 63 83 62 137 170 32 133 169 248 18 16 134 162 89 127 16 96 247 60 141 117 214 105 64 229 14 234 215 61 253 3 196 118 234 25 71 205 212 221 63)
  :der-encode
  #t
  :tests
  '(#(996
      "small r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 2 1 2)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 22 81 122 125 123 234 182 71 46 168 246 188 32 65 42 60 217 109 36 44 36 108 233 249 131 178 239 8 178 132 207 173 26 194 133 99 181 110 218 251 159 86 254 45 247 140 35 154 161 108 60 49 139 201 25 26 22 236 64 122 112 3 84 23 63 139 134 45 154 10 161 13 103 57 127 38 231 201 192 190)
  :der-encode
  #t
  :tests
  '(#(997
      "small r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 2 1 3)
      #t
      ())
    #(998
      "r is larger than n"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 41 0 211 94 71 32 54 188 79 183 225 60 120 94 210 1 224 101 249 143 207 165 182 143 18 163 45 72 46 199 238 134 88 233 134 145 85 91 68 197 147 18 2 1 3)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 58 38 104 188 9 97 77 38 56 237 88 241 196 33 187 97 242 212 153 168 111 231 213 115 189 19 146 172 239 158 41 107 30 242 177 13 127 78 197 36 209 183 142 178 113 108 230 104 5 77 41 103 124 111 77 50 53 242 125 58 146 149 236 239 157 223 210 246 88 186 0 32 82 208 225 230 113 114 30 46)
  :der-encode
  #t
  :tests
  '(#(999
      "s is larger than n"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 1 1 2 41 0 211 94 71 32 54 188 79 183 225 60 120 94 210 1 224 101 249 143 207 165 182 143 18 163 45 72 46 199 238 134 88 233 134 145 85 91 68 216 105 152)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 205 22 151 198 225 7 243 217 11 141 244 98 235 54 139 117 235 165 133 99 89 80 23 126 10 100 177 173 75 229 39 201 9 87 251 223 32 61 103 200 75 0 63 32 232 22 89 9 155 126 70 102 24 242 97 12 111 29 243 21 178 1 29 176 123 144 243 102 43 81 86 31 255 223 62 187 93 68 52 64)
  :der-encode
  #t
  :tests
  '(#(1000
      "small r and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 2 1 0 2 40 33 73 77 184 121 128 109 79 89 229 61 73 99 151 122 3 246 236 81 20 12 159 154 29 186 136 87 255 59 188 118 210 33 73 71 230 14 220 152 43)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 177 227 97 157 158 53 135 62 149 155 183 222 119 64 233 39 227 203 127 207 68 19 191 219 190 215 46 204 154 134 165 13 112 41 202 224 142 194 133 171 72 107 93 47 124 155 147 20 66 11 200 100 207 226 155 64 100 191 123 146 43 187 91 188 209 111 58 129 234 125 10 97 176 160 154 98 149 155 118 144)
  :der-encode
  #t
  :tests
  '(#(1001
      "smallish r and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 51 2 7 45 155 77 52 121 82 204 2 40 67 190 204 135 106 99 86 75 69 130 128 25 158 56 44 186 216 239 104 212 6 102 91 191 48 127 254 164 88 69 169 172 105 52 90 132 165 167 43 135)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 151 207 235 171 88 138 84 36 42 77 150 46 248 3 55 108 63 67 7 154 165 10 136 113 214 231 118 247 160 179 58 234 70 171 154 45 166 58 51 216 200 26 243 74 242 233 160 197 113 239 251 80 28 74 39 253 42 237 193 54 35 68 122 242 188 139 109 94 114 8 194 62 135 226 215 151 204 60 245 126)
  :der-encode
  #t
  :tests
  '(#(1002
      "100-bit r and small s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 57 2 13 16 51 230 126 55 179 43 68 85 128 191 78 252 2 40 57 146 53 61 145 102 23 180 147 3 133 100 136 227 159 188 38 23 59 139 196 38 248 32 125 227 216 241 185 127 61 18 200 3 185 157 87 118 143 167)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 41 110 0 103 148 126 252 7 160 106 226 24 251 0 22 77 30 190 188 211 120 127 121 52 129 64 126 39 150 36 142 139 101 234 197 125 176 193 70 6 114 158 128 148 185 165 78 234 194 61 152 213 29 102 46 255 45 243 58 134 147 0 143 208 42 4 41 239 104 81 236 189 205 147 170 198 124 47 189 182)
  :der-encode
  #t
  :tests
  '(#(1003
      "small r and 100 bit s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 47 2 2 1 0 2 41 0 132 56 8 129 178 67 35 105 103 34 113 145 57 138 58 73 9 0 4 37 87 108 121 70 91 218 170 10 3 38 123 158 72 246 143 160 166 139 41 227)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 163 120 59 1 69 93 146 8 15 82 13 23 31 146 171 234 244 140 114 56 225 104 178 147 31 43 50 47 156 15 170 105 162 64 151 131 108 176 166 133 28 191 26 34 186 194 67 117 81 36 70 5 104 45 171 205 212 207 57 255 157 8 68 57 33 201 148 72 203 206 165 222 184 90 217 82 219 178 185 103)
  :der-encode
  #t
  :tests
  '(#(1004
      "100-bit r and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 58 2 13 6 37 34 187 211 236 190 124 57 233 62 124 36 2 41 0 132 56 8 129 178 67 35 105 103 34 113 145 57 138 58 73 9 0 4 37 87 108 121 70 91 218 170 10 3 38 123 158 72 246 143 160 166 139 41 227)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 112 213 253 65 196 22 213 183 205 188 185 68 32 91 214 159 240 14 214 53 74 165 2 117 126 8 156 177 154 246 247 119 190 176 246 146 28 15 175 172 34 174 124 198 94 14 123 97 116 35 117 11 132 147 165 133 18 227 121 192 13 230 38 193 127 124 130 191 201 7 242 102 16 163 241 228 209 50 197 117)
  :der-encode
  #t
  :tests
  '(#(1005
      "r and s^-1 are close to n"
      #vu8(49 50 51 52 48 48)
      #vu8(48 86 2 41 0 211 94 71 32 54 188 79 183 225 60 120 94 210 1 224 101 249 143 207 165 182 143 18 163 45 72 46 199 238 134 88 233 134 145 85 91 68 197 146 148 2 41 0 140 233 132 192 36 125 138 122 150 40 80 63 54 171 234 238 166 95 223 195 207 10 12 108 200 218 201 218 159 4 59 70 89 182 56 231 131 46 98 11)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 6 130 140 230 63 59 13 105 76 226 153 157 6 148 127 169 226 209 193 138 184 3 38 82 250 122 152 198 120 207 107 178 197 46 115 105 8 94 78 247 197 109 246 145 40 150 47 190 252 42 239 27 63 108 70 123 114 252 48 90 207 81 179 57 100 60 162 237 107 222 86 49 124 76 245 152 149 146 61 237)
  :der-encode
  #t
  :tests
  '(#(1006
      "s == 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 40 70 116 194 96 18 62 197 61 75 20 40 31 155 85 245 119 83 47 239 225 231 133 6 54 100 109 100 237 79 130 29 163 44 219 28 115 193 151 49 5 2 1 1)
      #t
      ())
    #(1007
      "s == 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 40 70 116 194 96 18 62 197 61 75 20 40 31 155 85 245 119 83 47 239 225 231 133 6 54 100 109 100 237 79 130 29 163 44 219 28 115 193 151 49 5 2 1 0)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 32 37 22 173 102 55 117 241 33 85 82 16 121 3 127 63 202 80 198 79 170 74 253 136 106 221 77 170 185 39 243 246 42 162 218 230 132 166 53 214 99 42 237 213 48 230 29 171 53 145 105 98 238 143 35 237 104 129 152 175 213 173 107 7 5 226 239 157 11 163 197 51 59 21 189 171 67 46 227 66)
  :der-encode
  #t
  :tests
  '(#(1008
      "point at infinity during verify"
      #vu8(49 50 51 52 48 48)
      #vu8(48 84 2 40 105 175 35 144 27 94 39 219 240 158 60 47 105 0 240 50 252 199 231 210 219 71 137 81 150 164 23 99 247 67 44 116 195 72 170 173 162 98 201 136 2 40 70 116 194 96 18 62 197 61 75 20 40 31 155 85 245 119 83 47 239 225 231 133 6 54 100 109 100 237 79 130 29 163 44 219 28 115 193 151 49 5)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 130 58 131 12 88 217 221 55 15 104 127 248 25 20 43 100 74 201 220 24 169 70 129 226 36 94 178 47 39 227 51 230 47 236 227 151 35 23 105 218 54 167 226 55 234 47 62 36 114 222 20 126 22 108 228 189 130 72 32 141 245 56 172 0 245 178 41 158 45 114 155 13 216 14 62 16 108 6 8 68)
  :der-encode
  #t
  :tests
  '(#(1009
      "edge case for signature malleability"
      #vu8(49 50 51 52 48 48)
      #vu8(48 84 2 40 105 175 35 144 27 94 39 219 240 158 60 47 105 0 240 50 252 199 231 210 219 71 137 81 150 164 23 99 247 67 44 116 195 72 170 173 162 98 201 136 2 40 105 175 35 144 27 94 39 219 240 158 60 47 105 0 240 50 252 199 231 210 219 71 137 81 150 164 23 99 247 67 44 116 195 72 170 173 162 98 201 136)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 56 122 117 146 132 246 93 45 147 245 65 242 118 111 132 106 189 236 35 145 144 232 205 219 169 183 86 74 131 213 129 98 164 137 242 95 13 67 180 248 66 70 37 166 193 225 88 148 116 195 14 99 131 201 37 179 99 35 157 26 135 185 99 79 216 170 194 235 12 227 158 55 99 135 61 231 115 88 189 75)
  :der-encode
  #t
  :tests
  '(#(1010
      "edge case for signature malleability"
      #vu8(49 50 51 52 48 48)
      #vu8(48 84 2 40 105 175 35 144 27 94 39 219 240 158 60 47 105 0 240 50 252 199 231 210 219 71 137 81 150 164 23 99 247 67 44 116 195 72 170 173 162 98 201 136 2 40 105 175 35 144 27 94 39 219 240 158 60 47 105 0 240 50 252 199 231 210 219 71 137 81 150 164 23 99 247 67 44 116 195 72 170 173 162 98 201 137)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 107 67 39 17 126 156 4 215 165 130 89 197 32 122 54 232 210 120 232 115 185 43 91 58 112 163 196 116 44 197 131 180 20 8 170 171 35 161 42 156 155 11 38 22 12 84 138 186 205 127 14 55 39 111 145 124 9 114 27 56 68 208 178 110 158 213 199 108 153 120 121 146 37 155 240 247 176 36 69 211)
  :der-encode
  #t
  :tests
  '(#(1011
      "u1 == 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 85 2 40 70 116 194 96 18 62 197 61 75 20 40 31 155 85 245 119 83 47 239 225 231 133 6 54 100 109 100 237 79 130 29 163 44 219 28 115 193 151 49 5 2 41 0 249 177 39 240 216 30 188 209 123 123 160 234 19 28 102 13 52 11 5 206 85 124 130 22 14 15 121 61 224 125 56 23 144 35 148 40 113 172 183 0)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 39 127 72 127 175 119 166 93 187 121 21 54 232 99 184 199 15 144 79 205 202 245 39 64 212 189 92 70 151 49 229 142 166 189 83 232 215 114 2 40 45 52 111 43 76 167 186 203 136 47 239 116 156 39 19 241 167 95 0 130 126 139 155 159 116 74 14 30 52 188 248 7 153 161 32 149 13 233 93 153)
  :der-encode
  #t
  :tests
  '(#(1012
      "u1 == n - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 85 2 40 70 116 194 96 18 62 197 61 75 20 40 31 155 85 245 119 83 47 239 225 231 133 6 54 100 109 100 237 79 130 29 163 44 219 28 115 193 151 49 5 2 41 0 173 11 102 79 149 89 226 158 70 253 79 211 144 231 90 190 191 20 153 125 23 161 163 48 76 128 228 81 252 143 121 187 124 255 22 142 23 222 111 34)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 115 189 98 243 187 50 157 101 9 43 93 19 197 116 109 70 36 1 210 96 9 148 216 254 46 197 239 91 159 51 153 8 75 29 220 100 203 51 75 174 193 209 172 79 154 12 42 121 239 124 204 74 233 22 93 223 167 97 56 35 87 24 207 36 3 44 51 249 219 74 38 178 176 54 146 165 111 82 2 235)
  :der-encode
  #t
  :tests
  '(#(1013
      "u2 == 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 84 2 40 70 116 194 96 18 62 197 61 75 20 40 31 155 85 245 119 83 47 239 225 231 133 6 54 100 109 100 237 79 130 29 163 44 219 28 115 193 151 49 5 2 40 70 116 194 96 18 62 197 61 75 20 40 31 155 85 245 119 83 47 239 225 231 133 6 54 100 109 100 237 79 130 29 163 44 219 28 115 193 151 49 5)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 32 167 85 81 3 93 185 93 122 26 103 61 70 77 39 109 160 134 16 8 228 100 76 88 43 193 10 27 238 174 176 112 130 63 208 100 162 98 94 187 93 71 240 199 127 197 126 59 176 225 83 187 199 233 187 222 141 185 139 12 70 197 129 84 175 91 151 134 177 11 161 42 179 186 133 51 163 153 40 131)
  :der-encode
  #t
  :tests
  '(#(1014
      "u2 == n - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 85 2 40 70 116 194 96 18 62 197 61 75 20 40 31 155 85 245 119 83 47 239 225 231 133 6 54 100 109 100 237 79 130 29 163 44 219 28 115 193 151 49 5 2 41 0 140 233 132 192 36 125 138 122 150 40 80 63 54 171 234 238 166 95 223 195 207 10 12 108 200 218 201 218 159 4 59 70 89 182 56 231 131 46 98 12)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 63 67 109 7 203 2 100 177 63 146 253 105 99 52 164 229 27 125 102 25 226 208 67 178 208 210 120 150 63 37 22 32 14 249 5 235 246 113 102 99 64 230 66 182 201 102 7 43 121 39 128 3 101 17 40 135 159 25 222 224 18 115 182 107 234 216 4 81 148 39 124 146 132 9 51 72 217 5 105 177)
  :der-encode
  #t
  :tests
  '(#(1015
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 84 2 40 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 40 12 198 74 240 53 203 121 179 51 106 98 217 21 179 129 226 104 211 188 184 52 249 207 208 245 151 195 124 165 252 245 15 88 134 20 239 14 247 182 165)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 193 111 190 109 13 119 50 124 249 166 95 152 124 47 231 238 24 7 133 28 14 28 139 196 240 98 40 7 220 212 168 139 59 145 46 176 71 84 113 229 117 66 28 64 84 0 80 80 122 22 63 35 204 124 185 10 204 82 130 45 1 210 69 171 112 220 170 192 110 46 166 68 50 122 133 245 149 208 38 239)
  :der-encode
  #t
  :tests
  '(#(1016
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 85 2 40 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 41 0 142 118 93 13 28 249 83 159 104 42 65 85 182 214 14 182 170 104 98 178 175 158 157 63 148 201 173 70 211 50 240 224 41 119 85 34 129 92 14 90)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 190 146 64 7 214 226 43 148 74 199 109 167 252 38 96 209 174 250 182 148 113 189 131 91 215 142 221 44 16 98 30 118 247 24 191 208 165 226 48 126 198 37 131 213 186 92 193 197 71 99 4 118 179 153 134 110 126 217 83 181 56 247 108 134 175 233 207 208 133 75 87 227 54 145 199 126 68 76 202 184)
  :der-encode
  #t
  :tests
  '(#(1017
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 84 2 40 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 40 114 37 169 96 217 103 207 229 42 193 38 165 15 215 159 168 90 88 99 151 192 178 152 200 173 250 241 56 49 123 15 121 75 36 245 59 217 32 193 207)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 172 242 64 19 13 71 212 165 125 96 101 149 249 137 18 159 234 126 151 68 177 229 63 92 230 121 194 68 200 90 243 92 97 134 7 226 236 206 26 67 27 105 106 121 89 254 48 208 73 16 13 213 66 88 24 27 8 162 254 68 46 65 255 41 82 60 17 163 224 16 40 235 100 179 33 194 183 2 87 156)
  :der-encode
  #t
  :tests
  '(#(1018
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 85 2 40 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 41 0 135 79 49 27 107 154 199 79 195 76 96 192 148 24 115 101 27 60 14 193 208 151 167 134 30 12 127 190 195 34 111 35 165 226 201 41 216 86 236 179)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 70 36 59 57 231 118 57 172 25 233 190 83 102 147 23 217 89 142 3 236 48 160 207 105 48 248 0 0 152 51 130 106 89 173 229 50 25 51 255 47 105 215 112 185 120 204 195 108 144 183 72 229 1 6 54 231 0 77 220 25 136 93 167 187 144 219 250 212 121 252 82 220 228 185 40 20 5 241 198 189)
  :der-encode
  #t
  :tests
  '(#(1019
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 84 2 40 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 40 19 117 58 201 15 188 126 223 220 179 46 22 151 253 253 65 177 251 89 197 173 23 126 150 254 172 200 117 34 239 146 141 232 10 96 187 15 50 231 226)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 180 185 182 186 60 14 117 9 194 117 137 78 132 232 24 215 29 225 69 119 189 180 191 11 142 94 19 50 209 8 127 60 51 59 115 232 171 117 242 201 79 51 208 226 171 52 45 46 25 104 206 62 28 71 190 135 227 158 232 130 115 174 76 247 119 134 157 58 23 3 182 58 152 61 45 67 197 147 3 229)
  :der-encode
  #t
  :tests
  '(#(1020
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 84 2 40 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 40 38 234 117 146 31 120 253 191 185 102 92 45 47 251 250 131 99 246 179 139 90 46 253 45 253 89 144 234 69 223 37 27 208 20 193 118 30 101 207 196)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 3 1 91 60 166 118 131 70 124 121 68 109 75 147 209 9 120 51 8 86 238 228 13 109 88 104 58 199 53 0 174 49 92 91 88 35 81 196 34 107 24 216 149 97 211 255 160 249 49 26 166 22 84 127 126 177 211 110 115 166 204 75 210 48 223 52 161 243 25 190 102 188 178 251 14 31 104 204 25 46)
  :der-encode
  #t
  :tests
  '(#(1021
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 85 2 40 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 41 0 159 238 25 41 48 211 5 2 192 94 86 173 240 134 236 209 58 146 205 67 206 12 114 234 101 234 212 54 103 137 10 225 155 232 53 51 60 50 197 240)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 24 125 147 248 74 14 96 67 240 151 208 168 127 141 202 7 115 156 244 69 72 167 211 64 62 3 158 73 196 197 18 133 72 41 117 175 84 236 5 108 6 35 197 117 56 254 251 114 49 214 25 187 239 212 202 179 115 165 75 54 19 84 229 134 177 217 152 26 136 53 233 198 190 171 8 44 185 62 19 182)
  :der-encode
  #t
  :tests
  '(#(1022
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 85 2 40 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 41 0 150 63 151 203 53 163 33 223 98 252 33 158 178 243 112 57 73 196 131 22 93 6 219 19 196 3 8 10 134 193 229 217 180 61 46 141 217 100 60 222)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 8 85 204 32 53 17 38 179 143 147 79 187 86 195 2 246 42 54 14 98 73 60 45 82 159 184 124 174 160 215 27 253 175 95 204 51 104 212 149 253 28 231 87 134 16 203 236 70 83 152 178 193 35 139 62 35 185 226 155 71 97 150 16 100 48 215 99 22 170 242 153 55 172 230 88 182 156 139 251 153)
  :der-encode
  #t
  :tests
  '(#(1023
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 84 2 40 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 40 19 219 255 158 102 126 123 205 68 149 2 38 249 59 9 115 142 121 53 23 192 40 134 174 159 43 61 237 237 167 86 201 4 154 185 164 107 199 201 62)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 148 197 73 25 0 64 121 190 13 180 201 45 193 252 148 125 121 235 15 142 134 157 148 129 56 134 173 164 37 79 29 173 180 216 122 97 18 165 131 54 134 216 181 190 172 0 250 253 100 126 248 182 49 232 153 166 168 183 42 81 29 79 80 206 21 102 72 173 156 183 8 251 47 178 198 56 253 185 243 50)
  :der-encode
  #t
  :tests
  '(#(1024
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 85 2 40 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 41 0 133 36 102 206 243 22 153 43 60 162 92 197 75 127 79 218 46 138 129 158 124 75 4 5 67 233 79 156 172 160 41 55 104 28 32 25 187 73 238 67)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 43 202 118 4 55 40 181 238 239 222 137 210 90 205 242 224 177 96 197 174 12 205 171 107 211 186 164 121 241 119 83 195 192 0 204 248 186 134 35 222 146 240 194 214 138 27 212 5 228 73 130 63 230 59 33 64 42 239 62 154 1 125 203 195 10 241 139 204 121 168 82 100 131 67 152 199 47 162 187 22)
  :der-encode
  #t
  :tests
  '(#(1025
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 84 2 40 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 40 99 75 254 24 0 120 107 2 86 233 10 194 222 39 47 65 200 94 9 118 192 202 161 105 27 216 53 165 164 68 177 237 23 5 160 54 26 230 238 54)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 28 1 59 58 50 96 204 251 83 227 246 206 147 230 152 72 101 220 142 18 147 233 35 1 244 203 58 85 75 213 218 138 83 238 16 27 62 26 48 9 151 210 144 30 38 114 147 3 225 203 147 168 183 45 194 175 201 15 245 180 79 213 182 98 68 85 72 121 116 237 113 199 131 62 255 3 204 18 141 12)
  :der-encode
  #t
  :tests
  '(#(1026
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 85 2 40 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 41 0 198 151 252 48 0 240 214 4 173 210 21 133 188 78 94 131 144 188 18 237 129 149 66 210 55 176 107 75 72 137 99 218 46 11 64 108 53 205 220 108)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 98 75 236 69 32 230 4 74 190 209 238 228 150 70 104 119 81 129 70 76 93 107 245 168 181 57 241 21 111 50 72 192 34 113 191 148 37 185 102 181 71 244 6 188 193 67 34 109 129 76 219 152 141 118 65 42 209 134 189 238 184 105 173 120 163 47 232 124 118 242 84 84 71 221 248 251 208 67 8 17)
  :der-encode
  #t
  :tests
  '(#(1027
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 84 2 40 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 40 86 133 179 39 202 172 241 79 35 126 167 233 200 115 173 95 95 138 76 190 139 208 209 152 38 64 114 40 254 71 188 221 190 127 139 71 11 239 55 145)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 27 43 39 56 227 5 93 21 150 246 65 118 207 10 195 129 179 168 23 138 47 2 20 3 53 2 24 250 24 249 248 96 193 187 163 159 197 36 188 130 9 251 175 202 26 252 90 247 89 139 135 141 105 203 135 91 224 211 159 65 255 1 176 147 136 105 62 179 16 173 201 212 131 110 34 108 35 103 126 81)
  :der-encode
  #t
  :tests
  '(#(1028
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 85 2 40 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 41 0 162 193 248 64 136 18 15 206 133 254 207 129 240 236 192 7 41 244 25 158 187 160 213 181 237 161 144 0 16 0 180 49 104 219 37 75 142 243 42 112)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 64 144 43 246 178 57 210 243 88 130 96 233 215 245 18 37 63 164 79 48 138 10 184 29 255 5 184 250 46 37 129 77 101 194 1 141 73 57 10 174 1 111 138 229 105 25 56 64 42 220 15 250 41 187 135 239 10 240 236 243 205 68 109 151 195 232 209 43 59 9 235 120 144 156 27 145 177 184 120 95)
  :der-encode
  #t
  :tests
  '(#(1029
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 84 2 40 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 40 113 31 109 10 188 233 111 231 245 190 210 202 70 0 160 33 253 218 154 140 146 47 176 225 15 24 15 151 250 44 200 77 215 133 199 30 108 65 219 175)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 114 101 51 226 103 115 172 114 10 17 91 2 222 137 172 21 150 102 119 226 57 183 197 119 161 193 91 129 2 123 31 235 115 230 115 96 30 33 26 169 42 204 181 133 188 6 204 39 75 97 201 230 20 116 110 221 36 141 28 204 248 216 177 171 75 193 92 197 140 223 17 96 101 206 151 103 242 163 34 61)
  :der-encode
  #t
  :tests
  '(#(1030
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 84 2 40 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 40 2 166 235 64 132 67 210 78 150 190 76 160 39 132 66 168 164 38 8 127 155 235 3 255 229 82 97 98 191 29 195 4 52 207 126 167 149 116 177 155)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 83 195 218 77 225 79 125 53 119 95 155 236 166 213 62 231 141 172 115 205 63 24 198 251 247 9 180 255 167 221 62 112 180 54 64 155 155 40 93 28 42 91 96 228 87 229 132 34 201 89 20 43 94 207 242 54 223 215 108 153 195 1 140 234 144 64 88 9 154 19 100 125 176 136 152 207 208 80 158 132)
  :der-encode
  #t
  :tests
  '(#(1031
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 85 2 40 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 41 0 182 186 26 236 210 64 222 190 119 33 58 66 40 177 37 96 54 113 201 213 20 123 108 11 54 221 35 228 43 124 181 7 138 27 143 223 27 152 185 58)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 205 36 174 127 117 35 173 248 89 219 146 229 29 72 116 107 139 47 134 134 32 137 138 156 66 248 186 232 23 62 54 70 245 134 253 129 135 18 67 14 85 177 45 89 247 52 65 104 247 150 254 89 192 38 234 170 19 151 69 168 172 233 125 241 213 198 188 194 31 12 250 104 96 249 200 199 95 57 22 41)
  :der-encode
  #t
  :tests
  '(#(1032
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 85 2 40 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 41 0 149 123 56 59 161 206 191 92 165 121 239 110 209 0 39 152 143 132 36 244 47 251 234 46 81 179 52 13 249 248 195 198 11 85 141 109 194 223 16 243)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 77 180 96 32 153 114 200 233 195 101 17 149 70 172 69 122 221 21 127 12 77 43 60 214 92 99 93 202 236 166 23 2 156 171 247 92 6 16 27 182 158 248 183 98 110 107 47 152 69 176 8 109 42 150 64 24 185 178 94 184 219 66 107 201 6 148 204 97 75 118 2 177 253 96 135 169 167 28 191 31)
  :der-encode
  #t
  :tests
  '(#(1033
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 85 2 40 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 41 0 152 255 29 177 185 175 250 51 162 229 60 104 77 63 7 97 23 114 64 94 140 32 15 42 242 175 169 229 60 110 142 243 12 193 67 179 245 255 127 176)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 62 122 184 80 132 13 117 152 125 51 131 126 173 70 73 156 228 51 243 252 230 115 131 178 227 37 221 47 199 224 245 0 118 156 187 103 180 85 10 40 195 3 20 72 122 135 9 71 80 51 68 153 219 251 235 45 92 185 118 238 45 71 153 115 33 89 122 65 18 74 3 143 232 103 190 14 246 104 196 206)
  :der-encode
  #t
  :tests
  '(#(1034
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 84 2 40 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 40 94 159 244 67 60 163 164 175 100 142 0 113 200 124 46 92 53 84 177 23 97 177 11 178 184 23 37 2 138 86 196 252 146 241 50 12 167 57 108 79)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 122 204 145 153 52 176 253 144 1 28 217 111 89 221 186 82 225 32 148 218 193 138 44 173 203 3 160 243 26 199 45 63 213 152 74 17 233 34 15 140 6 41 188 95 63 13 171 189 63 221 48 244 122 10 91 234 48 82 137 47 142 80 164 3 59 228 121 91 50 198 103 29 20 27 71 48 128 229 121 17)
  :der-encode
  #t
  :tests
  '(#(1035
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 85 2 40 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 41 0 199 108 229 53 96 22 63 21 123 17 228 208 92 97 84 10 93 246 184 36 28 189 59 167 217 17 167 84 30 236 85 233 134 235 248 17 174 80 168 185)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 18 193 99 254 37 203 121 173 89 199 107 82 128 220 103 6 164 44 88 89 98 48 191 123 167 32 110 108 226 180 103 225 183 167 6 62 89 176 190 214 204 190 175 34 172 203 26 196 30 212 58 199 117 185 122 234 58 104 142 47 9 108 58 94 89 248 104 188 145 157 165 206 37 44 245 215 18 231 222 64)
  :der-encode
  #t
  :tests
  '(#(1036
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 84 2 40 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 40 66 24 164 81 22 234 101 178 131 204 125 144 165 16 240 119 177 176 158 221 188 252 163 231 210 137 107 134 157 211 186 85 108 79 16 89 11 14 8 207)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 105 96 191 205 221 0 33 252 184 163 215 170 133 249 108 243 96 167 17 62 56 36 80 133 37 2 31 131 227 8 89 137 195 94 12 87 114 101 3 48 92 18 117 185 216 181 25 157 70 31 203 157 52 248 133 123 101 161 64 70 47 213 205 199 163 62 92 247 244 226 208 138 90 52 217 174 0 178 147 154)
  :der-encode
  #t
  :tests
  '(#(1037
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 84 2 40 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 40 94 95 50 66 59 173 54 68 190 113 141 129 149 52 19 98 201 203 165 43 51 15 145 59 21 33 175 110 94 62 178 6 148 33 176 93 202 194 153 247)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 102 173 44 38 1 35 136 200 185 4 106 70 107 135 189 113 182 74 184 27 84 207 252 90 97 31 75 117 129 173 131 101 237 208 142 106 253 74 82 246 26 48 102 192 179 183 3 221 206 116 98 57 164 211 219 241 147 137 69 241 94 169 73 123 191 196 91 56 158 19 3 80 185 148 89 34 184 124 227 116)
  :der-encode
  #t
  :tests
  '(#(1038
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 85 2 40 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 41 0 172 7 170 173 229 197 251 47 229 161 139 190 253 38 46 14 67 159 214 142 10 49 125 176 111 244 186 98 58 42 3 17 78 197 182 224 132 23 16 88)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 12 250 110 56 56 216 17 58 36 216 125 185 116 23 214 143 0 196 38 233 184 85 13 138 149 31 237 83 21 114 231 204 166 111 254 10 225 118 255 14 49 47 160 46 92 199 124 33 244 166 99 14 37 188 185 135 220 30 239 20 174 200 12 21 185 178 146 227 172 251 48 188 44 4 56 240 169 131 28 7)
  :der-encode
  #t
  :tests
  '(#(1039
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 84 2 40 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 40 49 31 109 10 188 233 111 231 245 190 210 202 70 0 160 33 253 218 154 140 146 47 176 225 15 24 15 151 250 44 200 77 215 133 199 30 108 65 219 177)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 61 171 188 54 164 85 186 7 67 45 161 170 114 57 174 253 239 183 42 192 147 19 195 167 243 67 152 80 246 2 84 62 180 175 252 93 130 37 181 238 206 72 226 246 126 130 212 72 179 216 185 176 252 32 8 50 163 209 172 136 5 136 114 118 47 203 240 39 233 245 112 93 143 88 18 229 7 218 225 37)
  :der-encode
  #t
  :tests
  '(#(1040
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 84 2 40 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 40 98 62 218 21 121 210 223 207 235 125 165 148 140 1 64 67 251 181 53 25 36 95 97 194 30 48 31 47 244 89 144 155 175 11 142 60 216 131 183 98)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 138 150 88 220 95 145 170 87 119 6 241 217 29 34 82 203 13 9 242 5 62 86 17 41 16 92 127 55 221 178 249 114 179 34 79 18 207 158 67 254 8 120 46 198 16 95 76 6 88 126 177 236 236 178 244 244 160 78 35 99 4 220 117 235 46 255 240 190 102 185 119 250 128 74 247 59 252 186 199 142)
  :der-encode
  #t
  :tests
  '(#(1041
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 85 2 40 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 41 0 147 94 71 32 54 188 79 183 225 60 120 94 210 1 224 101 249 143 207 165 182 143 18 163 45 72 46 199 238 134 88 233 134 145 85 91 68 197 147 19)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 6 180 59 185 88 126 225 88 173 87 82 209 173 17 246 240 245 227 22 173 33 147 124 221 146 83 243 132 72 87 240 162 94 123 103 123 191 153 148 68 151 5 54 35 52 189 206 182 138 230 165 132 100 12 149 203 16 120 155 25 149 63 94 17 153 115 238 215 53 23 122 171 252 178 99 252 142 245 239 151)
  :der-encode
  #t
  :tests
  '(#(1042
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 84 2 40 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 40 91 93 13 118 105 32 111 95 59 144 157 33 20 88 146 176 27 56 228 234 138 61 182 5 155 110 145 242 21 190 90 131 197 13 199 239 141 204 92 157)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 86 136 3 218 7 30 107 159 67 128 227 153 84 242 176 252 15 91 181 138 15 104 181 209 164 44 126 144 82 236 226 160 252 122 202 220 15 66 57 153 192 131 103 148 84 149 217 51 242 6 146 122 43 127 91 116 178 47 151 58 137 131 85 170 47 126 41 94 6 239 58 79 86 21 70 219 151 247 154 250)
  :der-encode
  #t
  :tests
  '(#(1043
      "point duplication during verification"
      #vu8(49 50 51 52 48 48)
      #vu8(48 86 2 41 0 149 99 189 104 84 92 205 24 90 231 36 216 239 205 76 194 50 52 147 78 239 16 242 128 121 43 47 147 12 151 166 193 224 8 41 168 185 117 185 238 2 41 0 197 231 156 73 171 177 53 18 159 6 54 225 142 46 115 188 237 48 133 93 238 186 20 119 217 82 27 51 163 40 101 21 81 119 217 70 225 186 188 180)
      #t
      ("PointDuplication"))))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 86 136 3 218 7 30 107 159 67 128 227 153 84 242 176 252 15 91 181 138 15 104 181 209 164 44 126 144 82 236 226 160 252 122 202 220 15 66 57 153 18 218 223 139 226 38 118 131 239 53 229 228 166 130 132 241 71 96 56 108 109 112 184 69 32 20 144 142 113 164 177 217 166 190 203 214 89 187 147 45)
  :der-encode
  #t
  :tests
  '(#(1044
      "duplication bug"
      #vu8(49 50 51 52 48 48)
      #vu8(48 86 2 41 0 149 99 189 104 84 92 205 24 90 231 36 216 239 205 76 194 50 52 147 78 239 16 242 128 121 43 47 147 12 151 166 193 224 8 41 168 185 117 185 238 2 41 0 197 231 156 73 171 177 53 18 159 6 54 225 142 46 115 188 237 48 133 93 238 186 20 119 217 82 27 51 163 40 101 21 81 119 217 70 225 186 188 180)
      #f
      ("PointDuplication"))))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 93 26 16 1 24 189 54 16 241 14 19 181 173 204 122 144 163 127 79 152 140 250 78 34 204 167 126 136 68 75 0 33 109 207 229 246 132 24 211 66 93 91 136 201 184 201 43 61 236 127 123 204 104 138 109 24 230 205 235 145 118 21 13 75 16 98 168 50 200 163 188 55 127 141 126 152 177 219 11 157)
  :der-encode
  #t
  :tests
  '(#(1045
      "comparison with point at infinity "
      #vu8(49 50 51 52 48 48)
      #vu8(48 84 2 40 70 116 194 96 18 62 197 61 75 20 40 31 155 85 245 119 83 47 239 225 231 133 6 54 100 109 100 237 79 130 29 163 44 219 28 115 193 151 49 5 2 40 42 70 14 57 164 140 15 241 147 114 126 121 93 51 147 71 152 79 246 84 87 182 54 237 111 116 214 39 252 129 68 251 129 80 68 69 116 39 131 208)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 204 169 172 56 222 91 54 207 121 216 228 21 203 114 158 104 94 11 189 175 225 97 197 231 236 250 65 119 232 38 232 21 214 101 38 170 93 175 50 39 155 119 153 188 239 198 181 216 208 159 241 160 115 159 212 35 24 129 38 248 10 247 3 49 77 160 210 107 166 113 74 161 151 166 88 44 54 176 240 93)
  :der-encode
  #t
  :tests
  '(#(1046
      "extreme value for k and edgecase s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 84 2 40 47 180 18 240 62 109 235 223 191 163 163 9 47 33 196 97 158 4 39 155 224 147 22 148 171 153 198 80 62 90 137 77 239 131 119 237 5 154 109 232 2 40 70 116 194 96 18 62 197 61 75 20 40 31 155 85 245 119 83 47 239 225 231 133 6 54 100 109 100 237 79 130 29 163 44 219 28 115 193 151 49 5)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 204 234 161 32 59 220 190 21 226 4 52 214 36 240 237 154 202 129 212 200 47 132 11 186 58 134 198 117 98 98 170 55 239 237 98 245 241 208 151 247 69 112 87 185 141 43 158 166 189 40 88 29 64 172 32 252 201 213 54 161 23 118 146 3 68 123 244 30 16 206 77 161 173 121 76 162 15 142 225 70)
  :der-encode
  #t
  :tests
  '(#(1047
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 84 2 40 47 180 18 240 62 109 235 223 191 163 163 9 47 33 196 97 158 4 39 155 224 147 22 148 171 153 198 80 62 90 137 77 239 131 119 237 5 154 109 232 2 40 30 50 10 41 44 100 11 99 105 81 200 13 139 183 32 14 145 93 175 243 26 20 112 96 116 46 226 28 143 202 12 179 165 130 121 232 119 137 240 112)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 204 158 210 95 19 233 74 110 189 83 31 59 20 47 171 196 237 82 45 198 18 120 97 82 136 48 198 120 125 110 207 212 183 4 225 119 78 145 24 237 104 228 225 114 249 63 29 91 141 120 96 250 226 193 21 244 170 13 170 246 223 92 163 128 157 121 172 253 185 237 43 225 153 149 101 141 47 68 210 53)
  :der-encode
  #t
  :tests
  '(#(1048
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 84 2 40 47 180 18 240 62 109 235 223 191 163 163 9 47 33 196 97 158 4 39 155 224 147 22 148 171 153 198 80 62 90 137 77 239 131 119 237 5 154 109 232 2 40 42 70 14 57 164 140 15 241 147 114 126 121 93 51 147 71 152 79 246 84 87 182 54 237 111 116 214 39 252 129 68 251 129 80 68 69 116 39 131 208)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 106 60 174 14 220 132 85 174 22 181 238 182 86 150 3 189 174 181 121 54 153 232 93 55 40 87 241 49 156 112 221 82 91 30 163 10 15 92 123 68 7 85 55 205 130 45 158 226 208 231 164 156 76 49 65 68 93 1 183 137 187 202 208 46 196 36 156 46 35 85 214 29 181 88 29 189 179 66 201 147)
  :der-encode
  #t
  :tests
  '(#(1049
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 85 2 40 47 180 18 240 62 109 235 223 191 163 163 9 47 33 196 97 158 4 39 155 224 147 22 148 171 153 198 80 62 90 137 77 239 131 119 237 5 154 109 232 2 41 0 169 24 56 230 146 48 63 198 77 201 249 229 116 206 77 30 97 63 217 81 94 216 219 181 189 211 88 159 242 5 19 238 5 65 17 21 208 158 15 65)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 78 251 81 97 202 26 30 235 89 165 252 57 205 82 29 64 189 62 3 69 18 250 42 30 175 59 126 146 187 158 149 192 106 76 114 108 236 205 249 188 107 250 128 27 6 113 55 241 182 180 80 96 65 19 11 77 64 45 144 8 122 208 5 227 246 82 225 217 28 157 52 76 209 238 255 255 97 211 163 6)
  :der-encode
  #t
  :tests
  '(#(1050
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 85 2 40 47 180 18 240 62 109 235 223 191 163 163 9 47 33 196 97 158 4 39 155 224 147 22 148 171 153 198 80 62 90 137 77 239 131 119 237 5 154 109 232 2 41 0 181 44 60 247 10 88 68 84 119 234 176 81 70 74 192 87 104 50 31 178 156 122 162 66 185 25 76 171 94 188 76 53 225 14 219 114 205 59 162 161)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 95 101 134 135 230 165 66 169 29 137 59 72 119 106 134 213 40 253 57 151 129 187 185 48 91 224 121 126 58 111 54 17 138 225 158 104 220 22 115 246 103 110 83 108 120 151 160 0 47 150 100 146 150 49 244 24 196 83 125 35 116 146 32 197 10 50 18 28 67 77 202 210 166 205 194 3 205 3 90 50)
  :der-encode
  #t
  :tests
  '(#(1051
      "extreme value for k"
      #vu8(49 50 51 52 48 48)
      #vu8(48 84 2 40 47 180 18 240 62 109 235 223 191 163 163 9 47 33 196 97 158 4 39 155 224 147 22 148 171 153 198 80 62 90 137 77 239 131 119 237 5 154 109 232 2 40 83 191 6 228 63 204 66 54 178 236 13 136 71 19 121 5 63 31 52 55 32 124 90 117 176 144 54 177 196 15 168 243 18 130 119 137 74 76 150 207)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 144 83 122 104 39 162 80 96 39 61 68 212 132 106 234 89 102 130 223 10 89 208 255 231 155 226 161 235 233 24 112 60 171 250 198 77 165 229 145 0 51 9 24 13 157 165 231 130 55 185 84 3 197 47 60 238 229 3 6 123 103 39 21 233 125 139 99 105 52 38 132 167 47 70 118 152 116 27 26 31)
  :der-encode
  #t
  :tests
  '(#(1052
      "extreme value for k and edgecase s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 84 2 40 67 189 126 154 251 83 216 184 82 137 188 196 142 229 191 230 242 1 55 209 10 8 126 182 231 135 30 42 16 165 153 199 16 175 141 13 57 226 6 17 2 40 70 116 194 96 18 62 197 61 75 20 40 31 155 85 245 119 83 47 239 225 231 133 6 54 100 109 100 237 79 130 29 163 44 219 28 115 193 151 49 5)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 168 28 203 244 252 68 87 3 59 212 156 234 200 250 82 228 89 64 7 48 184 119 48 91 224 65 129 83 210 120 211 11 89 115 119 122 125 209 194 193 117 68 255 27 118 32 142 132 16 83 236 174 247 165 134 158 146 218 8 197 196 195 208 161 103 213 104 94 183 33 214 32 51 156 201 176 1 73 131 142)
  :der-encode
  #t
  :tests
  '(#(1053
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 84 2 40 67 189 126 154 251 83 216 184 82 137 188 196 142 229 191 230 242 1 55 209 10 8 126 182 231 135 30 42 16 165 153 199 16 175 141 13 57 226 6 17 2 40 30 50 10 41 44 100 11 99 105 81 200 13 139 183 32 14 145 93 175 243 26 20 112 96 116 46 226 28 143 202 12 179 165 130 121 232 119 137 240 112)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 186 22 0 137 50 124 248 186 22 62 239 164 118 164 234 253 15 108 233 213 82 146 246 114 77 2 15 14 250 197 75 246 132 249 213 245 105 95 137 194 180 222 112 220 74 178 101 118 24 39 50 61 163 178 176 85 172 17 135 252 83 65 228 85 94 188 111 105 147 180 195 253 216 152 99 252 85 234 56 180)
  :der-encode
  #t
  :tests
  '(#(1054
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 84 2 40 67 189 126 154 251 83 216 184 82 137 188 196 142 229 191 230 242 1 55 209 10 8 126 182 231 135 30 42 16 165 153 199 16 175 141 13 57 226 6 17 2 40 42 70 14 57 164 140 15 241 147 114 126 121 93 51 147 71 152 79 246 84 87 182 54 237 111 116 214 39 252 129 68 251 129 80 68 69 116 39 131 208)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 74 92 244 71 85 15 15 242 239 161 147 195 225 133 219 96 79 207 215 222 92 71 165 154 57 45 160 199 87 47 6 16 56 198 175 90 252 250 155 213 48 183 104 43 130 1 12 57 51 75 162 237 236 240 162 59 202 9 232 16 215 69 189 247 62 68 94 128 172 224 229 57 159 162 97 2 203 63 174 230)
  :der-encode
  #t
  :tests
  '(#(1055
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 85 2 40 67 189 126 154 251 83 216 184 82 137 188 196 142 229 191 230 242 1 55 209 10 8 126 182 231 135 30 42 16 165 153 199 16 175 141 13 57 226 6 17 2 41 0 169 24 56 230 146 48 63 198 77 201 249 229 116 206 77 30 97 63 217 81 94 216 219 181 189 211 88 159 242 5 19 238 5 65 17 21 208 158 15 65)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 93 63 239 27 150 219 200 202 147 48 80 138 212 206 212 145 230 39 235 103 203 168 198 177 83 121 55 73 142 227 2 27 69 202 103 89 17 125 137 196 173 43 105 158 62 249 81 111 255 46 210 225 52 147 28 150 210 141 62 20 221 81 197 184 117 137 168 250 136 175 37 41 184 202 160 247 133 206 32 51)
  :der-encode
  #t
  :tests
  '(#(1056
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 85 2 40 67 189 126 154 251 83 216 184 82 137 188 196 142 229 191 230 242 1 55 209 10 8 126 182 231 135 30 42 16 165 153 199 16 175 141 13 57 226 6 17 2 41 0 181 44 60 247 10 88 68 84 119 234 176 81 70 74 192 87 104 50 31 178 156 122 162 66 185 25 76 171 94 188 76 53 225 14 219 114 205 59 162 161)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 168 51 103 2 193 88 220 174 73 95 28 156 215 32 195 159 21 193 35 166 119 80 220 215 69 32 195 76 246 121 7 228 146 32 188 208 32 204 58 96 21 26 67 46 227 226 58 116 200 184 169 141 142 124 103 34 22 223 72 216 166 13 63 89 47 102 115 131 10 201 236 251 205 0 85 13 183 173 92 98)
  :der-encode
  #t
  :tests
  '(#(1057
      "extreme value for k"
      #vu8(49 50 51 52 48 48)
      #vu8(48 84 2 40 67 189 126 154 251 83 216 184 82 137 188 196 142 229 191 230 242 1 55 209 10 8 126 182 231 135 30 42 16 165 153 199 16 175 141 13 57 226 6 17 2 40 83 191 6 228 63 204 66 54 178 236 13 136 71 19 121 5 63 31 52 55 32 124 90 117 176 144 54 177 196 15 168 243 18 130 119 137 74 76 150 207)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 67 189 126 154 251 83 216 184 82 137 188 196 142 229 191 230 242 1 55 209 10 8 126 182 231 135 30 42 16 165 153 199 16 175 141 13 57 226 6 17 20 253 208 85 69 236 28 200 171 64 147 36 127 119 39 94 7 67 255 237 17 113 130 234 169 199 120 119 170 172 106 199 211 82 69 209 105 46 142 225)
  :der-encode
  #t
  :tests
  '(#(1058
      "testing point duplication"
      #vu8(49 50 51 52 48 48)
      #vu8(48 85 2 41 0 249 177 39 240 216 30 188 209 123 123 160 234 19 28 102 13 52 11 5 206 85 124 130 22 14 15 121 61 224 125 56 23 144 35 148 40 113 172 183 0 2 40 30 50 10 41 44 100 11 99 105 81 200 13 139 183 32 14 145 93 175 243 26 20 112 96 116 46 226 28 143 202 12 179 165 130 121 232 119 137 240 112)
      #f
      ())
    #(1059
      "testing point duplication"
      #vu8(49 50 51 52 48 48)
      #vu8(48 85 2 41 0 173 11 102 79 149 89 226 158 70 253 79 211 144 231 90 190 191 20 153 125 23 161 163 48 76 128 228 81 252 143 121 187 124 255 22 142 23 222 111 34 2 40 30 50 10 41 44 100 11 99 105 81 200 13 139 183 32 14 145 93 175 243 26 20 112 96 116 46 226 28 143 202 12 179 165 130 121 232 119 137 240 112)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 67 189 126 154 251 83 216 184 82 137 188 196 142 229 191 230 242 1 55 209 10 8 126 182 231 135 30 42 16 165 153 199 16 175 141 13 57 226 6 17 190 96 118 202 240 208 50 239 53 251 229 58 82 138 185 7 242 75 207 185 229 130 139 4 165 203 65 116 205 231 129 97 41 129 204 224 136 132 159 70)
  :der-encode
  #t
  :tests
  '(#(1060
      "testing point duplication"
      #vu8(49 50 51 52 48 48)
      #vu8(48 85 2 41 0 249 177 39 240 216 30 188 209 123 123 160 234 19 28 102 13 52 11 5 206 85 124 130 22 14 15 121 61 224 125 56 23 144 35 148 40 113 172 183 0 2 40 30 50 10 41 44 100 11 99 105 81 200 13 139 183 32 14 145 93 175 243 26 20 112 96 116 46 226 28 143 202 12 179 165 130 121 232 119 137 240 112)
      #f
      ())
    #(1061
      "testing point duplication"
      #vu8(49 50 51 52 48 48)
      #vu8(48 85 2 41 0 173 11 102 79 149 89 226 158 70 253 79 211 144 231 90 190 191 20 153 125 23 161 163 48 76 128 228 81 252 143 121 187 124 255 22 142 23 222 111 34 2 40 30 50 10 41 44 100 11 99 105 81 200 13 139 183 32 14 145 93 175 243 26 20 112 96 116 46 226 28 143 202 12 179 165 130 121 232 119 137 240 112)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 138 148 22 77 199 101 79 218 60 212 48 29 62 151 32 36 194 218 186 113 212 66 18 140 127 63 174 205 185 227 117 168 90 168 12 74 194 136 137 242 88 230 203 168 134 212 118 54 84 139 59 241 182 117 242 49 140 61 138 183 161 194 129 163 50 65 193 33 179 89 11 253 247 3 199 205 75 174 143 69 24 134 217 137 35 76 27 140 88 150 20 85 77 66 147 146)
  :der-encode
  #t
  :tests
  '(#(1062
      "k*G has a large x-coordinate"
      #vu8(49 50 51 52 48 48)
      #vu8(48 78 2 25 0 243 155 107 172 211 178 235 123 221 152 240 122 36 157 87 97 75 190 206 16 72 3 134 232 2 49 0 140 185 30 130 163 56 109 40 15 93 111 126 80 230 65 223 21 47 113 9 237 84 86 179 31 22 110 108 172 4 37 167 207 58 182 175 107 127 195 16 59 136 50 2 233 4 101 98)
      #t
      ())
    #(1063
      "r too large"
      #vu8(49 50 51 52 48 48)
      #vu8(48 102 2 49 0 140 185 30 130 163 56 109 40 15 93 111 126 80 230 65 223 21 47 113 9 237 84 86 180 18 177 218 25 127 183 17 35 172 211 167 41 144 29 26 113 135 71 0 19 49 7 236 77 2 49 0 140 185 30 130 163 56 109 40 15 93 111 126 80 230 65 223 21 47 113 9 237 84 86 179 31 22 110 108 172 4 37 167 207 58 182 175 107 127 195 16 59 136 50 2 233 4 101 98)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 115 248 74 182 55 137 48 30 136 180 203 130 203 147 93 236 255 184 244 43 44 151 132 199 84 70 21 185 7 110 199 167 171 148 112 44 167 241 217 170 207 185 5 55 181 211 104 220 80 44 183 200 193 130 133 153 76 123 25 250 62 36 1 253 194 109 229 79 254 0 107 183 155 221 120 82 198 102 215 48 189 247 106 22 192 121 42 108 102 129 237 107 100 127 200 27)
  :der-encode
  #t
  :tests
  '(#(1064
      "r,s are large"
      #vu8(49 50 51 52 48 48)
      #vu8(48 102 2 49 0 140 185 30 130 163 56 109 40 15 93 111 126 80 230 65 223 21 47 113 9 237 84 86 179 31 22 110 108 172 4 37 167 207 58 182 175 107 127 195 16 59 136 50 2 233 4 101 100 2 49 0 140 185 30 130 163 56 109 40 15 93 111 126 80 230 65 223 21 47 113 9 237 84 86 179 31 22 110 108 172 4 37 167 207 58 182 175 107 127 195 16 59 136 50 2 233 4 101 99)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 137 94 132 97 237 219 226 19 103 169 91 37 205 133 205 49 232 14 207 31 149 83 144 86 251 126 16 180 170 73 144 11 33 148 217 25 178 156 217 191 55 58 29 83 239 87 17 116 118 124 2 227 107 147 90 101 229 169 203 179 85 137 162 160 24 72 32 101 197 227 61 168 206 72 61 199 247 254 68 21 116 249 231 171 6 20 189 207 198 16 34 199 128 163 0 9)
  :der-encode
  #t
  :tests
  '(#(1065
      "r and s^-1 have a large Hamming weight"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 2 48 72 14 202 40 116 170 107 167 30 127 181 113 19 57 172 10 123 248 64 101 179 199 213 156 100 162 198 1 94 111 121 78 125 250 43 31 236 115 167 42 219 50 189 183 221 85 205 4)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 97 138 216 25 18 228 195 31 35 234 178 240 198 147 179 239 132 4 7 74 177 220 224 29 200 42 118 129 81 201 250 3 147 180 214 174 174 236 104 88 211 244 25 149 122 91 153 127 49 250 128 155 27 68 103 124 197 174 241 137 72 70 20 44 62 68 187 166 196 113 18 63 161 79 235 143 58 169 233 47 118 155 229 73 206 249 193 213 91 198 241 244 248 65 129 61)
  :der-encode
  #t
  :tests
  '(#(1066
      "r and s^-1 have a large Hamming weight"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 2 48 22 41 239 45 113 130 214 123 107 217 207 104 66 37 31 224 156 150 191 224 34 184 173 154 14 84 111 220 142 207 93 200 99 111 161 48 89 215 233 216 63 222 80 224 210 179 146 200)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 121 88 59 73 104 181 118 129 27 86 126 22 32 224 11 10 171 138 162 35 197 230 85 178 123 30 190 175 131 188 211 95 66 5 165 160 229 26 32 82 255 254 159 210 55 133 201 143 119 53 124 138 16 8 252 183 163 87 150 20 194 255 71 152 15 169 228 75 107 94 163 248 163 60 145 157 210 174 165 218 208 202 26 1 169 226 16 101 24 177 100 41 6 228 242 117)
  :der-encode
  #t
  :tests
  '(#(1067
      "small r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 2 1 1)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 137 101 123 172 33 108 58 196 163 162 213 175 211 66 173 36 164 235 16 61 77 190 46 68 97 224 60 112 17 130 101 19 254 130 189 6 225 126 58 232 235 88 17 218 11 236 136 187 51 238 30 221 213 212 157 216 110 120 95 191 235 185 40 134 97 150 78 111 190 12 7 175 154 75 163 20 95 196 190 17 229 72 75 101 12 151 9 109 184 46 187 12 162 187 132 237)
  :der-encode
  #t
  :tests
  '(#(1068
      "small r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 2 1 2)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 88 118 244 20 250 56 91 64 58 45 16 218 93 137 177 16 52 74 208 5 191 175 140 117 154 177 227 86 26 57 255 13 185 255 145 236 96 64 49 110 47 202 54 84 164 140 14 137 13 203 119 248 150 234 71 92 185 118 114 168 64 3 41 85 76 148 27 97 180 168 75 222 31 140 143 197 37 12 41 22 31 195 202 80 69 138 65 199 122 72 187 51 104 130 242 234)
  :der-encode
  #t
  :tests
  '(#(1069
      "small r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 2 1 3)
      #t
      ())
    #(1070
      "r is larger than n"
      #vu8(49 50 51 52 48 48)
      #vu8(48 54 2 49 0 140 185 30 130 163 56 109 40 15 93 111 126 80 230 65 223 21 47 113 9 237 84 86 179 31 22 110 108 172 4 37 167 207 58 182 175 107 127 195 16 59 136 50 2 233 4 101 102 2 1 3)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 27 238 116 31 161 146 169 189 5 53 208 6 39 115 112 121 233 143 0 7 99 148 201 120 169 106 15 159 186 100 233 226 29 236 255 107 75 143 225 31 96 177 141 93 117 134 132 222 6 209 147 33 234 183 232 96 31 143 70 6 254 147 253 59 47 2 152 106 88 202 86 65 50 130 198 109 211 107 166 114 74 60 188 238 231 153 72 186 45 85 199 86 88 107 88 226)
  :der-encode
  #t
  :tests
  '(#(1071
      "s is larger than n"
      #vu8(49 50 51 52 48 48)
      #vu8(48 54 2 1 1 2 49 0 140 185 30 130 163 56 109 40 15 93 111 126 80 230 65 223 21 47 113 9 237 84 86 179 31 22 110 108 172 4 37 167 207 58 182 175 107 127 195 16 59 136 50 2 233 23 59 236)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 107 37 248 193 98 159 117 121 227 199 238 75 2 156 192 41 180 189 190 216 139 155 57 147 3 228 161 67 82 209 243 246 4 142 205 208 98 211 124 186 123 112 188 189 88 114 49 231 98 19 19 249 61 49 15 20 75 211 50 37 130 128 70 57 221 41 96 150 154 153 58 159 42 54 9 248 86 225 65 90 10 77 207 88 167 134 78 65 226 168 200 13 252 21 138 48)
  :der-encode
  #t
  :tests
  '(#(1072
      "small r and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 55 2 2 1 1 2 49 0 137 102 33 210 50 131 177 33 17 4 141 28 151 142 44 40 109 96 182 239 124 227 122 243 108 247 170 77 226 104 214 38 222 125 220 179 86 209 103 199 72 60 105 69 92 117 44 147)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 93 8 44 222 96 134 248 234 105 148 244 110 157 192 108 28 29 44 58 60 45 197 201 123 241 55 101 61 155 46 210 17 1 186 216 67 212 110 75 121 37 185 175 112 52 198 208 33 18 199 245 110 101 210 51 16 64 99 57 31 179 130 139 57 144 230 137 61 119 116 110 66 48 94 106 91 161 17 217 118 214 147 245 149 175 133 143 25 250 199 35 79 116 132 196 137)
  :der-encode
  #t
  :tests
  '(#(1073
      "smallish r and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 59 2 7 45 155 77 52 121 82 204 2 48 56 232 218 226 22 198 63 6 179 237 189 15 155 167 165 228 163 50 236 24 114 81 227 214 39 131 157 27 170 198 103 215 202 173 42 176 161 234 159 187 18 220 90 113 227 180 155 201)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 116 7 202 108 42 24 63 156 161 55 102 9 233 199 138 141 8 14 255 173 21 164 246 60 187 122 22 142 60 120 155 139 89 206 77 49 34 202 8 168 105 7 186 72 127 113 127 188 62 44 86 169 179 70 10 81 54 178 19 190 141 72 203 61 201 199 173 148 91 29 206 203 249 63 166 207 170 248 219 215 15 16 64 185 122 216 227 172 48 242 230 79 215 204 118 214)
  :der-encode
  #t
  :tests
  '(#(1074
      "100-bit r and small s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 65 2 13 16 51 230 126 55 179 43 68 85 128 191 78 252 2 48 13 36 54 165 153 179 150 165 28 84 110 5 209 195 210 90 143 109 5 147 90 229 3 29 173 60 221 124 179 108 246 145 42 67 61 226 143 132 117 211 177 226 225 206 119 97 8 121)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 79 195 42 82 38 130 14 201 195 255 242 199 78 11 54 215 222 2 142 89 252 0 95 56 7 163 189 89 137 44 154 210 13 186 113 104 239 158 217 191 153 178 94 208 27 207 198 202 106 19 218 46 133 39 119 166 249 157 4 50 42 27 159 180 34 118 132 191 124 64 212 211 239 146 121 128 3 163 191 45 161 88 213 104 100 87 195 61 14 36 190 92 38 95 196 115)
  :der-encode
  #t
  :tests
  '(#(1075
      "small r and 100 bit s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 54 2 2 1 1 2 48 74 40 154 218 215 206 236 103 174 153 239 93 167 151 182 187 23 217 193 104 66 138 179 14 169 166 139 137 101 44 75 158 155 174 135 106 179 215 251 223 30 185 46 212 34 189 59 147)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 115 80 167 208 13 119 25 163 24 82 46 244 197 230 190 36 179 178 203 48 12 89 111 121 232 221 49 164 104 143 230 90 84 178 215 73 122 6 130 30 236 186 243 27 47 167 205 203 75 215 47 199 240 94 50 69 127 218 12 195 243 33 21 119 68 241 132 28 48 189 8 110 109 221 91 244 21 235 113 236 190 54 240 243 253 35 211 196 20 135 251 40 62 14 151 148)
  :der-encode
  #t
  :tests
  '(#(1076
      "100-bit r and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 65 2 13 6 37 34 187 211 236 190 124 57 233 62 124 36 2 48 74 40 154 218 215 206 236 103 174 153 239 93 167 151 182 187 23 217 193 104 66 138 179 14 169 166 139 137 101 44 75 158 155 174 135 106 179 215 251 223 30 185 46 212 34 189 59 147)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 97 73 138 211 26 132 238 209 2 186 39 18 235 138 123 217 35 32 189 164 172 109 7 180 50 106 48 134 157 25 235 27 150 34 157 33 239 215 17 220 247 48 72 191 22 104 0 227 12 252 193 58 9 20 19 34 132 219 234 182 252 245 215 11 52 202 134 166 129 21 126 72 116 171 255 174 235 182 155 139 113 246 157 51 35 6 86 120 35 221 229 64 124 231 57 232)
  :der-encode
  #t
  :tests
  '(#(1077
      "r and s^-1 are close to n"
      #vu8(49 50 51 52 48 48)
      #vu8(48 101 2 49 0 140 185 30 130 163 56 109 40 15 93 111 126 80 230 65 223 21 47 113 9 237 84 86 179 31 22 110 108 172 4 37 167 207 58 182 175 107 127 195 16 59 136 50 2 233 4 100 229 2 48 93 208 191 1 194 37 158 26 180 232 244 254 224 153 129 63 99 116 246 6 158 56 57 204 191 100 73 157 200 2 195 197 52 209 207 31 156 255 215 96 39 176 33 87 70 2 238 67)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 5 5 146 243 77 176 38 61 244 198 105 184 153 25 65 190 24 35 122 16 69 191 209 101 234 74 243 133 55 101 100 237 246 101 74 13 255 123 93 132 71 64 144 242 101 196 107 81 21 69 145 140 216 242 34 96 206 33 165 132 237 250 11 22 68 72 140 153 125 149 101 41 38 42 239 64 12 192 50 14 210 125 220 236 59 222 107 159 215 155 55 74 246 136 250 159)
  :der-encode
  #t
  :tests
  '(#(1078
      "s == 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 53 2 48 46 232 95 128 225 18 207 13 90 116 122 127 112 76 192 159 177 186 123 3 79 28 28 230 95 178 36 206 228 1 97 226 154 104 231 143 206 127 235 176 19 216 16 171 163 1 119 33 2 1 1)
      #t
      ())
    #(1079
      "s == 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 53 2 48 46 232 95 128 225 18 207 13 90 116 122 127 112 76 192 159 177 186 123 3 79 28 28 230 95 178 36 206 228 1 97 226 154 104 231 143 206 127 235 176 19 216 16 171 163 1 119 33 2 1 0)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 77 248 152 84 76 43 16 220 60 77 50 73 252 165 19 14 117 61 38 224 131 32 189 130 57 38 172 176 80 216 182 164 254 173 242 155 239 7 236 219 0 232 91 52 31 34 6 154 0 51 67 105 93 30 10 192 167 139 56 73 13 151 193 233 14 79 244 202 13 33 64 185 16 31 27 99 242 156 164 242 191 145 118 225 96 4 131 145 98 22 189 53 171 206 103 65)
  :der-encode
  #t
  :tests
  '(#(1080
      "point at infinity during verify"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 70 92 143 65 81 156 54 148 7 174 183 191 40 115 32 239 138 151 184 132 246 170 43 89 143 139 55 54 86 2 18 211 231 157 91 87 181 191 225 136 29 196 25 1 116 130 50 178 2 48 46 232 95 128 225 18 207 13 90 116 122 127 112 76 192 159 177 186 123 3 79 28 28 230 95 178 36 206 228 1 97 226 154 104 231 143 206 127 235 176 19 216 16 171 163 1 119 33)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 62 149 93 40 69 137 119 88 55 201 184 61 188 180 145 134 214 149 214 181 63 87 113 104 159 100 88 228 10 43 109 173 98 84 203 178 39 222 70 117 132 157 17 224 253 243 33 20 60 79 10 232 128 51 103 113 97 134 23 79 145 183 3 91 53 191 132 144 228 159 156 70 20 123 109 59 113 217 111 116 171 250 94 64 243 60 16 15 121 212 89 98 65 145 206 224)
  :der-encode
  #t
  :tests
  '(#(1081
      "edge case for signature malleability"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 70 92 143 65 81 156 54 148 7 174 183 191 40 115 32 239 138 151 184 132 246 170 43 89 143 139 55 54 86 2 18 211 231 157 91 87 181 191 225 136 29 196 25 1 116 130 50 183 2 48 70 92 143 65 81 156 54 148 7 174 183 191 40 115 32 239 138 151 184 132 246 170 43 89 143 139 55 54 86 2 18 211 231 157 91 87 181 191 225 136 29 196 25 1 116 130 50 178)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 57 196 72 115 204 171 2 60 75 54 106 100 109 236 180 190 181 103 43 109 33 64 250 15 210 0 55 74 160 19 1 0 140 4 25 195 57 44 88 144 0 129 110 31 24 5 154 76 43 97 4 190 94 38 198 87 170 31 111 164 173 223 63 245 42 69 103 152 0 221 40 205 98 135 17 242 209 193 17 83 163 108 108 66 251 166 149 76 211 127 210 82 17 45 225 164)
  :der-encode
  #t
  :tests
  '(#(1082
      "edge case for signature malleability"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 70 92 143 65 81 156 54 148 7 174 183 191 40 115 32 239 138 151 184 132 246 170 43 89 143 139 55 54 86 2 18 211 231 157 91 87 181 191 225 136 29 196 25 1 116 130 50 183 2 48 70 92 143 65 81 156 54 148 7 174 183 191 40 115 32 239 138 151 184 132 246 170 43 89 143 139 55 54 86 2 18 211 231 157 91 87 181 191 225 136 29 196 25 1 116 130 50 179)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 93 119 19 78 137 10 199 47 156 105 252 195 241 129 174 116 111 239 255 218 252 29 252 121 28 243 58 34 251 15 142 88 97 136 207 45 93 6 13 219 4 0 75 175 86 25 28 159 14 116 1 221 204 71 160 155 94 207 39 25 204 147 96 16 169 55 26 127 118 36 230 62 122 0 85 10 19 208 53 207 88 109 59 82 44 127 208 98 81 173 187 15 10 173 61 215)
  :der-encode
  #t
  :tests
  '(#(1083
      "u1 == 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 101 2 48 46 232 95 128 225 18 207 13 90 116 122 127 112 76 192 159 177 186 123 3 79 28 28 230 95 178 36 206 228 1 97 226 154 104 231 143 206 127 235 176 19 216 16 171 163 1 119 33 2 49 0 249 177 39 240 216 30 188 209 123 123 160 234 19 28 102 13 52 11 5 206 85 124 130 22 14 15 121 61 224 125 56 23 144 35 148 40 113 172 183 0 45 250 253 255 252 141 234 206)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 96 124 217 76 66 245 187 252 248 87 167 8 172 22 63 10 252 10 101 200 216 135 37 241 140 75 247 235 124 245 211 74 202 96 8 162 123 78 95 217 71 97 52 237 133 252 211 44 137 242 72 41 12 89 184 251 150 62 144 186 185 176 179 227 19 211 184 224 166 200 144 20 85 162 43 123 116 161 8 21 44 91 129 75 165 117 222 141 224 124 219 141 103 186 43 80)
  :der-encode
  #t
  :tests
  '(#(1084
      "u1 == n - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 46 232 95 128 225 18 207 13 90 116 122 127 112 76 192 159 177 186 123 3 79 28 28 230 95 178 36 206 228 1 97 226 154 104 231 143 206 127 235 176 19 216 16 171 163 1 119 33 2 48 31 193 21 20 110 82 29 126 163 63 62 18 142 176 29 176 246 83 220 69 133 44 43 80 48 29 99 155 119 139 19 56 14 81 217 54 101 82 207 32 73 21 102 5 213 122 223 252)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 75 74 251 217 23 70 177 164 223 109 13 113 122 252 117 40 250 74 157 218 154 98 175 238 25 167 47 192 1 154 162 234 137 161 37 190 167 103 85 6 35 6 86 202 175 245 44 115 95 92 53 117 191 102 150 55 239 219 103 36 119 80 15 31 227 123 69 220 248 121 72 122 214 202 54 196 20 115 41 251 116 23 6 206 155 146 140 228 123 246 220 15 158 68 1 127)
  :der-encode
  #t
  :tests
  '(#(1085
      "u2 == 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 46 232 95 128 225 18 207 13 90 116 122 127 112 76 192 159 177 186 123 3 79 28 28 230 95 178 36 206 228 1 97 226 154 104 231 143 206 127 235 176 19 216 16 171 163 1 119 33 2 48 46 232 95 128 225 18 207 13 90 116 122 127 112 76 192 159 177 186 123 3 79 28 28 230 95 178 36 206 228 1 97 226 154 104 231 143 206 127 235 176 19 216 16 171 163 1 119 33)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 13 139 36 108 98 49 136 183 69 87 22 172 24 155 154 244 65 103 106 28 65 205 87 87 84 189 2 174 77 104 37 48 75 150 29 223 8 38 187 22 30 61 99 233 188 113 241 212 110 219 237 220 45 64 218 253 204 172 144 174 133 205 97 106 14 161 228 160 138 232 252 51 88 206 125 81 66 238 232 243 190 189 193 69 145 196 201 177 91 255 18 184 207 8 51 74)
  :der-encode
  #t
  :tests
  '(#(1086
      "u2 == n - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 46 232 95 128 225 18 207 13 90 116 122 127 112 76 192 159 177 186 123 3 79 28 28 230 95 178 36 206 228 1 97 226 154 104 231 143 206 127 235 176 19 216 16 171 163 1 119 33 2 48 93 208 191 1 194 37 158 26 180 232 244 254 224 153 129 63 99 116 246 6 158 56 57 204 191 100 73 157 200 2 195 197 52 209 207 31 156 255 215 96 39 176 33 87 70 2 238 68)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 4 217 212 166 45 110 176 32 115 231 56 177 228 57 206 205 84 64 3 25 17 244 81 144 235 96 98 163 53 53 252 82 105 188 252 37 212 175 193 218 224 235 173 148 141 119 50 216 2 154 243 126 137 163 206 167 223 56 176 32 246 36 144 111 202 109 148 78 20 134 133 63 232 229 186 156 251 162 215 74 133 46 197 135 212 111 228 153 23 195 100 65 142 247 236 165)
  :der-encode
  #t
  :tests
  '(#(1087
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 48 83 59 13 80 72 10 62 240 126 126 138 248 177 9 119 89 188 3 172 154 28 126 214 7 90 5 40 105 245 127 18 178 133 97 49 98 208 142 231 170 185 254 84 170 169 132 163 154)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 26 74 85 201 176 206 67 215 237 120 169 141 155 246 69 156 207 52 148 102 252 204 69 117 152 252 21 161 214 149 109 140 232 52 139 35 50 255 251 61 81 107 7 141 40 211 41 221 115 244 90 76 225 245 220 119 47 60 50 131 175 101 100 230 228 16 249 213 6 75 100 132 6 89 102 147 102 147 246 42 201 148 14 178 137 20 160 145 210 150 76 216 67 180 16 40)
  :der-encode
  #t
  :tests
  '(#(1088
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 48 112 168 232 23 244 234 130 184 49 186 94 103 24 48 180 49 40 70 178 61 161 79 247 212 59 175 58 126 231 170 6 28 134 66 42 175 39 255 197 198 85 64 104 104 181 191 25 191)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 55 58 201 143 8 130 104 168 109 19 109 228 250 12 226 196 16 66 205 51 237 45 7 37 15 83 205 78 212 63 161 218 66 93 165 151 189 91 65 61 86 207 255 149 66 103 16 79 6 158 4 83 187 189 121 40 3 22 248 193 193 97 168 70 175 55 154 148 30 210 134 229 147 231 242 137 186 79 255 66 69 139 39 58 59 164 153 87 78 19 78 127 180 167 220 25)
  :der-encode
  #t
  :tests
  '(#(1089
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 48 50 108 8 114 167 34 78 122 16 64 135 172 244 196 180 227 229 171 164 255 228 98 95 195 149 92 233 100 123 247 31 181 150 184 57 113 173 43 82 71 58 40 33 153 28 128 137 5)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 126 106 180 41 185 227 58 151 79 106 185 164 158 177 82 196 132 87 95 173 93 155 205 220 184 126 220 225 110 121 51 58 147 114 118 243 106 236 145 33 222 69 3 132 203 32 187 46 133 149 246 194 136 13 137 25 142 27 98 94 101 5 109 10 25 165 141 29 28 85 27 204 93 211 157 40 29 114 109 173 65 8 72 140 143 148 26 201 131 22 156 172 227 236 199 27)
  :der-encode
  #t
  :tests
  '(#(1090
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 48 101 207 10 91 206 112 175 7 138 246 213 161 69 69 202 97 158 71 214 235 15 208 83 30 204 116 58 118 133 83 2 132 168 50 137 194 208 158 2 67 132 174 94 119 135 153 228 20)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 31 187 55 247 81 149 195 242 222 58 252 200 138 215 235 50 16 129 68 96 137 67 250 206 58 137 0 5 255 42 62 11 85 128 121 197 132 38 32 244 74 220 12 56 221 136 170 197 81 115 79 142 184 39 223 146 157 115 23 113 74 41 207 139 164 50 202 246 137 9 77 0 235 157 99 203 201 8 186 118 202 91 31 147 210 41 71 124 150 8 66 148 15 66 36 211)
  :der-encode
  #t
  :tests
  '(#(1091
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 48 46 9 154 223 228 217 18 5 150 232 161 82 3 153 176 226 73 85 91 23 30 10 113 150 115 7 84 138 60 40 117 63 164 11 188 176 168 101 131 105 220 140 160 202 160 95 176 1)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 7 250 48 200 55 200 173 2 147 38 161 212 72 189 39 82 27 93 38 170 212 216 36 75 114 66 73 61 247 1 114 230 221 29 175 92 126 7 244 250 16 47 92 65 90 78 198 31 9 4 82 125 248 119 82 127 125 15 90 127 113 182 217 192 63 45 225 223 136 4 134 142 115 55 218 53 201 177 255 201 191 46 39 156 58 248 160 120 110 111 57 131 44 198 237 27)
  :der-encode
  #t
  :tests
  '(#(1092
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 48 92 19 53 191 201 178 36 11 45 209 66 164 7 51 97 196 146 170 182 46 60 20 227 44 230 14 169 20 120 80 234 127 72 23 121 97 80 203 6 211 185 25 65 149 64 191 96 2)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 97 57 122 231 254 142 126 137 75 250 104 158 88 19 81 66 147 160 241 185 241 9 12 13 150 150 55 155 97 40 122 117 42 63 125 29 36 128 254 65 39 73 141 14 237 168 76 99 12 47 173 211 126 163 107 254 83 43 93 58 15 16 29 221 58 197 148 88 57 150 72 243 239 175 88 51 222 193 200 200 236 224 85 21 137 53 83 239 77 88 18 13 55 206 46 205)
  :der-encode
  #t
  :tests
  '(#(1093
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 48 37 145 96 179 33 195 80 244 242 41 154 167 124 114 160 146 72 146 121 87 182 65 67 8 191 140 127 180 242 219 186 92 167 145 152 248 10 21 14 28 235 90 152 69 20 78 238 155)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 127 22 110 250 141 132 22 217 34 245 118 115 162 24 12 251 180 158 141 22 13 96 186 94 201 11 165 71 243 236 205 34 206 106 253 153 160 251 41 44 253 22 176 105 43 156 171 3 65 133 121 230 124 135 179 89 145 47 108 180 21 139 221 126 161 48 181 0 119 38 223 47 206 49 153 21 222 237 196 247 232 158 226 63 120 110 37 55 60 153 55 73 139 171 129 180)
  :der-encode
  #t
  :tests
  '(#(1094
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 101 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 49 0 136 25 100 225 187 169 162 140 122 29 132 55 156 101 187 61 167 47 60 200 121 247 245 121 210 249 179 74 87 68 50 214 199 209 194 41 238 34 125 77 219 221 159 21 223 153 120 192)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 119 201 194 230 88 176 4 171 104 64 215 195 58 94 126 181 249 59 163 167 197 179 47 114 117 253 117 176 124 28 146 245 174 49 87 107 156 188 160 70 51 126 109 110 167 108 20 94 103 197 96 16 221 151 73 226 217 11 62 181 126 241 196 199 55 65 35 58 50 166 164 53 91 140 78 58 36 188 245 152 102 39 199 72 7 131 22 29 177 210 165 51 43 215 95 239)
  :der-encode
  #t
  :tests
  '(#(1095
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 48 14 60 131 187 89 171 197 114 32 23 1 82 37 28 240 16 176 8 31 236 202 44 149 124 167 236 26 51 218 227 202 29 112 148 177 192 247 27 3 224 8 187 230 70 89 17 159 9)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 100 217 163 23 213 180 26 243 15 223 199 56 148 96 243 87 250 153 120 48 77 2 107 49 42 165 202 4 161 155 220 12 86 68 12 253 20 160 176 96 195 184 244 238 141 74 90 55 119 41 155 34 128 171 76 133 126 210 83 30 141 176 39 248 199 35 128 40 189 127 123 165 155 200 5 71 212 241 13 166 242 230 19 88 5 83 64 111 4 39 236 189 123 117 145 110)
  :der-encode
  #t
  :tests
  '(#(1096
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 48 99 27 151 218 127 51 77 175 208 30 42 1 248 97 134 50 55 45 154 188 223 20 235 175 114 19 218 55 177 68 156 78 140 138 29 254 3 56 79 58 222 137 7 173 148 66 19 152)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 38 75 164 71 248 13 114 27 241 231 152 119 242 122 35 238 88 86 94 136 196 159 107 156 214 68 140 2 75 111 245 58 235 178 176 140 236 34 235 46 179 142 48 253 84 114 127 1 128 24 135 249 249 77 206 98 94 209 213 99 80 164 178 82 224 220 252 9 132 146 143 37 173 34 161 49 53 186 249 150 191 168 40 9 251 231 156 9 121 103 15 221 201 251 169 230)
  :der-encode
  #t
  :tests
  '(#(1097
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 48 57 126 17 50 91 46 46 55 144 222 228 133 159 220 202 133 89 43 196 111 208 213 128 171 197 17 70 2 182 133 18 245 73 217 133 76 154 240 219 101 129 137 221 88 63 127 193 203)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 4 145 128 64 165 141 196 119 167 36 85 97 39 61 242 216 189 151 126 95 211 156 64 211 1 21 54 203 43 156 254 232 46 42 181 245 57 229 144 141 203 243 255 36 198 69 219 78 89 105 169 216 223 92 218 175 227 73 12 170 73 70 172 245 235 227 233 58 171 40 168 212 166 246 30 44 142 92 2 220 96 92 117 128 109 221 221 235 226 57 21 99 17 89 193 247)
  :der-encode
  #t
  :tests
  '(#(1098
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 48 15 224 138 138 55 41 14 191 81 159 159 9 71 88 14 216 123 41 238 34 194 150 21 168 24 14 177 205 187 197 137 156 7 40 236 155 50 169 103 144 36 138 179 2 234 189 111 254)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 34 228 78 190 10 53 30 76 145 247 189 252 12 12 60 110 28 103 157 168 74 50 83 156 45 187 65 234 49 6 27 8 37 227 243 77 123 10 213 37 38 30 185 228 87 196 8 25 96 137 227 48 52 115 27 168 233 249 95 90 35 75 248 211 83 156 131 129 244 217 85 16 213 224 241 69 253 72 32 94 92 96 33 140 63 132 177 137 200 228 253 86 8 180 151 120)
  :der-encode
  #t
  :tests
  '(#(1099
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 48 95 146 147 122 165 45 93 209 15 206 251 149 162 213 123 97 125 109 139 4 232 219 91 59 90 57 171 232 147 253 162 174 178 249 120 16 140 85 138 171 186 216 41 206 2 194 119 53)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 102 237 73 119 158 214 167 177 12 129 43 199 238 123 71 165 209 28 94 165 2 119 39 61 161 64 188 27 12 245 184 33 10 106 115 127 126 157 146 238 230 216 69 19 126 92 68 162 138 204 184 246 55 56 92 246 81 155 250 227 237 58 228 208 172 170 25 162 96 160 27 216 203 83 173 36 218 202 177 149 75 32 209 71 44 243 151 94 135 204 115 63 50 154 182 189)
  :der-encode
  #t
  :tests
  '(#(1100
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 48 89 147 10 43 139 189 121 184 5 31 37 42 26 247 107 74 92 101 37 173 249 198 199 145 10 92 207 121 142 172 12 141 69 19 146 58 121 42 150 90 190 130 187 86 77 172 33 203)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 48 36 145 32 65 188 152 154 147 111 180 220 221 23 139 21 224 58 10 169 74 186 251 68 101 180 168 157 68 22 183 168 176 41 212 124 23 230 154 37 150 47 243 174 254 134 45 203 36 158 233 37 43 87 19 231 71 162 218 138 172 43 150 30 226 182 172 161 87 164 72 136 116 134 72 251 205 197 102 28 212 161 105 187 146 201 193 206 80 167 154 99 115 80 2 161)
  :der-encode
  #t
  :tests
  '(#(1101
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 48 20 73 144 28 228 176 15 14 58 95 248 76 255 140 19 72 84 184 8 229 4 209 184 240 39 172 233 89 18 52 227 246 44 231 12 53 168 170 142 96 202 254 30 13 243 237 128 231)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 108 147 147 176 14 154 98 206 11 131 103 76 220 202 89 177 141 91 52 36 99 72 227 124 29 120 137 138 82 45 129 60 73 208 142 252 95 63 126 243 63 61 201 221 27 194 229 194 0 11 148 16 206 4 166 76 208 149 174 17 148 188 31 81 76 112 9 164 224 104 113 181 87 21 76 244 146 231 197 119 73 72 126 207 205 4 203 49 66 106 183 133 255 169 94 47)
  :der-encode
  #t
  :tests
  '(#(1102
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 101 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 49 0 137 174 111 142 33 91 207 53 199 226 175 237 26 107 152 85 23 22 135 217 237 190 168 175 91 248 233 221 198 103 170 196 225 102 240 80 151 56 95 169 234 58 98 69 252 7 180 173)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 44 88 39 122 170 97 196 0 215 3 97 131 175 73 201 154 151 254 165 168 213 248 96 140 76 106 199 162 130 117 126 77 196 182 249 45 130 161 2 114 242 161 150 150 164 143 167 159 90 138 219 119 7 64 102 157 96 16 229 95 102 37 177 65 190 70 159 225 119 159 74 223 230 78 171 46 74 154 197 191 28 37 179 222 11 116 184 249 100 79 194 22 1 13 150 89)
  :der-encode
  #t
  :tests
  '(#(1103
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 48 63 193 98 86 160 145 76 226 102 26 84 104 138 244 178 84 107 27 89 176 67 102 125 166 171 181 177 161 224 226 230 171 134 47 232 187 116 159 114 81 87 43 193 96 86 117 48 167)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 110 95 130 126 26 162 37 196 185 93 181 38 85 246 125 101 75 220 105 164 191 143 73 193 157 30 101 220 241 44 165 17 80 90 161 114 108 162 245 205 248 171 55 111 148 160 197 189 93 174 198 243 95 29 251 198 143 186 2 76 200 197 247 156 233 186 168 106 223 216 210 186 83 167 152 205 204 144 37 235 151 151 211 190 32 123 198 148 171 179 56 228 55 120 255 221)
  :der-encode
  #t
  :tests
  '(#(1104
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 48 100 193 85 108 94 239 49 26 79 59 164 99 22 173 247 55 50 214 237 71 177 186 46 205 23 143 248 155 188 93 221 108 100 25 246 46 4 94 162 211 92 51 162 80 220 47 185 37)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 127 232 82 167 97 42 103 61 243 81 240 90 254 175 203 177 108 228 202 223 133 104 27 43 95 70 204 49 239 51 214 182 149 55 142 115 37 233 203 49 133 215 19 123 43 23 0 70 92 189 76 129 0 118 209 53 49 104 135 233 75 20 180 176 16 141 177 201 68 121 76 57 137 56 212 33 118 195 37 117 182 66 139 62 55 182 2 33 28 87 74 202 254 240 145 30)
  :der-encode
  #t
  :tests
  '(#(1105
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 48 60 201 140 86 26 165 245 12 143 25 217 71 220 117 172 143 80 126 105 133 118 32 6 231 16 9 130 202 204 183 149 48 248 249 53 172 157 61 130 150 124 223 18 158 207 91 12 229)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 10 73 220 53 158 212 254 246 131 228 98 223 230 133 68 44 234 119 183 51 253 149 99 50 22 121 77 154 97 247 225 2 45 148 42 54 231 129 164 132 162 180 121 166 67 70 154 244 81 46 189 9 102 182 139 254 207 122 71 2 27 205 158 106 162 112 61 204 85 106 154 68 61 22 25 90 161 69 115 143 163 106 77 255 61 9 72 31 74 134 85 10 141 31 53 69)
  :der-encode
  #t
  :tests
  '(#(1106
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 48 63 32 149 83 15 54 20 78 0 144 25 238 225 2 178 134 125 131 201 235 79 40 188 179 27 56 62 0 200 195 116 107 32 204 144 232 239 200 19 174 251 91 106 73 101 32 76 83)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 39 103 21 8 116 149 213 44 65 96 209 84 70 235 180 215 88 41 27 245 188 156 168 123 86 195 240 10 220 65 250 69 45 102 104 65 82 211 225 157 47 195 173 93 40 151 135 173 54 115 133 211 195 245 195 194 198 195 22 106 220 250 252 61 32 68 83 202 184 121 125 86 233 85 251 241 207 66 23 99 166 101 62 64 239 217 3 93 248 18 129 53 84 107 98 97)
  :der-encode
  #t
  :tests
  '(#(1107
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 48 112 74 252 106 114 8 13 23 40 246 204 159 208 35 233 210 55 48 35 55 127 2 89 155 110 169 251 41 35 221 116 3 254 47 215 57 153 246 83 22 181 63 145 11 218 79 111 16)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 89 67 219 214 108 121 252 184 130 147 110 204 221 109 134 12 66 226 7 39 162 205 178 145 101 200 66 108 157 25 41 144 183 29 154 60 127 36 14 70 172 171 39 65 183 238 156 122 70 30 90 177 219 62 185 181 27 50 56 211 173 163 53 103 210 81 216 253 15 186 245 154 161 207 180 15 231 178 46 2 119 241 102 163 46 219 129 171 106 133 128 249 177 251 62 57)
  :der-encode
  #t
  :tests
  '(#(1108
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 48 70 240 156 71 65 193 175 231 78 50 246 255 20 218 175 144 244 72 108 51 245 208 233 120 249 175 36 245 117 25 136 231 43 55 76 95 174 255 222 195 9 51 4 1 150 95 125 32)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 82 133 215 41 37 200 124 117 182 173 153 85 6 65 130 191 45 235 203 37 200 141 6 6 246 103 40 99 222 65 62 84 150 136 164 252 251 230 104 155 178 61 186 43 117 123 205 166 78 246 176 23 102 201 91 102 255 16 73 109 93 238 186 196 180 191 140 59 180 35 44 1 159 128 182 157 138 176 33 76 234 245 129 48 39 236 236 19 58 90 91 151 25 72 130 46)
  :der-encode
  #t
  :tests
  '(#(1109
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 48 25 147 10 43 139 189 121 184 5 31 37 42 26 247 107 74 92 101 37 173 249 198 199 145 10 92 207 121 142 172 12 141 69 19 146 58 121 42 150 90 190 130 187 86 77 172 33 205)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 7 134 175 176 61 215 145 219 252 55 26 181 31 250 40 139 124 237 217 13 106 53 163 195 169 37 102 248 149 243 140 177 133 54 19 126 1 15 28 251 162 251 237 112 86 141 119 184 78 236 132 12 202 139 111 63 97 35 4 182 2 255 173 141 203 174 23 134 178 194 33 110 154 30 89 166 182 150 40 181 42 64 139 106 8 61 114 127 60 205 14 112 111 154 238 248)
  :der-encode
  #t
  :tests
  '(#(1110
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 48 51 38 20 87 23 122 243 112 10 62 74 84 53 238 214 148 184 202 75 91 243 141 143 34 20 185 158 243 29 88 25 26 138 39 36 116 242 85 44 181 125 5 118 172 155 88 67 154)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 70 105 13 180 3 144 66 40 228 247 54 177 52 71 145 89 102 40 232 86 105 212 221 1 55 75 33 39 66 128 180 33 228 47 91 163 243 242 250 218 210 125 68 105 190 125 155 219 126 136 59 67 194 114 23 246 6 224 165 186 108 157 247 129 193 69 119 108 14 90 137 147 240 237 101 198 222 214 90 67 189 221 15 231 97 20 133 232 232 217 231 222 205 242 216 181)
  :der-encode
  #t
  :tests
  '(#(1111
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 48 76 185 30 130 163 56 109 40 15 93 111 126 80 230 65 223 21 47 113 9 237 84 86 179 31 22 110 108 172 4 37 167 207 58 182 175 107 127 195 16 59 136 50 2 233 4 101 103)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 139 230 146 138 202 212 76 149 113 181 196 1 95 163 255 174 94 99 158 65 48 161 166 107 71 62 93 253 254 147 182 138 141 232 149 131 102 109 77 105 158 136 133 70 159 155 26 77 131 177 213 49 35 16 228 69 174 87 200 90 177 163 223 141 187 183 6 165 152 251 192 7 239 182 2 161 74 89 82 253 126 125 240 70 77 83 62 6 46 162 17 40 92 47 92 39)
  :der-encode
  #t
  :tests
  '(#(1112
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 101 2 48 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 49 0 139 51 199 8 98 74 30 46 235 160 15 181 181 168 237 26 22 34 252 113 237 137 127 177 61 135 172 37 57 53 232 54 88 80 211 128 1 92 17 93 18 225 74 36 114 134 13 9)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 24 134 221 210 130 176 35 8 73 83 239 125 158 133 58 106 220 19 96 206 247 245 109 247 218 12 167 189 207 79 58 93 34 122 115 15 159 32 249 67 75 86 93 196 250 129 158 133 106 15 14 216 215 242 143 145 106 78 114 126 85 191 8 24 220 200 78 209 19 43 215 218 159 152 255 149 251 42 236 35 143 77 249 24 91 9 130 166 104 44 6 200 94 106 137 94)
  :der-encode
  #t
  :tests
  '(#(1113
      "point duplication during verification"
      #vu8(49 50 51 52 48 48)
      #vu8(48 101 2 49 0 135 41 203 185 6 246 157 141 67 249 76 184 196 185 87 44 149 130 114 245 198 255 117 155 169 17 63 52 11 159 154 165 152 131 122 163 122 67 17 113 127 175 76 246 103 71 165 180 2 48 40 169 184 197 94 182 245 241 207 92 35 58 255 100 15 72 33 28 210 185 207 5 147 232 185 255 255 103 199 230 151 3 248 166 197 56 42 54 118 157 60 202 87 113 26 182 60 101)
      #t
      ("PointDuplication"))))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 24 134 221 210 130 176 35 8 73 83 239 125 158 133 58 106 220 19 96 206 247 245 109 247 218 12 167 189 207 79 58 93 34 122 115 15 159 32 249 67 75 86 93 196 250 129 158 133 34 170 15 169 203 69 221 150 165 14 252 255 251 39 57 198 56 103 34 56 218 40 126 217 115 24 218 131 132 140 37 0 29 133 174 17 53 19 151 203 31 26 249 74 210 157 98 245)
  :der-encode
  #t
  :tests
  '(#(1114
      "duplication bug"
      #vu8(49 50 51 52 48 48)
      #vu8(48 101 2 49 0 135 41 203 185 6 246 157 141 67 249 76 184 196 185 87 44 149 130 114 245 198 255 117 155 169 17 63 52 11 159 154 165 152 131 122 163 122 67 17 113 127 175 76 246 103 71 165 180 2 48 40 169 184 197 94 182 245 241 207 92 35 58 255 100 15 72 33 28 210 185 207 5 147 232 185 255 255 103 199 230 151 3 248 166 197 56 42 54 118 157 60 202 87 113 26 182 60 101)
      #f
      ("PointDuplication"))))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 137 221 115 142 252 176 247 152 17 223 107 236 135 52 133 22 148 80 173 161 142 96 39 33 230 23 104 190 13 129 229 212 19 129 242 70 104 39 111 50 191 227 31 241 193 107 203 107 31 122 77 40 35 188 215 63 35 109 144 182 234 97 216 146 2 97 144 225 67 23 181 209 16 82 110 158 38 117 240 61 94 243 252 232 123 88 39 163 126 12 241 155 77 57 136 192)
  :der-encode
  #t
  :tests
  '(#(1115
      "comparison with point at infinity "
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 46 232 95 128 225 18 207 13 90 116 122 127 112 76 192 159 177 186 123 3 79 28 28 230 95 178 36 206 228 1 97 226 154 104 231 143 206 127 235 176 19 216 16 171 163 1 119 33 2 48 28 37 6 26 32 164 226 161 156 172 73 127 169 199 166 198 55 111 227 104 98 170 119 189 108 158 22 21 188 0 212 84 195 11 190 35 21 127 243 208 11 232 10 0 149 0 225 20)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 121 85 146 166 115 232 45 255 61 119 69 1 148 229 48 141 100 244 95 17 247 89 243 79 124 123 91 124 198 173 115 249 191 248 246 99 60 194 3 120 207 242 229 63 183 165 48 48 133 181 205 70 33 102 90 172 132 53 216 206 133 178 109 68 69 8 183 123 40 46 145 205 83 21 199 1 210 229 182 107 164 192 11 247 225 235 8 89 161 60 195 81 208 0 65 161)
  :der-encode
  #t
  :tests
  '(#(1116
      "extreme value for k and edgecase s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 34 130 188 56 42 47 77 252 185 92 52 149 215 180 253 89 10 213 32 179 235 107 228 214 236 47 128 196 224 247 13 248 124 75 167 74 9 181 83 235 180 39 181 141 249 213 159 202 2 48 46 232 95 128 225 18 207 13 90 116 122 127 112 76 192 159 177 186 123 3 79 28 28 230 95 178 36 206 228 1 97 226 154 104 231 143 206 127 235 176 19 216 16 171 163 1 119 33)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 57 217 79 248 117 125 205 182 116 128 203 196 142 150 121 66 62 87 222 90 35 35 45 240 219 30 15 247 233 8 97 68 1 230 205 141 97 80 8 234 139 229 18 153 217 226 45 233 67 129 38 215 13 20 231 92 228 30 162 244 9 190 136 226 128 111 127 115 189 81 55 49 105 107 197 158 122 44 29 68 213 104 61 59 220 146 186 186 28 42 218 88 128 159 139 239)
  :der-encode
  #t
  :tests
  '(#(1117
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 34 130 188 56 42 47 77 252 185 92 52 149 215 180 253 89 10 213 32 179 235 107 228 214 236 47 128 196 224 247 13 248 124 75 167 74 9 181 83 235 180 39 181 141 249 213 159 202 2 48 20 26 114 18 169 154 88 188 148 123 15 237 121 69 119 31 222 116 125 220 216 194 231 208 114 39 198 161 207 110 78 133 175 227 208 244 125 18 64 112 8 129 43 183 69 220 14 124)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 32 177 252 142 36 128 169 115 224 151 51 115 67 73 11 18 174 64 101 46 65 128 221 74 229 109 245 33 218 169 227 145 119 124 13 70 111 1 138 245 85 25 3 141 234 211 85 1 114 50 136 43 202 60 205 107 55 85 145 245 181 9 101 56 202 87 120 53 83 7 230 3 20 143 222 49 245 172 255 235 76 104 99 84 26 210 51 222 63 40 30 160 210 53 182 243)
  :der-encode
  #t
  :tests
  '(#(1118
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 34 130 188 56 42 47 77 252 185 92 52 149 215 180 253 89 10 213 32 179 235 107 228 214 236 47 128 196 224 247 13 248 124 75 167 74 9 181 83 235 180 39 181 141 249 213 159 202 2 48 28 37 6 26 32 164 226 161 156 172 73 127 169 199 166 198 55 111 227 104 98 170 119 189 108 158 22 21 188 0 212 84 195 11 190 35 21 127 243 208 11 232 10 0 149 0 225 20)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 74 57 29 121 207 168 43 148 49 35 214 158 226 209 188 14 11 126 30 111 147 198 145 35 191 206 11 212 243 26 94 52 52 6 45 208 225 170 139 136 108 235 163 98 196 214 114 12 122 43 5 67 161 86 241 147 78 2 211 30 129 213 210 120 90 113 213 65 204 126 30 110 97 50 235 238 66 17 31 82 168 68 147 114 96 113 144 86 174 123 16 247 81 96 108 65)
  :der-encode
  #t
  :tests
  '(#(1119
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 34 130 188 56 42 47 77 252 185 92 52 149 215 180 253 89 10 213 32 179 235 107 228 214 236 47 128 196 224 247 13 248 124 75 167 74 9 181 83 235 180 39 181 141 249 213 159 202 2 48 112 148 24 104 130 147 138 134 114 177 37 254 167 30 155 24 221 191 141 161 138 169 222 245 178 120 88 86 240 3 81 83 12 46 248 140 85 255 207 64 47 160 40 2 84 3 132 81)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 54 133 74 218 207 131 206 95 14 68 34 64 109 123 111 125 182 61 115 212 200 146 160 30 151 94 246 238 107 113 169 51 76 157 87 206 111 252 219 26 46 65 116 221 186 121 158 18 125 97 150 114 3 93 180 253 115 229 228 180 234 146 11 116 242 231 15 210 78 188 164 157 34 253 177 30 150 183 134 127 161 131 140 165 186 188 217 221 9 106 184 94 47 151 181 174)
  :der-encode
  #t
  :tests
  '(#(1120
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 34 130 188 56 42 47 77 252 185 92 52 149 215 180 253 89 10 213 32 179 235 107 228 214 236 47 128 196 224 247 13 248 124 75 167 74 9 181 83 235 180 39 181 141 249 213 159 202 2 48 120 158 172 111 249 158 20 107 122 226 95 144 215 160 202 191 54 186 243 45 20 145 110 226 172 238 167 202 220 149 215 34 31 86 229 186 238 109 130 160 51 7 6 75 163 40 86 233)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 128 78 108 113 228 147 183 131 236 211 117 164 237 207 134 199 123 28 45 245 81 187 199 59 237 133 22 228 209 28 229 26 29 208 129 225 154 166 245 28 101 104 24 184 83 150 33 120 88 11 214 178 196 234 188 245 179 116 30 107 125 89 176 231 242 189 219 36 127 95 157 103 81 207 9 227 198 201 209 247 194 124 11 184 210 30 119 168 14 186 218 249 10 248 176 208)
  :der-encode
  #t
  :tests
  '(#(1121
      "extreme value for k"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 34 130 188 56 42 47 77 252 185 92 52 149 215 180 253 89 10 213 32 179 235 107 228 214 236 47 128 196 224 247 13 248 124 75 167 74 9 181 83 235 180 39 181 141 249 213 159 202 2 48 100 220 120 209 18 205 110 214 125 67 35 179 2 101 10 96 110 212 20 21 189 140 252 64 236 116 56 167 14 227 216 104 4 32 229 246 2 174 213 145 163 36 118 12 88 20 6 66)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 44 17 87 114 221 41 134 18 25 122 28 89 223 156 37 168 106 193 111 164 242 122 223 116 188 198 115 187 74 106 75 181 208 181 182 68 112 213 210 110 3 0 146 42 183 35 115 36 66 246 236 32 158 39 206 11 18 125 51 71 69 39 38 67 211 102 107 255 84 146 116 25 118 77 229 35 34 238 22 150 230 32 209 94 14 234 98 254 208 242 14 254 108 145 225 227)
  :der-encode
  #t
  :tests
  '(#(1122
      "extreme value for k and edgecase s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 29 28 100 240 104 207 69 255 162 166 58 129 183 193 63 107 136 71 163 231 126 241 79 227 219 127 202 254 12 189 16 232 232 38 224 52 54 214 70 170 239 135 178 226 71 212 175 30 2 48 46 232 95 128 225 18 207 13 90 116 122 127 112 76 192 159 177 186 123 3 79 28 28 230 95 178 36 206 228 1 97 226 154 104 231 143 206 127 235 176 19 216 16 171 163 1 119 33)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 41 87 120 201 163 190 43 55 52 80 245 125 175 16 222 102 211 36 65 117 10 196 40 159 103 81 255 97 64 92 224 35 127 100 226 138 197 40 26 129 209 63 186 129 168 69 78 88 76 159 57 145 214 21 81 47 175 13 201 16 113 147 177 182 245 205 104 67 86 202 81 80 77 21 193 202 75 160 11 33 199 198 142 180 104 50 34 168 33 30 79 253 86 218 14 6)
  :der-encode
  #t
  :tests
  '(#(1123
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 29 28 100 240 104 207 69 255 162 166 58 129 183 193 63 107 136 71 163 231 126 241 79 227 219 127 202 254 12 189 16 232 232 38 224 52 54 214 70 170 239 135 178 226 71 212 175 30 2 48 20 26 114 18 169 154 88 188 148 123 15 237 121 69 119 31 222 116 125 220 216 194 231 208 114 39 198 161 207 110 78 133 175 227 208 244 125 18 64 112 8 129 43 183 69 220 14 124)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 101 163 64 188 104 243 252 234 212 240 66 119 238 134 117 249 193 123 200 200 132 38 197 186 3 19 184 206 125 165 141 146 202 154 15 250 50 199 238 225 149 133 125 134 11 161 238 190 77 205 91 227 166 119 128 8 179 110 161 157 144 45 147 221 72 143 111 182 93 192 113 149 33 85 59 57 203 60 82 75 18 104 29 46 7 168 239 114 12 220 21 1 28 35 186 157)
  :der-encode
  #t
  :tests
  '(#(1124
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 29 28 100 240 104 207 69 255 162 166 58 129 183 193 63 107 136 71 163 231 126 241 79 227 219 127 202 254 12 189 16 232 232 38 224 52 54 214 70 170 239 135 178 226 71 212 175 30 2 48 28 37 6 26 32 164 226 161 156 172 73 127 169 199 166 198 55 111 227 104 98 170 119 189 108 158 22 21 188 0 212 84 195 11 190 35 21 127 243 208 11 232 10 0 149 0 225 20)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 84 160 57 2 101 107 250 244 214 165 79 243 66 157 159 151 25 187 97 230 202 240 0 225 0 153 43 49 112 14 120 14 15 115 245 22 20 149 74 205 221 202 170 139 35 17 25 91 4 173 59 25 176 30 21 10 57 220 12 250 236 198 73 139 24 19 140 230 18 196 146 121 86 135 164 136 82 38 68 179 221 247 70 44 60 53 155 208 145 183 211 148 105 87 24 121)
  :der-encode
  #t
  :tests
  '(#(1125
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 29 28 100 240 104 207 69 255 162 166 58 129 183 193 63 107 136 71 163 231 126 241 79 227 219 127 202 254 12 189 16 232 232 38 224 52 54 214 70 170 239 135 178 226 71 212 175 30 2 48 112 148 24 104 130 147 138 134 114 177 37 254 167 30 155 24 221 191 141 161 138 169 222 245 178 120 88 86 240 3 81 83 12 46 248 140 85 255 207 64 47 160 40 2 84 3 132 81)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 70 209 13 116 154 71 164 211 242 91 111 40 149 26 17 240 26 84 194 65 57 87 164 119 22 45 171 224 208 141 138 233 182 169 244 75 104 239 52 31 184 32 176 194 76 122 28 14 103 31 241 102 205 53 210 243 204 130 29 88 250 24 227 93 37 230 3 59 158 121 15 206 72 24 249 229 112 146 28 0 52 179 129 204 154 210 84 238 175 27 56 110 81 27 124 137)
  :der-encode
  #t
  :tests
  '(#(1126
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 29 28 100 240 104 207 69 255 162 166 58 129 183 193 63 107 136 71 163 231 126 241 79 227 219 127 202 254 12 189 16 232 232 38 224 52 54 214 70 170 239 135 178 226 71 212 175 30 2 48 120 158 172 111 249 158 20 107 122 226 95 144 215 160 202 191 54 186 243 45 20 145 110 226 172 238 167 202 220 149 215 34 31 86 229 186 238 109 130 160 51 7 6 75 163 40 86 233)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 138 233 45 225 11 36 74 199 240 222 182 177 2 208 117 149 29 140 19 178 150 12 46 152 215 251 66 184 171 233 15 208 122 74 33 184 110 180 199 126 254 154 219 103 37 103 109 23 54 6 63 52 7 199 22 39 172 170 131 190 144 41 199 164 14 138 168 150 203 104 169 194 250 42 170 16 121 3 90 40 49 129 205 63 39 35 178 33 213 168 116 122 211 146 160 249)
  :der-encode
  #t
  :tests
  '(#(1127
      "extreme value for k"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 29 28 100 240 104 207 69 255 162 166 58 129 183 193 63 107 136 71 163 231 126 241 79 227 219 127 202 254 12 189 16 232 232 38 224 52 54 214 70 170 239 135 178 226 71 212 175 30 2 48 100 220 120 209 18 205 110 214 125 67 35 179 2 101 10 96 110 212 20 21 189 140 252 64 236 116 56 167 14 227 216 104 4 32 229 246 2 174 213 145 163 36 118 12 88 20 6 66)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 29 28 100 240 104 207 69 255 162 166 58 129 183 193 63 107 136 71 163 231 126 241 79 227 219 127 202 254 12 189 16 232 232 38 224 52 54 214 70 170 239 135 178 226 71 212 175 30 138 190 29 117 32 249 194 164 92 177 235 142 149 207 213 82 98 183 11 41 254 236 88 100 225 156 5 79 249 145 41 40 14 70 70 33 119 145 129 17 66 130 3 65 38 60 83 21)
  :der-encode
  #t
  :tests
  '(#(1128
      "testing point duplication"
      #vu8(49 50 51 52 48 48)
      #vu8(48 101 2 49 0 249 177 39 240 216 30 188 209 123 123 160 234 19 28 102 13 52 11 5 206 85 124 130 22 14 15 121 61 224 125 56 23 144 35 148 40 113 172 183 0 45 250 253 255 252 141 234 206 2 48 20 26 114 18 169 154 88 188 148 123 15 237 121 69 119 31 222 116 125 220 216 194 231 208 114 39 198 161 207 110 78 133 175 227 208 244 125 18 64 112 8 129 43 183 69 220 14 124)
      #f
      ())
    #(1129
      "testing point duplication"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 31 193 21 20 110 82 29 126 163 63 62 18 142 176 29 176 246 83 220 69 133 44 43 80 48 29 99 155 119 139 19 56 14 81 217 54 101 82 207 32 73 21 102 5 213 122 223 252 2 48 20 26 114 18 169 154 88 188 148 123 15 237 121 69 119 31 222 116 125 220 216 194 231 208 114 39 198 161 207 110 78 133 175 227 208 244 125 18 64 112 8 129 43 183 69 220 14 124)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 29 28 100 240 104 207 69 255 162 166 58 129 183 193 63 107 136 71 163 231 126 241 79 227 219 127 202 254 12 189 16 232 232 38 224 52 54 214 70 170 239 135 178 226 71 212 175 30 1 251 1 13 130 62 170 131 178 171 131 239 187 22 108 140 178 120 101 223 238 103 254 79 49 21 212 201 134 37 231 251 158 141 97 8 24 139 153 96 68 196 252 210 10 203 153 62)
  :der-encode
  #t
  :tests
  '(#(1130
      "testing point duplication"
      #vu8(49 50 51 52 48 48)
      #vu8(48 101 2 49 0 249 177 39 240 216 30 188 209 123 123 160 234 19 28 102 13 52 11 5 206 85 124 130 22 14 15 121 61 224 125 56 23 144 35 148 40 113 172 183 0 45 250 253 255 252 141 234 206 2 48 20 26 114 18 169 154 88 188 148 123 15 237 121 69 119 31 222 116 125 220 216 194 231 208 114 39 198 161 207 110 78 133 175 227 208 244 125 18 64 112 8 129 43 183 69 220 14 124)
      #f
      ())
    #(1131
      "testing point duplication"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 31 193 21 20 110 82 29 126 163 63 62 18 142 176 29 176 246 83 220 69 133 44 43 80 48 29 99 155 119 139 19 56 14 81 217 54 101 82 207 32 73 21 102 5 213 122 223 252 2 48 20 26 114 18 169 154 88 188 148 123 15 237 121 69 119 31 222 116 125 220 216 194 231 208 114 39 198 161 207 110 78 133 175 227 208 244 125 18 64 112 8 129 43 183 69 220 14 124)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 7 49 15 144 169 234 225 73 160 132 2 245 65 148 160 247 180 172 66 123 248 217 189 108 118 129 7 29 196 125 195 98 38 166 211 122 196 109 97 253 96 12 11 241 191 248 118 137 237 17 125 218 107 14 89 49 138 224 16 161 151 162 108 160)
  :der-encode
  #t
  :tests
  '(#(1132
      "k*G has a large x-coordinate"
      #vu8(49 50 51 52 48 48)
      #vu8(48 54 2 17 1 69 81 35 25 80 183 95 196 64 45 161 114 47 201 186 235 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 62)
      #t
      ())
    #(1133
      "r too large"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 252 44 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 62)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 188 151 231 88 94 236 173 72 225 102 131 188 64 145 112 142 26 147 12 104 63 196 112 1 212 179 131 89 79 44 78 34 112 89 137 207 105 218 234 221 78 78 75 129 81 237 136 141 254 194 15 176 23 40 216 157 86 179 243 143 42 233 200 197)
  :der-encode
  #t
  :tests
  '(#(1134
      "r,s are large"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 63 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 62)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 68 173 51 154 251 194 30 154 191 123 96 42 92 165 53 234 55 129 53 182 209 13 129 49 11 221 130 147 209 223 50 82 182 63 247 208 119 71 112 248 254 29 23 34 250 131 172 208 47 67 78 79 193 16 160 204 143 109 221 211 125 86 196 99)
  :der-encode
  #t
  :tests
  '(#(1135
      "r and s^-1 have a large Hamming weight"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 62 154 117 130 136 96 137 198 47 184 64 207 59 131 6 28 209 207 243 174 67 65 128 139 181 189 238 97 145 23 65 119)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 18 96 194 18 44 158 36 78 26 245 21 27 237 224 195 174 35 181 77 124 89 104 129 211 238 186 210 31 55 221 135 140 92 154 12 26 154 222 118 115 122 136 17 189 106 127 146 135 201 120 238 57 106 168 156 17 228 114 41 210 204 181 82 240)
  :der-encode
  #t
  :tests
  '(#(1136
      "r and s^-1 have a large Hamming weight"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 36 35 142 112 180 49 177 166 78 253 249 3 38 105 147 157 75 119 242 73 80 63 198 144 95 235 117 64 222 163 230 210)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 24 119 4 91 226 93 52 161 208 96 15 157 92 0 208 100 90 42 84 55 155 108 238 250 210 230 191 92 42 51 82 206 130 26 83 44 193 117 30 225 211 109 65 195 214 171 78 155 20 62 68 236 70 215 52 120 234 106 121 165 192 229 65 89)
  :der-encode
  #t
  :tests
  '(#(1137
      "small r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 2 1 1)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 69 84 57 252 195 210 222 236 237 222 174 206 96 231 189 23 48 79 54 235 182 2 173 245 162 46 11 143 29 180 106 80 174 195 143 178 186 242 33 233 168 209 136 124 123 246 34 45 209 131 70 52 231 114 99 49 90 246 210 54 9 208 79 119)
  :der-encode
  #t
  :tests
  '(#(1138
      "small r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 2 1 2)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 46 31 70 107 2 76 12 58 206 36 55 222 9 18 127 237 4 183 6 249 75 25 162 27 177 194 172 243 92 236 231 24 4 73 174 53 35 215 37 52 233 100 151 44 253 59 56 175 11 221 217 97 158 90 242 35 228 209 164 15 52 207 159 29)
  :der-encode
  #t
  :tests
  '(#(1139
      "small r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 2 1 3)
      #t
      ())
    #(1140
      "r is larger than n"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 66 2 1 3)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 221 169 93 123 6 152 222 93 45 11 79 0 52 219 227 91 80 249 120 252 197 24 168 74 191 156 153 239 217 106 37 48 90 220 8 214 166 61 190 131 26 185 156 217 20 110 60 76 69 73 42 209 149 33 97 37 66 37 109 106 246 14 120 136)
  :der-encode
  #t
  :tests
  '(#(1141
      "s is larger than n"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 1 1 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 73 23 200)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 2 239 77 109 108 253 90 148 241 215 120 66 38 227 226 166 192 164 54 197 88 57 97 159 56 251 68 114 181 249 238 119 126 180 172 212 238 189 165 205 114 135 95 253 42 47 38 34 156 45 198 180 101 0 145 154 67 44 134 115 159 58 232 102)
  :der-encode
  #t
  :tests
  '(#(1142
      "small r and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 39 2 2 1 1 2 33 0 197 139 22 44 88 177 98 197 139 22 44 88 177 98 197 138 27 36 41 115 133 62 22 219 117 200 161 167 29 164 211 157)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 70 79 79 247 21 114 156 174 80 114 202 59 216 1 211 25 91 103 174 198 94 155 1 170 210 10 41 67 220 188 181 132 177 175 210 157 49 163 154 17 213 112 170 21 151 67 155 59 45 25 113 191 47 26 191 21 67 45 2 7 177 13 29 8)
  :der-encode
  #t
  :tests
  '(#(1143
      "smallish r and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 44 2 7 45 155 77 52 121 82 204 2 33 0 252 188 81 3 208 218 38 116 119 209 121 20 97 207 42 164 75 249 212 49 152 247 149 7 189 135 121 214 154 19 16 142)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 21 127 143 221 243 115 235 95 73 207 207 16 216 184 83 207 145 203 205 125 102 92 53 34 186 125 215 56 221 183 154 76 222 173 241 165 196 72 234 60 159 65 145 168 153 154 191 204 117 122 198 214 69 103 239 7 44 71 254 198 19 68 59 143)
  :der-encode
  #t
  :tests
  '(#(1144
      "100-bit r and small s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 50 2 13 16 51 230 126 55 179 43 68 85 128 191 78 252 2 33 0 144 111 144 111 144 111 144 111 144 111 144 111 144 111 144 110 216 228 38 247 177 150 140 53 162 4 35 106 87 151 35 210)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 9 52 165 55 70 108 7 67 14 44 72 254 185 144 187 25 251 120 206 204 156 238 66 78 164 209 48 41 26 162 55 240 212 249 45 35 180 98 128 75 91 104 197 37 88 192 28 153 150 219 247 39 252 202 187 238 219 150 33 164 0 83 90 250)
  :der-encode
  #t
  :tests
  '(#(1145
      "small r and 100 bit s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 2 1 1 2 32 120 50 102 233 15 67 218 254 92 217 179 176 190 134 222 34 249 222 131 103 125 15 80 113 58 70 142 199 47 207 93 87)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 214 239 32 190 102 200 147 247 65 169 191 144 217 183 70 117 209 194 163 18 150 57 122 203 62 241 116 253 11 48 12 101 74 12 149 71 140 160 3 153 22 45 127 15 45 200 158 253 194 178 138 48 251 171 226 133 133 114 149 164 176 196 226 101)
  :der-encode
  #t
  :tests
  '(#(1146
      "100-bit r and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 49 2 13 6 37 34 187 211 236 190 124 57 233 62 124 38 2 32 120 50 102 233 15 67 218 254 92 217 179 176 190 134 222 34 249 222 131 103 125 15 80 113 58 70 142 199 47 207 93 87)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 183 41 29 20 4 224 192 192 125 171 147 114 24 159 75 213 141 44 234 168 209 94 222 84 77 149 20 84 91 169 238 6 41 201 166 61 94 48 135 105 204 48 236 39 106 65 14 100 100 162 126 234 253 158 89 157 177 15 5 58 79 228 168 41)
  :der-encode
  #t
  :tests
  '(#(1147
      "r and s^-1 are close to n"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 64 193 2 32 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 84 232 228 244 76 229 24 53 105 63 240 202 46 240 18 21 192)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 187 121 246 24 87 247 67 191 161 182 231 17 28 228 9 67 119 37 105 105 228 225 81 89 18 61 149 72 172 195 190 108 31 157 159 136 96 220 255 211 235 54 221 108 49 255 46 114 38 194 0 156 76 148 216 215 210 181 104 107 247 171 214 119)
  :der-encode
  #t
  :tests
  '(#(1148
      "s == 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 37 2 32 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 84 232 228 244 76 229 24 53 105 63 240 202 46 240 18 21 193 2 1 1)
      #t
      ())
    #(1149
      "s == 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 37 2 32 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 84 232 228 244 76 229 24 53 105 63 240 202 46 240 18 21 193 2 1 0)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 213 51 183 137 164 175 137 15 167 168 42 31 174 88 196 4 249 166 42 80 180 154 218 250 179 73 197 19 180 21 8 116 1 180 23 27 128 62 118 179 74 152 97 225 15 123 194 137 160 102 253 1 189 41 248 76 152 122 16 165 251 24 194 212)
  :der-encode
  #t
  :tests
  '(#(1150
      "point at infinity during verify"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 93 87 110 115 87 164 80 29 223 233 47 70 104 27 32 160 2 32 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 84 232 228 244 76 229 24 53 105 63 240 202 46 240 18 21 192)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 58 49 80 121 140 138 246 157 30 110 152 31 58 69 64 43 161 215 50 244 190 131 48 197 22 79 73 225 14 197 85 180 34 27 216 66 188 94 77 151 239 243 113 101 246 14 57 152 164 36 215 42 69 12 249 94 164 119 199 130 135 208 52 58)
  :der-encode
  #t
  :tests
  '(#(1151
      "edge case for signature malleability"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 93 87 110 115 87 164 80 29 223 233 47 70 104 27 32 160 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 93 87 110 115 87 164 80 29 223 233 47 70 104 27 32 160)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 59 55 223 95 179 71 198 154 15 23 216 92 12 124 168 55 54 136 58 130 94 19 20 61 15 207 200 16 30 133 30 128 13 227 192 144 182 202 33 186 84 53 23 51 12 4 177 47 148 140 107 173 241 74 99 171 255 223 78 248 199 83 112 38)
  :der-encode
  #t
  :tests
  '(#(1152
      "edge case for signature malleability"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 93 87 110 115 87 164 80 29 223 233 47 70 104 27 32 160 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 93 87 110 115 87 164 80 29 223 233 47 70 104 27 32 161)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 254 181 22 59 14 206 48 255 62 3 199 213 92 67 128 250 47 168 30 226 192 53 73 66 255 111 8 201 157 12 216 44 232 125 224 94 225 189 160 137 211 228 226 72 250 15 114 17 2 172 255 253 245 14 101 75 226 129 67 57 153 223 137 126)
  :der-encode
  #t
  :tests
  '(#(1153
      "u1 == 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 84 232 228 244 76 229 24 53 105 63 240 202 46 240 18 21 184 2 33 0 187 90 82 244 47 156 146 97 237 67 97 245 148 34 161 227 0 54 231 195 43 39 12 136 7 164 25 254 202 96 80 35)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 35 140 237 0 28 242 43 136 83 224 46 220 137 203 236 165 5 11 167 224 66 167 167 127 147 130 205 65 73 34 137 118 64 104 61 48 148 100 56 64 242 149 137 10 164 193 138 163 155 65 215 125 208 251 59 178 112 14 79 158 194 132 255 194)
  :der-encode
  #t
  :tests
  '(#(1154
      "u1 == n - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 84 232 228 244 76 229 24 53 105 63 240 202 46 240 18 21 184 2 32 68 165 173 11 208 99 109 158 18 188 158 10 107 221 94 27 186 119 245 35 132 33 147 179 184 46 68 142 5 213 241 30)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 150 28 246 72 23 192 108 14 81 179 194 115 108 146 47 222 24 189 140 73 6 252 215 245 239 102 196 103 133 8 243 94 210 197 209 129 104 207 190 112 242 241 35 189 116 25 35 43 185 45 214 145 19 226 148 16 97 136 148 129 197 160 39 191)
  :der-encode
  #t
  :tests
  '(#(1155
      "u2 == 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 84 232 228 244 76 229 24 53 105 63 240 202 46 240 18 21 184 2 32 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 84 232 228 244 76 229 24 53 105 63 240 202 46 240 18 21 184)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 19 104 30 174 22 140 212 234 124 242 226 164 93 5 39 66 209 10 159 100 231 150 134 125 189 203 130 159 224 177 2 136 22 82 135 96 209 119 55 108 9 223 121 222 57 85 124 50 156 193 117 53 23 172 255 232 250 46 194 152 2 107 131 132)
  :der-encode
  #t
  :tests
  '(#(1156
      "u2 == n - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 84 232 228 244 76 229 24 53 105 63 240 202 46 240 18 21 184 2 33 0 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 169 209 201 232 153 202 48 106 210 127 225 148 93 224 36 43 137)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 90 167 171 253 182 180 8 109 84 51 37 229 215 156 110 149 206 66 248 102 210 187 132 144 150 51 160 75 177 170 49 194 145 200 0 136 121 73 5 225 218 51 51 109 135 78 47 145 204 244 92 197 145 133 190 222 93 214 243 247 172 170 225 139)
  :der-encode
  #t
  :tests
  '(#(1157
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 33 0 233 30 27 166 186 137 134 32 164 107 203 81 220 11 139 74 209 220 53 218 216 146 196 85 45 24 71 178 206 68 70 55)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 0 39 119 145 179 5 164 91 43 57 89 11 47 5 211 57 42 108 129 130 206 244 235 84 1 32 224 245 194 6 195 228 100 16 130 51 251 11 140 58 200 146 215 158 248 224 251 249 46 209 51 173 219 69 84 39 1 50 88 77 197 46 239 65)
  :der-encode
  #t
  :tests
  '(#(1158
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 33 0 227 107 240 206 192 109 155 132 29 168 19 50 129 47 116 243 11 186 236 159 32 35 25 32 108 111 11 138 10 64 15 247)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 110 250 9 43 104 222 148 96 240 188 201 25 0 90 95 110 128 225 157 233 137 104 190 60 210 199 112 169 148 155 251 26 199 94 110 80 135 214 85 13 95 155 235 30 121 229 2 147 7 188 37 82 53 226 213 220 153 36 26 195 171 136 108 73)
  :der-encode
  #t
  :tests
  '(#(1159
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 33 0 234 38 181 122 248 132 182 192 110 52 142 254 19 156 30 78 158 201 81 141 96 195 64 246 186 199 210 120 202 8 216 166)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 114 212 161 156 79 157 44 245 132 142 164 4 69 183 13 70 150 181 240 45 99 44 12 101 76 199 215 238 176 198 208 88 232 196 205 153 67 228 89 23 76 122 192 31 167 66 25 142 71 230 193 154 107 219 12 79 108 35 120 49 193 179 249 66)
  :der-encode
  #t
  :tests
  '(#(1160
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 91 29 39 167 105 76 20 98 68 165 173 11 208 99 109 157 158 243 185 251 88 56 84 24 217 201 130 16 80 119 209 183)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 42 142 162 245 13 204 237 12 33 117 117 189 250 124 212 125 28 111 16 0 65 236 14 53 81 39 148 193 190 126 116 2 88 248 193 113 34 237 48 63 218 113 67 235 88 190 222 112 41 91 101 50 102 1 59 11 14 189 63 5 49 55 246 236)
  :der-encode
  #t
  :tests
  '(#(1161
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 33 0 210 122 118 148 193 70 36 74 90 208 189 6 54 217 225 42 190 104 120 151 232 233 153 141 219 212 229 154 120 82 13 15)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 136 222 104 156 233 175 30 148 190 106 32 137 200 168 177 37 63 253 187 108 142 156 134 36 155 162 32 0 26 74 211 184 12 73 152 229 72 66 244 19 185 237 177 130 90 203 182 51 94 129 228 209 132 178 176 28 139 235 220 133 209 242 137 70)
  :der-encode
  #t
  :tests
  '(#(1162
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 33 0 164 244 237 41 130 140 72 148 181 161 122 12 109 179 194 86 194 34 20 73 34 138 146 223 247 215 108 168 32 109 216 221)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 254 162 211 31 112 249 13 95 179 224 14 24 106 196 42 179 193 97 92 238 113 78 11 78 17 49 179 212 216 34 91 247 176 55 161 141 242 172 21 52 63 48 247 64 103 221 242 158 129 125 95 119 248 220 224 87 20 218 89 192 148 240 205 169)
  :der-encode
  #t
  :tests
  '(#(1163
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 105 76 20 98 68 165 173 11 208 99 109 158 18 188 158 9 230 14 104 185 13 11 94 108 93 221 208 203 105 77 135 153)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 114 88 145 30 61 66 51 73 22 100 121 219 224 184 52 26 247 251 208 61 10 126 16 237 204 179 107 108 238 165 163 219 23 172 43 137 146 121 17 40 250 59 150 220 47 189 76 163 191 167 130 239 40 50 252 102 86 148 61 177 142 115 70 176)
  :der-encode
  #t
  :tests
  '(#(1164
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 61 127 72 124 7 191 197 243 8 70 147 138 61 206 246 150 68 71 7 207 150 119 37 74 146 176 108 99 171 134 125 34)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 79 40 70 29 234 100 71 77 107 179 77 20 153 201 125 55 185 233 86 51 223 28 238 234 172 212 80 22 201 139 57 20 200 129 136 16 184 204 6 221 180 14 138 18 97 197 40 250 165 137 69 93 90 109 249 59 119 188 94 14 73 60 116 112)
  :der-encode
  #t
  :tests
  '(#(1165
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 108 118 72 252 15 191 138 6 173 184 184 57 249 123 79 247 168 0 241 27 30 55 197 147 178 97 57 69 153 121 43 164)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 116 242 168 20 251 93 142 202 145 166 155 94 96 113 39 50 179 147 125 227 40 41 190 151 78 215 182 140 92 47 93 102 239 240 240 124 86 249 135 166 87 244 33 150 32 95 88 140 15 29 150 253 138 99 165 242 56 180 143 71 135 136 254 59)
  :der-encode
  #t
  :tests
  '(#(1166
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 33 0 155 227 99 162 134 242 63 99 34 194 5 68 157 50 11 170 212 23 149 62 203 112 246 33 78 144 212 157 125 31 38 168)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 25 91 81 167 204 74 33 184 39 74 112 169 13 231 121 129 76 60 140 163 88 50 130 8 192 154 41 243 54 184 45 106 178 65 107 124 146 255 253 194 156 59 18 130 221 42 119 164 208 77 247 247 69 32 71 57 61 132 153 137 197 206 233 173)
  :der-encode
  #t
  :tests
  '(#(1167
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 41 121 140 92 69 189 245 139 74 123 47 220 44 70 171 74 241 33 140 126 235 159 15 39 168 143 18 103 103 77 227 176)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 98 47 199 71 50 3 75 236 45 223 59 193 109 52 179 209 247 163 39 221 42 140 25 186 180 187 79 227 162 75 88 170 115 107 47 47 174 118 244 223 174 204 144 150 51 59 1 50 141 81 235 63 218 156 146 39 233 13 11 68 153 131 196 240)
  :der-encode
  #t
  :tests
  '(#(1168
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 11 112 242 44 162 187 60 239 173 202 26 87 17 250 58 89 244 105 83 133 235 90 237 243 73 93 11 109 0 248 253 133)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 31 127 133 202 242 215 85 14 122 249 182 80 35 235 180 220 227 69 3 17 105 35 9 219 38 153 105 184 52 182 17 199 8 39 244 91 120 2 14 203 186 244 132 253 213 191 170 230 135 15 17 132 194 21 129 186 246 239 130 189 123 83 15 147)
  :der-encode
  #t
  :tests
  '(#(1169
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 22 225 228 89 69 118 121 223 91 148 52 174 35 244 116 179 232 210 167 11 214 181 219 230 146 186 22 218 1 241 251 10)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 73 193 151 220 128 173 29 164 122 67 66 185 56 147 232 225 251 11 185 79 195 58 131 231 131 192 11 36 199 129 55 122 239 194 13 169 43 172 118 41 81 247 36 116 190 204 115 77 76 194 43 168 27 137 94 40 47 218 196 223 122 240 243 125)
  :der-encode
  #t
  :tests
  '(#(1170
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 34 82 214 133 232 49 182 207 9 94 79 5 53 238 175 13 221 59 250 145 194 16 201 217 220 23 34 71 2 234 248 143)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 216 203 104 81 123 97 106 86 64 10 163 134 134 53 229 75 111 105 149 152 162 246 22 119 87 101 73 128 186 246 172 190 126 200 207 68 156 132 154 160 52 97 163 14 250 218 65 69 60 87 198 230 251 201 59 188 111 164 154 218 109 192 85 92)
  :der-encode
  #t
  :tests
  '(#(1171
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 117 19 90 189 124 66 91 96 55 26 71 127 9 206 15 39 79 100 168 198 176 97 160 123 93 99 233 60 101 4 108 83)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 3 7 19 251 99 242 170 111 226 202 223 27 32 239 194 89 199 116 69 218 250 135 218 195 152 184 64 101 202 52 125 243 178 39 129 141 225 163 155 88 156 176 113 216 62 83 23 204 205 194 51 142 81 227 18 254 49 216 220 52 164 128 23 80)
  :der-encode
  #t
  :tests
  '(#(1172
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 33 0 213 85 85 85 85 85 85 85 85 85 85 85 85 85 85 84 124 116 147 68 116 219 21 125 42 140 63 8 138 206 214 42)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 186 187 54 119 176 149 88 2 216 233 41 164 19 85 100 14 175 30 161 53 63 138 119 19 49 196 148 110 52 128 175 167 37 47 25 108 135 237 61 42 89 211 177 181 89 19 127 237 0 19 254 206 252 25 251 90 146 104 43 155 202 81 185 80)
  :der-encode
  #t
  :tests
  '(#(1173
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 33 0 193 119 124 136 83 147 142 83 98 19 192 36 100 169 54 0 11 161 226 28 15 198 32 117 212 108 98 78 35 181 47 49)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 26 171 32 24 121 52 113 17 26 138 14 155 20 63 222 2 252 149 146 7 150 211 166 61 227 41 180 36 57 111 186 96 187 228 19 7 5 23 71 146 68 27 49 141 58 163 29 254 133 119 130 30 155 68 110 197 115 210 114 224 54 196 235 233)
  :der-encode
  #t
  :tests
  '(#(1174
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 48 187 183 148 219 88 131 99 180 6 121 246 193 130 165 13 60 233 103 154 205 211 255 190 54 215 129 61 172 189 200 24)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 140 176 185 9 73 156 131 234 128 108 216 133 177 221 70 122 1 25 240 106 136 160 39 110 176 207 218 39 69 53 168 255 71 181 66 136 51 188 63 44 139 249 217 4 17 88 207 51 113 138 105 150 28 208 23 41 188 0 17 209 229 134 171 117)
  :der-encode
  #t
  :tests
  '(#(1175
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 44 55 253 153 86 34 196 251 127 255 255 255 255 255 255 255 199 206 231 69 17 12 180 90 181 88 237 124 144 193 90 47)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 143 3 207 26 66 39 43 177 83 39 35 9 63 114 230 254 234 200 94 23 0 233 251 233 166 162 221 100 45 116 191 93 59 137 167 24 157 173 140 247 95 194 47 111 21 138 162 127 156 44 160 13 172 167 133 190 51 88 242 189 163 134 44 160)
  :der-encode
  #t
  :tests
  '(#(1176
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 127 217 149 98 44 79 183 255 255 255 255 255 255 255 255 255 93 136 63 250 181 179 38 82 204 220 170 41 15 204 185 125)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 68 222 59 156 122 87 168 201 232 32 149 39 83 66 30 125 152 123 179 215 159 113 240 19 128 92 137 126 1 143 138 206 162 70 7 88 200 249 141 63 220 225 33 169 67 101 158 55 44 50 111 255 46 95 194 174 127 163 247 157 170 225 60 18)
  :der-encode
  #t
  :tests
  '(#(1177
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 33 0 255 179 42 196 88 159 111 255 255 255 255 255 255 255 255 254 187 16 127 245 107 102 76 165 153 185 84 82 31 153 114 250)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 111 184 178 180 142 51 3 18 104 173 106 81 116 132 220 136 57 234 144 246 102 158 160 199 172 50 51 226 172 49 57 74 10 200 187 231 247 60 47 244 223 153 120 114 122 193 223 194 253 88 100 125 32 243 31 153 16 83 22 182 70 113 242 4)
  :der-encode
  #t
  :tests
  '(#(1178
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 86 34 196 251 127 255 255 255 255 255 255 255 255 255 255 255 146 138 143 28 122 199 190 193 128 139 159 97 192 30 195 39)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 190 167 17 34 160 72 105 62 144 95 246 2 179 207 157 209 138 246 155 159 201 216 67 29 43 29 210 107 148 44 149 230 244 60 123 139 149 235 98 8 44 18 219 157 189 167 254 56 228 92 190 74 72 134 144 127 184 27 219 12 94 169 36 108)
  :der-encode
  #t
  :tests
  '(#(1179
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 68 16 65 4 16 65 4 16 65 4 16 65 4 16 65 3 184 120 83 253 59 125 63 142 23 81 37 180 56 47 37 237)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 218 145 140 115 27 160 106 32 203 148 239 51 183 120 233 129 164 4 163 5 241 148 31 227 54 102 180 91 3 53 49 86 226 187 38 148 245 117 180 81 131 190 120 229 201 181 33 11 243 191 72 143 212 200 41 69 22 216 149 114 202 79 83 145)
  :der-encode
  #t
  :tests
  '(#(1180
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 39 57 206 115 156 231 57 206 115 156 231 57 206 115 156 231 5 86 2 152 209 242 240 141 196 25 172 39 58 91 84 217)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 48 7 233 44 57 55 218 222 121 100 223 163 91 14 255 3 31 126 176 42 237 10 3 20 65 17 6 205 235 112 254 61 90 117 70 252 5 82 153 123 32 227 214 244 19 231 94 44 182 110 17 99 34 105 113 20 183 155 172 115 75 252 77 197)
  :der-encode
  #t
  :tests
  '(#(1181
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 33 0 183 119 119 119 119 119 119 119 119 119 119 119 119 119 119 118 136 230 161 254 128 138 151 163 72 103 18 34 255 22 184 99)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 96 231 52 239 86 36 211 203 240 221 211 117 1 27 214 99 214 214 174 188 100 78 181 153 253 249 141 189 205 24 206 155 210 217 11 58 195 31 19 154 248 50 204 207 108 203 187 44 110 161 31 169 115 112 220 153 6 218 71 77 125 138 117 103)
  :der-encode
  #t
  :tests
  '(#(1182
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 100 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 6 221 58 25 184 213 251 135 82 53 150 60 89 59 210 211)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 133 169 0 233 120 88 246 147 192 183 223 162 97 227 128 218 214 234 4 109 31 101 221 238 237 213 247 216 175 11 163 55 105 116 77 21 173 212 246 192 188 59 13 162 174 201 59 52 203 140 101 249 52 13 223 116 231 176 0 158 238 204 206 60)
  :der-encode
  #t
  :tests
  '(#(1183
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 33 0 149 85 85 85 85 85 85 85 85 85 85 85 85 85 85 84 124 116 147 68 116 219 21 125 42 140 63 8 138 206 214 44)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 56 6 111 117 216 142 252 76 147 222 54 244 158 3 123 35 76 193 139 29 229 96 135 80 166 44 171 3 69 64 16 70 163 232 75 237 140 252 184 25 239 77 85 4 68 242 206 75 101 23 102 182 158 46 41 1 248 136 54 255 144 3 79 237)
  :der-encode
  #t
  :tests
  '(#(1184
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 42 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 62 58 73 162 58 109 138 190 149 70 31 132 69 103 107 23)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 152 246 129 119 220 149 193 180 203 250 82 69 72 140 165 35 167 213 98 148 112 208 53 214 33 164 67 199 47 57 170 191 163 61 41 84 111 161 198 72 242 199 213 204 247 12 241 206 74 183 155 93 177 172 5 157 190 205 6 141 189 255 27 137)
  :der-encode
  #t
  :tests
  '(#(1185
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 33 0 191 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 186 174 220 230 175 72 160 59 191 210 94 140 208 54 65 67)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 92 43 191 162 60 155 154 208 127 3 138 168 155 73 48 191 38 125 148 1 228 37 93 233 232 218 10 80 120 236 130 119 227 232 130 163 29 94 106 55 158 7 147 152 60 205 237 57 185 92 67 83 171 47 240 30 165 54 155 164 123 12 49 145)
  :der-encode
  #t
  :tests
  '(#(1186
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 252 2 32 24 93 219 202 109 172 65 177 218 3 60 251 96 193 82 134 158 116 179 205 102 233 255 223 27 107 192 158 214 94 228 12)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 46 167 19 52 50 51 156 105 210 127 155 38 114 129 189 45 221 95 25 214 51 141 64 10 5 205 54 71 177 87 163 133 53 71 128 130 152 68 142 219 94 112 26 222 132 205 95 177 172 149 103 186 94 143 182 138 107 147 62 196 181 204 132 204)
  :der-encode
  #t
  :tests
  '(#(1187
      "point duplication during verification"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 50 176 209 13 141 14 4 188 141 77 6 77 39 6 153 232 124 255 201 180 156 92 32 115 14 28 38 246 16 93 220 218 2 33 0 214 18 194 152 76 42 250 65 106 167 242 136 42 72 109 74 132 38 203 108 252 145 237 91 115 114 120 249 252 168 190 104)
      #t
      ("PointDuplication"))))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 46 167 19 52 50 51 156 105 210 127 155 38 114 129 189 45 221 95 25 214 51 141 64 10 5 205 54 71 177 87 163 133 202 184 127 125 103 187 113 36 161 143 229 33 123 50 160 78 83 106 152 69 161 112 73 117 148 108 193 58 74 51 119 99)
  :der-encode
  #t
  :tests
  '(#(1188
      "duplication bug"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 50 176 209 13 141 14 4 188 141 77 6 77 39 6 153 232 124 255 201 180 156 92 32 115 14 28 38 246 16 93 220 218 2 33 0 214 18 194 152 76 42 250 65 106 167 242 136 42 72 109 74 132 38 203 108 252 145 237 91 115 114 120 249 252 168 190 104)
      #f
      ("PointDuplication"))))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 138 162 198 79 169 198 67 117 99 171 251 203 208 11 32 72 212 140 24 193 82 162 166 244 144 54 222 118 71 235 232 46 28 230 67 135 153 92 104 160 96 250 59 192 57 155 5 204 6 238 199 213 152 247 80 65 164 145 126 105 43 127 81 255)
  :der-encode
  #t
  :tests
  '(#(1189
      "comparison with point at infinity "
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 84 232 228 244 76 229 24 53 105 63 240 202 46 240 18 21 192 2 32 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 50 242 34 248 250 239 219 83 63 38 93 70 28 41 164 115 115)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 57 20 39 255 126 231 128 19 193 74 236 125 150 168 160 98 32 146 152 167 131 131 94 148 253 101 73 213 2 255 247 31 221 102 36 236 52 58 217 252 244 217 135 33 129 229 159 132 47 155 164 204 202 224 154 108 9 114 251 106 198 180 198 189)
  :der-encode
  #t
  :tests
  '(#(1190
      "extreme value for k and edgecase s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 198 4 127 148 65 237 125 109 48 69 64 110 149 192 124 216 92 119 142 75 140 239 60 167 171 172 9 185 92 112 158 229 2 32 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 84 232 228 244 76 229 24 53 105 63 240 202 46 240 18 21 192)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 231 98 184 162 25 180 241 128 33 156 199 169 5 146 69 228 150 27 209 145 192 56 153 120 156 122 52 184 158 140 19 142 193 83 62 240 65 155 183 55 110 11 253 233 49 157 16 160 105 104 121 29 158 160 238 217 193 206 99 69 174 217 117 158)
  :der-encode
  #t
  :tests
  '(#(1191
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 198 4 127 148 65 237 125 109 48 69 64 110 149 192 124 216 92 119 142 75 140 239 60 167 171 172 9 185 92 112 158 229 2 33 0 182 219 109 182 219 109 182 219 109 182 219 109 182 219 109 181 243 15 48 18 125 51 224 42 173 150 67 137 39 2 46 156)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 154 237 176 210 129 219 22 78 19 0 0 197 105 127 174 15 48 94 248 72 190 111 255 180 58 197 147 251 185 80 233 82 250 111 99 51 89 189 205 130 181 107 11 159 150 91 3 119 137 212 107 154 129 65 183 145 178 174 250 113 63 150 193 117)
  :der-encode
  #t
  :tests
  '(#(1192
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 198 4 127 148 65 237 125 109 48 69 64 110 149 192 124 216 92 119 142 75 140 239 60 167 171 172 9 185 92 112 158 229 2 33 0 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 152 214 104 234 240 207 145 249 189 115 23 210 84 124 237 90 90)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 138 212 69 219 98 129 98 96 228 230 135 253 24 132 228 139 159 192 99 109 3 21 71 214 51 21 231 146 225 155 250 238 29 230 79 153 213 241 205 139 110 201 203 15 120 122 101 74 232 105 147 186 61 177 0 142 244 60 255 6 132 203 34 189)
  :der-encode
  #t
  :tests
  '(#(1193
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 198 4 127 148 65 237 125 109 48 69 64 110 149 192 124 216 92 119 142 75 140 239 60 167 171 172 9 185 92 112 158 229 2 32 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 101 228 69 241 245 223 182 166 126 76 186 140 56 83 72 230 231)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 31 87 153 201 91 232 144 99 178 79 38 228 12 185 40 193 168 104 167 111 176 9 70 7 232 4 61 180 9 201 28 50 231 87 36 232 19 164 25 30 58 131 144 7 240 142 46 137 115 136 176 109 74 0 222 109 230 14 83 109 145 250 181 102)
  :der-encode
  #t
  :tests
  '(#(1194
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 198 4 127 148 65 237 125 109 48 69 64 110 149 192 124 216 92 119 142 75 140 239 60 167 171 172 9 185 92 112 158 229 2 32 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 72 199 159 172 212 50 20 192 17 18 60 27 3 169 52 18 165)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 163 51 26 78 27 66 35 236 44 2 126 221 72 44 146 138 20 237 53 141 147 241 212 33 125 57 171 246 159 203 92 204 40 214 132 210 170 171 205 99 131 119 92 170 98 57 222 38 212 198 147 123 182 3 236 180 25 96 130 244 207 253 80 157)
  :der-encode
  #t
  :tests
  '(#(1195
      "extreme value for k"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 198 4 127 148 65 237 125 109 48 69 64 110 149 192 124 216 92 119 142 75 140 239 60 167 171 172 9 185 92 112 158 229 2 32 14 177 14 90 185 95 47 39 83 72 216 42 210 228 215 148 156 129 147 128 13 140 156 117 223 88 227 67 240 235 186 123)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 63 57 82 25 151 116 199 207 57 179 139 102 203 16 66 166 38 13 134 128 128 56 69 228 212 51 173 186 59 178 72 24 94 164 149 182 140 188 126 212 23 62 230 60 144 66 220 80 38 37 199 235 126 33 251 2 202 154 145 20 224 163 161 141)
  :der-encode
  #t
  :tests
  '(#(1196
      "extreme value for k and edgecase s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 121 190 102 126 249 220 187 172 85 160 98 149 206 135 11 7 2 155 252 219 45 206 40 217 89 242 129 91 22 248 23 152 2 32 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 84 232 228 244 76 229 24 53 105 63 240 202 46 240 18 21 192)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 205 251 140 15 66 46 20 78 19 124 36 18 200 108 23 31 95 227 250 63 91 187 84 78 144 118 40 143 60 237 120 110 5 79 208 114 27 119 193 28 121 190 172 179 201 66 17 176 161 155 218 8 101 46 254 175 146 81 58 59 10 22 54 152)
  :der-encode
  #t
  :tests
  '(#(1197
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 121 190 102 126 249 220 187 172 85 160 98 149 206 135 11 7 2 155 252 219 45 206 40 217 89 242 129 91 22 248 23 152 2 33 0 182 219 109 182 219 109 182 219 109 182 219 109 182 219 109 181 243 15 48 18 125 51 224 42 173 150 67 137 39 2 46 156)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 115 89 138 106 28 104 39 143 166 191 208 206 64 100 230 130 53 188 28 15 107 32 169 40 16 139 227 54 115 15 135 227 203 174 97 37 25 181 3 46 204 133 174 216 17 39 26 149 254 121 57 213 211 70 1 64 186 49 143 77 20 171 163 29)
  :der-encode
  #t
  :tests
  '(#(1198
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 121 190 102 126 249 220 187 172 85 160 98 149 206 135 11 7 2 155 252 219 45 206 40 217 89 242 129 91 22 248 23 152 2 33 0 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 152 214 104 234 240 207 145 249 189 115 23 210 84 124 237 90 90)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 88 222 189 154 126 226 201 213 145 50 71 138 84 64 174 77 93 126 212 55 48 131 105 249 46 168 108 130 24 63 16 161 103 115 231 111 94 219 244 218 14 79 27 223 250 192 245 114 87 225 223 164 101 132 41 49 48 154 36 36 95 218 106 93)
  :der-encode
  #t
  :tests
  '(#(1199
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 121 190 102 126 249 220 187 172 85 160 98 149 206 135 11 7 2 155 252 219 45 206 40 217 89 242 129 91 22 248 23 152 2 32 102 102 102 102 102 102 102 102 102 102 102 102 102 102 102 101 228 69 241 245 223 182 166 126 76 186 140 56 83 72 230 231)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 139 144 77 228 121 103 52 12 95 140 53 114 167 32 146 78 247 87 134 55 254 171 25 73 172 178 65 165 166 172 63 91 149 9 4 73 111 152 36 177 214 63 51 19 186 226 27 137 250 232 154 253 252 129 27 94 206 3 253 90 163 1 134 79)
  :der-encode
  #t
  :tests
  '(#(1200
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 121 190 102 126 249 220 187 172 85 160 98 149 206 135 11 7 2 155 252 219 45 206 40 217 89 242 129 91 22 248 23 152 2 32 73 36 146 73 36 146 73 36 146 73 36 146 73 36 146 72 199 159 172 212 50 20 192 17 18 60 27 3 169 52 18 165)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 244 137 43 109 82 92 119 30 3 95 42 37 39 8 243 120 78 72 35 134 4 180 249 77 197 110 170 30 84 109 148 26 52 107 26 160 188 230 139 28 80 229 181 47 80 159 181 82 46 92 37 224 40 188 143 134 52 2 237 183 188 173 139 27)
  :der-encode
  #t
  :tests
  '(#(1201
      "extreme value for k"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 121 190 102 126 249 220 187 172 85 160 98 149 206 135 11 7 2 155 252 219 45 206 40 217 89 242 129 91 22 248 23 152 2 32 14 177 14 90 185 95 47 39 83 72 216 42 210 228 215 148 156 129 147 128 13 140 156 117 223 88 227 67 240 235 186 123)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 121 190 102 126 249 220 187 172 85 160 98 149 206 135 11 7 2 155 252 219 45 206 40 217 89 242 129 91 22 248 23 152 72 58 218 119 38 163 196 101 93 164 251 252 14 17 8 168 253 23 180 72 166 133 84 25 156 71 208 143 251 16 212 184)
  :der-encode
  #t
  :tests
  '(#(1202
      "testing point duplication"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 187 90 82 244 47 156 146 97 237 67 97 245 148 34 161 227 0 54 231 195 43 39 12 136 7 164 25 254 202 96 80 35 2 32 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 99 207 214 106 25 10 96 8 137 30 13 129 212 154 9 82)
      #f
      ())
    #(1203
      "testing point duplication"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 68 165 173 11 208 99 109 158 18 188 158 10 107 221 94 27 186 119 245 35 132 33 147 179 184 46 68 142 5 213 241 30 2 32 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 99 207 214 106 25 10 96 8 137 30 13 129 212 154 9 82)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 121 190 102 126 249 220 187 172 85 160 98 149 206 135 11 7 2 155 252 219 45 206 40 217 89 242 129 91 22 248 23 152 183 197 37 136 217 92 59 154 162 91 4 3 241 238 247 87 2 232 75 183 89 122 171 230 99 184 47 111 4 239 39 119)
  :der-encode
  #t
  :tests
  '(#(1204
      "testing point duplication"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 187 90 82 244 47 156 146 97 237 67 97 245 148 34 161 227 0 54 231 195 43 39 12 136 7 164 25 254 202 96 80 35 2 32 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 99 207 214 106 25 10 96 8 137 30 13 129 212 154 9 82)
      #f
      ())
    #(1205
      "testing point duplication"
      #vu8(49 50 51 52 48 48)
      #vu8(48 68 2 32 68 165 173 11 208 99 109 158 18 188 158 10 107 221 94 27 186 119 245 35 132 33 147 179 184 46 68 142 5 213 241 30 2 32 36 146 73 36 146 73 36 146 73 36 146 73 36 146 73 36 99 207 214 106 25 10 96 8 137 30 13 129 212 154 9 82)
      #f
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 76 36 102 112 101 138 29 65 245 215 123 206 36 108 190 56 106 194 40 72 226 105 185 212 205 103 196 102 221 217 71 21 61 57 178 212 37 51 164 96 222 242 104 128 64 140 175 45 211 221 72 254 136 140 209 118)
  :der-encode
  #t
  :tests
  '(#(1206
      "pseudorandom signature"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 29 0 178 151 12 222 194 156 112 41 74 24 187 196 153 133 239 163 58 204 10 245 9 195 38 163 151 122 53 232 2 28 12 234 62 216 235 170 246 238 106 239 96 73 162 60 188 57 246 31 207 143 198 190 75 171 19 56 85 121)
      #t
      ())
    #(1207
      "pseudorandom signature"
      #vu8(84 101 115 116)
      #vu8(48 61 2 29 0 212 138 183 33 90 37 128 33 50 169 176 203 149 73 63 145 28 150 91 27 37 24 205 170 54 37 65 123 2 28 30 73 188 130 85 118 197 67 97 64 202 168 163 51 45 27 178 167 69 246 162 46 243 232 0 24 88 29)
      #t
      ())
    #(1208
      "pseudorandom signature"
      #vu8()
      #vu8(48 61 2 28 3 100 231 217 104 50 97 74 128 33 110 115 12 53 53 52 212 191 253 44 38 100 156 11 75 14 38 40 2 29 0 143 64 6 75 65 47 227 140 91 169 207 102 78 97 114 237 72 230 231 159 15 229 227 26 84 152 93 252)
      #t
      ())
    #(1209
      "pseudorandom signature"
      #vu8(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      #vu8(48 61 2 28 126 123 14 183 218 140 104 167 7 43 17 64 78 233 90 92 64 127 191 227 214 150 70 128 46 40 174 119 2 29 0 212 9 162 246 187 170 229 155 182 15 192 160 146 177 47 164 230 125 200 208 136 207 25 168 51 50 47 214)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 4 170 236 115 99 87 38 242 19 251 138 158 100 218 59 134 50 228 20 149 169 68 208 4 91 82 46 186 114 64 250 213 135 217 49 87 152 170 163 165 186 1 119 87 135 206 208 94 170 247 180 224 159 200 29 109 26 165 70 232 54 93 82 93)
  :der-encode
  #t
  :tests
  '(#(1210
      "pseudorandom signature"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 168 234 21 12 184 1 37 215 56 28 76 31 29 168 233 222 39 17 249 145 112 96 64 106 115 215 144 69 25 229 19 136 2 33 0 243 171 159 166 139 212 121 115 167 59 45 64 72 12 43 165 12 34 201 215 110 194 23 37 114 136 41 50 133 68 155 134)
      #t
      ())
    #(1211
      "pseudorandom signature"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 48 231 130 249 100 178 226 255 6 90 5 27 199 173 194 6 21 216 196 58 19 101 113 60 136 38 136 34 194 83 188 206 2 32 91 22 223 101 42 161 236 178 220 139 70 197 21 249 96 78 46 132 202 207 167 198 238 195 4 40 210 211 244 224 142 213)
      #t
      ())
    #(1212
      "pseudorandom signature"
      #vu8()
      #vu8(48 69 2 33 0 178 146 166 25 51 159 110 86 122 48 92 149 28 13 203 204 66 209 110 71 242 25 249 233 142 118 224 157 135 112 179 74 2 32 1 119 230 4 146 197 168 36 47 118 240 123 254 54 97 189 229 158 194 161 124 229 189 45 171 42 190 189 248 154 98 226)
      #t
      ())
    #(1213
      "pseudorandom signature"
      #vu8(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      #vu8(48 69 2 33 0 152 110 101 147 62 242 237 78 229 170 218 19 159 82 183 5 57 170 246 63 0 169 31 41 198 145 120 73 13 87 251 113 2 32 61 175 237 251 141 166 24 157 55 35 8 203 241 72 155 187 218 191 12 2 23 209 192 255 15 112 26 170 122 105 75 156)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 41 189 183 109 95 167 65 191 215 2 51 203 58 102 204 125 68 190 179 176 102 61 146 168 19 102 80 71 139 206 251 97 239 24 46 21 90 84 52 90 94 142 94 136 240 100 229 188 154 82 90 183 247 100 218 211 218 225 70 140 43 65 159 59 98 185 186 145 125 94 140 79 177 236 71 64 74 63 199 100 116 178 113 48 129 190 157 180 192 14 4 58 218 159 196 163)
  :der-encode
  #t
  :tests
  '(#(1214
      "pseudorandom signature"
      #vu8(49 50 51 52 48 48)
      #vu8(48 101 2 48 35 69 3 252 202 87 129 33 152 109 150 190 7 251 200 218 93 137 78 216 88 140 109 188 219 233 116 180 184 19 178 28 82 210 10 137 40 242 226 253 172 20 112 91 7 5 73 140 2 49 0 205 123 155 118 107 151 181 61 26 128 252 11 118 10 241 106 17 191 74 89 199 195 103 198 199 39 93 251 110 24 168 128 145 238 211 115 75 245 207 65 179 220 111 236 214 211 186 175)
      #t
      ())
    #(1215
      "pseudorandom signature"
      #vu8(84 101 115 116)
      #vu8(48 102 2 49 0 153 200 238 83 16 101 63 107 182 245 64 20 110 220 1 92 206 60 17 91 243 8 139 225 244 32 89 48 176 129 132 190 136 104 216 184 50 15 14 204 96 243 177 188 205 65 11 50 2 49 0 202 73 185 244 253 167 21 213 34 189 14 201 183 103 239 109 125 11 52 13 58 169 252 172 103 88 116 187 61 171 199 184 224 195 57 35 134 11 148 203 0 17 91 16 172 80 86 241)
      #t
      ())
    #(1216
      "pseudorandom signature"
      #vu8()
      #vu8(48 100 2 48 50 64 18 73 113 78 144 145 240 90 94 16 157 92 18 22 253 192 94 152 97 66 97 170 13 189 158 156 212 65 93 238 41 35 138 251 211 177 3 193 228 14 229 201 20 74 238 15 2 48 67 38 117 111 178 196 253 114 99 96 221 100 121 181 132 148 120 199 169 208 84 168 51 165 140 22 49 195 59 99 195 68 19 54 221 242 199 254 14 209 41 170 230 212 221 254 183 83)
      #t
      ())
    #(1217
      "pseudorandom signature"
      #vu8(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      #vu8(48 101 2 48 92 173 154 225 86 95 37 136 248 109 130 28 44 193 180 208 253 248 116 51 19 38 86 143 91 14 19 14 78 12 14 196 151 248 245 245 100 33 43 210 162 110 203 120 44 240 161 141 2 49 0 191 46 157 9 128 251 176 6 150 103 62 127 187 3 225 248 84 185 215 89 107 117 154 23 191 110 110 103 169 94 166 193 102 79 130 220 68 154 229 234 119 154 189 153 199 142 104 64)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 1 42 144 139 252 91 112 225 123 223 174 116 41 73 148 128 139 242 164 45 171 89 175 139 5 35 160 38 214 64 162 163 214 211 68 82 11 98 23 126 44 250 51 156 164 47 176 136 62 196 37 144 79 189 162 131 58 59 91 10 154 0 129 19 101 216 1 35 51 213 50 248 248 235 26 98 60 55 138 54 148 101 17 146 187 218 131 62 59 141 123 143 144 178 191 201 176 69 248 165 94 27 106 95 225 81 44 64 12 75 201 200 111 215 198 153 214 66 245 206 233 187 130 124 139 10 188 13 160 28 239 30)
  :der-encode
  #t
  :tests
  '(#(1218
      "pseudorandom signature"
      #vu8(49 50 51 52 48 48)
      #vu8(48 129 136 2 66 1 65 65 228 217 74 88 193 231 71 203 217 238 102 112 164 30 172 60 38 251 77 179 36 142 69 213 131 23 144 118 230 177 154 142 32 3 101 122 16 143 145 249 161 3 21 126 223 249 179 125 242 180 54 167 125 193 18 146 125 144 122 201 186 37 135 2 66 1 8 175 169 27 52 189 144 76 104 4 113 233 67 175 51 111 185 12 95 178 185 20 1 165 140 155 31 70 123 248 26 248 4 153 101 221 139 69 241 46 21 47 79 127 211 120 14 52 146 243 30 210 104 13 71 119 251 230 85 254 119 154 216 151 171)
      #t
      ())
    #(1219
      "pseudorandom signature"
      #vu8(84 101 115 116)
      #vu8(48 129 136 2 66 1 178 87 228 111 74 159 203 160 48 18 251 238 164 205 59 178 226 15 215 221 78 28 237 112 132 5 51 10 135 89 116 7 165 135 8 97 231 28 58 21 124 2 30 180 190 185 136 31 206 156 63 69 143 60 217 219 217 78 66 44 240 122 117 1 46 2 66 1 181 95 1 189 23 229 166 173 125 40 191 191 117 96 222 84 143 150 202 82 104 61 18 236 107 163 71 230 243 193 196 195 182 70 60 115 189 38 57 1 77 229 219 20 67 241 129 214 32 212 46 111 105 181 96 243 119 50 175 131 166 162 239 33 25)
      #t
      ())
    #(1220
      "pseudorandom signature"
      #vu8()
      #vu8(48 129 136 2 66 1 98 93 97 21 9 42 142 46 226 27 159 138 66 90 167 56 20 222 200 178 51 94 134 21 10 180 34 159 90 52 33 210 230 37 109 99 44 122 67 101 161 238 1 221 42 147 105 33 187 180 85 26 81 45 29 75 90 86 195 20 228 160 37 52 197 2 66 1 183 146 210 63 38 73 134 37 149 69 16 85 119 123 218 27 2 220 108 200 254 242 50 49 228 75 146 27 22 21 92 212 34 87 68 29 117 167 144 55 30 145 129 159 10 155 31 208 235 208 44 144 181 183 116 82 119 70 237 155 254 116 61 190 47)
      #t
      ())
    #(1221
      "pseudorandom signature"
      #vu8(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      #vu8(48 129 135 2 65 8 19 93 63 26 233 226 111 186 130 86 67 237 138 41 214 61 120 67 114 14 147 86 106 160 157 178 189 245 170 166 154 251 204 12 81 229 41 92 41 143 48 91 167 184 112 240 168 91 181 105 156 223 64 118 74 171 89 65 143 119 198 255 180 82 2 66 1 29 52 82 86 136 127 179 81 245 112 9 97 167 212 117 114 224 214 105 5 108 177 213 97 147 69 192 201 135 243 51 28 47 226 198 223 132 138 92 97 4 34 222 253 98 18 182 67 70 22 26 168 113 174 85 177 254 74 221 95 104 131 110 177 129)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 120 44 142 209 126 59 42 120 59 84 100 243 59 9 101 42 113 198 120 224 94 197 30 132 226 188 252 102 58 61 233 99 175 154 203 66 128 184 199 247 196 47 78 249 171 166 36 94 193 236 23 18 253 56 160 250 150 65 141 140 214 170 97 82)
  :der-encode
  #t
  :tests
  '(#(1222
      "pseudorandom signature"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 33 0 208 53 238 31 23 253 176 178 104 27 22 62 51 195 89 147 38 89 153 10 247 125 202 99 32 18 179 11 39 160 87 179 2 32 25 57 217 243 178 133 139 193 62 52 116 203 80 230 168 43 228 79 170 113 148 15 135 108 28 186 76 62 152 146 2 182)
      #t
      ())
    #(1223
      "pseudorandom signature"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 36 129 58 90 239 244 88 72 38 167 46 60 224 48 255 57 18 75 69 108 141 177 21 116 171 68 233 99 79 43 229 69 2 32 12 80 201 20 224 75 254 60 135 239 141 253 163 53 104 111 170 121 149 145 20 28 155 141 239 57 140 94 234 225 7 197)
      #t
      ())
    #(1224
      "pseudorandom signature"
      #vu8()
      #vu8(48 70 2 33 0 248 10 228 249 108 219 201 216 83 248 61 71 170 226 37 191 64 125 81 197 107 119 118 205 103 208 220 25 93 153 169 220 2 33 0 179 3 226 107 225 247 52 101 49 82 33 240 179 49 82 136 7 161 169 182 235 6 142 222 110 235 234 170 73 175 138 54)
      #t
      ())
    #(1225
      "pseudorandom signature"
      #vu8(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      #vu8(48 68 2 32 79 5 63 86 58 211 75 116 253 140 153 52 206 89 231 156 46 184 230 236 160 254 245 179 35 202 103 213 172 126 210 56 2 32 77 75 5 218 160 113 158 119 61 134 23 220 229 99 28 95 214 245 156 155 220 116 142 75 85 201 112 4 10 240 27 229)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 32 3 58 0 4 46 249 131 250 84 43 100 71 46 43 196 5 217 238 221 134 26 204 154 127 129 79 173 130 117 206 107 154 52 89 186 74 181 33 100 136 59 210 158 182 172 126 109 34 172 125 48 44 5 61 195 150 132 146 142 249)
  :der-encode
  #t
  :tests
  '(#(1226
      "pseudorandom signature"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 163 88 135 147 232 193 86 251 251 162 14 226 140 141 199 36 36 96 51 10 113 134 143 108 104 152 141 180 2 29 0 179 219 15 63 165 102 175 182 174 234 77 62 217 235 101 233 27 26 107 237 190 119 177 226 113 84 170 43)
      #t
      ())
    #(1227
      "pseudorandom signature"
      #vu8(84 101 115 116)
      #vu8(48 61 2 29 0 195 211 167 110 108 40 42 146 46 94 16 10 12 170 204 17 142 51 194 208 197 199 81 122 59 122 134 237 2 28 105 28 50 133 16 143 101 49 62 2 77 23 49 7 134 85 33 182 115 128 112 105 197 13 213 115 0 15)
      #t
      ())
    #(1228
      "pseudorandom signature"
      #vu8()
      #vu8(48 61 2 28 70 75 176 251 67 123 6 146 32 115 225 36 82 132 134 229 0 177 57 74 5 232 107 11 245 138 167 11 2 29 0 242 129 156 221 143 49 26 218 227 147 5 134 209 251 136 58 224 113 204 141 96 67 89 4 255 185 216 114)
      #t
      ())
    #(1229
      "pseudorandom signature"
      #vu8(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      #vu8(48 61 2 28 49 236 92 89 85 141 243 44 231 109 73 204 230 77 99 191 133 206 76 40 178 11 195 179 117 253 74 156 2 29 0 173 242 29 135 120 104 188 117 78 170 29 184 132 124 170 51 221 217 172 230 253 206 165 156 30 55 227 45)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 82 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 5 3 58 0 4 181 84 252 37 233 240 152 234 241 70 108 53 50 140 151 48 93 13 74 160 228 70 46 139 175 122 142 126 208 143 196 14 176 29 200 85 87 123 174 169 227 7 7 112 97 111 87 177 126 169 133 76 173 147 136 26)
  :der-encode
  #t
  :tests
  '(#(1230
      "pseudorandom signature"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 102 156 233 230 61 145 91 228 162 23 251 11 185 173 54 29 98 233 141 115 224 115 255 251 233 33 253 74 2 28 51 239 46 220 202 198 12 237 109 61 7 195 184 241 211 102 135 225 111 132 135 195 232 173 80 150 199 152)
      #t
      ())
    #(1231
      "pseudorandom signature"
      #vu8(84 101 115 116)
      #vu8(48 61 2 29 0 146 17 117 9 1 37 194 81 131 142 254 206 47 227 172 31 90 82 164 163 224 39 216 100 211 117 67 63 2 28 44 0 143 246 148 88 211 121 146 205 107 96 175 51 225 197 236 201 23 204 109 186 184 11 116 207 203 75)
      #t
      ())
    #(1232
      "pseudorandom signature"
      #vu8()
      #vu8(48 60 2 28 121 133 71 116 152 127 165 30 102 20 175 22 106 50 152 210 162 10 200 89 74 114 135 169 99 44 11 225 2 28 19 250 57 17 86 124 220 194 2 29 35 131 53 230 127 250 1 198 222 34 177 137 113 133 67 146 215 14)
      #t
      ())
    #(1233
      "pseudorandom signature"
      #vu8(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      #vu8(48 60 2 28 79 78 77 134 212 50 165 57 246 45 218 117 132 37 68 178 75 187 6 9 208 154 177 208 209 188 185 118 2 28 99 126 230 38 97 232 53 81 20 66 64 234 2 149 114 224 62 253 133 120 126 69 241 117 240 205 34 214)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 38 118 189 30 63 216 63 51 40 209 175 148 20 66 192 54 118 15 9 88 119 41 65 144 83 8 62 182 29 30 210 44 44 247 105 104 138 95 253 103 218 24 153 210 67 230 107 202 190 33 249 231 131 53 38 59 245 48 139 142 65 167 27 57)
  :der-encode
  #t
  :tests
  '(#(1234
      "pseudorandom signature"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 32 53 30 114 112 3 137 110 192 41 73 163 207 117 34 35 188 198 194 182 17 179 3 145 237 214 13 192 200 61 201 201 143 2 33 0 146 74 217 220 0 54 77 74 162 9 20 22 209 115 134 47 155 2 150 95 241 118 232 128 234 98 166 115 225 109 185 142)
      #t
      ())
    #(1235
      "pseudorandom signature"
      #vu8(84 101 115 116)
      #vu8(48 69 2 32 62 8 62 42 71 59 218 72 44 129 198 190 173 226 27 19 13 21 177 202 149 122 69 118 118 140 170 63 17 54 47 21 2 33 0 135 220 57 13 18 138 121 34 82 181 29 140 147 209 218 6 77 112 35 23 173 217 125 171 116 219 120 168 242 230 210 167)
      #t
      ())
    #(1236
      "pseudorandom signature"
      #vu8()
      #vu8(48 68 2 32 116 91 225 218 144 45 25 199 108 143 87 212 161 243 54 43 75 32 237 124 141 232 252 4 99 213 102 121 95 151 156 234 2 32 89 22 195 23 161 227 37 181 55 53 33 106 15 163 119 55 240 139 50 36 92 136 8 72 23 180 104 164 31 90 254 233)
      #t
      ())
    #(1237
      "pseudorandom signature"
      #vu8(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      #vu8(48 68 2 32 68 168 17 178 50 26 203 198 92 172 248 13 45 190 132 137 70 241 218 197 40 243 225 174 56 176 229 77 8 60 37 143 2 32 85 215 237 250 236 221 163 187 192 98 213 7 78 60 55 25 211 39 97 21 157 2 124 162 124 23 37 221 189 98 246 136)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 9 3 82 0 4 68 171 35 32 194 41 123 102 17 68 40 223 51 254 100 25 86 248 32 51 137 51 152 175 59 73 176 2 49 121 32 28 39 210 109 214 81 33 192 110 12 89 82 76 147 143 25 218 255 194 169 164 103 157 186 124 241 153 28 237 71 0 89 43 183 94 152 207 119 219 246 197 132 194 247 39 53 21 41 33)
  :der-encode
  #t
  :tests
  '(#(1238
      "pseudorandom signature"
      #vu8(49 50 51 52 48 48)
      #vu8(48 84 2 40 122 49 183 55 95 146 67 105 236 18 188 51 184 52 114 108 149 68 74 76 38 53 87 52 74 250 115 44 244 138 21 94 113 166 238 125 228 46 145 206 2 40 36 211 215 40 97 244 210 181 81 193 15 2 148 209 106 59 241 212 238 62 72 68 57 184 4 208 151 222 162 215 202 206 118 173 225 74 241 102 51 34)
      #t
      ())
    #(1239
      "pseudorandom signature"
      #vu8(84 101 115 116)
      #vu8(48 86 2 41 0 172 96 174 126 133 174 221 46 101 179 122 55 49 105 95 104 77 130 199 128 41 180 186 167 14 86 230 254 194 63 59 101 221 33 61 172 105 181 5 47 2 41 0 130 174 60 6 255 220 239 254 199 218 130 4 121 230 207 63 88 188 59 185 182 216 142 13 166 21 176 136 94 206 51 136 246 242 210 250 54 133 230 167)
      #t
      ())
    #(1240
      "pseudorandom signature"
      #vu8()
      #vu8(48 84 2 41 0 156 247 240 214 12 193 251 45 75 62 120 213 248 59 55 78 23 164 174 188 204 110 114 63 26 211 91 171 178 172 251 43 117 83 3 137 24 147 149 248 2 39 17 16 197 184 184 229 250 141 199 149 42 123 246 32 11 221 174 108 29 102 99 154 7 164 182 4 110 0 191 167 162 189 157 87 119 184 12 58 146)
      #t
      ())
    #(1241
      "pseudorandom signature"
      #vu8(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      #vu8(48 85 2 40 36 23 235 16 165 56 146 22 33 6 102 8 36 63 214 87 77 232 78 241 40 21 32 240 30 190 4 68 180 106 96 122 185 237 168 243 114 23 121 166 2 41 0 143 30 46 162 148 2 139 174 183 56 24 30 18 140 134 173 85 203 25 69 67 108 246 158 9 12 47 97 89 246 242 32 17 215 49 115 59 68 51 186)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 108 154 171 163 67 203 47 175 9 131 25 204 77 21 234 33 135 134 245 92 140 240 168 182 104 9 17 112 166 66 47 108 36 152 148 90 129 100 164 182 242 124 221 17 232 0 218 80 27 233 97 179 123 9 128 70 16 206 13 244 13 216 35 108 117 161 45 12 128 20 177 99 70 74 74 235 167 203 24 210 13 50 34 8 62 196 169 65 133 47 36 170 61 93 132 227)
  :der-encode
  #t
  :tests
  '(#(1242
      "pseudorandom signature"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 109 217 212 233 140 156 56 130 64 233 92 73 178 16 10 251 224 215 34 248 161 82 101 28 97 215 239 155 244 97 80 227 205 249 191 99 48 231 94 75 242 194 148 205 102 228 141 6 2 48 18 130 211 59 91 121 212 234 175 160 58 119 187 139 162 195 24 41 31 110 160 157 84 139 119 4 187 0 145 8 86 221 54 5 87 230 9 173 216 145 198 67 93 122 128 175 221 251)
      #t
      ())
    #(1243
      "pseudorandom signature"
      #vu8(84 101 115 116)
      #vu8(48 100 2 48 1 121 166 244 0 57 191 229 46 125 48 169 175 158 59 36 99 141 229 85 191 239 132 132 15 12 157 107 215 95 203 142 155 151 191 51 197 248 220 107 125 107 83 151 47 225 86 208 2 48 105 30 252 37 76 134 78 154 68 137 151 196 21 37 255 195 134 250 151 238 72 152 82 201 90 20 133 177 153 59 51 228 15 211 224 222 127 27 100 48 143 168 41 250 206 179 190 23)
      #t
      ())
    #(1244
      "pseudorandom signature"
      #vu8()
      #vu8(48 100 2 48 101 253 69 104 20 55 29 96 136 63 253 165 247 79 54 220 45 69 136 97 33 119 14 41 237 49 99 117 71 22 209 44 28 171 3 162 203 106 110 51 118 252 150 216 114 123 209 191 2 48 26 166 94 87 147 45 5 120 132 19 33 155 122 178 62 83 55 246 63 178 220 176 248 155 66 39 210 132 163 252 189 243 197 76 2 26 108 12 164 36 69 191 128 34 19 18 22 84)
      #t
      ())
    #(1245
      "pseudorandom signature"
      #vu8(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      #vu8(48 101 2 48 70 203 67 121 139 192 109 190 120 138 79 75 43 152 19 14 58 174 145 127 29 42 0 86 86 189 112 163 40 140 175 124 55 209 222 224 201 16 136 40 166 157 42 30 234 225 19 198 2 49 0 129 128 208 197 186 27 237 79 43 13 77 142 215 234 23 145 107 99 64 3 151 231 182 215 14 115 18 197 255 15 69 36 164 154 191 112 113 200 186 71 13 230 79 182 104 87 3 128)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 13 3 129 130 0 4 30 199 254 34 117 134 12 59 192 228 230 228 89 175 126 22 152 93 55 173 186 115 81 172 53 122 124 57 126 7 82 46 164 27 204 168 232 151 119 254 5 184 240 217 220 140 97 64 4 252 175 48 169 112 1 165 1 26 21 159 70 252 213 68 60 188 29 223 199 172 137 161 162 248 238 247 123 249 187 168 173 231 61 162 16 12 182 163 113 84 107 73 95 181 234 136 94 182 49 100 94 121 89 29 182 89 196 146 102 210 99 213 203 211 64 48 129 203 64 117 54 239 233 165 190 198 153 85)
  :der-encode
  #t
  :tests
  '(#(1246
      "pseudorandom signature"
      #vu8(49 50 51 52 48 48)
      #vu8(48 129 132 2 64 97 72 60 114 147 105 65 49 68 166 190 13 208 92 26 194 155 196 64 187 218 248 126 87 42 169 135 233 202 66 54 57 243 57 188 170 173 153 203 31 168 11 124 53 65 106 24 52 236 4 188 240 254 120 18 199 18 235 31 6 161 109 172 163 2 64 65 187 149 108 51 158 188 245 228 228 3 199 216 146 141 94 180 253 247 211 245 58 44 6 214 201 250 195 71 246 3 172 50 9 162 175 55 81 111 128 123 80 54 59 83 40 188 152 185 67 84 175 125 89 150 109 22 15 104 232 12 107 45 192)
      #t
      ())
    #(1247
      "pseudorandom signature"
      #vu8(84 101 115 116)
      #vu8(48 129 132 2 64 91 134 173 87 108 220 94 118 164 228 162 186 121 91 128 250 168 34 188 7 214 45 102 151 161 162 212 201 241 172 153 189 175 108 52 236 68 110 118 79 89 141 176 244 34 89 42 229 154 89 200 239 223 108 72 10 223 255 16 191 241 147 111 221 2 64 119 37 165 106 149 196 203 234 133 235 247 143 1 209 107 99 83 79 111 12 83 214 69 227 195 214 231 195 10 226 87 151 165 228 230 165 120 54 141 245 119 115 72 35 173 14 250 189 21 88 28 66 141 239 12 78 52 218 202 203 159 22 73 9)
      #t
      ())
    #(1248
      "pseudorandom signature"
      #vu8()
      #vu8(48 129 133 2 65 0 137 237 247 94 110 152 99 5 216 24 19 134 193 109 180 75 160 215 255 64 244 51 85 105 117 74 72 31 92 212 140 98 17 166 61 231 189 170 72 94 159 167 152 88 164 234 191 17 31 237 41 89 240 49 222 42 19 43 167 9 65 38 131 169 2 64 122 140 8 86 79 81 83 65 40 187 82 254 54 223 250 174 137 7 144 17 37 110 248 6 158 100 214 76 86 16 211 230 17 192 186 139 25 2 115 136 252 204 33 37 35 178 44 68 232 90 120 158 22 203 27 189 50 64 200 107 67 72 15 222)
      #t
      ())
    #(1249
      "pseudorandom signature"
      #vu8(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      #vu8(48 129 133 2 65 0 166 32 136 11 183 250 177 24 14 61 143 57 62 75 51 67 221 78 177 195 116 249 214 18 82 248 162 1 217 9 107 168 54 114 31 142 45 139 86 203 244 6 150 10 174 14 80 50 90 223 202 107 27 82 159 6 168 18 96 189 139 21 255 104 2 64 118 83 127 235 188 14 36 171 73 146 181 118 171 248 188 2 1 202 207 92 207 103 74 211 195 177 85 44 152 202 100 100 46 255 84 1 175 236 171 22 126 192 190 25 95 229 255 161 120 241 69 103 239 23 27 72 39 150 74 85 157 7 155 122)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 82 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 6 3 58 0 4 197 20 230 110 247 110 105 170 109 39 235 74 145 71 200 79 37 22 64 116 148 238 69 65 54 164 47 107 54 74 49 141 220 253 139 112 36 85 14 96 27 165 73 249 109 44 161 183 93 81 44 166 207 71 251 228)
  :der-encode
  #t
  :tests
  '(#(1250
      "pseudorandom signature"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 52 165 159 39 233 2 151 225 26 193 12 34 209 95 84 214 185 91 57 234 62 122 14 10 193 159 97 128 2 28 119 161 206 210 166 7 230 247 65 15 31 46 94 141 149 241 233 84 92 122 54 129 174 217 148 39 174 102)
      #t
      ())
    #(1251
      "pseudorandom signature"
      #vu8(84 101 115 116)
      #vu8(48 61 2 29 0 205 208 212 92 41 23 91 248 233 172 71 216 78 115 235 131 16 41 149 56 67 105 212 95 228 50 210 214 2 28 88 102 65 255 96 33 157 162 84 72 195 20 162 196 38 123 228 209 47 14 73 15 212 97 66 228 24 116)
      #t
      ())
    #(1252
      "pseudorandom signature"
      #vu8()
      #vu8(48 59 2 28 48 0 211 72 72 223 241 241 65 47 151 84 172 56 160 97 174 105 254 238 240 122 174 76 195 202 10 92 2 27 51 48 162 228 229 173 57 238 36 70 73 170 215 213 252 83 63 11 194 129 192 61 219 176 246 237 255)
      #t
      ())
    #(1253
      "pseudorandom signature"
      #vu8(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      #vu8(48 60 2 28 29 10 103 229 145 111 62 239 162 121 72 34 72 155 228 233 232 210 191 200 63 49 84 65 3 161 28 191 2 28 74 227 206 200 136 22 124 201 59 219 241 248 62 191 61 45 154 114 136 189 177 240 148 191 33 180 93 1)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 133 9 210 126 14 155 151 32 246 31 72 212 145 198 188 198 47 214 217 127 35 57 79 176 183 148 243 188 126 146 108 115 153 252 166 127 80 53 34 208 69 61 241 202 248 230 219 67 214 44 120 159 153 251 196 104 119 79 178 158 250 68 22 44)
  :der-encode
  #t
  :tests
  '(#(1254
      "pseudorandom signature"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 33 0 138 42 108 216 179 103 40 229 203 172 131 230 116 141 54 135 108 180 96 4 135 43 69 173 192 92 85 40 76 230 18 182 2 33 0 152 172 153 202 96 94 44 212 108 225 114 100 190 37 137 145 56 160 99 64 250 117 192 78 151 183 74 242 90 209 107 120)
      #t
      ())
    #(1255
      "pseudorandom signature"
      #vu8(84 101 115 116)
      #vu8(48 68 2 32 79 10 253 250 151 85 87 248 161 68 201 176 178 166 15 67 228 15 91 155 160 216 7 121 148 58 16 110 106 39 139 105 2 32 29 82 66 76 58 235 152 0 194 175 185 160 102 177 6 182 111 32 39 23 130 138 38 30 210 116 118 25 13 63 98 212)
      #t
      ())
    #(1256
      "pseudorandom signature"
      #vu8()
      #vu8(48 68 2 32 78 189 95 94 100 193 14 116 189 50 167 105 86 92 73 249 49 236 59 105 247 72 89 228 18 61 216 93 223 166 172 117 2 32 12 20 152 203 146 206 69 166 231 119 161 247 216 222 30 31 17 248 5 107 166 117 236 157 16 39 184 132 169 226 81 119)
      #t
      ())
    #(1257
      "pseudorandom signature"
      #vu8(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      #vu8(48 68 2 32 88 149 203 34 54 101 23 57 87 211 59 27 219 201 114 115 113 207 229 235 251 89 107 142 54 107 159 28 117 170 10 14 2 32 93 55 32 16 179 109 222 83 197 153 38 40 41 168 248 133 129 173 98 71 211 243 10 43 105 41 99 33 45 184 139 109)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 106 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 10 3 82 0 4 97 68 125 62 27 183 218 129 34 53 43 173 161 122 185 128 207 92 189 219 224 156 66 105 83 60 123 72 118 75 191 223 250 120 175 6 239 99 51 34 106 196 137 159 106 11 250 255 100 12 145 174 9 148 137 177 128 147 237 25 135 185 161 140 246 33 101 59 147 223 202 246 187 190 150 150 229 34 129 200)
  :der-encode
  #t
  :tests
  '(#(1258
      "pseudorandom signature"
      #vu8(49 50 51 52 48 48)
      #vu8(48 85 2 41 0 172 203 80 111 27 173 61 132 242 150 107 231 99 15 245 81 190 112 193 193 214 244 87 40 171 222 3 123 242 166 179 187 194 220 148 65 101 57 51 157 2 40 101 197 118 147 94 147 172 69 40 52 189 249 207 58 108 233 29 167 250 218 186 52 178 74 11 90 164 127 113 122 227 209 239 33 198 239 126 246 190 50)
      #t
      ())
    #(1259
      "pseudorandom signature"
      #vu8(84 101 115 116)
      #vu8(48 85 2 40 111 100 196 224 95 184 241 30 124 169 199 20 7 222 51 216 36 173 244 192 218 154 191 47 116 167 178 141 174 34 83 88 107 24 211 166 155 234 5 32 2 41 0 202 142 241 154 226 242 120 38 93 178 114 89 105 62 87 199 207 82 229 193 45 83 242 158 50 26 104 174 165 87 15 159 66 136 84 82 40 19 151 159)
      #t
      ())
    #(1260
      "pseudorandom signature"
      #vu8()
      #vu8(48 86 2 41 0 128 67 150 3 67 74 227 143 63 8 202 136 18 195 207 107 91 65 151 58 172 231 124 229 172 192 254 197 172 203 229 252 230 91 157 250 238 177 215 93 2 41 0 138 149 42 246 50 252 72 35 255 64 247 214 91 226 62 133 113 126 242 17 17 24 178 178 41 50 220 63 139 71 149 1 225 188 66 47 176 246 48 156)
      #t
      ())
    #(1261
      "pseudorandom signature"
      #vu8(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      #vu8(48 85 2 40 110 246 70 215 143 127 77 105 170 115 120 169 209 153 188 127 197 53 95 101 168 59 98 222 13 120 202 63 106 149 136 216 115 182 165 75 169 203 249 138 2 41 0 179 30 92 160 26 93 7 110 112 161 184 222 40 239 241 38 187 60 171 159 14 96 122 44 253 58 128 86 182 137 103 98 186 229 27 37 134 27 142 247)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 12 3 98 0 4 0 217 91 155 188 240 41 7 66 64 210 50 50 178 135 254 196 7 104 217 211 24 38 162 209 40 212 134 103 201 31 221 213 9 206 68 157 125 225 69 104 175 50 13 21 73 159 150 76 220 203 179 52 121 30 137 192 234 13 173 211 233 171 101 125 109 236 138 56 177 116 198 243 169 218 8 216 191 55 3 203 178 30 211 195 93 199 2 83 106 174 239 3 189 86 160)
  :der-encode
  #t
  :tests
  '(#(1262
      "pseudorandom signature"
      #vu8(49 50 51 52 48 48)
      #vu8(48 100 2 48 56 208 71 44 106 127 176 250 11 96 80 35 236 166 226 108 117 112 130 5 84 241 211 204 185 204 225 85 121 70 156 5 124 166 249 156 175 181 145 89 157 220 23 19 205 103 230 89 2 48 80 243 152 49 69 167 72 221 160 138 178 84 126 255 105 43 105 96 107 239 250 153 51 128 242 127 223 111 185 27 167 187 155 59 55 198 85 134 201 81 47 241 11 168 73 181 137 135)
      #t
      ())
    #(1263
      "pseudorandom signature"
      #vu8(84 101 115 116)
      #vu8(48 100 2 48 21 44 166 33 71 72 71 176 46 60 209 78 194 200 226 18 71 170 204 131 10 10 84 16 191 64 141 88 55 217 221 212 87 56 99 113 52 229 85 85 145 104 40 146 45 179 228 234 2 48 57 243 9 62 236 35 46 20 73 215 42 58 43 104 206 244 253 67 108 73 138 194 101 249 14 220 123 187 225 177 2 213 164 42 128 31 59 226 51 186 203 92 82 206 72 143 232 62)
      #t
      ())
    #(1264
      "pseudorandom signature"
      #vu8()
      #vu8(48 100 2 48 41 183 77 12 66 17 209 227 110 143 207 10 224 10 75 63 231 56 71 129 25 134 108 5 3 218 98 182 171 219 150 189 97 250 112 70 11 230 170 160 87 158 22 45 4 92 200 190 2 48 72 32 228 191 231 99 235 18 243 123 31 133 39 35 114 143 235 99 200 103 65 212 221 33 150 68 110 165 244 124 47 135 159 17 253 242 63 18 31 149 1 105 144 31 60 76 176 60)
      #t
      ())
    #(1265
      "pseudorandom signature"
      #vu8(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      #vu8(48 101 2 48 94 131 160 177 193 189 254 152 186 190 143 131 188 4 109 90 137 111 191 48 124 138 70 143 69 103 220 41 64 161 29 49 52 77 53 117 98 11 208 196 32 27 128 214 204 42 60 169 2 49 0 128 19 82 201 43 144 140 226 247 82 36 146 173 228 222 167 136 221 182 209 114 4 56 125 118 76 231 194 148 3 2 169 139 98 207 131 186 166 159 12 115 90 86 254 140 53 219 235)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 14 3 129 130 0 4 165 0 142 203 91 98 148 171 46 167 26 158 35 105 73 115 201 90 11 95 88 116 173 231 117 211 73 162 49 72 3 142 108 115 17 170 105 171 164 185 250 140 239 232 255 155 241 197 244 50 78 63 60 223 67 20 59 29 53 223 124 247 245 7 27 193 101 202 70 254 101 21 45 46 116 217 92 225 167 64 213 225 162 114 128 5 247 46 214 110 94 238 244 157 151 80 167 71 28 69 101 141 13 24 152 144 161 97 106 166 109 100 135 204 62 112 172 149 15 232 30 85 13 171 88 253 181 95)
  :der-encode
  #t
  :tests
  '(#(1266
      "pseudorandom signature"
      #vu8(49 50 51 52 48 48)
      #vu8(48 129 133 2 64 58 20 108 48 161 226 117 239 142 100 16 40 140 72 233 117 29 130 193 76 206 154 26 131 103 203 39 43 218 97 4 142 98 114 187 251 231 129 165 47 38 148 34 154 95 164 159 176 33 185 11 103 221 151 110 131 183 234 189 61 104 147 214 19 2 65 0 129 12 91 220 153 247 34 57 9 24 147 126 241 21 39 108 174 52 179 4 65 40 94 215 36 32 36 222 161 112 68 69 187 105 72 72 246 194 145 78 129 138 246 148 126 61 248 7 47 169 100 62 188 25 156 168 138 55 77 247 253 47 192 9)
      #t
      ())
    #(1267
      "pseudorandom signature"
      #vu8(84 101 115 116)
      #vu8(48 129 132 2 64 83 38 239 212 211 150 159 48 116 204 47 193 34 110 12 208 160 11 228 206 193 208 22 67 129 36 53 191 225 53 204 215 129 4 12 210 1 16 30 180 92 19 212 101 77 190 57 2 16 158 198 98 219 182 59 158 157 62 160 23 166 34 9 211 2 64 3 251 4 248 176 6 18 160 2 14 140 218 223 48 160 100 67 108 237 22 163 78 215 236 77 51 41 80 185 48 131 181 6 206 5 209 36 101 135 122 237 61 179 116 75 167 184 228 105 139 193 193 37 189 56 81 127 21 148 148 68 184 252 138)
      #t
      ())
    #(1268
      "pseudorandom signature"
      #vu8()
      #vu8(48 129 132 2 64 30 187 129 84 59 135 2 41 219 58 68 15 220 246 64 46 34 181 249 118 12 59 149 228 75 202 106 123 122 211 223 92 110 157 7 247 26 198 206 99 145 97 65 186 169 33 113 189 233 112 27 89 144 125 162 207 169 34 179 6 17 24 138 33 2 64 106 219 167 52 10 22 135 218 226 89 99 41 33 138 133 108 237 78 134 208 163 157 221 124 22 52 35 62 6 23 103 219 245 135 81 160 93 241 82 180 158 10 93 114 35 88 166 216 254 126 105 23 102 33 163 101 119 44 175 175 65 113 72 51)
      #t
      ())
    #(1269
      "pseudorandom signature"
      #vu8(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      #vu8(48 129 133 2 65 0 166 185 233 20 114 102 31 10 21 215 158 61 212 198 176 89 33 224 124 69 101 113 35 63 74 246 124 102 233 74 158 6 198 218 221 236 224 87 220 73 182 23 249 81 56 3 138 40 215 122 152 64 21 84 141 72 122 219 61 85 21 33 41 208 2 64 76 101 126 242 178 139 11 113 113 165 196 236 74 17 168 148 203 164 195 18 190 77 38 1 62 80 135 102 244 60 248 247 152 109 84 251 195 88 232 185 91 65 113 190 227 159 192 200 225 129 14 110 70 66 195 28 116 1 56 244 78 37 134 248)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 234 101 159 249 219 136 3 39 12 158 30 224 213 31 96 67 82 224 164 162 153 52 231 242 234 214 233 173 69 40 255 234 73 178 120 119 7 117 104 2 196 214 182 176 148 250 54 14 121 172 248 111 118 45 16 10 204 245 240 166 58 99 74 142)
  :der-encode
  #t
  :tests
  '(#(1270
      "Hash weaker than DL-group"
      #vu8(77 115 103)
      #vu8(48 68 2 32 21 37 4 134 89 67 74 83 31 106 243 34 17 107 197 200 130 151 71 187 37 79 137 230 32 204 153 248 105 3 53 56 2 32 79 14 183 110 249 174 250 49 11 29 223 118 235 185 205 213 81 253 107 25 42 72 117 215 12 12 235 127 116 225 146 82)
      #t
      ("WeakHash"))))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 89 147 38 78 225 125 223 32 154 236 49 254 10 60 21 59 90 42 132 93 79 230 127 188 33 138 177 57 125 66 223 7 201 201 139 26 152 210 161 215 146 1 77 252 119 254 153 189 43 131 177 135 133 235 78 188 190 141 22 236 209 79 143 98 80 21 178 104 122 242 209 61 104 114 229 43 5 92 149 235 52 129 122 159 24 251 232 254 242 53 129 133 21 36 37 101)
  :der-encode
  #t
  :tests
  '(#(1271
      "Hash weaker than DL-group"
      #vu8(84 101 115 116)
      #vu8(48 101 2 48 35 168 100 88 254 179 194 32 219 249 244 169 21 13 134 105 76 18 86 158 170 30 95 99 196 31 184 126 79 244 37 184 254 165 126 202 164 225 71 170 4 23 128 198 79 192 31 84 2 49 0 228 125 84 107 99 141 240 162 146 70 223 70 170 183 250 63 29 121 124 20 39 217 129 158 93 243 199 218 124 109 129 199 124 193 133 199 212 105 220 248 187 10 32 31 148 7 55 241)
      #t
      ("WeakHash"))))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 1 143 13 42 116 46 24 203 133 90 52 119 136 100 97 161 90 218 85 51 16 15 72 141 195 154 237 137 108 94 166 47 160 41 197 184 4 84 180 234 186 235 242 145 125 118 44 80 83 219 161 38 179 154 7 140 15 0 178 249 54 160 145 132 219 254 0 80 60 196 204 160 16 189 210 170 141 133 245 98 93 81 111 62 65 208 104 207 212 234 65 62 196 169 117 16 98 121 32 192 25 126 239 42 210 35 131 197 127 46 147 165 213 37 82 31 216 99 85 80 251 93 217 142 59 108 115 89 43 36 168 49)
  :der-encode
  #t
  :tests
  '(#(1272
      "Hash weaker than DL-group"
      #vu8(84 101 115 116)
      #vu8(48 129 135 2 66 1 205 53 189 138 220 185 21 93 135 96 237 171 134 18 216 109 149 24 229 234 251 162 43 35 12 10 163 76 234 118 121 210 39 129 4 144 58 131 29 33 194 9 32 117 213 241 253 104 96 18 218 179 61 216 125 50 250 4 215 209 209 7 34 195 249 2 65 18 197 231 107 36 92 103 204 37 250 226 240 64 69 84 111 149 17 62 4 243 164 134 15 242 29 97 148 181 26 56 83 50 170 106 211 78 48 36 144 98 68 7 28 65 90 104 138 13 178 223 98 220 233 32 103 191 20 174 212 102 169 217 13 11)
      #t
      ("WeakHash"))))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 174 214 252 173 36 0 196 217 78 85 219 182 176 18 206 61 76 43 70 132 63 190 153 212 40 158 110 207 138 36 168 158 113 52 61 125 21 29 37 141 44 182 144 52 156 45 86 179 102 221 16 166 0 0 0 0)
  :der-encode
  #t
  :tests
  '(#(1273
      "y-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 60 2 28 81 155 241 133 255 70 53 39 25 97 250 73 27 226 87 35 29 238 234 156 83 166 237 227 180 168 158 209 2 28 72 107 218 212 132 166 163 19 78 20 113 207 86 169 223 15 172 80 247 115 179 227 125 111 50 118 23 215)
      #t
      ())
    #(1274
      "y-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 28 9 253 100 72 152 183 203 93 1 139 82 35 78 123 78 242 181 71 137 175 208 206 156 67 78 158 85 21 2 29 0 241 147 9 83 33 100 234 32 83 202 229 93 247 189 203 171 83 108 131 234 123 254 111 225 13 96 193 171)
      #t
      ())
    #(1275
      "y-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 29 0 236 145 157 78 40 60 207 31 113 169 227 192 247 129 163 103 88 211 243 139 27 120 168 122 116 40 142 128 2 28 76 70 99 4 74 115 199 155 216 143 13 194 69 171 26 50 248 159 6 244 10 112 75 49 233 250 188 81)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 191 25 236 254 67 255 226 137 246 153 244 121 49 97 69 185 167 247 55 11 158 206 90 177 33 33 116 241 115 213 40 148 154 233 20 47 129 139 173 231 26 150 4 7 150 59 224 182 72 42 106 96 255 255 255 255)
  :der-encode
  #t
  :tests
  '(#(1276
      "y-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 62 2 29 0 197 23 96 71 132 71 33 117 151 236 198 244 0 27 212 80 136 213 60 144 245 49 3 96 139 248 138 234 2 29 0 162 1 37 58 169 3 249 120 30 137 146 16 29 113 113 210 221 58 93 72 196 77 142 29 84 76 214 215)
      #t
      ())
    #(1277
      "y-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 60 2 28 118 190 1 18 103 78 194 145 40 130 62 26 247 81 46 97 67 135 47 239 48 166 78 47 23 153 189 86 2 28 24 126 80 62 26 72 194 123 84 159 224 164 206 94 88 30 36 44 134 99 252 158 251 2 214 242 177 147)
      #t
      ())
    #(1278
      "y-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 60 2 28 54 36 94 241 38 181 181 30 69 159 132 234 170 213 164 149 6 31 4 113 220 140 35 241 197 241 98 130 2 28 57 227 29 114 160 107 168 225 79 207 149 119 142 7 188 22 162 98 142 57 68 157 168 133 125 80 110 220)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 38 229 171 241 53 203 84 234 170 22 182 158 75 11 41 34 117 52 78 136 160 157 246 223 128 0 0 0 234 184 145 222 84 227 242 111 245 10 185 137 243 51 218 197 81 88 61 70 138 230 35 197 150 67 74 240)
  :der-encode
  #t
  :tests
  '(#(1279
      "x-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 60 2 28 37 134 130 151 93 248 188 167 242 3 247 113 235 235 71 142 246 55 54 12 134 15 195 134 207 178 23 69 2 28 118 99 231 1 136 4 126 65 70 154 42 53 200 195 48 221 144 15 35 64 186 130 170 253 34 150 42 150)
      #t
      ())
    #(1280
      "x-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 62 2 29 0 133 201 134 20 243 108 13 102 248 216 120 52 202 233 120 97 27 123 78 235 245 154 70 190 161 184 154 233 2 29 0 209 161 142 55 141 218 132 14 6 182 15 98 121 191 10 34 49 217 250 45 141 44 49 232 139 193 189 215)
      #t
      ())
    #(1281
      "x-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 62 2 29 0 202 123 116 50 186 65 255 33 18 225 17 111 255 222 137 187 214 143 92 230 127 229 81 61 22 200 230 247 2 29 0 228 33 183 89 158 1 128 121 138 204 32 6 69 22 3 205 162 219 29 88 39 65 17 110 96 51 206 95)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 236 98 127 52 85 69 208 63 140 109 189 8 229 117 82 113 22 86 127 227 117 249 236 170 255 255 255 255 65 191 112 86 151 213 247 22 188 247 135 24 213 57 59 99 169 134 145 244 161 242 66 70 55 85 56 253)
  :der-encode
  #t
  :tests
  '(#(1282
      "x-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 60 2 28 25 57 127 229 211 236 171 248 15 198 36 193 191 55 149 100 56 117 23 193 133 8 125 201 125 96 80 105 2 28 51 181 119 62 154 175 108 52 203 97 44 252 129 239 211 191 156 34 34 78 140 79 161 191 204 245 197 1)
      #t
      ())
    #(1283
      "x-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 28 112 242 79 92 22 65 100 191 187 132 89 170 18 169 129 170 49 45 188 240 2 4 50 110 186 170 189 200 2 29 0 245 206 190 232 202 237 174 134 98 196 53 1 102 80 132 180 93 47 73 79 183 13 96 48 67 84 61 196)
      #t
      ())
    #(1284
      "x-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 28 11 242 216 110 202 168 181 106 202 94 143 142 188 180 80 129 208 120 161 69 85 183 95 91 232 233 177 50 2 29 0 154 85 179 206 71 52 132 153 102 181 3 76 205 155 25 247 100 7 238 2 65 195 245 142 123 143 200 154)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 21 1 110 82 179 100 114 213 54 71 118 5 251 128 93 211 144 48 130 160 98 209 234 48 175 158 85 90 0 0 0 0 118 45 40 241 253 194 25 24 79 129 104 31 191 245 102 212 101 181 241 243 30 135 45 245)
  :der-encode
  #t
  :tests
  '(#(1285
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 62 2 29 0 191 197 220 68 52 205 9 54 150 16 104 125 56 210 212 24 182 63 212 117 222 162 70 164 86 178 90 58 2 29 0 177 113 223 166 207 114 47 32 129 99 112 168 104 120 93 168 66 179 123 172 49 215 183 142 103 81 252 80)
      #t
      ())
    #(1286
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 62 2 29 0 143 219 232 218 100 108 86 66 215 103 199 219 235 56 114 177 237 171 110 55 54 88 5 240 233 76 224 169 2 29 0 188 243 90 184 18 34 136 61 211 82 108 176 207 147 19 143 70 135 205 11 16 194 176 161 38 56 81 97)
      #t
      ())
    #(1287
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 29 0 226 58 17 39 88 72 253 79 139 111 74 196 252 48 94 174 152 29 59 125 196 83 229 169 128 196 100 34 2 28 26 135 86 147 242 74 3 234 22 20 196 195 187 208 221 114 33 66 159 34 179 55 234 125 152 52 140 164)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 21 1 110 82 179 100 114 213 54 71 118 5 251 128 93 211 144 48 130 160 98 209 234 48 175 158 85 90 255 255 255 255 137 210 215 14 2 61 230 231 176 126 151 223 64 10 153 43 154 74 14 12 225 120 210 12)
  :der-encode
  #t
  :tests
  '(#(1288
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 28 118 100 81 100 255 154 243 161 169 32 95 218 46 239 50 109 43 255 199 149 220 196 130 149 71 254 1 221 2 29 0 182 91 186 80 55 25 49 75 39 115 77 208 107 19 149 213 64 175 131 150 2 155 120 184 78 1 73 235)
      #t
      ())
    #(1289
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 60 2 28 50 250 12 167 224 127 31 134 172 53 7 52 153 78 31 49 182 218 156 130 249 61 206 210 185 131 194 156 2 28 123 120 145 40 34 6 164 87 17 189 252 178 161 2 181 210 137 223 132 255 87 120 84 134 3 87 64 4)
      #t
      ())
    #(1290
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 28 45 84 146 71 140 166 78 81 17 223 216 82 24 103 182 71 123 126 120 34 120 73 173 9 11 133 86 148 2 29 0 165 50 245 162 250 53 148 175 129 205 89 40 184 27 64 87 218 113 123 229 251 66 163 168 108 104 25 13)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 0 0 0 0 247 228 113 61 8 81 18 17 44 55 205 244 96 31 246 136 218 121 96 22 183 26 114 122 222 90 158 193 101 5 76 201 135 249 220 135 233 153 27 146 228 250 100 156 166 85 238 174 159 42 48 225)
  :der-encode
  #t
  :tests
  '(#(1291
      "x-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 28 25 30 238 93 175 85 205 73 158 133 57 203 44 255 121 124 254 197 213 102 210 2 123 249 248 214 70 147 2 29 0 218 223 234 232 19 31 100 217 107 148 253 52 1 151 202 162 188 4 129 133 84 129 47 238 243 52 48 112)
      #t
      ())
    #(1292
      "x-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 62 2 29 0 224 226 192 129 128 184 162 7 238 145 5 167 211 121 250 17 35 104 232 55 15 160 157 253 228 164 92 69 2 29 0 199 23 188 8 96 224 22 231 206 72 248 254 106 41 155 54 144 106 96 85 173 173 147 180 22 206 136 56)
      #t
      ())
    #(1293
      "x-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 28 27 145 158 249 53 50 41 39 67 187 46 27 123 72 148 253 132 124 110 93 229 42 8 225 176 242 220 251 2 29 0 194 211 13 107 117 148 216 219 210 97 73 26 225 213 135 121 80 91 7 91 100 229 86 77 201 122 65 139)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 255 255 255 255 234 223 124 238 141 52 208 76 242 44 143 125 227 86 116 251 47 80 29 36 42 118 247 37 134 196 9 48 157 57 142 96 206 30 10 76 158 5 169 211 38 39 87 126 140 226 204 127 58 250 44 62)
  :der-encode
  #t
  :tests
  '(#(1294
      "x-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 29 0 231 93 180 158 211 63 242 136 94 166 16 12 201 91 143 225 185 36 46 164 36 141 176 123 202 194 224 32 2 28 121 108 134 97 66 174 142 183 91 176 73 156 102 140 111 228 84 151 105 47 188 198 107 55 194 228 98 79)
      #t
      ())
    #(1295
      "x-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 60 2 28 31 129 205 146 67 98 236 130 88 144 48 123 155 57 54 224 216 247 40 167 200 75 219 67 197 207 4 51 2 28 57 211 228 106 3 4 10 212 26 192 38 177 142 6 41 246 20 94 61 200 209 230 187 226 0 200 72 43)
      #t
      ())
    #(1296
      "x-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 60 2 28 0 253 166 19 170 103 202 66 103 58 212 48 159 63 15 5 178 86 159 61 238 99 244 170 156 197 76 243 2 28 30 90 100 182 138 55 229 178 1 201 24 48 61 199 164 4 57 170 234 207 1 156 88 146 168 246 208 206)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 176 1 60 111 191 246 240 159 236 218 28 38 62 246 83 153 212 207 152 156 165 252 79 143 255 15 233 225 0 0 0 0 14 42 176 232 73 94 133 158 178 175 176 7 105 214 231 254 98 106 17 145 103 192 182 188)
  :der-encode
  #t
  :tests
  '(#(1297
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 62 2 29 0 185 50 179 247 230 70 126 30 199 165 97 243 17 96 36 140 127 34 69 80 168 80 135 136 99 75 83 206 2 29 0 160 197 49 42 207 158 128 26 255 109 111 201 133 80 207 167 18 187 246 89 55 22 90 54 242 195 45 201)
      #t
      ())
    #(1298
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 29 0 229 9 89 63 176 146 69 238 130 38 206 114 120 107 12 195 82 190 85 90 116 134 190 98 143 79 208 12 2 28 11 122 189 224 6 27 30 7 191 19 49 145 80 164 255 106 70 74 186 182 54 171 78 41 123 13 118 51)
      #t
      ())
    #(1299
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 60 2 28 110 84 249 65 32 77 70 57 184 99 201 138 101 183 190 227 24 213 26 177 144 10 143 52 94 172 111 7 2 28 13 165 5 72 41 33 78 205 229 225 5 121 179 106 47 230 66 108 36 176 100 237 119 195 133 144 242 92)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 176 1 60 111 191 246 240 159 236 218 28 38 62 246 83 153 212 207 152 156 165 252 79 143 255 15 233 225 255 255 255 255 241 213 79 23 182 161 122 97 77 80 79 247 150 41 24 1 157 149 238 110 152 63 73 69)
  :der-encode
  #t
  :tests
  '(#(1300
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 29 0 133 234 74 179 255 220 153 35 48 192 202 129 82 250 249 145 56 107 206 130 135 125 187 35 155 166 84 246 2 28 8 6 198 186 240 235 234 76 26 170 25 14 125 67 37 212 109 31 119 137 213 80 99 43 112 181 252 155)
      #t
      ())
    #(1301
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 28 68 213 61 235 182 70 183 52 133 64 46 171 45 9 144 129 185 123 18 67 192 37 182 36 240 221 103 234 2 29 0 229 222 120 154 125 75 119 234 198 215 187 164 22 88 230 228 220 52 125 171 237 47 150 128 192 74 111 85)
      #t
      ())
    #(1302
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 60 2 28 21 38 235 47 101 126 190 169 175 76 161 132 185 117 192 35 114 200 142 36 232 53 243 245 119 76 14 18 2 28 31 30 204 227 142 229 35 114 203 32 25 7 121 77 225 123 109 108 26 250 19 195 22 197 28 176 123 199)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 79 51 124 207 214 119 38 168 5 228 241 96 10 226 132 157 243 128 126 202 17 115 128 35 159 189 129 105 0 0 0 0 237 157 234 18 76 200 195 150 65 100 17 233 136 195 15 66 126 181 4 175 67 163 20 108 213 223 126 166 6 102 214 133)
  :der-encode
  #t
  :tests
  '(#(1303
      "x-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 70 2 33 0 212 52 226 98 164 158 171 119 129 227 83 163 86 94 72 37 80 221 15 213 222 250 1 60 127 41 116 94 255 53 105 241 2 33 0 155 12 10 147 242 103 251 96 82 253 128 119 190 118 156 43 152 149 49 149 215 188 16 222 132 66 24 48 92 107 161 122)
      #t
      ())
    #(1304
      "x-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 15 231 116 53 92 4 208 96 247 109 121 253 122 119 46 66 20 99 72 146 33 191 10 51 173 208 190 155 25 121 17 11 2 32 80 13 203 161 198 154 143 189 67 250 79 87 247 67 206 18 76 168 185 26 31 50 95 63 172 97 129 23 93 245 87 55)
      #t
      ())
    #(1305
      "x-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 33 0 187 64 191 33 123 237 63 179 149 12 125 57 240 61 54 220 142 59 44 215 150 147 241 37 191 208 101 149 238 17 53 227 2 32 84 27 243 83 35 81 235 176 50 113 11 219 106 27 241 191 200 154 30 41 26 198 146 179 250 71 128 116 91 181 86 119)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 60 240 61 97 77 137 57 207 212 153 160 120 115 250 194 129 97 143 6 184 255 135 232 1 92 63 73 114 101 0 73 53 132 250 23 77 121 28 114 191 44 227 136 10 137 96 221 42 124 122 19 56 168 47 133 169 229 156 219 222 128 0 0 0)
  :der-encode
  #t
  :tests
  '(#(1306
      "y-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 102 78 183 238 109 184 74 52 223 60 134 234 49 56 154 84 5 186 221 92 169 146 49 255 85 109 62 117 162 51 231 58 2 32 89 243 199 82 229 46 202 70 19 118 66 73 10 81 86 12 224 186 220 103 135 84 184 247 46 81 162 144 20 38 161 189)
      #t
      ())
    #(1307
      "y-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 32 76 208 66 155 186 189 40 39 0 157 111 205 132 61 76 227 156 62 66 226 209 99 31 208 1 152 90 121 209 253 139 67 2 33 0 150 56 191 18 221 104 47 96 190 126 241 208 224 217 143 8 183 188 167 122 26 43 134 154 228 102 24 157 42 205 171 227)
      #t
      ())
    #(1308
      "y-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 70 2 33 0 229 108 110 162 209 176 23 9 28 68 216 182 203 98 185 244 96 227 206 154 237 94 95 212 30 138 221 237 151 197 108 4 2 33 0 163 8 236 49 242 129 233 85 190 32 180 87 228 99 68 11 79 207 43 128 37 128 120 32 127 193 55 129 128 248 155 85)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 60 240 61 97 77 137 57 207 212 153 160 120 115 250 194 129 97 143 6 184 255 135 232 1 92 63 73 114 101 0 73 53 123 5 232 177 134 227 141 65 211 28 119 245 118 159 34 213 131 133 236 200 87 208 122 86 26 99 36 33 127 255 255 255)
  :der-encode
  #t
  :tests
  '(#(1309
      "y-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 17 88 160 141 41 21 0 180 202 190 211 52 109 137 30 238 87 193 118 53 106 38 36 251 1 31 143 187 243 70 104 48 2 32 34 138 140 72 106 115 96 6 224 130 50 91 133 41 12 91 201 31 55 139 117 212 135 221 164 103 152 193 143 40 85 25)
      #t
      ())
    #(1310
      "y-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 33 0 177 219 146 137 100 159 89 65 14 163 107 12 15 200 214 170 38 135 178 145 118 147 157 210 62 13 222 86 211 9 250 157 2 32 62 21 53 228 40 5 89 1 91 13 189 152 115 102 220 244 58 109 26 245 194 60 125 88 78 28 63 72 161 37 19 54)
      #t
      ())
    #(1311
      "y-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 70 2 33 0 183 177 110 118 34 134 203 150 68 106 168 212 230 231 87 139 10 52 26 121 242 221 26 34 10 198 240 202 78 36 237 134 2 33 0 221 198 10 112 10 19 155 4 102 28 84 125 7 187 176 114 23 128 20 109 247 153 204 245 94 85 35 78 203 143 18 188)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 40 41 195 31 170 46 64 14 52 78 217 75 202 63 205 5 69 149 110 188 254 138 208 246 223 165 255 142 255 255 255 255 160 26 175 175 0 14 82 88 88 85 175 167 103 106 222 40 65 19 9 144 82 223 87 231 235 59 211 126 190 185 34 46)
  :der-encode
  #t
  :tests
  '(#(1312
      "x-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 33 0 216 42 124 39 23 38 17 135 200 224 13 141 249 99 255 53 215 150 237 173 54 188 110 107 209 201 28 103 13 145 5 180 2 32 61 202 189 218 248 252 170 97 244 96 62 124 186 192 243 192 53 30 205 89 136 239 178 63 104 13 7 222 189 19 153 41)
      #t
      ())
    #(1313
      "x-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 94 185 200 132 93 230 142 177 61 91 239 231 25 244 98 215 119 135 128 43 175 243 12 233 106 92 186 6 50 84 175 120 2 32 44 2 106 233 190 46 42 94 124 160 255 155 189 146 251 110 68 151 33 134 34 142 233 166 43 135 221 190 46 246 111 181)
      #t
      ())
    #(1314
      "x-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 70 2 33 0 150 132 61 208 60 34 171 210 243 183 130 177 112 35 159 144 242 119 146 27 236 193 23 208 64 74 142 78 54 35 12 40 2 33 0 242 190 55 143 82 111 116 165 67 246 113 101 151 109 233 237 154 49 33 78 180 215 230 219 25 225 237 225 35 221 153 29)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 255 255 255 249 72 8 30 106 4 88 221 143 158 115 143 38 101 255 144 89 173 106 172 7 8 49 140 76 169 167 164 245 90 138 188 186 45 218 132 116 49 30 229 65 73 185 115 202 224 192 251 137 85 122 208 191 120 230 82 154 22 99 189 115)
  :der-encode
  #t
  :tests
  '(#(1315
      "x-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 118 100 86 220 225 133 124 144 111 153 150 175 114 147 57 70 77 39 233 217 142 220 45 14 59 118 2 151 6 116 33 246 2 32 64 35 133 236 173 174 13 128 129 220 202 245 209 144 55 236 78 85 55 110 206 214 153 233 54 70 191 187 241 157 11 65)
      #t
      ())
    #(1316
      "x-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 70 2 33 0 198 5 196 178 237 234 178 4 25 230 81 138 17 178 219 194 185 126 216 176 124 206 208 177 156 52 247 119 222 123 159 217 2 33 0 237 240 246 18 197 244 110 3 199 25 100 123 200 175 27 41 178 205 226 237 167 0 251 28 255 94 21 157 71 50 109 186)
      #t
      ())
    #(1317
      "x-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 70 2 33 0 212 139 104 230 202 191 224 60 246 20 28 154 197 65 65 242 16 230 68 133 217 146 154 215 183 50 191 227 183 235 138 132 2 33 0 254 237 174 80 198 27 208 14 25 220 38 249 183 226 38 94 69 8 195 137 16 154 210 242 8 240 119 35 21 182 201 65)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 0 0 0 3 250 21 249 99 148 157 95 3 166 245 199 248 111 158 0 21 238 178 58 235 191 241 23 57 55 186 116 142 16 153 135 32 112 232 232 124 85 95 161 54 89 204 165 215 250 220 252 176 2 62 168 137 84 140 164 138 242 186 126 113)
  :der-encode
  #t
  :tests
  '(#(1318
      "x-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 70 2 33 0 183 200 20 87 212 174 182 170 101 149 112 152 86 159 4 121 113 10 215 246 89 93 88 116 195 90 147 209 42 93 212 199 2 33 0 183 150 26 11 101 40 120 194 213 104 6 154 67 44 161 138 26 145 153 242 202 87 77 173 75 158 58 5 192 161 205 179)
      #t
      ())
    #(1319
      "x-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 107 1 51 45 219 110 223 169 163 10 19 33 213 133 142 30 227 207 151 226 99 230 105 248 222 94 150 82 231 111 243 247 2 32 89 57 84 95 206 212 87 48 154 106 4 172 226 189 15 112 19 156 143 125 134 176 44 177 204 88 249 230 158 150 205 90)
      #t
      ())
    #(1320
      "x-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 70 2 33 0 239 219 136 71 32 234 234 220 52 159 159 195 86 182 192 52 65 1 205 47 216 67 107 125 14 106 79 185 63 16 99 97 2 33 0 242 75 238 106 213 220 5 247 97 57 117 71 58 173 243 170 203 169 231 125 231 214 155 108 228 140 182 13 129 19 56 93)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 188 187 41 20 199 159 4 94 170 110 203 188 97 40 22 179 190 93 45 103 150 112 125 129 37 233 248 81 193 138 240 21 0 0 0 0 19 82 187 74 15 162 234 76 206 185 171 99 221 104 74 222 90 17 39 188 243 0 166 152 167 25 59 194)
  :der-encode
  #t
  :tests
  '(#(1321
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 49 35 4 40 64 85 96 220 184 143 181 166 70 131 106 234 155 35 162 61 217 115 220 190 128 20 200 123 139 32 235 7 2 32 15 147 68 214 232 18 206 22 102 70 116 118 148 164 27 10 175 151 55 78 25 243 197 251 139 215 174 61 155 208 190 255)
      #t
      ())
    #(1322
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 70 2 33 0 202 167 151 218 101 179 32 171 13 92 71 12 218 11 54 178 148 53 156 125 185 132 29 103 145 116 219 52 196 133 87 67 2 33 0 207 84 58 98 242 62 33 39 69 57 26 175 117 5 243 69 18 61 38 133 238 59 148 29 61 230 217 179 98 66 229 160)
      #t
      ())
    #(1323
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 32 126 95 10 181 217 0 211 211 215 134 118 87 229 214 211 101 25 188 84 8 69 54 231 210 28 51 110 216 0 24 89 69 2 33 0 148 80 192 127 32 31 174 201 75 130 223 179 34 229 172 103 102 136 41 74 173 53 170 114 231 39 255 11 25 182 70 170)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 89 48 19 6 7 42 134 72 206 61 2 1 6 8 42 134 72 206 61 3 1 7 3 66 0 4 188 187 41 20 199 159 4 94 170 110 203 188 97 40 22 179 190 93 45 103 150 112 125 129 37 233 248 81 193 138 240 21 255 255 255 254 236 173 68 182 240 93 21 179 49 70 84 156 34 151 181 34 165 238 216 67 12 255 89 103 88 230 196 61)
  :der-encode
  #t
  :tests
  '(#(1324
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 70 2 33 0 215 215 12 88 26 233 227 246 109 198 164 128 191 3 122 226 63 138 30 74 33 54 254 75 3 170 105 240 202 37 179 86 2 33 0 137 196 96 248 165 165 194 187 186 150 44 138 62 232 51 164 19 232 86 88 230 42 89 226 175 65 217 18 124 196 114 36)
      #t
      ())
    #(1325
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 52 28 27 159 243 200 61 213 224 223 160 191 104 188 223 75 183 170 32 198 37 151 94 94 238 227 75 179 150 38 107 52 2 32 114 182 159 6 27 117 15 213 18 27 34 177 19 102 250 213 73 198 52 231 119 101 160 23 144 42 103 9 158 10 68 105)
      #t
      ())
    #(1326
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 32 112 190 190 104 76 220 181 202 114 164 47 13 135 56 121 53 155 209 120 26 89 24 9 148 118 40 211 19 163 129 79 103 2 33 0 174 192 58 202 143 85 135 164 213 53 250 49 2 123 190 156 192 228 100 177 195 87 127 76 45 205 230 178 9 71 152 169)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 110 130 53 85 69 41 20 9 145 130 198 178 193 214 240 181 210 141 80 204 208 5 175 44 225 187 165 65 170 64 202 255 0 0 0 1 6 4 146 213 165 103 62 15 37 216 213 15 183 229 140 73 216 109 70 212 33 105 85 224 170 61 64 225)
  :der-encode
  #t
  :tests
  '(#(1327
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 109 106 79 85 108 204 225 84 231 251 159 25 231 108 61 236 161 61 89 204 42 235 78 202 217 104 170 178 222 212 89 101 2 32 83 185 250 116 128 62 222 15 196 68 27 246 131 213 108 86 77 62 39 78 9 204 244 115 144 186 221 20 113 192 95 183)
      #t
      ())
    #(1328
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 70 2 33 0 170 213 3 222 155 159 214 107 148 142 154 207 89 111 10 14 101 231 0 178 139 38 236 86 230 228 94 132 100 137 179 196 2 33 0 255 242 35 197 208 118 84 71 232 68 122 63 157 49 253 6 150 232 157 36 68 34 2 47 246 26 17 11 42 140 47 4)
      #t
      ())
    #(1329
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 70 2 33 0 145 130 206 189 59 184 171 87 46 22 113 116 57 114 9 239 75 29 67 154 243 178 0 205 240 3 98 0 137 228 50 37 2 33 0 171 184 131 103 209 95 230 45 30 255 251 104 3 218 3 16 158 226 46 144 188 156 120 232 180 237 35 99 11 130 234 157)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 110 130 53 85 69 41 20 9 145 130 198 178 193 214 240 181 210 141 80 204 208 5 175 44 225 187 165 65 170 64 202 255 255 255 255 254 249 251 109 42 90 152 193 240 218 39 42 240 72 26 115 182 39 146 185 43 222 150 170 30 85 194 187 78)
  :der-encode
  #t
  :tests
  '(#(1330
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 32 56 84 163 153 138 235 223 45 188 40 173 172 65 129 70 44 202 199 135 57 7 171 127 33 44 66 219 14 105 181 110 216 2 33 0 193 44 9 71 92 119 47 208 193 178 6 13 81 99 228 43 247 29 114 126 74 231 192 62 235 169 84 191 80 180 59 179)
      #t
      ())
    #(1331
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 70 2 33 0 233 77 189 195 135 149 254 92 144 77 143 22 217 105 211 181 135 240 162 93 45 233 11 109 140 92 83 255 136 126 54 7 2 33 0 133 107 140 150 62 155 104 218 222 68 117 11 249 126 196 209 27 26 10 56 4 244 203 121 170 39 189 234 120 172 20 228)
      #t
      ())
    #(1332
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 73 252 16 42 8 202 71 182 14 8 88 205 2 132 210 44 221 215 35 63 148 170 255 187 45 177 221 44 240 132 37 225 2 32 91 22 252 165 161 44 219 57 112 22 151 173 142 57 255 214 189 236 0 36 41 138 250 162 50 106 234 9 32 11 20 214)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 0 0 0 1 63 210 34 72 214 77 149 247 60 41 180 138 180 134 49 133 11 229 3 253 0 248 70 139 95 15 112 224 246 238 122 164 59 194 198 253 37 177 216 38 146 65 203 221 157 187 13 172 150 220 150 35 31 67 7 5 248 56 113 125)
  :der-encode
  #t
  :tests
  '(#(1333
      "x-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 32 65 239 167 211 240 90 0 16 103 95 203 145 138 69 198 147 218 75 52 141 242 26 89 214 249 205 115 224 216 49 214 122 2 33 0 187 171 82 89 108 26 29 148 132 41 108 220 146 203 240 126 102 82 89 161 55 145 168 254 136 69 226 192 124 243 252 103)
      #t
      ())
    #(1334
      "x-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 70 2 33 0 182 21 105 140 53 139 53 146 13 216 131 236 166 37 166 197 247 86 57 112 205 252 55 143 143 224 206 225 112 146 20 76 2 33 0 218 11 132 205 148 164 30 4 158 244 119 174 172 21 123 42 155 250 107 122 200 222 6 237 56 88 197 238 222 109 221 109)
      #t
      ())
    #(1335
      "x-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 70 2 33 0 135 207 140 14 184 45 68 246 156 96 162 255 84 87 211 170 163 34 231 236 97 174 90 236 253 103 138 225 193 147 43 14 2 33 0 197 34 196 238 167 234 251 130 145 76 191 92 31 247 103 96 16 159 85 221 221 207 88 39 77 65 201 188 67 17 224 110)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 37 175 214 137 172 171 174 214 124 31 41 109 229 148 6 248 197 80 245 113 70 160 180 236 44 151 135 109 255 255 255 255 250 70 167 110 82 3 34 223 188 73 30 196 240 204 25 116 32 252 78 165 136 61 143 109 213 60 53 75 196 246 124 53)
  :der-encode
  #t
  :tests
  '(#(1336
      "x-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 32 98 244 142 247 26 206 39 191 90 1 131 77 225 247 227 249 72 185 220 225 202 30 145 29 94 19 211 177 4 71 29 130 2 33 0 161 87 12 192 243 136 118 141 59 167 223 127 33 37 100 202 162 86 255 130 93 249 151 242 31 114 245 40 13 83 1 31)
      #t
      ())
    #(1337
      "x-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 70 2 33 0 246 176 226 246 254 2 12 247 192 194 1 55 67 67 68 237 122 221 108 75 229 24 97 226 209 76 189 164 114 166 255 180 2 33 0 155 233 55 34 193 163 173 125 76 249 23 35 112 12 181 72 109 229 71 157 140 27 56 174 78 142 91 161 99 142 151 50)
      #t
      ())
    #(1338
      "x-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 33 0 219 9 216 70 15 5 239 242 59 199 228 54 182 125 165 99 250 75 78 219 88 172 36 206 32 31 168 163 88 18 80 87 2 32 70 218 17 103 84 96 41 64 200 153 156 141 102 95 120 108 80 245 119 44 10 60 219 218 7 94 119 234 188 100 223 22)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 209 46 108 102 182 119 52 195 200 77 38 1 207 93 53 220 9 126 39 99 127 10 202 74 79 219 116 182 170 221 59 185 63 91 223 248 139 213 115 109 248 152 230 153 0 110 215 80 241 28 240 124 88 102 205 122 215 12 113 33 255 255 255 255)
  :der-encode
  #t
  :tests
  '(#(1339
      "y-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 32 89 44 65 225 101 23 241 47 202 189 152 38 118 116 249 116 181 136 233 243 93 53 64 108 26 123 178 237 29 25 183 184 2 33 0 193 154 95 148 38 7 195 85 20 132 255 13 201 114 129 240 205 200 43 196 142 34 5 160 100 92 12 243 215 245 157 160)
      #t
      ())
    #(1340
      "y-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 70 2 33 0 190 13 112 136 125 94 64 130 26 97 182 128 71 222 78 160 61 235 253 245 28 223 77 75 25 85 88 185 89 160 50 178 2 33 0 130 102 180 210 112 226 68 20 236 172 177 76 9 26 35 49 52 185 24 211 115 32 198 85 125 96 173 10 99 84 74 196)
      #t
      ())
    #(1341
      "y-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 70 2 33 0 250 233 45 252 178 238 57 45 39 10 243 165 115 159 170 38 212 249 123 253 57 237 60 190 228 210 158 38 175 59 32 106 2 33 0 147 100 92 128 96 85 149 224 44 9 160 220 75 23 172 42 81 132 106 114 139 62 141 96 68 46 214 68 159 211 52 43)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 86 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 10 3 66 0 4 109 74 127 96 212 119 74 79 10 168 187 222 219 149 60 126 234 121 9 64 126 49 100 117 86 100 188 40 0 0 0 0 230 89 211 78 77 243 141 158 140 158 170 223 186 54 97 44 118 145 149 190 134 199 122 172 63 54 231 139 83 134 128 251)
  :der-encode
  #t
  :tests
  '(#(1342
      "x-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 32 23 106 37 87 86 111 250 81 139 17 34 102 148 235 152 2 237 32 152 191 226 120 229 87 15 225 213 215 175 24 169 67 2 33 0 237 110 32 149 241 42 3 242 234 246 113 143 67 14 197 254 40 41 253 22 70 171 100 135 1 101 111 211 18 33 185 125)
      #t
      ())
    #(1343
      "x-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 32 96 190 32 195 219 193 98 221 52 210 103 128 98 28 16 75 190 93 172 230 48 23 27 45 174 240 216 38 64 158 229 194 2 33 0 189 128 129 178 119 98 171 110 143 66 89 86 191 96 78 51 47 160 102 169 155 89 248 126 39 220 17 152 178 111 92 170)
      #t
      ())
    #(1344
      "x-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 70 2 33 0 237 240 60 246 63 101 136 131 40 154 26 89 61 16 7 137 91 159 35 109 39 201 193 241 49 48 137 170 237 107 22 174 2 33 0 229 178 41 3 247 235 35 173 194 224 16 87 227 155 4 8 212 149 246 148 200 63 48 111 18 22 201 191 135 80 96 116)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 255 255 255 255 170 99 241 162 57 172 112 25 124 110 191 206 165 117 109 192 18 18 63 130 197 31 168 116 214 96 40 190 0 233 118 161 8 6 6 115 124 199 92 64 189 254 74 172 172 189 133 56 144 136 166 42 99 152 56 76 34 181 45 73 47 35 244 110 74 39 164 114 74 213 85 81 218 92 72 52 56 9 90 36 124 176 195 55 143 31 82 195 66 95 249 241)
  :der-encode
  #t
  :tests
  '(#(1345
      "x-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 101 2 48 7 100 139 102 96 208 27 162 82 10 9 210 152 173 243 177 160 44 50 116 75 210 135 114 8 245 164 22 47 108 152 67 115 19 157 128 10 76 220 31 254 161 91 206 72 113 160 237 2 49 0 153 253 54 112 18 203 158 2 205 226 116 148 85 224 212 149 197 40 24 243 193 79 110 106 173 16 91 9 37 226 167 41 10 196 160 109 159 173 244 177 91 87 133 86 254 51 42 95)
      #t
      ())
    #(1346
      "x-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 101 2 49 0 160 73 220 217 108 114 228 243 97 68 165 27 186 48 65 123 69 26 48 93 208 28 158 48 165 224 77 249 67 66 97 125 195 131 241 119 39 112 142 50 119 205 114 70 202 68 7 65 2 48 57 112 226 100 216 91 34 139 249 233 185 196 148 124 93 208 65 234 139 91 222 48 185 58 165 159 237 242 196 40 211 226 84 10 84 224 83 6 136 172 204 184 58 199 178 155 121 162)
      #t
      ())
    #(1347
      "x-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 101 2 48 68 24 0 234 147 119 194 120 101 190 0 10 208 8 235 61 117 2 189 209 5 130 75 38 209 92 243 208 100 82 150 154 157 6 7 169 21 168 254 152 146 21 252 77 97 175 110 5 2 49 0 220 226 159 170 81 55 247 90 215 126 3 145 140 142 230 116 124 199 163 155 10 105 248 185 21 101 76 172 76 244 191 217 200 124 196 106 225 99 27 92 107 174 189 79 192 143 248 253)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 209 130 127 198 246 241 47 33 153 44 90 64 154 6 83 177 33 210 239 2 178 176 171 1 169 22 28 233 86 40 7 64 177 227 86 178 85 112 27 10 109 220 158 194 202 138 148 34 198 237 93 44 237 141 138 183 86 15 165 187 136 199 56 231 69 65 136 61 138 43 28 14 43 167 227 109 3 15 196 217 191 184 178 47 36 219 137 126 186 196 157 212 0 0 0 0)
  :der-encode
  #t
  :tests
  '(#(1348
      "y-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 100 2 48 50 68 118 128 22 69 124 70 59 116 242 9 127 33 109 150 112 177 145 247 98 129 199 75 198 161 161 151 29 25 242 9 191 70 150 70 143 94 183 93 99 38 160 164 60 10 101 41 2 48 80 30 10 217 133 237 159 149 105 123 209 127 219 227 249 202 146 224 247 100 38 211 102 78 104 150 100 141 156 117 11 245 136 208 206 125 1 28 26 30 141 108 46 8 36 34 220 147)
      #t
      ())
    #(1349
      "y-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 100 2 48 94 26 244 15 36 128 227 217 124 74 228 191 211 74 159 69 38 146 65 53 111 58 70 190 205 134 164 167 201 113 109 115 202 90 235 219 61 177 167 118 86 80 102 102 131 188 133 107 2 48 126 124 75 71 58 43 170 164 149 55 133 190 138 162 161 0 6 246 211 107 64 10 185 129 134 77 105 206 206 192 70 113 141 4 4 185 100 116 84 177 89 170 90 146 215 109 121 85)
      #t
      ())
    #(1350
      "y-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 101 2 48 102 136 227 106 38 241 91 220 28 63 145 54 127 138 118 103 247 187 62 48 163 53 214 240 144 14 149 52 235 136 178 96 203 41 52 76 114 63 237 251 231 172 156 90 51 244 191 13 2 49 0 170 53 253 223 15 220 144 23 134 11 55 143 128 28 216 6 243 226 215 84 205 47 217 78 183 187 54 164 108 232 40 206 248 126 158 187 244 71 6 142 99 11 135 254 227 133 173 143)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 16 153 187 69 16 15 85 245 168 92 202 61 226 179 189 94 37 15 79 111 173 102 49 163 21 108 46 82 163 61 125 97 93 210 121 247 159 139 75 175 247 199 19 172 0 0 0 0 230 201 183 54 168 146 159 46 215 190 12 117 58 84 203 180 139 132 105 224 65 30 175 147 164 168 36 89 186 11 104 27 186 143 95 179 131 180 144 109 73 1 163 48 62 47 21 87)
  :der-encode
  #t
  :tests
  '(#(1351
      "x-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 101 2 49 0 212 168 243 176 180 211 165 118 158 58 11 188 100 75 53 241 213 9 53 94 209 254 64 30 23 15 102 123 102 31 105 59 50 89 142 140 20 58 129 122 149 137 130 132 80 66 187 72 2 48 4 204 7 87 139 189 25 129 219 246 232 169 122 53 76 152 212 27 139 111 110 138 44 43 23 99 199 194 162 157 121 226 79 132 118 7 92 154 237 154 236 108 100 223 245 4 97 174)
      #t
      ())
    #(1352
      "x-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 101 2 49 0 194 134 209 146 142 156 121 253 211 190 189 242 42 29 189 55 200 16 94 142 207 65 233 227 119 127 227 65 182 184 213 168 155 157 152 104 39 214 209 219 179 129 205 130 57 72 74 34 2 48 32 17 25 174 48 91 147 96 170 155 94 93 21 103 224 103 76 9 228 240 37 85 110 191 129 185 135 70 107 15 66 27 141 49 247 43 190 149 243 206 42 169 135 74 132 237 253 64)
      #t
      ())
    #(1353
      "x-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 101 2 49 0 217 198 120 85 1 103 241 12 81 30 98 172 180 189 10 63 127 51 107 192 144 201 78 108 107 2 98 36 57 195 72 162 21 156 95 65 249 181 170 75 71 5 144 212 13 205 124 194 2 48 31 213 234 238 41 90 187 64 129 203 98 103 69 244 173 39 156 235 68 96 64 98 131 11 88 230 192 70 92 86 45 65 240 43 165 136 252 13 177 235 190 51 156 220 0 141 122 27)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 0 0 0 0 43 8 158 221 117 65 105 1 1 69 242 99 243 52 252 22 124 193 157 174 130 37 151 10 225 156 200 203 126 199 53 147 214 164 101 195 112 245 71 139 14 83 157 105 209 149 29 89 123 86 166 115 69 172 178 88 9 88 31 7 205 14 183 141 149 56 163 248 166 95 48 14 104 161 235 120 80 125 247 109 230 80 232 248 238 99 165 240 197 104 124 152)
  :der-encode
  #t
  :tests
  '(#(1354
      "x-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 101 2 48 32 254 231 199 27 108 176 209 218 54 65 236 102 34 192 85 163 177 106 31 89 108 100 179 77 161 178 208 184 104 182 106 143 10 13 13 185 131 179 220 126 83 187 114 149 218 129 151 2 49 0 129 65 169 49 211 87 154 236 28 172 152 135 210 255 249 198 241 45 71 162 126 74 171 140 242 98 169 209 74 113 91 202 11 32 87 203 195 241 139 111 211 209 223 118 247 65 15 22)
      #t
      ())
    #(1355
      "x-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 101 2 49 0 145 62 236 197 89 179 207 113 8 166 93 108 195 7 107 253 243 108 111 148 220 198 105 61 6 105 4 112 243 74 46 129 86 66 65 225 222 95 95 81 66 29 227 10 244 103 241 15 2 48 100 155 211 113 114 68 232 239 60 107 14 218 152 63 132 220 165 234 134 209 190 193 83 134 185 196 115 236 67 168 205 11 165 88 238 232 25 247 145 217 255 146 114 185 175 213 149 81)
      #t
      ())
    #(1356
      "x-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 100 2 48 35 133 92 70 64 58 151 183 108 187 49 110 195 254 126 44 66 43 129 131 135 96 75 218 140 61 145 18 27 79 32 23 157 145 7 197 249 45 237 200 182 32 215 219 135 252 204 205 2 48 80 245 115 67 171 20 142 80 102 35 32 196 22 30 68 84 60 53 188 153 32 17 234 91 22 128 185 67 130 207 34 78 160 236 93 165 17 225 2 245 102 203 103 32 31 48 162 238)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 251 1 186 173 95 11 143 121 185 205 16 77 18 170 185 49 1 70 173 215 214 180 192 34 216 122 230 113 17 120 185 77 97 140 167 179 175 19 133 75 28 88 136 121 232 119 179 54 0 0 0 0 32 139 63 90 211 179 147 122 204 157 96 108 197 236 236 171 74 112 31 117 237 66 149 126 164 215 133 141 51 245 194 108 106 226 10 156 204 218 86 153 103 0 214 180)
  :der-encode
  #t
  :tests
  '(#(1357
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 102 2 49 0 210 0 149 141 73 31 206 189 230 103 205 115 108 157 186 9 97 199 13 178 236 175 87 60 49 221 127 164 30 204 163 43 64 181 137 111 154 13 223 39 33 16 227 210 30 132 89 58 2 49 0 194 236 247 57 67 185 173 206 89 107 172 20 252 230 36 149 174 147 130 92 95 246 246 28 36 125 29 138 252 186 82 8 47 201 111 99 162 110 85 188 207 195 119 159 136 207 215 153)
      #t
      ())
    #(1358
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 100 2 48 106 193 125 113 38 12 121 248 26 117 102 18 71 56 203 62 229 208 170 105 14 115 169 138 233 231 102 241 51 102 145 229 0 202 213 27 161 48 35 102 192 156 192 107 143 112 73 224 2 48 50 202 150 93 109 112 18 236 24 124 124 171 149 68 51 77 102 194 167 101 141 222 250 103 228 173 64 66 152 21 81 142 204 135 177 73 45 221 87 51 59 210 48 11 70 96 168 53)
      #t
      ())
    #(1359
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 101 2 49 0 225 154 70 70 240 237 138 39 31 232 107 165 51 248 190 79 216 27 191 70 116 113 111 102 142 250 137 164 12 172 81 238 194 166 207 189 146 50 125 37 239 233 28 164 255 113 43 197 2 48 74 134 178 232 225 35 120 230 51 222 194 105 30 59 30 237 78 147 44 196 139 40 228 95 163 212 100 204 14 148 140 2 204 157 236 242 187 67 178 89 55 252 243 126 154 216 110 240)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 118 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 34 3 98 0 4 251 1 186 173 95 11 143 121 185 205 16 77 18 170 185 49 1 70 173 215 214 180 192 34 216 122 230 113 17 120 185 77 97 140 167 179 175 19 133 75 28 88 136 121 232 119 179 54 255 255 255 255 223 116 192 165 44 76 108 133 51 98 159 147 58 19 19 84 181 143 224 138 18 189 106 129 91 40 122 113 204 10 61 146 149 29 245 99 51 37 169 103 152 255 41 75)
  :der-encode
  #t
  :tests
  '(#(1360
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 100 2 48 21 170 198 192 244 53 203 102 45 17 13 181 207 104 108 174 229 60 100 254 45 109 96 10 131 235 229 5 160 230 252 98 220 87 5 22 4 119 196 117 40 200 201 3 250 134 91 93 2 48 127 148 221 192 26 96 63 155 236 93 16 201 242 200 159 178 59 63 250 182 178 182 141 15 4 51 109 73 144 133 227 45 34 191 58 182 122 73 167 76 116 63 114 71 49 114 181 159)
      #t
      ())
    #(1361
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 102 2 49 0 144 185 90 125 25 75 115 73 143 186 90 252 149 193 174 169 190 7 49 98 169 237 197 124 77 18 244 89 240 161 115 11 175 47 135 215 214 98 74 234 123 147 30 197 51 112 254 71 2 49 0 203 193 239 71 14 102 96 16 96 76 96 147 132 184 114 219 127 167 184 165 169 242 15 222 253 101 107 226 252 199 93 181 57 72 16 47 122 178 3 234 24 96 166 163 42 242 70 161)
      #t
      ())
    #(1362
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 102 2 49 0 221 67 145 206 117 87 203 208 5 227 213 215 39 205 38 67 153 220 195 198 80 30 69 71 80 91 109 87 180 11 191 10 127 172 121 77 204 141 66 51 21 157 208 170 64 212 224 185 2 49 0 167 127 161 55 79 214 10 169 22 0 145 34 0 252 131 198 170 68 127 129 113 236 234 114 174 50 45 243 45 204 214 137 81 220 92 175 108 80 56 14 64 14 69 191 92 14 98 107)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 0 48 75 61 7 30 209 239 48 35 145 181 102 175 140 157 28 183 175 233 170 188 20 26 195 154 179 150 118 198 62 72 193 178 198 69 30 180 96 228 82 189 87 62 31 181 241 91 142 95 156 3 246 52 216 219 104 151 40 80 100 179 206 155 217 138 0 0 0 0 0 155 152 191 211 51 152 194 207 134 6 252 10 228 104 182 214 23 204 179 231 4 175 59 133 6 100 42 119 93 91 77 169 208 2 9 54 74 159 10 74 215 124 186 198 4 160 21 201 126 107 90 24 132 74 88 154 79 28 125 150 37)
  :der-encode
  #t
  :tests
  '(#(1363
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 135 2 66 1 28 150 132 175 109 197 39 40 65 4 115 198 48 83 176 28 53 141 103 232 31 138 19 36 173 113 28 96 72 26 74 134 221 62 117 222 32 202 85 206 122 154 57 177 248 47 213 218 79 173 242 106 91 184 237 212 103 175 136 37 239 228 116 98 24 2 65 52 192 88 171 166 72 141 105 67 225 30 13 19 72 66 148 73 234 23 172 94 223 139 202 246 84 16 107 152 178 221 243 70 197 55 184 169 163 249 179 23 75 119 99 125 34 14 245 49 141 187 195 61 10 172 15 226 221 237 161 123 35 203 45 230)
      #t
      ())
    #(1364
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 135 2 65 124 71 166 104 98 86 72 205 138 49 172 146 23 76 243 214 16 65 247 173 41 37 136 222 246 237 20 59 31 249 162 136 253 32 207 54 245 141 75 254 75 44 212 163 129 212 218 80 200 237 165 103 79 2 4 73 174 29 61 215 126 68 237 72 94 2 66 1 5 142 134 179 39 210 132 227 91 171 73 252 124 51 84 23 87 63 49 10 250 158 26 83 86 110 15 174 81 110 9 144 7 150 80 48 246 244 107 7 113 22 53 63 38 203 70 109 28 243 243 83 0 215 68 210 216 248 131 200 163 27 67 194 13)
      #t
      ())
    #(1365
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 136 2 66 1 228 233 243 167 184 0 222 99 64 123 135 3 172 84 82 38 84 28 151 166 115 86 103 17 247 14 43 156 203 33 161 69 173 70 55 130 91 2 61 30 169 241 142 96 137 116 19 113 22 17 168 92 17 121 191 249 193 7 54 143 28 27 97 194 76 2 66 1 222 148 142 229 119 195 212 228 18 42 82 236 204 172 89 171 182 250 147 125 251 62 75 152 140 178 67 239 233 135 64 48 148 82 186 1 49 18 178 37 179 177 177 56 77 95 104 121 104 69 25 154 38 2 168 212 80 90 51 27 7 209 1 24 142)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 0 48 75 61 7 30 209 239 48 35 145 181 102 175 140 157 28 183 175 233 170 188 20 26 195 154 179 150 118 198 62 72 193 178 198 69 30 180 96 228 82 189 87 62 31 181 241 91 142 95 156 3 246 52 216 219 104 151 40 80 100 179 206 155 217 138 1 255 255 255 255 100 103 64 44 204 103 61 48 121 249 3 245 27 151 73 41 232 51 76 24 251 80 196 122 249 155 213 136 162 164 178 86 47 253 246 201 181 96 245 181 40 131 69 57 251 95 234 54 129 148 165 231 123 181 167 101 176 227 130 105 218)
  :der-encode
  #t
  :tests
  '(#(1366
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 135 2 66 0 182 207 100 134 26 43 22 227 57 118 9 93 191 69 165 146 199 194 66 40 196 161 221 114 127 48 61 94 235 135 229 56 138 208 92 50 143 130 76 64 171 211 230 206 0 63 239 92 213 157 238 0 105 173 99 72 234 110 87 249 15 107 220 10 130 2 65 34 129 129 193 128 54 110 84 81 223 239 53 147 206 102 72 4 203 66 213 168 213 4 107 129 107 61 175 102 2 250 253 154 194 220 36 184 201 58 16 2 68 128 136 37 88 182 173 61 158 144 89 35 220 208 253 42 17 150 71 84 169 180 107 143)
      #t
      ())
    #(1367
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 136 2 66 0 147 200 247 102 130 125 109 193 92 129 15 163 4 51 21 58 94 116 40 89 32 94 232 56 159 191 105 92 136 64 220 145 116 64 135 10 204 91 22 0 135 255 208 205 154 96 129 2 156 96 167 194 109 94 138 169 160 87 15 78 253 235 19 222 162 2 66 1 46 195 187 247 90 10 211 223 64 49 2 102 100 138 54 219 130 2 23 237 127 169 78 156 131 19 224 50 147 239 79 106 64 231 54 251 143 32 138 216 251 136 60 165 9 212 128 70 145 5 35 100 84 89 194 120 41 213 68 49 70 59 37 72 199)
      #t
      ())
    #(1368
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 136 2 66 1 82 56 140 109 166 97 100 183 6 180 29 212 221 72 23 109 110 175 101 37 248 118 239 15 242 209 71 246 150 110 191 173 241 118 127 166 109 4 32 61 62 201 201 55 161 240 201 69 174 217 83 227 75 228 68 194 25 253 59 148 211 39 122 166 82 2 66 1 101 140 30 91 46 86 58 73 209 28 136 61 5 196 145 214 40 240 169 44 62 61 200 219 154 76 141 95 13 200 70 172 34 175 139 60 95 181 187 226 207 169 134 20 220 255 216 125 225 206 226 197 145 42 88 153 80 90 12 91 202 165 19 226 198)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 0 0 0 0 2 251 166 160 97 32 30 166 177 237 66 101 22 53 104 115 94 186 183 134 0 205 246 167 17 1 220 99 190 175 84 109 151 162 20 252 99 150 121 59 1 78 177 170 122 114 143 83 222 178 255 153 153 163 128 141 223 237 21 233 98 155 1 153 56 82 218 220 57 41 154 90 69 182 189 124 141 200 236 103 231 173 187 53 159 168 250 93 68 151 126 21 226 229 169 172 240 195 54 69 243 242 198 140 82 110 7 115 47 179 80 67 113 156 250 252 22 6 60 142 88 133 10 149 132 54 164 229)
  :der-encode
  #t
  :tests
  '(#(1369
      "x-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 136 2 66 1 14 137 71 15 152 29 44 124 92 150 88 113 33 166 115 35 187 150 255 36 39 115 157 13 136 94 162 119 41 62 250 59 37 192 189 160 77 129 70 97 152 163 203 252 68 31 27 27 152 246 188 220 37 137 217 217 26 23 167 137 159 112 208 70 30 2 66 1 115 81 176 218 140 141 14 74 160 151 70 105 209 144 250 47 144 170 80 34 113 96 89 77 251 85 117 80 2 54 84 65 222 23 234 66 144 33 40 166 248 30 85 65 119 237 80 156 12 236 49 253 80 83 250 224 63 98 255 118 87 155 169 43 218)
      #t
      ())
    #(1370
      "x-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 136 2 66 1 16 148 172 35 202 70 163 226 180 172 59 170 230 80 79 27 251 61 223 45 185 171 64 237 163 45 142 10 5 114 121 152 248 85 42 3 59 176 82 65 232 38 168 106 29 3 1 78 174 58 165 254 26 69 202 172 29 179 232 19 139 156 245 144 104 2 66 1 71 237 177 90 80 128 238 47 146 159 120 182 172 134 96 74 174 81 182 116 250 70 234 174 127 223 217 11 246 77 97 137 52 17 85 244 235 169 55 234 231 76 158 72 14 180 251 126 106 175 212 40 94 127 197 3 238 110 194 15 11 20 21 190 6)
      #t
      ())
    #(1371
      "x-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 136 2 66 1 216 118 174 23 77 163 30 18 139 171 255 159 29 21 80 118 96 189 199 149 135 80 132 77 196 244 41 31 117 168 130 162 47 23 127 112 75 230 6 123 247 206 143 6 184 98 109 151 30 110 245 220 182 102 250 151 92 30 17 18 110 4 252 204 226 2 66 1 171 177 38 48 166 139 102 158 106 210 216 214 38 84 215 93 251 198 181 74 142 58 156 145 91 230 99 224 128 221 204 52 142 87 161 14 43 29 217 240 62 27 137 119 150 173 136 155 7 94 89 25 220 91 243 122 17 45 146 198 147 69 110 100 87)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 1 255 255 255 254 29 93 82 179 28 165 47 137 71 163 85 147 237 241 100 205 50 79 131 59 144 147 88 70 198 77 177 69 77 249 240 40 220 139 195 107 176 76 183 240 204 236 235 160 26 56 68 9 127 124 53 238 170 129 66 141 176 204 166 51 49 1 183 199 2 119 208 191 120 163 199 182 44 147 127 12 178 202 210 86 95 85 20 246 32 92 235 26 25 61 79 219 69 186 110 108 236 7 130 123 174 11 22 184 49 108 53 57 161 81 20 208 222 109 45 228 7 253 113 23 85 26 112 130 110 173 166)
  :der-encode
  #t
  :tests
  '(#(1372
      "x-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 134 2 65 78 214 146 175 30 209 180 189 92 234 58 168 221 198 243 241 93 138 110 224 1 111 160 232 235 149 133 128 231 66 24 50 236 192 227 135 195 74 175 172 99 128 186 196 25 234 69 196 42 230 66 106 245 3 132 127 34 196 156 47 69 99 56 193 167 2 65 122 206 173 222 2 172 225 102 139 193 163 54 13 52 225 37 175 222 35 15 83 108 21 77 145 230 200 118 190 225 211 74 224 110 220 187 202 12 124 209 118 70 132 9 19 22 71 64 177 46 46 34 79 227 239 61 236 111 216 74 129 181 129 193 136)
      #t
      ())
    #(1373
      "x-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 136 2 66 0 224 16 148 4 143 207 122 30 46 198 111 174 223 252 64 244 140 156 147 81 67 37 189 230 180 149 141 128 240 65 62 253 231 238 193 220 109 230 95 150 0 156 6 147 151 229 29 162 235 23 41 239 162 135 175 213 85 43 37 169 228 39 166 216 54 2 66 1 72 158 126 18 79 102 148 46 100 45 233 146 230 11 58 134 252 206 87 103 103 113 147 144 195 163 18 252 222 170 86 10 127 187 12 171 179 94 5 166 214 243 73 145 96 253 45 186 18 210 155 97 59 22 222 199 73 76 149 13 101 253 241 31 163)
      #t
      ())
    #(1374
      "x-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 136 2 66 1 210 150 41 34 19 56 13 225 51 220 102 236 235 139 216 87 165 196 104 175 232 85 192 93 169 219 147 115 115 181 31 144 32 202 17 53 52 21 218 118 187 106 249 151 164 134 210 55 14 49 173 204 10 69 49 149 42 59 89 66 134 120 238 89 67 2 66 1 89 121 163 198 9 194 194 9 154 225 178 144 218 61 97 59 36 142 58 16 222 122 215 112 223 252 130 251 51 231 79 195 32 117 51 249 114 133 207 69 87 166 64 126 154 119 94 89 239 234 238 66 100 178 99 73 51 166 186 248 196 6 240 196 169)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 35 3 129 134 0 4 0 199 200 129 123 242 240 101 42 74 75 81 64 199 115 226 97 8 10 10 17 19 149 133 110 138 51 80 245 235 86 18 189 99 179 103 185 101 233 46 149 56 234 59 121 8 174 241 173 228 182 142 23 249 249 20 132 149 193 103 209 196 221 73 19 73 0 8 191 11 226 151 154 187 129 17 253 13 118 138 220 173 119 65 19 168 34 193 187 96 136 112 83 181 207 140 149 99 231 103 5 163 145 236 225 84 181 223 177 20 178 14 53 29 244 1 75 236 25 250 135 114 8 69 128 28 240 107 127 255 255 255)
  :der-encode
  #t
  :tests
  '(#(1375
      "y-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 136 2 66 1 239 143 120 92 81 162 90 226 205 147 72 123 92 132 141 74 241 51 33 122 145 245 19 89 201 102 231 83 142 104 116 53 120 18 45 245 131 0 2 249 111 111 173 181 188 68 72 14 59 59 44 128 78 76 81 207 149 208 89 213 100 108 92 239 33 2 66 1 186 34 118 204 0 62 135 190 163 124 55 36 229 138 10 184 133 245 109 9 184 181 113 143 103 79 156 112 243 181 236 251 74 209 243 65 123 66 14 196 8 16 224 136 38 239 167 216 173 108 167 198 167 132 3 72 9 127 146 178 222 141 110 8 11)
      #t
      ())
    #(1376
      "y-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 136 2 66 1 85 151 138 220 75 87 13 137 117 17 245 236 251 101 163 25 71 230 233 137 218 23 222 167 22 98 91 179 250 123 146 184 83 98 62 176 205 156 226 165 226 180 216 193 194 169 14 192 79 231 157 1 37 118 236 114 138 69 197 206 71 198 213 0 192 2 66 0 247 159 168 185 78 226 130 163 209 129 88 146 203 241 93 126 189 246 44 176 66 199 107 179 199 16 194 62 50 183 89 146 204 36 157 132 7 33 152 228 237 99 215 36 53 160 125 46 215 111 39 141 115 153 246 26 91 92 153 127 69 105 47 237 34)
      #t
      ())
    #(1377
      "y-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 136 2 66 1 162 175 41 197 129 132 202 134 30 124 217 49 243 156 234 6 75 25 158 238 86 63 36 28 213 236 246 235 178 173 231 40 241 190 35 207 0 126 190 142 240 196 45 153 249 245 25 15 104 21 68 106 252 48 67 168 32 215 218 242 126 134 184 59 138 2 66 1 162 172 209 130 46 181 57 56 61 239 255 135 105 170 216 186 205 80 205 36 202 122 166 103 6 113 65 129 16 23 120 8 195 244 251 230 4 27 156 184 152 53 158 230 30 4 130 74 222 221 98 179 159 229 121 25 7 162 5 134 51 59 211 199 109)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 82 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 5 3 58 0 4 128 42 15 81 32 78 246 168 41 33 27 192 116 8 135 70 30 228 171 167 54 233 202 238 0 0 0 0 127 185 49 224 99 0 69 19 98 212 68 16 110 235 93 171 221 202 101 15 236 75 229 95 197 69 247 200)
  :der-encode
  #t
  :tests
  '(#(1378
      "x-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 60 2 28 14 23 232 69 14 168 93 32 26 193 32 173 130 25 219 166 118 233 55 241 57 235 40 202 59 2 183 167 2 28 120 57 84 138 71 252 111 77 93 189 79 167 107 148 122 185 211 253 31 66 139 243 176 235 202 254 133 214)
      #t
      ())
    #(1379
      "x-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 60 2 28 51 28 45 69 1 71 6 110 197 77 246 219 18 126 82 15 83 255 64 73 70 148 244 12 22 214 43 218 2 28 23 249 236 173 17 79 172 97 102 31 164 190 157 186 106 223 54 28 205 42 124 253 145 65 146 98 115 197)
      #t
      ())
    #(1380
      "x-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 60 2 28 64 205 204 128 249 62 70 155 37 124 245 137 5 0 235 110 108 176 245 246 184 27 113 113 89 186 170 67 2 28 13 116 135 89 209 65 213 77 21 8 11 191 118 219 30 157 169 52 214 164 59 93 248 111 175 238 159 168)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 82 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 5 3 58 0 4 203 50 12 132 242 108 0 161 180 173 113 70 145 76 174 18 101 41 22 93 231 54 61 138 239 154 189 5 163 151 212 107 135 40 49 118 183 246 157 161 249 70 21 202 68 49 252 71 178 160 230 12 0 0 0 0)
  :der-encode
  #t
  :tests
  '(#(1381
      "y-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 62 2 29 0 189 249 51 241 189 143 127 133 0 123 83 0 108 166 40 104 37 216 205 169 147 210 115 43 207 126 248 33 2 29 0 139 35 61 205 4 200 191 192 19 95 119 240 146 196 14 90 61 55 38 99 205 39 4 103 206 199 134 2)
      #t
      ())
    #(1382
      "y-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 29 0 161 48 40 30 23 163 190 187 191 128 125 130 161 126 232 72 26 227 85 217 121 134 6 110 188 35 169 210 2 28 87 150 123 137 117 5 215 131 57 22 150 139 36 211 244 164 215 88 129 181 48 114 93 40 236 231 133 175)
      #t
      ())
    #(1383
      "y-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 60 2 28 113 21 103 64 143 117 146 177 224 155 135 198 191 210 13 255 47 165 6 99 173 77 208 255 134 53 63 93 2 28 96 193 131 255 36 158 121 37 140 142 149 229 157 19 234 214 219 92 207 203 112 192 234 5 67 63 216 215)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 82 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 5 3 58 0 4 0 0 0 0 129 223 151 23 68 162 90 201 148 114 195 255 90 143 196 155 134 252 159 181 112 68 143 249 119 242 208 124 28 146 150 178 247 116 120 209 61 90 177 198 57 147 150 47 45 208 142 231 195 19 222 206)
  :der-encode
  #t
  :tests
  '(#(1384
      "x-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 60 2 28 20 26 164 35 174 54 141 0 239 205 201 163 166 17 2 136 138 47 52 87 210 31 28 235 21 166 70 208 2 28 44 249 24 91 2 84 52 184 7 254 200 108 45 238 8 120 39 254 58 7 177 116 237 219 224 179 252 99)
      #t
      ())
    #(1385
      "x-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 28 7 20 195 153 114 131 86 32 181 241 149 46 135 146 188 41 51 233 253 164 12 28 72 71 43 185 63 235 2 29 0 211 12 87 7 119 175 251 52 170 77 37 6 189 10 233 228 36 83 152 252 58 93 121 216 228 104 27 55)
      #t
      ())
    #(1386
      "x-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 29 0 136 8 156 209 99 129 186 117 177 187 131 0 83 32 41 112 235 223 74 50 34 131 19 120 217 120 71 19 2 28 59 206 241 165 231 14 238 19 171 172 144 185 91 118 76 243 68 204 201 192 180 112 63 123 230 2 146 218)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 82 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 5 3 58 0 4 13 40 180 247 254 31 108 111 166 167 125 17 228 59 211 233 39 23 88 223 52 198 95 165 119 166 221 59 0 0 0 0 40 1 212 131 130 134 22 132 184 210 203 215 229 152 154 13 124 21 167 232 25 181 115 170)
  :der-encode
  #t
  :tests
  '(#(1387
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 28 110 83 68 221 68 82 211 125 255 61 70 23 125 86 211 221 127 63 170 99 172 15 240 244 250 57 150 215 2 29 0 211 128 223 117 122 97 109 108 32 154 89 13 187 235 161 221 43 247 93 23 228 152 65 166 247 167 172 164)
      #t
      ())
    #(1388
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 29 0 200 91 152 15 164 20 157 154 196 24 9 12 158 218 135 84 209 234 82 40 251 224 74 145 129 87 135 159 2 28 79 132 143 184 126 24 134 20 173 146 180 224 189 223 174 173 225 215 209 157 166 162 73 228 203 215 51 88)
      #t
      ())
    #(1389
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 29 0 176 41 54 105 43 62 102 37 8 137 110 149 111 236 103 115 58 84 54 164 15 201 183 168 150 244 76 142 2 28 4 184 222 168 254 21 147 170 112 61 205 233 195 169 232 189 138 27 214 224 102 49 210 115 170 139 217 120)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 82 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 5 3 58 0 4 13 40 180 247 254 31 108 111 166 167 125 17 228 59 211 233 39 23 88 223 52 198 95 165 119 166 221 59 215 193 52 169 254 65 146 2 167 146 25 160 188 255 11 175 203 6 109 74 27 196 226 13 101 19 77 85)
  :der-encode
  #t
  :tests
  '(#(1390
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 29 0 151 80 163 16 49 27 56 59 30 156 54 198 48 3 116 130 97 70 11 82 35 63 135 26 141 13 14 135 2 28 76 171 121 217 187 240 197 112 227 10 35 131 64 91 78 203 236 134 8 221 225 210 75 55 48 184 120 53)
      #t
      ())
    #(1391
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 60 2 28 86 14 11 230 19 251 34 132 44 108 35 204 87 16 88 20 17 18 220 53 73 126 84 36 31 57 140 201 2 28 0 157 200 109 44 127 8 97 49 61 73 55 147 53 178 237 28 6 161 112 158 221 202 3 38 247 106 181)
      #t
      ())
    #(1392
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 62 2 29 0 165 201 149 252 31 176 169 19 242 187 93 181 93 64 188 132 107 120 243 46 183 124 232 3 123 30 96 134 2 29 0 176 188 145 110 207 253 235 129 47 11 177 109 2 54 213 254 119 216 85 186 71 0 156 146 21 129 235 79)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 82 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 6 3 58 0 4 211 49 94 219 73 140 218 231 225 5 251 28 185 207 177 200 183 54 168 49 224 190 244 123 227 193 83 17 181 19 210 191 22 154 87 6 7 249 220 184 9 165 56 64 239 110 144 122 127 233 14 227 255 255 255 255)
  :der-encode
  #t
  :tests
  '(#(1393
      "y-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 60 2 28 119 205 76 110 73 7 230 69 2 143 217 171 71 243 95 62 77 234 198 42 181 98 62 76 170 95 34 202 2 28 77 251 153 208 218 70 213 32 104 126 58 212 234 194 56 54 100 167 187 201 36 159 170 239 106 245 208 197)
      #t
      ())
    #(1394
      "y-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 60 2 28 39 12 156 67 173 233 220 108 245 56 83 215 181 68 219 68 170 67 41 29 32 248 103 76 244 210 207 171 2 28 47 109 93 77 179 43 47 84 121 35 187 219 157 122 121 4 74 43 2 20 155 168 164 9 145 77 223 119)
      #t
      ())
    #(1395
      "y-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 28 33 138 65 68 78 106 8 222 58 21 221 129 222 178 240 144 153 137 146 110 145 156 107 57 66 42 7 185 2 29 0 191 247 67 89 83 34 214 82 218 103 59 187 120 66 129 80 210 170 162 69 196 236 192 141 88 53 11 87)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 82 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 6 3 58 0 4 0 0 0 0 173 5 97 247 138 228 147 23 82 220 172 18 151 86 233 5 122 95 214 238 49 162 128 41 60 225 81 90 225 86 148 248 189 46 250 38 245 251 94 16 179 140 57 61 83 157 37 173 49 82 254 148)
  :der-encode
  #t
  :tests
  '(#(1396
      "x-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 60 2 28 36 12 91 19 113 185 180 92 199 42 227 46 249 220 166 3 217 38 68 188 51 200 138 245 73 76 69 104 2 28 34 86 72 178 21 78 11 56 52 164 38 179 192 243 198 138 253 53 103 21 103 6 100 180 188 235 212 77)
      #t
      ())
    #(1397
      "x-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 29 0 181 133 173 155 22 210 153 155 173 138 224 192 142 73 214 241 170 179 40 127 76 90 156 203 12 167 92 25 2 28 107 108 202 93 135 91 244 117 181 102 105 180 191 244 125 221 182 174 157 208 194 157 143 91 179 128 110 206)
      #t
      ())
    #(1398
      "x-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 60 2 28 92 155 104 114 85 62 214 191 35 236 95 204 90 193 246 207 73 163 14 147 162 117 85 102 52 231 205 68 2 28 104 126 58 83 108 103 50 90 151 180 109 178 77 85 116 105 176 220 56 224 87 74 91 212 170 232 249 118)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 82 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 6 3 58 0 4 103 160 151 12 114 161 91 43 248 48 237 228 80 247 45 41 247 226 78 48 121 51 227 159 227 122 98 105 0 0 0 0 10 132 161 212 114 57 213 156 70 223 112 38 92 143 114 141 74 109 201 140 155 18 55 220)
  :der-encode
  #t
  :tests
  '(#(1399
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 29 0 148 184 40 179 96 131 78 152 243 72 208 226 8 79 57 182 55 90 127 179 26 194 193 106 120 213 193 35 2 28 46 107 102 134 209 181 130 225 101 190 27 253 161 179 92 161 104 57 243 18 250 116 37 43 167 244 46 45)
      #t
      ())
    #(1400
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 60 2 28 105 192 247 47 83 8 239 65 218 208 226 234 77 189 58 249 120 168 1 134 173 237 143 51 193 250 28 126 2 28 34 186 115 226 11 170 166 151 198 125 231 60 137 117 39 5 170 63 58 205 175 2 125 126 242 22 227 56)
      #t
      ())
    #(1401
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 29 0 165 160 38 4 212 237 255 21 108 66 97 147 149 164 19 4 68 14 55 94 148 49 74 72 46 229 46 248 2 28 26 95 136 193 199 8 231 207 38 151 245 116 193 237 203 94 104 221 106 37 25 155 228 13 25 8 96 250)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 82 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 6 3 58 0 4 103 160 151 12 114 161 91 43 248 48 237 228 80 247 45 41 247 226 78 48 121 51 227 159 227 122 98 105 215 193 52 170 27 190 196 177 183 222 90 137 46 242 103 97 84 15 148 202 77 108 192 104 227 182 137 35)
  :der-encode
  #t
  :tests
  '(#(1402
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 28 88 201 72 70 40 160 100 160 192 112 139 140 201 204 102 200 108 70 146 40 104 78 217 221 207 216 79 96 2 29 0 198 118 186 103 159 186 91 112 220 80 43 48 124 68 199 57 148 178 33 80 37 101 75 238 160 14 223 134)
      #t
      ())
    #(1403
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 62 2 29 0 212 146 125 238 219 54 65 111 248 18 201 149 20 127 144 106 60 37 241 250 105 49 199 170 197 153 54 51 2 29 0 149 27 226 150 171 127 233 94 199 243 208 164 39 122 226 180 92 39 54 181 109 221 4 28 7 199 191 106)
      #t
      ())
    #(1404
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 62 2 29 0 145 217 224 27 125 133 125 109 193 199 149 227 99 165 219 158 138 206 179 106 113 243 204 197 0 227 32 11 2 29 0 209 36 38 87 28 216 231 118 75 104 44 182 91 158 15 237 58 236 62 34 78 216 159 69 97 11 249 197)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 82 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 6 3 58 0 4 14 59 153 48 248 49 40 68 79 145 203 153 218 215 173 8 235 218 103 81 36 159 244 128 180 248 201 155 168 122 179 25 3 94 56 130 139 237 253 139 136 100 140 80 154 147 162 201 8 147 102 123 0 0 0 0)
  :der-encode
  #t
  :tests
  '(#(1405
      "y-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 28 96 228 154 218 220 37 58 128 200 152 166 229 187 96 114 159 138 73 60 105 202 118 47 95 145 75 176 149 2 29 0 169 118 124 90 207 152 192 72 109 203 220 141 137 52 6 131 62 211 215 81 43 144 179 220 140 134 224 104)
      #t
      ())
    #(1406
      "y-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 28 59 128 43 194 111 191 10 26 194 71 22 34 114 19 0 228 182 182 96 134 131 220 83 193 105 91 187 73 2 29 0 164 132 196 196 12 28 217 108 114 187 89 25 60 64 143 54 174 125 181 123 11 112 25 184 52 18 245 110)
      #t
      ())
    #(1407
      "y-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 29 0 187 67 51 103 123 189 119 77 163 4 70 164 92 180 69 126 187 243 72 253 121 160 87 14 148 53 61 245 2 28 3 174 233 251 114 226 131 214 255 39 33 121 102 150 231 215 231 68 233 18 132 17 81 154 49 160 170 156)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 82 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 6 3 58 0 4 214 147 145 112 218 100 23 116 61 217 5 23 182 181 162 73 216 23 108 220 5 67 149 165 255 255 255 255 64 209 242 74 145 3 226 135 207 241 205 51 200 65 168 245 172 100 68 26 219 96 229 170 85 203 244 162)
  :der-encode
  #t
  :tests
  '(#(1408
      "x-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 28 91 9 96 191 155 128 233 29 202 101 229 88 173 242 113 241 107 35 232 123 204 108 81 239 16 206 147 82 2 29 0 143 132 167 195 18 178 28 149 156 108 247 239 191 216 254 183 23 79 246 64 26 133 225 123 166 18 30 11)
      #t
      ())
    #(1409
      "x-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 60 2 28 31 26 98 35 170 215 96 22 172 53 24 51 160 183 133 156 107 111 249 237 249 0 208 64 200 204 57 138 2 28 81 43 11 68 156 59 208 223 158 81 83 246 232 214 56 23 82 237 98 120 93 133 61 114 149 13 157 127)
      #t
      ())
    #(1410
      "x-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 60 2 28 3 74 38 76 157 63 234 253 212 136 197 40 175 39 250 69 197 143 40 207 228 161 99 125 26 181 103 211 2 28 77 124 5 229 138 247 242 136 171 131 208 27 191 143 173 29 140 167 147 34 29 74 245 254 76 113 159 211)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 169 251 87 219 98 80 19 137 89 79 14 233 252 22 82 250 131 55 127 163 2 225 156 239 100 37 47 192 177 71 247 116 149 7 172 245 176 67 57 237 16 43 156 166 13 185 140 22 91 148 235 232 85 210 32 46 70 220 225 91 161 224 40 190)
  :der-encode
  #t
  :tests
  '(#(1411
      "x-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 32 98 170 180 10 54 214 160 210 86 68 113 156 227 29 198 41 236 104 79 111 13 163 47 157 208 52 204 196 33 219 208 237 2 33 0 161 250 107 13 253 149 88 218 41 55 79 183 117 5 238 138 179 87 33 97 113 31 130 29 17 128 124 127 255 145 12 28)
      #t
      ())
    #(1412
      "x-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 32 116 12 211 211 169 205 157 190 5 234 212 227 158 84 219 39 192 241 87 157 166 142 58 165 201 36 91 4 122 235 195 184 2 33 0 138 231 140 18 35 61 55 143 226 206 60 15 178 183 105 248 70 56 48 167 26 94 81 135 193 27 32 253 215 229 4 69)
      #t
      ())
    #(1413
      "x-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 33 0 162 143 48 36 92 95 176 194 37 253 236 35 146 77 194 205 76 45 168 136 209 238 27 197 68 88 88 198 70 1 92 168 2 32 14 227 100 193 73 28 69 81 239 53 9 190 143 136 219 14 4 208 175 179 101 40 174 218 19 1 177 73 72 204 156 214)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 53 26 69 251 146 15 44 159 27 23 132 56 250 59 242 114 255 147 40 184 129 196 119 161 245 106 140 14 136 70 82 118 18 112 248 6 254 64 173 151 235 247 108 104 37 56 75 120 10 230 175 204 199 146 176 95 47 179 235 123 127 255 255 255)
  :der-encode
  #t
  :tests
  '(#(1414
      "y-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 127 32 47 84 245 145 181 17 5 178 39 238 109 109 163 173 221 252 75 94 129 158 252 4 190 252 220 191 116 132 247 131 2 32 67 96 234 4 80 57 85 252 63 2 89 40 178 220 229 15 242 213 139 144 96 179 75 190 223 195 194 25 179 180 53 91)
      #t
      ())
    #(1415
      "y-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 98 226 24 220 163 46 78 243 86 146 233 49 94 30 3 107 239 23 102 7 59 132 110 56 222 32 210 210 147 73 249 254 2 32 81 157 77 76 97 88 217 84 116 215 147 160 238 156 38 10 12 84 105 197 170 183 149 16 151 27 65 251 79 174 75 175)
      #t
      ())
    #(1416
      "y-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 33 0 163 144 34 149 246 247 67 172 117 77 183 179 252 216 35 190 145 123 17 145 165 112 87 40 245 104 36 146 120 77 167 241 2 32 67 222 246 54 102 14 255 114 230 67 94 219 133 12 145 38 199 6 121 56 102 143 36 153 152 160 228 0 107 142 231 219)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 0 0 0 1 41 178 20 110 54 252 5 85 69 191 143 44 199 15 142 115 232 178 94 83 147 101 173 117 119 204 53 53 74 43 140 3 25 188 76 205 62 96 218 17 148 119 194 63 175 143 194 220 239 196 45 58 247 88 39 174 180 47 111 15)
  :der-encode
  #t
  :tests
  '(#(1417
      "x-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 33 0 134 208 91 38 169 202 126 16 174 6 129 187 76 53 160 109 122 78 145 143 134 37 227 223 167 172 45 90 237 169 28 5 2 32 8 197 244 117 169 88 136 118 157 164 160 225 182 53 194 41 47 101 79 147 74 92 80 16 254 12 114 159 61 17 225 177)
      #t
      ())
    #(1418
      "x-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 32 67 196 71 71 16 210 80 148 162 226 26 156 192 133 133 194 96 21 249 249 64 18 177 0 231 44 7 99 170 158 12 255 2 33 0 131 69 196 111 213 89 44 239 189 94 187 37 137 101 192 93 150 78 110 106 39 129 152 221 193 227 136 207 30 117 134 124)
      #t
      ())
    #(1419
      "x-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 109 39 36 22 126 129 101 40 73 28 206 87 79 5 38 32 157 229 44 208 242 175 0 133 40 79 208 80 22 61 55 197 2 32 118 221 29 213 15 249 181 83 176 225 66 183 230 198 190 142 223 55 8 221 41 47 3 243 233 191 21 125 33 218 169 235)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 104 11 236 171 231 215 223 79 173 254 90 224 31 186 94 165 27 118 117 150 6 162 227 6 18 230 103 65 155 136 93 5 8 84 29 203 7 35 120 92 60 118 101 129 167 81 74 31 244 46 68 55 214 63 135 130 113 203 134 15 0 0 0 0)
  :der-encode
  #t
  :tests
  '(#(1420
      "y-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 50 16 9 160 108 117 156 84 205 102 186 175 160 203 253 7 238 219 25 241 42 30 214 84 221 82 181 111 156 79 172 124 2 32 25 86 49 10 126 71 87 236 131 221 185 45 39 99 96 115 84 103 129 73 241 173 146 56 121 40 207 136 123 75 237 15)
      #t
      ())
    #(1421
      "y-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 33 0 155 221 53 152 129 194 57 226 65 92 162 175 61 24 70 59 178 75 229 63 111 99 108 189 32 54 11 107 51 59 195 69 2 32 15 240 59 195 108 193 151 91 220 134 128 196 79 191 42 239 221 246 124 17 140 48 75 139 61 54 14 177 2 3 195 164)
      #t
      ())
    #(1422
      "y-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 72 86 94 183 231 130 13 64 117 75 95 38 74 76 234 250 98 191 117 8 66 65 81 75 73 25 149 231 151 30 105 149 2 32 61 166 223 61 53 79 72 218 239 109 7 140 241 18 66 149 252 140 50 17 242 117 121 103 199 129 220 46 156 98 237 26)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 125 22 253 101 106 158 107 52 228 93 140 140 59 69 142 174 123 188 40 121 248 180 246 17 113 169 111 102 78 238 144 97 0 0 0 1 70 159 180 86 202 106 23 32 202 141 178 93 86 126 18 28 249 33 206 19 227 64 0 248 193 47 82 114)
  :der-encode
  #t
  :tests
  '(#(1423
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 32 81 142 136 93 239 2 46 181 2 15 201 15 64 36 216 113 34 220 15 62 215 248 105 237 119 32 255 116 160 9 251 123 2 33 0 138 62 38 168 205 66 109 33 235 165 205 122 86 20 243 100 67 149 207 206 203 36 254 118 10 104 167 169 232 240 156 2)
      #t
      ())
    #(1424
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 4 176 30 92 195 206 155 241 8 68 188 28 178 29 238 255 110 188 158 42 112 16 207 187 58 240 129 19 84 89 156 129 2 32 46 101 251 141 182 47 37 89 16 234 77 82 53 187 33 170 103 170 89 255 213 25 145 30 205 152 147 0 10 182 123 180)
      #t
      ())
    #(1425
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 33 0 148 187 6 1 25 140 76 226 102 176 147 36 38 255 208 1 50 215 212 226 222 101 239 71 245 99 96 130 95 38 36 56 2 32 39 52 50 125 25 137 201 88 15 84 88 240 74 172 111 213 117 42 30 229 226 54 233 237 26 124 11 45 155 54 219 16)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 125 22 253 101 106 158 107 52 228 93 140 140 59 69 142 174 123 188 40 121 248 180 246 17 113 169 111 102 78 238 144 97 169 251 87 218 91 78 245 101 115 251 243 111 210 245 219 21 23 189 228 6 220 4 82 20 60 211 71 36 94 63 1 5)
  :der-encode
  #t
  :tests
  '(#(1426
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 77 222 25 127 150 44 99 167 121 156 134 46 137 123 59 177 231 167 221 251 154 183 124 42 23 165 65 81 206 96 74 214 2 32 1 126 122 239 134 229 51 8 100 37 162 196 179 32 130 241 24 145 62 243 102 124 132 55 103 46 11 188 124 43 141 126)
      #t
      ())
    #(1427
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 124 83 237 29 80 74 212 186 83 211 151 146 1 42 52 208 7 37 10 43 141 28 161 137 192 217 247 92 204 154 153 87 2 32 9 185 125 204 92 103 72 113 20 35 29 96 19 116 168 54 76 175 163 149 129 41 23 98 32 43 146 21 213 17 53 253)
      #t
      ())
    #(1428
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 32 81 50 69 171 43 106 66 6 187 15 105 112 200 173 4 10 148 114 93 220 154 8 219 15 217 222 249 56 102 255 187 161 2 33 0 165 58 122 179 125 236 237 174 24 221 91 92 72 235 100 43 122 156 146 126 107 207 107 218 195 167 87 230 210 193 105 197)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 127 133 233 141 107 230 139 161 219 58 14 30 221 214 111 5 149 33 235 65 23 231 45 128 65 52 57 46 255 255 255 255 14 254 95 184 227 40 132 224 121 96 99 238 25 9 73 68 215 153 129 55 179 5 255 59 95 2 136 246 122 27 106 46)
  :der-encode
  #t
  :tests
  '(#(1429
      "x-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 75 94 174 205 68 52 185 163 5 36 144 229 215 71 37 209 27 27 176 234 179 52 26 183 229 52 54 56 185 99 9 165 2 32 96 196 252 250 202 200 248 182 7 148 2 181 20 69 48 51 96 108 66 239 209 102 246 113 21 100 78 192 204 112 79 242)
      #t
      ())
    #(1430
      "x-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 23 196 95 152 20 217 85 60 23 215 63 204 241 6 7 112 219 169 229 64 175 41 178 87 108 206 82 68 148 214 200 210 2 32 92 192 142 2 106 237 135 251 179 214 242 232 224 204 128 131 240 78 179 253 6 225 46 16 143 24 11 62 15 222 199 62)
      #t
      ())
    #(1431
      "x-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 81 91 201 192 132 117 123 189 190 144 73 126 197 252 167 94 139 72 230 79 121 68 23 175 43 168 187 247 142 169 146 245 2 32 104 195 20 153 70 53 19 84 11 167 137 189 170 69 48 136 65 23 193 133 99 152 186 59 25 40 96 41 243 250 121 123)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 0 88 35 122 52 249 61 139 112 19 249 107 139 214 24 48 10 39 150 202 217 53 15 68 229 187 137 222 245 178 80 137 0 0 0 0 73 225 151 49 54 145 79 185 116 137 121 63 228 74 33 3 199 188 107 144 254 24 57 118 208 121 70 50)
  :der-encode
  #t
  :tests
  '(#(1432
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 32 3 128 144 191 159 63 100 5 25 212 24 65 79 10 127 138 251 13 190 76 34 93 79 159 162 132 146 43 165 249 102 73 2 33 0 139 250 222 215 179 234 56 247 235 127 153 18 68 49 48 180 65 142 91 172 193 106 111 248 37 61 79 25 38 236 237 103)
      #t
      ())
    #(1433
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 32 116 203 118 26 198 181 104 124 41 241 132 72 197 186 128 77 88 105 120 13 227 126 86 6 172 84 97 177 185 105 124 254 2 33 0 152 133 42 173 183 187 43 68 203 205 67 46 238 98 189 176 206 188 171 140 29 36 172 229 33 139 237 238 53 96 148 56)
      #t
      ())
    #(1434
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 119 203 197 140 87 169 18 163 166 97 83 182 232 63 12 13 175 111 125 20 73 250 154 41 40 29 213 210 33 174 142 141 2 32 11 86 207 245 59 172 204 229 136 202 92 142 218 71 207 116 165 126 187 216 68 129 38 165 10 205 177 28 142 10 42 83)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 0 88 35 122 52 249 61 139 112 19 249 107 139 214 24 48 10 39 150 202 217 53 15 68 229 187 137 222 245 178 80 137 169 251 87 219 88 13 18 139 7 212 186 215 40 250 20 50 137 241 213 32 13 105 180 151 33 251 14 166 78 245 13 69)
  :der-encode
  #t
  :tests
  '(#(1435
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 99 165 129 201 230 97 0 246 80 217 255 17 173 123 234 98 35 134 162 108 83 55 183 27 77 151 161 32 193 70 52 49 2 32 92 198 187 128 13 238 183 58 22 129 72 151 239 154 98 91 189 182 228 180 95 204 234 240 163 24 41 128 97 158 167 39)
      #t
      ())
    #(1436
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 125 98 251 251 69 231 63 250 207 156 129 214 135 105 54 73 64 83 116 148 153 34 150 165 6 86 115 26 94 190 26 177 2 32 123 152 111 175 36 52 147 206 143 106 94 39 130 113 51 156 193 141 63 216 160 15 63 176 122 93 187 55 232 32 32 157)
      #t
      ())
    #(1437
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 33 0 146 205 174 211 228 132 43 85 116 91 19 168 77 74 103 238 143 164 236 124 147 159 74 25 66 94 208 200 107 195 111 156 2 31 91 82 160 149 127 252 252 235 70 98 253 210 26 240 132 111 76 135 122 55 137 123 80 246 42 179 68 70 157 158 104)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 152 148 194 197 174 144 155 201 246 159 222 177 169 193 153 102 192 156 99 200 215 184 42 203 26 131 210 70 81 113 111 102 73 57 203 119 105 215 79 34 53 173 6 83 224 211 49 20 6 46 189 144 71 139 248 226 25 210 207 168 255 255 255 255)
  :der-encode
  #t
  :tests
  '(#(1438
      "y-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 81 87 207 166 66 232 211 183 117 54 132 106 15 246 202 218 234 95 83 151 77 124 85 56 94 132 89 42 55 251 178 88 2 32 113 225 126 10 28 132 128 91 46 103 96 226 207 248 235 155 57 106 9 38 73 5 253 219 141 177 226 167 203 82 33 215)
      #t
      ())
    #(1439
      "y-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 97 85 121 181 254 134 88 94 206 16 208 193 234 162 163 13 93 75 35 178 200 194 186 81 202 131 234 81 168 247 59 54 2 32 68 65 254 172 241 50 219 68 229 217 215 78 241 131 189 248 109 37 248 244 143 90 188 130 134 224 221 47 157 192 209 137)
      #t
      ())
    #(1440
      "y-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 52 229 212 171 27 161 22 214 74 101 176 152 178 156 199 145 156 125 224 57 241 230 198 42 46 211 241 128 28 7 38 58 2 32 105 217 213 235 33 141 189 88 174 35 210 101 59 219 128 217 45 134 114 227 197 24 165 82 154 87 74 148 192 201 204 224)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 8 3 66 0 4 169 251 87 219 25 49 220 214 47 211 96 26 95 25 123 98 186 231 73 210 242 143 123 45 2 184 166 55 106 224 80 165 70 237 231 88 204 57 88 19 178 140 207 47 183 202 79 242 202 54 185 99 71 50 72 224 1 239 81 26 166 31 47 27)
  :der-encode
  #t
  :tests
  '(#(1441
      "x-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 33 0 149 114 223 212 109 83 8 117 41 45 245 193 159 43 102 247 109 42 181 232 200 89 70 79 163 103 18 48 159 128 77 0 2 32 79 178 157 109 247 53 4 250 187 42 17 180 43 58 101 182 86 138 103 192 184 68 43 72 115 51 146 168 12 251 154 105)
      #t
      ())
    #(1442
      "x-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 33 0 133 2 151 149 114 235 3 124 192 136 224 181 208 14 138 232 169 89 111 210 39 75 230 23 12 239 164 75 127 183 52 50 2 32 113 215 64 203 196 217 154 199 7 201 129 56 194 103 107 111 250 190 5 13 183 50 11 134 159 63 5 212 154 58 23 225)
      #t
      ())
    #(1443
      "x-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 106 215 226 202 103 14 12 127 248 197 198 240 180 252 226 48 176 74 114 154 17 203 240 3 200 188 232 121 85 188 86 200 2 32 41 113 155 22 91 172 104 34 201 88 40 48 205 75 12 97 224 59 252 220 39 80 217 80 237 39 51 15 220 129 254 67)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 70 33 23 210 227 58 125 177 185 92 138 106 60 121 130 248 61 169 104 23 231 73 113 140 174 231 182 170 156 157 164 232 242 255 121 81 103 78 237 43 86 154 184 70 245 144 2 168 80 230 96 106 151 38 169 32 156 158 148 95 191 108 187 201 164 135 196 164 216 28 82 172 54 132 194 108 51 146 185 189 36 247 24 72 33 190 6 246 68 139 36 168 255 255 255 255)
  :der-encode
  #t
  :tests
  '(#(1444
      "y-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 100 2 48 67 163 172 47 61 43 77 55 35 169 121 48 176 35 238 115 1 10 124 248 210 169 147 114 243 19 43 215 217 200 53 116 222 58 184 101 37 239 196 238 44 89 121 157 95 247 239 180 2 48 52 245 154 62 169 245 38 127 132 88 175 218 163 135 62 35 54 224 171 138 64 202 27 121 124 189 151 125 25 47 32 36 249 235 141 57 179 123 154 35 143 32 141 102 186 205 39 191)
      #t
      ())
    #(1445
      "y-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 100 2 48 53 49 173 162 91 141 154 249 184 126 82 36 205 106 109 149 108 23 220 50 62 248 152 15 73 122 110 126 68 200 61 105 183 77 231 145 214 43 206 172 175 247 55 136 99 221 114 91 2 48 69 157 21 83 147 153 64 147 128 175 153 213 96 197 97 33 125 170 92 83 151 41 69 48 103 221 26 164 189 157 242 181 52 146 15 13 98 19 38 30 206 161 111 14 214 133 54 177)
      #t
      ())
    #(1446
      "y-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 100 2 48 67 138 12 255 159 207 207 88 127 140 64 119 90 212 78 164 176 237 105 242 213 71 190 254 41 93 31 185 194 77 220 185 127 34 128 39 223 85 42 6 191 101 123 76 32 39 38 21 2 48 94 21 118 48 187 116 79 200 231 247 89 1 222 73 142 90 240 181 81 29 254 238 12 76 31 46 92 74 160 18 157 229 123 135 162 161 62 165 157 24 125 81 203 235 110 242 36 7)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 140 185 30 129 238 89 1 183 26 89 164 247 200 23 74 224 95 227 186 0 246 153 220 188 60 146 51 38 92 100 5 135 179 193 101 89 60 45 118 181 255 196 184 220 188 176 230 85 58 14 93 20 242 208 232 239 226 189 138 162 96 216 172 224 107 249 100 197 27 171 130 7 7 10 45 48 65 11 182 184 122 238 203 127 255 128 47 45 78 163 202 246 224 231 231 38)
  :der-encode
  #t
  :tests
  '(#(1447
      "x-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 100 2 48 22 73 108 8 195 7 103 115 252 216 65 165 226 94 26 135 16 142 11 169 15 151 39 245 57 3 75 210 207 104 142 1 169 85 104 106 21 17 46 5 144 252 145 227 153 95 245 248 2 48 49 177 183 51 143 116 173 186 51 113 42 131 167 198 133 231 205 95 59 232 78 249 81 236 173 80 250 203 124 110 195 147 163 186 197 46 167 177 33 43 217 47 79 69 169 248 81 76)
      #t
      ())
    #(1448
      "x-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 102 2 49 0 135 243 9 2 146 231 155 114 44 222 90 237 175 164 36 79 110 180 96 162 128 226 224 80 57 155 157 128 35 145 173 80 33 8 112 74 60 11 185 249 174 87 28 63 125 236 108 11 2 49 0 137 174 0 67 222 56 165 133 161 99 44 114 17 183 131 3 175 163 248 147 97 84 166 230 90 111 114 156 59 30 198 106 23 117 170 70 90 248 238 214 223 234 165 186 152 206 219 65)
      #t
      ())
    #(1449
      "x-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 100 2 48 114 8 34 171 239 169 18 101 167 184 212 70 236 59 196 5 253 25 33 120 170 27 133 221 102 51 150 168 150 163 44 17 158 100 177 162 8 67 248 30 221 67 192 55 9 184 219 198 2 48 32 106 233 91 177 141 45 56 68 163 147 64 135 46 219 161 97 30 62 160 232 76 234 124 182 207 242 130 175 65 77 139 90 160 190 138 171 193 181 27 113 33 212 38 145 107 1 181)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 105 235 243 50 225 235 36 85 50 74 117 114 161 121 119 164 226 149 81 8 238 139 216 27 214 209 245 85 214 8 104 127 91 187 57 133 142 190 227 4 152 91 170 125 9 200 48 187 103 43 156 150 104 77 252 0 127 1 94 57 205 173 169 254 22 219 80 34 191 209 115 52 140 170 252 82 134 132 98 31 151 251 162 79 44 48 227 220 114 135 114 232 0 0 0 0)
  :der-encode
  #t
  :tests
  '(#(1450
      "y-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 100 2 48 30 80 39 252 198 48 170 8 117 10 71 37 145 157 217 7 36 34 162 26 202 157 51 38 190 195 230 172 4 11 169 120 73 81 177 253 166 245 136 230 13 203 85 11 117 121 58 78 2 48 13 243 34 70 65 246 128 79 77 27 249 81 5 30 8 124 225 250 115 101 196 59 210 120 120 98 104 51 240 145 144 204 10 127 162 155 22 188 44 160 211 79 208 102 13 36 113 143)
      #t
      ())
    #(1451
      "y-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 100 2 48 78 97 227 71 64 169 246 219 8 84 250 242 5 113 154 61 152 239 100 75 134 36 27 133 143 162 41 89 192 67 149 87 139 239 123 227 80 54 174 122 159 254 185 162 23 51 17 244 2 48 30 150 124 59 96 113 211 117 96 253 100 164 254 9 33 177 214 0 246 13 136 63 222 200 22 131 97 118 197 230 122 208 81 130 170 8 12 126 33 132 192 113 0 80 213 35 240 226)
      #t
      ())
    #(1452
      "y-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 100 2 48 44 48 144 197 129 229 117 218 88 168 246 89 247 76 94 238 86 100 0 235 29 145 222 10 149 14 120 117 66 230 87 47 115 185 246 212 248 31 28 142 66 249 228 96 218 195 193 220 2 48 117 107 27 105 62 127 224 102 134 112 140 42 96 152 84 172 205 33 227 25 93 132 183 44 17 200 115 144 141 23 93 252 0 192 14 187 223 142 43 182 151 15 47 25 120 83 3 204)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 79 181 104 134 102 103 63 16 66 135 66 139 91 174 107 216 42 92 105 181 35 118 42 167 57 178 69 148 169 168 18 151 49 141 246 19 246 183 55 154 244 121 121 174 127 255 255 255 126 45 50 91 65 254 131 26 35 203 105 76 184 10 48 17 156 25 97 67 83 110 227 52 65 107 164 55 164 25 5 76 24 10 148 81 84 89 107 131 215 247 195 166 182 5 150 69)
  :der-encode
  #t
  :tests
  '(#(1453
      "x-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 100 2 48 9 47 14 225 254 235 121 192 84 174 54 35 95 135 23 233 238 114 180 102 177 112 77 79 167 138 221 252 209 53 24 166 77 178 178 253 176 100 57 172 188 76 4 95 178 194 60 58 2 48 35 113 202 109 54 244 38 97 98 238 92 101 124 113 206 163 93 206 195 99 44 91 34 10 111 35 172 225 186 101 98 168 65 174 238 239 232 122 121 152 173 250 241 133 184 85 142 74)
      #t
      ())
    #(1454
      "x-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 100 2 48 108 143 75 230 65 175 175 91 249 28 224 137 116 210 132 236 230 174 199 71 146 36 114 41 250 134 198 89 126 237 63 181 7 183 18 187 119 175 2 38 225 187 179 186 214 50 176 216 2 48 119 89 84 254 139 249 54 21 123 122 183 166 131 246 220 24 56 168 113 130 0 98 27 200 191 47 50 183 120 246 200 232 198 86 83 43 80 222 57 172 34 210 43 55 220 207 209 249)
      #t
      ())
    #(1455
      "x-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 100 2 48 118 229 192 117 130 23 116 0 223 69 49 20 254 215 70 244 7 4 25 120 151 180 202 33 183 46 91 68 212 202 64 207 202 165 94 68 70 53 92 145 234 151 103 243 140 129 114 223 2 48 12 109 215 62 239 187 76 6 232 35 34 77 142 250 163 238 147 78 74 151 238 210 131 53 19 180 215 53 237 6 235 85 11 42 95 167 248 102 19 214 39 217 219 70 106 250 102 70)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 12 3 98 0 4 140 185 30 112 193 34 216 8 81 92 229 56 61 31 117 63 149 2 58 100 173 238 123 112 114 188 191 67 255 189 253 251 5 6 13 106 143 94 165 2 42 106 14 98 69 25 2 53 89 158 168 49 170 88 87 160 161 24 212 135 30 138 134 174 226 150 90 251 220 254 63 181 14 94 124 148 103 42 99 103 46 175 38 56 78 207 168 215 167 133 18 214 166 198 61 134)
  :der-encode
  #t
  :tests
  '(#(1456
      "x-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 100 2 48 73 92 125 95 38 42 215 112 245 242 35 203 248 13 12 158 37 108 65 209 155 169 173 37 31 205 149 137 21 67 76 86 199 246 13 178 242 105 184 182 170 73 255 122 3 20 245 177 2 48 38 36 142 147 15 4 208 103 152 244 71 173 230 10 200 132 57 167 177 226 189 152 124 3 177 125 221 53 124 36 130 192 109 129 224 238 199 32 171 81 128 254 252 191 42 149 213 166)
      #t
      ())
    #(1457
      "x-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 100 2 48 89 50 110 216 131 3 214 221 49 221 123 76 126 48 51 113 114 172 74 156 53 17 196 128 92 32 148 55 77 218 209 81 145 187 221 63 231 165 232 106 79 185 208 196 98 22 73 44 2 48 54 223 237 243 65 146 26 254 158 49 88 180 74 125 183 171 55 14 44 67 73 106 52 208 159 168 138 78 140 143 176 206 141 147 60 8 195 158 162 117 3 25 158 154 99 45 34 12)
      #t
      ())
    #(1458
      "x-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 100 2 48 92 83 232 252 117 253 51 143 46 40 187 136 111 163 200 139 9 57 90 102 232 164 82 141 229 19 117 194 17 240 225 199 238 4 19 77 176 111 108 174 212 38 91 230 145 196 52 113 2 48 81 172 129 92 55 126 106 240 63 225 222 109 185 92 166 203 172 22 232 179 208 182 56 79 21 58 79 121 82 182 73 35 104 50 102 211 0 56 209 70 94 64 13 99 69 213 19 175)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 12 3 98 0 4 0 0 0 0 74 197 181 145 64 205 100 6 5 11 13 129 52 17 161 142 74 132 73 89 107 31 171 211 111 196 158 68 120 17 125 178 234 82 44 202 164 60 193 190 170 154 24 163 95 191 109 236 26 77 42 139 199 180 195 156 238 218 113 8 6 129 104 169 78 135 22 29 253 211 4 13 249 246 218 228 215 235 90 136 40 109 1 76 146 207 224 9 144 43 52 99)
  :der-encode
  #t
  :tests
  '(#(1459
      "x-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 100 2 48 14 151 31 255 253 123 134 162 22 207 46 140 34 103 235 253 191 255 227 60 201 26 87 138 189 179 176 101 163 56 41 177 232 93 119 168 52 144 189 134 43 72 69 69 55 50 118 228 2 48 29 238 58 91 16 33 229 215 242 246 40 59 228 195 119 73 32 0 137 175 48 57 132 126 226 217 214 42 191 227 97 68 230 222 150 144 113 75 217 49 83 93 115 248 114 245 80 155)
      #t
      ())
    #(1460
      "x-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 100 2 48 112 128 183 14 96 235 59 245 83 133 85 85 74 232 177 53 236 99 120 97 14 95 225 201 227 209 100 107 97 236 40 245 30 127 231 237 159 177 135 23 100 30 125 235 185 14 182 71 2 48 23 212 76 198 14 249 217 208 15 54 114 251 16 31 14 45 118 164 114 211 65 129 166 7 161 62 181 135 86 100 139 160 85 93 174 106 203 53 125 60 213 227 14 119 88 136 77 66)
      #t
      ())
    #(1461
      "x-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 100 2 48 33 6 116 248 45 135 49 70 126 152 147 192 7 115 57 113 116 8 55 206 183 142 225 169 87 231 153 195 48 159 39 218 118 131 49 38 45 249 66 147 248 75 133 251 0 167 12 115 2 48 104 107 224 36 10 197 39 241 86 14 109 156 32 175 123 117 91 228 33 195 14 195 218 233 75 178 208 29 123 10 242 137 76 150 165 186 24 26 178 217 43 159 24 219 45 109 210 142)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 12 3 98 0 4 73 150 122 212 18 190 46 225 212 53 206 98 97 255 18 114 80 8 94 25 3 224 76 3 136 255 156 26 53 225 37 54 227 26 47 143 239 226 25 76 223 30 155 184 0 0 0 0 36 81 72 193 5 198 100 152 129 121 168 194 230 132 24 222 160 120 249 6 130 234 6 181 29 137 204 147 23 63 184 169 145 236 202 82 128 93 151 172 137 246 104 85 165 147 251 180)
  :der-encode
  #t
  :tests
  '(#(1462
      "x-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 100 2 48 100 170 130 191 34 80 80 166 60 241 100 36 204 204 208 241 109 89 57 215 52 121 211 61 179 215 240 81 122 117 12 223 192 30 55 53 69 2 255 203 28 73 86 194 199 199 250 62 2 48 94 129 1 105 44 110 181 87 103 115 72 57 239 228 61 169 67 203 105 215 179 206 158 160 212 174 246 137 44 178 68 136 57 151 236 16 243 104 226 149 239 8 14 249 176 120 208 211)
      #t
      ())
    #(1463
      "x-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 100 2 48 45 16 105 8 165 11 110 91 165 157 96 116 162 233 64 220 254 183 60 91 161 197 70 74 185 255 108 128 93 35 244 100 100 151 129 22 198 129 153 209 168 172 99 216 184 35 54 141 2 48 123 140 197 96 54 166 45 154 38 50 42 65 58 26 24 63 27 178 215 149 120 159 171 114 164 95 65 33 179 87 150 225 227 165 146 225 198 47 44 77 7 14 155 238 133 188 231 15)
      #t
      ())
    #(1464
      "x-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 100 2 48 24 11 234 114 141 57 195 37 121 20 26 33 94 2 86 210 184 224 252 193 210 183 49 53 167 28 196 132 217 200 251 102 102 68 254 60 20 255 17 175 254 19 94 2 199 38 71 194 2 48 66 204 197 36 183 16 155 254 248 22 4 173 177 137 61 21 49 182 92 73 117 96 218 169 65 241 138 13 189 32 13 223 121 116 49 104 1 28 12 104 86 242 164 86 228 108 87 218)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 12 3 98 0 4 51 160 43 56 171 8 105 54 4 22 214 138 28 185 209 229 227 252 55 229 57 183 245 98 244 206 53 157 117 4 165 245 81 169 140 215 136 18 250 216 11 113 125 243 247 222 146 81 12 102 225 133 183 213 119 38 152 79 224 158 142 200 133 85 77 132 250 245 18 132 253 131 154 244 229 159 199 4 195 243 118 38 73 29 152 164 131 80 244 26 80 223 255 255 255 255)
  :der-encode
  #t
  :tests
  '(#(1465
      "y-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 100 2 48 87 123 137 231 235 78 12 17 211 221 200 39 63 220 171 37 131 160 200 144 138 203 60 146 164 16 115 193 180 135 156 182 189 9 130 94 52 89 23 209 14 154 16 197 113 39 160 150 2 48 51 197 104 225 255 55 106 43 108 73 228 149 56 93 230 85 214 103 184 64 45 115 252 2 233 219 97 212 43 73 32 189 12 63 12 136 161 195 9 26 181 185 151 11 218 161 211 156)
      #t
      ())
    #(1466
      "y-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 100 2 48 107 183 148 115 130 72 179 117 201 245 198 165 230 124 4 5 57 121 177 240 150 169 122 84 113 13 163 103 74 106 242 50 149 37 108 102 10 110 9 73 190 140 105 201 224 175 28 154 2 48 22 244 84 242 144 237 172 72 150 128 188 139 202 202 191 191 249 208 210 157 209 28 124 0 62 151 192 86 204 169 205 43 80 51 105 43 118 111 210 13 140 224 164 176 223 196 23 164)
      #t
      ())
    #(1467
      "y-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 100 2 48 113 218 216 176 158 160 198 126 170 121 185 55 203 79 197 76 114 128 119 159 55 223 226 147 117 99 39 185 189 243 187 173 154 81 97 61 191 222 25 73 109 98 14 21 226 191 143 218 2 48 22 219 81 250 65 76 159 19 226 199 150 94 51 21 205 162 251 214 79 149 176 200 141 59 42 164 136 17 114 122 247 205 215 14 238 119 0 219 244 234 60 156 132 230 40 67 135 190)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 12 3 98 0 4 127 167 59 82 30 25 205 43 8 231 18 127 90 49 48 144 137 236 179 98 140 126 52 26 151 124 252 75 244 69 171 21 16 16 96 43 236 247 32 220 65 174 187 134 144 8 112 222 79 59 125 209 154 200 151 15 17 105 150 176 212 141 194 13 105 215 132 232 80 34 132 112 30 246 83 48 9 147 225 88 200 184 47 197 164 102 74 142 194 138 3 196 0 0 0 0)
  :der-encode
  #t
  :tests
  '(#(1468
      "y-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 100 2 48 14 14 17 226 207 128 90 48 84 219 119 253 73 169 69 108 207 34 245 148 138 154 2 230 71 74 90 137 221 57 77 60 137 164 107 22 220 173 57 246 123 51 190 20 159 117 184 227 2 48 113 154 206 136 135 20 61 143 15 76 30 71 141 232 54 254 120 220 113 209 78 162 52 253 221 71 187 252 221 119 251 68 199 123 73 198 196 176 72 208 91 233 83 113 58 72 13 178)
      #t
      ())
    #(1469
      "y-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 100 2 48 94 79 14 143 131 58 30 80 207 70 73 93 69 148 195 120 148 162 30 200 22 77 253 227 160 92 150 130 105 134 32 116 107 66 152 143 222 236 155 218 227 233 97 18 30 94 160 177 2 48 119 235 163 231 4 191 150 53 181 117 15 254 194 238 141 57 104 28 118 45 33 39 132 101 130 138 176 245 116 147 84 72 207 246 87 91 141 105 148 6 64 120 116 134 79 135 173 159)
      #t
      ())
    #(1470
      "y-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 100 2 48 8 196 102 74 3 106 93 79 91 123 154 54 86 86 219 12 120 98 70 172 123 153 43 250 197 60 242 243 30 159 199 56 105 133 150 219 78 163 133 247 186 185 120 180 241 237 2 178 2 48 99 235 12 77 98 157 1 241 254 145 51 214 68 64 205 167 23 202 196 225 106 193 206 238 190 16 184 195 141 60 204 11 43 215 89 24 228 201 149 210 197 37 199 117 145 104 24 4)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 12 3 98 0 4 61 194 55 4 186 131 70 254 231 2 138 134 62 62 28 32 26 197 229 193 240 160 189 138 217 103 211 254 140 142 75 141 107 95 146 68 158 51 120 33 136 98 242 97 208 159 111 216 51 201 66 205 36 175 5 228 115 9 114 72 219 152 29 0 156 105 229 62 169 181 243 244 236 186 13 111 77 36 49 124 174 219 105 23 244 202 159 142 155 240 232 40 0 0 0 0)
  :der-encode
  #t
  :tests
  '(#(1471
      "y-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 100 2 48 6 77 184 39 194 185 124 22 252 224 217 82 81 59 182 135 194 100 81 219 28 107 30 130 1 15 105 1 253 209 112 158 131 208 239 204 91 51 234 229 244 144 198 96 78 142 23 47 2 48 84 174 217 48 232 48 10 130 239 226 96 156 203 3 11 130 199 153 26 125 178 97 253 96 227 201 9 123 225 51 65 144 158 195 73 42 56 3 205 160 124 178 209 131 137 70 209 145)
      #t
      ())
    #(1472
      "y-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 100 2 48 8 216 186 4 220 132 74 94 243 15 99 44 124 164 126 190 42 199 91 134 168 33 184 182 181 182 153 165 203 228 35 130 240 185 39 3 175 96 66 32 95 128 221 242 61 39 233 113 2 48 10 51 202 68 199 182 94 175 92 200 26 242 61 226 130 197 98 48 121 128 227 26 30 110 230 50 166 20 29 119 20 57 66 65 217 8 105 226 201 89 36 35 16 106 191 42 53 177)
      #t
      ())
    #(1473
      "y-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 100 2 48 36 228 13 94 246 112 1 140 12 230 144 252 21 4 33 86 176 227 154 5 125 46 183 108 145 216 17 156 195 152 33 54 17 143 78 238 118 64 62 172 19 184 156 185 189 176 2 0 2 48 26 162 64 35 226 225 46 190 216 20 111 60 79 30 205 251 36 236 163 191 240 133 205 108 101 76 181 47 51 227 104 160 115 226 122 153 18 244 80 154 39 200 73 19 184 95 199 224)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 13 3 129 130 0 4 48 166 125 234 175 12 238 68 170 235 144 61 140 219 36 173 157 193 145 211 117 215 214 166 13 37 32 225 147 6 207 196 125 222 157 203 128 170 224 176 64 85 75 185 141 96 30 1 159 147 54 232 49 204 203 153 242 217 44 244 185 22 4 177 0 0 0 0 26 75 0 199 74 90 97 172 25 111 175 77 195 154 205 65 191 53 77 239 10 39 82 153 100 53 145 50 167 111 40 101 66 72 209 172 0 77 17 216 17 171 160 172 185 194 109 47 74 84 1 44 93 138 154 30 124 139 74 82)
  :der-encode
  #t
  :tests
  '(#(1474
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 133 2 64 71 156 232 69 139 4 178 220 18 123 70 151 30 108 121 131 27 247 136 246 93 220 119 6 32 218 170 21 88 63 141 80 111 42 102 82 216 43 56 86 14 193 151 117 134 225 25 41 182 102 246 215 1 45 129 111 211 86 212 30 147 4 214 15 2 65 0 167 80 247 60 202 239 245 217 148 6 126 102 228 92 32 8 146 198 7 179 41 190 94 100 219 92 56 60 123 231 17 201 123 93 212 37 165 34 80 188 134 36 119 226 139 58 250 78 243 216 49 6 106 123 20 52 50 165 209 84 3 2 20 87)
      #t
      ())
    #(1475
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 132 2 64 104 91 139 41 41 201 160 169 176 222 182 186 239 208 14 38 245 13 76 31 195 254 212 125 126 248 18 197 43 102 236 111 109 9 245 78 155 219 114 2 1 101 112 247 91 185 145 42 171 58 87 43 251 151 234 88 154 206 41 79 240 254 102 98 2 64 76 40 98 103 203 135 166 190 86 244 205 0 128 57 140 35 229 105 242 235 218 113 210 205 22 130 8 2 144 222 180 20 59 220 97 231 91 66 171 239 188 187 221 244 199 148 84 90 5 55 134 86 161 133 134 88 224 164 89 88 51 252 64 246)
      #t
      ())
    #(1476
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 134 2 65 0 129 17 18 210 124 161 228 52 176 12 2 147 50 2 132 177 197 54 159 208 7 249 14 122 153 212 76 156 2 1 54 136 209 110 94 10 47 195 160 119 6 74 153 92 66 68 25 92 4 240 3 35 227 58 222 166 179 119 1 173 92 179 98 22 2 65 0 130 221 92 62 54 66 252 67 229 196 198 82 227 178 208 15 109 19 114 7 190 140 155 33 37 86 28 8 112 62 74 132 210 168 39 133 247 117 171 209 138 171 36 229 47 18 197 248 203 86 178 139 145 95 156 11 17 16 197 66 186 146 179 19)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 13 3 129 130 0 4 48 166 125 234 175 12 238 68 170 235 144 61 140 219 36 173 157 193 145 211 117 215 214 166 13 37 32 225 147 6 207 196 125 222 157 203 128 170 224 176 64 85 75 185 141 96 30 1 159 147 54 232 49 204 203 153 242 217 44 244 185 22 4 177 170 221 157 184 193 158 195 195 245 122 133 2 26 90 76 186 7 149 192 113 244 148 132 31 204 60 74 49 11 253 119 62 213 222 114 155 89 125 150 150 174 128 143 82 212 247 224 57 110 191 145 255 227 46 197 88 203 31 198 55 219 174 254 161)
  :der-encode
  #t
  :tests
  '(#(1477
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 132 2 64 57 208 197 196 228 140 161 64 100 178 233 179 96 13 235 14 194 251 62 12 101 179 190 92 227 242 6 22 109 118 223 197 165 246 234 135 2 218 58 236 177 62 123 85 168 123 18 99 196 136 70 17 229 222 68 15 108 137 237 18 248 138 229 15 2 64 106 231 131 152 231 249 66 179 94 125 135 239 39 206 131 6 144 247 50 122 210 168 61 245 110 157 2 136 181 25 153 69 75 217 15 137 94 120 73 243 91 42 101 42 58 249 123 245 87 149 180 105 142 11 1 78 166 255 2 26 0 135 143 60)
      #t
      ())
    #(1478
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 132 2 64 124 58 178 227 222 175 184 35 238 89 29 197 60 151 179 137 198 209 138 140 169 166 174 32 199 67 40 96 109 178 215 199 210 187 60 226 104 148 227 243 7 133 35 123 158 135 67 80 214 21 120 99 129 176 200 196 32 34 77 47 94 53 148 104 2 64 52 231 3 221 147 155 43 26 32 8 114 51 78 47 134 77 191 38 104 143 132 117 201 227 138 56 65 2 224 138 24 194 125 78 48 216 2 9 95 255 62 221 166 220 30 3 170 129 174 217 103 25 203 73 97 36 113 250 17 136 117 161 92 24)
      #t
      ())
    #(1479
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 133 2 64 76 216 165 241 151 122 60 248 232 71 161 55 115 89 204 167 4 108 121 58 218 6 101 242 192 105 8 253 206 194 78 108 213 90 23 80 202 87 100 33 184 166 90 169 154 237 134 60 218 170 119 215 247 207 132 68 142 165 142 149 197 122 19 60 2 65 0 163 64 87 45 93 150 131 231 46 21 126 104 58 177 109 14 42 53 3 15 243 225 100 29 27 79 128 29 128 115 44 50 185 251 181 63 220 174 169 51 241 49 19 111 138 178 83 17 1 139 135 31 83 117 55 130 152 154 135 239 35 26 56 172)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 13 3 129 130 0 4 170 221 157 184 187 65 137 166 210 171 123 90 174 85 15 232 220 0 190 46 0 244 179 91 87 109 111 134 44 9 134 146 16 252 130 251 209 90 84 222 241 68 41 121 250 13 161 198 68 8 253 132 55 166 0 70 147 8 32 116 142 205 252 102 74 89 168 126 174 51 141 34 208 131 85 35 21 111 143 125 147 71 16 167 71 207 25 45 62 49 123 196 95 4 137 214 151 152 135 198 94 193 122 183 181 227 218 159 76 177 16 17 110 240 115 152 73 172 197 109 36 229 163 54 95 207 178 137)
  :der-encode
  #t
  :tests
  '(#(1480
      "x-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 132 2 64 83 25 44 40 130 14 194 102 99 159 238 9 226 20 165 92 192 239 176 123 34 220 13 63 41 59 218 32 114 252 249 180 98 218 147 236 158 113 105 174 31 17 72 112 81 137 247 241 93 44 190 196 109 34 65 151 163 167 169 36 176 192 10 50 2 64 27 102 69 54 174 219 220 151 190 212 222 226 62 185 74 73 242 61 227 189 132 167 143 41 158 129 237 254 1 122 125 60 163 167 200 170 206 141 19 182 178 235 71 123 146 44 67 152 57 234 205 255 39 131 7 7 87 117 72 99 88 47 113 93)
      #t
      ())
    #(1481
      "x-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 133 2 65 0 150 144 88 193 93 103 91 27 38 33 82 164 82 15 126 128 58 180 101 169 225 238 239 123 138 93 15 179 232 128 50 184 232 241 190 159 55 200 15 156 123 149 15 77 169 80 186 174 155 33 110 205 108 121 61 219 20 89 207 223 73 119 107 174 2 64 32 224 208 120 165 161 19 233 47 172 223 229 203 57 36 50 71 37 74 160 166 86 184 62 123 170 52 61 54 247 177 75 134 241 94 84 183 27 167 80 109 81 25 255 82 196 126 14 229 73 146 122 0 140 191 43 191 225 145 109 28 194 116 178)
      #t
      ())
    #(1482
      "x-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 132 2 64 29 229 223 98 19 100 67 107 237 92 172 248 219 228 32 228 228 229 209 176 67 79 207 157 195 53 100 93 208 170 7 204 29 30 163 10 140 175 226 83 28 212 3 93 217 114 192 214 195 114 15 22 14 36 38 79 214 196 21 33 228 78 176 203 2 64 114 233 171 213 69 97 186 200 155 35 75 249 229 26 63 96 3 89 10 241 119 9 142 37 240 5 58 58 225 138 108 116 179 137 103 74 110 184 3 120 255 210 85 207 229 35 35 100 92 223 233 161 10 150 83 65 180 228 127 192 221 8 46 30)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 13 3 129 130 0 4 36 193 4 64 227 122 21 215 236 154 58 72 150 90 156 233 56 2 33 252 81 21 95 30 153 39 22 205 153 51 208 156 224 165 66 68 113 135 126 137 148 73 74 76 42 222 10 129 239 82 149 46 57 86 85 21 127 11 116 59 59 33 158 45 98 143 213 186 81 15 97 14 230 147 161 224 211 158 243 157 145 166 36 131 121 198 34 161 117 162 58 83 48 168 139 45 90 96 219 246 210 73 112 44 209 80 69 97 83 94 161 126 27 225 183 10 65 220 70 62 142 26 26 240 0 0 0 0)
  :der-encode
  #t
  :tests
  '(#(1483
      "y-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 132 2 64 66 47 177 140 222 201 102 147 113 69 176 241 96 184 206 34 43 11 161 111 171 7 94 22 241 218 200 57 184 215 119 47 238 39 162 131 173 114 34 37 190 190 131 219 45 90 139 37 203 44 190 69 36 139 58 168 118 85 76 106 55 248 19 117 2 64 122 56 137 213 59 180 42 109 65 243 147 235 0 196 54 35 147 112 41 212 204 29 54 116 105 246 234 78 193 102 88 97 157 41 53 222 10 101 90 218 228 203 182 36 242 255 227 206 65 240 36 38 157 145 73 219 216 60 177 201 122 237 65 184)
      #t
      ())
    #(1484
      "y-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 133 2 65 0 152 54 238 122 224 68 126 192 122 106 33 102 51 224 169 125 232 49 250 4 252 215 96 171 227 158 143 69 119 150 253 252 233 198 158 209 60 130 125 224 202 107 96 216 73 237 105 118 172 9 27 125 144 206 62 152 211 201 20 74 254 99 141 66 2 64 28 157 142 20 43 174 232 87 214 173 236 142 255 132 234 29 35 176 95 84 130 204 41 80 69 21 134 207 93 224 203 249 227 167 39 164 164 233 62 21 182 204 1 37 229 252 209 145 6 54 137 128 100 166 56 19 160 199 95 238 40 4 27 136)
      #t
      ())
    #(1485
      "y-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 132 2 64 8 119 215 163 255 172 244 239 54 203 237 253 68 228 204 2 55 189 238 222 140 224 189 251 51 11 183 59 49 123 125 22 28 69 189 20 150 225 35 60 237 143 125 207 208 94 14 28 198 101 251 29 201 43 84 252 190 155 14 85 217 186 27 228 2 64 15 122 184 113 116 46 191 34 224 183 103 70 20 215 21 105 213 8 76 204 12 152 194 228 13 8 138 232 142 171 55 130 10 137 162 219 228 158 27 103 236 85 174 26 52 254 72 34 214 145 187 245 73 15 204 44 71 231 193 186 77 197 110 122)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 13 3 129 130 0 4 11 161 140 192 85 114 66 74 122 57 31 75 72 37 138 135 26 15 109 130 22 197 207 130 68 108 45 21 109 85 134 180 193 150 218 11 47 58 35 81 27 137 239 243 29 212 240 200 141 187 26 118 197 228 178 124 66 118 248 251 199 74 27 157 162 140 200 195 65 234 46 57 8 174 106 182 130 95 149 96 50 197 62 98 86 151 248 11 123 78 231 45 204 159 60 255 115 3 73 224 211 13 228 16 145 127 61 13 28 137 136 86 44 29 85 88 59 71 240 222 194 52 253 162 255 255 255 255)
  :der-encode
  #t
  :tests
  '(#(1486
      "y-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 134 2 65 0 167 50 32 70 186 116 115 113 109 53 116 45 150 26 197 242 254 46 29 213 116 236 231 189 21 218 140 102 162 98 178 231 155 13 29 242 118 25 253 235 187 65 218 27 39 186 124 154 3 112 239 150 46 232 164 81 5 244 65 109 22 235 241 62 2 65 0 132 24 228 69 219 69 207 189 200 69 128 85 56 109 101 233 188 7 180 151 184 212 190 245 245 21 231 148 112 80 217 171 151 153 251 82 15 50 43 240 15 174 79 174 3 193 38 149 16 235 179 225 220 140 202 89 41 142 38 148 88 98 233 230)
      #t
      ())
    #(1487
      "y-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 132 2 64 27 180 96 172 66 187 54 64 191 199 57 160 24 110 243 54 46 210 123 37 79 84 140 7 57 53 202 162 17 161 170 48 46 121 169 70 109 127 236 231 116 210 80 193 174 174 249 100 27 154 47 37 230 28 163 127 173 168 238 7 244 159 213 30 2 64 61 145 138 7 163 111 87 141 168 176 212 45 48 186 214 14 207 189 96 58 69 208 193 167 27 176 20 71 234 216 26 83 19 38 92 201 181 134 10 186 3 241 201 58 156 185 243 189 217 168 95 39 13 211 105 20 101 148 29 43 128 152 249 60)
      #t
      ())
    #(1488
      "y-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 132 2 64 91 68 228 253 73 150 242 122 125 207 48 107 201 255 244 169 195 110 63 224 144 38 250 114 18 43 100 164 255 101 248 97 165 149 76 232 164 31 105 163 145 92 132 166 61 176 197 124 109 254 203 172 79 222 153 234 95 203 16 77 105 103 214 19 2 64 8 142 123 132 109 108 94 9 58 123 161 116 39 188 186 14 146 90 203 130 110 78 155 151 43 45 138 109 35 47 99 92 190 150 191 111 22 49 116 219 100 108 47 102 35 200 157 198 228 168 40 212 226 226 252 243 196 39 196 43 219 114 239 183)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 13 3 129 130 0 4 127 51 39 227 70 98 39 74 161 71 149 58 0 127 48 194 238 27 6 215 187 5 62 140 225 201 182 131 240 244 101 99 221 56 219 7 29 135 67 59 48 56 4 52 201 46 140 183 109 96 61 25 54 251 161 233 49 122 6 226 0 0 0 0 82 202 71 143 3 103 171 36 133 126 120 133 118 241 123 252 208 94 98 210 13 15 190 253 27 45 149 75 153 110 171 166 120 25 2 54 53 227 20 131 245 176 37 127 137 180 106 29 43 156 178 66 14 28 219 148 12 234 255 84 41 221 128 19)
  :der-encode
  #t
  :tests
  '(#(1489
      "x-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 132 2 64 115 150 126 178 78 32 240 212 186 88 137 90 73 248 18 194 141 36 229 240 253 94 53 241 7 88 16 164 120 217 55 23 200 170 38 5 172 132 34 109 211 213 60 57 192 216 197 46 234 200 233 152 186 217 49 245 239 221 102 75 87 206 229 85 2 64 5 176 3 31 177 13 252 124 54 237 137 170 254 102 68 72 53 205 156 83 225 200 80 175 95 5 94 43 38 61 62 115 122 78 106 131 202 219 157 118 221 229 53 232 9 244 71 69 83 36 212 174 230 240 54 72 93 65 103 166 230 14 237 165)
      #t
      ())
    #(1490
      "x-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 133 2 64 99 63 69 105 20 112 121 35 244 176 8 110 163 24 184 206 189 186 95 161 67 82 227 217 198 6 189 141 171 240 50 131 91 189 167 106 165 20 193 166 221 225 179 33 128 61 39 242 83 223 225 202 229 50 165 189 205 158 147 229 249 69 150 209 2 65 0 155 156 139 160 116 222 235 3 116 93 138 227 124 115 224 34 115 7 26 53 220 254 15 101 228 99 226 8 189 17 198 204 179 173 237 107 231 49 61 122 101 109 94 135 27 142 164 209 213 27 119 132 103 182 221 230 87 142 16 93 86 182 23 212)
      #t
      ())
    #(1491
      "x-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 132 2 64 64 137 26 87 185 184 240 188 106 135 97 210 66 76 182 11 63 57 222 78 96 27 200 218 241 90 179 33 108 44 86 235 204 118 13 227 9 7 232 146 148 175 88 24 245 167 42 45 244 9 187 105 24 243 214 229 6 206 83 20 96 46 80 193 2 64 104 98 7 86 238 42 96 10 20 103 242 150 8 234 208 25 208 213 22 183 156 138 117 111 197 55 169 252 115 70 22 191 236 19 56 57 190 180 119 143 223 253 63 180 34 110 81 206 75 192 150 39 51 28 141 174 241 247 17 100 138 48 251 6)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 13 3 129 130 0 4 18 72 47 21 142 98 232 52 103 41 123 78 218 217 48 173 49 144 72 40 63 9 73 48 6 5 164 162 209 159 114 249 36 212 30 28 195 173 44 36 101 116 244 160 235 99 124 221 56 108 30 191 74 0 112 123 113 166 70 220 255 255 255 255 24 216 81 239 146 131 95 123 233 42 37 185 136 174 141 95 126 212 47 49 47 124 137 104 80 165 137 247 187 117 0 51 13 19 140 194 13 197 99 10 125 82 89 38 232 247 23 99 94 231 41 55 3 87 54 172 232 143 12 73 31 49 147 13)
  :der-encode
  #t
  :tests
  '(#(1492
      "x-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 132 2 64 77 235 208 104 48 40 242 51 91 35 60 73 83 27 96 150 231 197 82 31 117 252 180 181 245 227 34 65 190 8 31 60 43 133 73 181 127 49 33 123 233 183 170 26 70 135 167 46 201 165 211 118 48 114 82 202 124 27 155 97 13 37 180 208 2 64 4 209 48 63 107 145 172 1 201 20 17 169 131 243 171 176 79 54 152 177 105 248 163 159 253 25 49 192 97 230 111 67 72 47 236 121 93 253 13 10 190 135 159 168 219 136 91 97 138 202 42 224 19 230 147 241 84 187 157 10 119 173 239 79)
      #t
      ())
    #(1493
      "x-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 132 2 64 52 172 154 78 111 177 113 244 36 187 89 45 27 132 91 238 85 23 59 66 66 47 213 181 19 47 133 154 39 221 205 165 83 47 211 129 22 230 39 125 147 117 99 159 178 91 15 102 241 232 161 172 202 167 128 12 145 200 126 116 57 152 125 88 2 64 117 137 43 232 225 29 155 243 232 30 131 112 175 2 216 139 218 131 206 10 233 194 26 235 72 126 239 76 76 84 88 229 26 153 228 215 136 219 132 6 76 251 196 130 64 245 102 18 7 135 105 253 224 227 183 6 18 95 70 226 242 106 53 8)
      #t
      ())
    #(1494
      "x-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 132 2 64 54 182 139 92 173 116 40 128 63 96 102 21 80 88 87 170 124 251 104 61 30 156 232 86 212 153 250 110 19 238 106 79 35 94 221 0 64 52 41 255 20 188 87 141 209 33 253 37 96 4 121 74 221 79 184 25 91 67 169 225 238 251 211 161 2 64 69 198 175 253 96 127 84 36 160 228 156 15 26 114 235 247 148 138 128 180 130 239 23 30 225 97 220 54 81 86 121 227 47 169 237 170 146 197 116 3 230 225 2 100 59 119 57 26 237 238 194 176 84 150 67 21 222 221 76 195 105 242 63 3)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 14 3 129 130 0 4 41 152 224 149 158 98 187 237 7 93 173 72 48 255 116 163 61 25 156 110 41 190 181 186 81 140 108 65 5 225 180 19 171 120 247 48 225 252 50 233 79 26 44 21 147 22 37 198 178 21 13 178 161 43 91 68 218 21 132 80 104 250 180 15 0 0 0 0 93 155 242 228 54 124 56 29 171 19 224 38 161 219 139 167 15 4 38 135 121 172 120 105 131 214 151 70 31 12 126 82 106 175 3 0 27 22 140 180 121 17 206 196 67 157 19 156 226 189 195 203 47 111 124 229 16 1 222 110)
  :der-encode
  #t
  :tests
  '(#(1495
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 132 2 64 46 175 87 128 114 148 229 7 40 168 116 104 56 26 68 153 179 54 175 4 93 83 76 240 133 76 207 128 23 141 83 163 121 88 95 240 107 61 179 17 116 225 1 220 232 28 117 122 140 195 196 3 50 49 186 243 232 212 197 196 189 53 152 75 2 64 96 212 69 204 204 80 106 189 174 90 125 66 194 210 44 240 63 194 232 246 113 118 104 48 143 181 207 142 16 23 109 28 114 62 70 130 249 66 255 19 239 131 42 213 19 41 7 111 76 98 139 79 98 99 245 25 188 175 13 145 86 146 162 77)
      #t
      ())
    #(1496
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 132 2 64 10 231 165 249 190 243 188 87 11 27 252 33 143 110 224 113 133 93 134 200 171 163 101 4 220 12 72 13 133 112 89 220 226 207 147 117 6 113 96 117 205 128 69 250 233 105 48 149 133 246 42 211 65 53 198 77 214 249 193 135 5 223 13 177 2 64 105 242 71 58 113 236 167 34 43 39 197 189 96 12 27 28 42 139 154 251 59 6 58 228 157 91 74 9 14 207 199 97 121 240 65 179 157 175 164 145 179 145 238 121 181 210 79 193 33 14 93 141 19 92 177 253 168 145 236 123 128 106 243 31)
      #t
      ())
    #(1497
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 132 2 64 74 41 66 87 155 237 57 71 125 86 206 200 215 232 240 41 233 61 237 4 190 213 236 114 113 128 239 171 20 33 47 136 83 15 180 189 146 217 146 2 172 150 108 109 117 216 193 241 190 245 209 62 20 151 58 196 159 50 231 6 67 168 60 103 2 64 99 47 100 127 140 37 106 111 245 114 192 136 93 32 233 221 48 157 38 201 108 199 57 38 73 202 26 29 213 198 56 53 134 38 112 88 80 247 118 133 66 245 58 80 166 60 25 27 45 134 224 14 226 179 35 61 245 192 189 220 255 39 43 173)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 14 3 129 130 0 4 41 152 224 149 158 98 187 237 7 93 173 72 48 255 116 163 61 25 156 110 41 190 181 186 81 140 108 65 5 225 180 19 171 120 247 48 225 252 50 233 79 26 44 21 147 22 37 198 178 21 13 178 161 43 91 68 218 21 132 80 104 250 180 15 170 221 157 184 126 77 209 167 9 88 174 144 136 182 27 225 41 85 2 12 164 197 171 135 92 183 36 96 236 92 113 43 94 65 28 174 49 23 101 66 147 183 20 118 109 145 178 33 228 228 235 146 74 197 2 185 249 58 227 113 72 56 106 133)
  :der-encode
  #t
  :tests
  '(#(1498
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 133 2 64 17 54 25 163 35 30 103 14 34 197 87 206 44 221 3 11 126 50 217 171 208 105 219 115 4 195 30 42 30 84 170 153 134 164 65 36 180 13 95 181 10 143 161 202 252 219 246 241 69 71 83 32 56 25 208 210 105 87 155 19 143 199 182 59 2 65 0 152 153 130 235 193 127 39 203 205 241 125 4 233 148 200 41 176 19 48 92 111 170 72 177 12 255 94 145 24 214 54 141 122 79 39 108 209 201 34 0 161 126 182 162 185 48 159 117 217 245 223 88 182 142 135 96 130 114 4 104 239 99 250 72)
      #t
      ())
    #(1499
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 131 2 63 85 140 241 134 245 1 23 158 25 216 96 107 173 57 232 79 20 35 157 207 105 147 174 133 15 66 117 154 19 235 124 173 94 174 105 126 210 94 194 238 24 183 124 62 247 239 9 192 108 171 21 154 130 241 141 220 202 241 6 60 131 205 34 2 64 102 2 146 209 188 249 214 253 29 27 102 234 228 156 222 77 167 113 14 152 7 174 183 71 65 112 2 4 123 113 72 247 227 22 185 232 16 174 83 89 199 33 142 91 175 77 169 118 100 237 78 147 209 105 212 173 231 254 39 45 86 235 194 29)
      #t
      ())
    #(1500
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 133 2 65 0 144 150 33 178 185 64 214 52 144 119 98 250 101 198 36 152 87 228 20 179 229 228 161 70 28 212 119 67 189 70 73 124 195 19 194 136 17 40 127 159 241 180 133 33 158 240 80 178 102 35 185 190 197 241 224 230 183 185 107 73 226 187 131 28 2 64 1 105 229 185 243 208 166 75 249 14 85 102 143 209 40 136 220 250 85 234 174 194 7 110 167 184 78 136 242 34 37 197 126 34 13 123 150 194 165 117 61 126 59 69 250 4 110 161 251 102 131 225 168 207 129 139 25 175 187 229 76 18 210 140)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 14 3 129 130 0 4 80 206 143 248 117 245 22 40 36 188 4 105 58 152 251 62 222 77 133 9 134 100 12 91 109 143 196 81 196 93 232 237 111 220 40 192 151 186 142 175 213 145 231 220 72 202 95 154 148 113 6 102 195 16 190 140 51 90 76 104 255 255 255 255 90 24 100 70 220 3 1 137 101 181 8 197 148 30 230 180 98 119 79 230 34 150 16 226 53 103 138 48 71 85 225 182 234 191 114 93 252 255 42 12 174 126 138 124 107 242 32 221 240 24 157 10 250 120 81 153 68 185 149 140 80 172 30 144)
  :der-encode
  #t
  :tests
  '(#(1501
      "x-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 133 2 64 114 225 217 85 224 212 87 159 187 243 205 103 0 239 67 82 146 190 145 156 66 160 240 3 214 162 165 228 185 76 254 26 77 191 75 74 23 129 248 30 244 112 111 46 159 79 172 140 214 113 37 22 133 235 229 0 2 212 230 245 50 187 69 79 2 65 0 135 89 103 162 193 109 63 252 28 87 24 117 182 243 92 166 103 9 250 134 254 36 246 29 14 206 121 184 223 85 28 76 183 25 24 116 129 5 242 110 54 126 225 65 241 63 27 223 187 177 7 13 106 192 49 161 174 207 43 37 186 141 86 58)
      #t
      ())
    #(1502
      "x-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 132 2 64 53 230 245 61 35 13 45 24 207 211 230 204 242 182 201 253 86 131 135 96 136 79 24 136 117 75 235 71 79 235 61 196 16 115 7 91 59 124 48 149 72 191 206 46 239 195 16 115 40 243 100 184 22 185 35 232 239 239 137 243 149 57 188 57 2 64 30 94 221 208 255 152 58 154 246 11 48 191 177 102 36 145 187 144 15 145 187 80 99 50 198 48 237 6 216 62 52 66 4 144 215 130 201 223 89 29 57 197 51 100 165 166 227 198 227 48 205 231 118 88 243 78 211 76 51 191 61 38 78 53)
      #t
      ())
    #(1503
      "x-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 133 2 65 0 148 135 80 50 224 53 142 2 239 116 24 194 20 26 60 151 169 205 196 36 81 197 73 141 4 142 155 206 178 59 108 98 240 36 92 119 141 6 75 159 219 108 12 24 43 44 140 186 111 146 194 11 220 57 204 246 247 137 215 203 252 135 129 227 2 64 51 252 15 72 20 99 217 105 0 165 145 88 167 140 40 139 215 133 147 161 205 179 226 135 174 117 197 151 207 141 89 172 38 54 168 83 94 23 35 241 39 145 185 173 169 208 244 80 158 180 142 87 60 244 246 149 113 213 39 162 45 20 227 158)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 14 3 129 130 0 4 76 130 127 15 61 161 164 36 162 206 248 163 47 81 4 110 110 153 184 52 145 44 119 155 155 140 237 29 244 148 19 121 8 42 117 69 251 52 241 218 4 19 84 47 254 113 58 186 87 231 194 117 226 129 151 116 111 199 232 55 163 37 244 42 35 216 135 64 1 138 234 101 92 229 183 99 170 63 177 168 48 114 248 102 247 193 69 79 140 2 60 25 105 83 2 106 190 74 1 245 237 65 76 112 60 75 69 141 9 224 129 93 246 99 121 11 119 247 169 163 139 143 7 169 0 0 0 0)
  :der-encode
  #t
  :tests
  '(#(1504
      "y-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 132 2 64 111 194 153 118 206 153 202 137 97 169 26 151 220 106 74 17 12 240 135 238 241 134 91 206 143 180 127 112 75 100 31 113 112 18 29 176 44 233 80 102 230 114 239 192 188 198 253 92 106 106 108 22 44 223 255 198 109 194 2 211 15 22 186 224 2 64 46 200 224 217 46 87 107 65 119 86 227 135 165 65 142 43 131 253 240 75 111 8 123 31 1 191 88 248 214 105 21 119 117 81 114 251 252 113 162 150 137 252 130 55 55 136 44 248 223 22 240 188 41 203 56 132 231 192 75 142 93 199 92 79)
      #t
      ())
    #(1505
      "y-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 132 2 64 91 201 49 0 127 214 199 26 100 223 24 254 27 68 175 175 88 236 219 178 30 123 201 221 168 241 27 12 35 245 203 171 230 89 222 122 106 104 249 253 181 154 120 199 63 124 48 118 119 133 126 4 166 238 43 10 113 250 229 114 190 197 25 125 2 64 104 60 193 2 120 22 157 194 98 181 235 184 238 73 139 158 72 149 124 145 41 60 46 206 69 230 57 138 74 127 127 160 93 219 111 57 221 103 41 69 12 200 34 102 49 162 204 238 175 115 91 30 84 240 35 39 32 89 160 86 130 41 197 0)
      #t
      ())
    #(1506
      "y-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 132 2 64 68 49 74 220 150 60 144 208 142 190 253 177 159 84 38 103 141 223 5 223 234 238 84 229 138 143 107 104 152 50 240 27 117 204 242 161 58 201 186 150 115 155 162 202 162 148 135 5 164 123 1 162 19 76 224 35 199 165 28 67 174 162 205 71 2 64 9 118 154 191 203 163 97 240 75 198 97 210 141 81 237 182 192 166 29 2 162 176 146 162 57 146 141 93 243 237 136 174 80 203 147 225 252 37 215 164 176 245 8 142 115 0 54 62 186 234 103 151 179 127 166 140 43 58 146 186 8 106 172 153)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 14 3 129 130 0 4 107 166 224 14 243 87 57 164 0 198 18 246 3 185 54 63 52 66 178 252 236 138 148 226 104 88 24 234 17 73 37 230 141 177 94 199 235 196 254 119 136 56 209 131 177 78 22 242 235 161 7 37 110 30 101 202 211 1 175 134 149 33 246 78 74 70 145 145 120 29 133 3 163 164 27 221 18 3 249 106 243 117 71 216 207 77 251 215 128 255 178 35 214 12 143 10 211 3 245 16 148 71 86 65 100 196 174 133 49 8 153 208 137 211 51 207 178 101 88 82 165 29 187 49 255 255 255 255)
  :der-encode
  #t
  :tests
  '(#(1507
      "y-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 133 2 64 111 163 64 27 127 253 158 69 86 19 241 3 47 117 126 227 24 227 250 209 235 6 79 91 112 54 239 219 246 193 215 161 196 3 40 244 187 36 53 179 122 33 182 241 249 215 216 83 238 172 38 96 196 93 101 69 157 115 206 25 23 103 198 147 2 65 0 146 233 15 94 136 54 56 217 186 201 180 239 249 51 61 251 165 88 96 169 120 16 165 5 186 167 243 23 207 238 13 68 201 189 51 33 99 219 61 99 233 117 68 59 4 87 204 82 115 122 168 77 188 191 220 213 184 212 247 248 56 137 115 249)
      #t
      ())
    #(1508
      "y-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 133 2 65 0 143 26 70 250 151 193 246 78 153 154 55 58 246 156 218 45 165 49 68 15 34 56 51 40 240 75 48 178 3 102 179 129 77 10 86 22 252 92 203 247 203 202 151 233 93 32 153 252 124 91 181 130 236 173 205 169 181 53 17 125 170 156 57 146 2 64 24 106 98 97 50 223 63 129 134 140 233 213 150 63 147 30 1 66 103 114 84 163 26 134 71 85 107 248 150 144 127 41 214 33 103 179 203 46 168 146 164 56 77 175 136 85 226 88 54 28 182 118 45 231 3 198 61 100 69 205 104 171 77 51)
      #t
      ())
    #(1509
      "y-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 133 2 64 16 139 94 221 66 71 69 252 32 218 155 220 184 60 242 248 192 67 155 57 13 114 128 81 73 184 222 184 83 82 215 155 149 121 213 247 241 185 46 121 221 255 92 5 248 192 70 246 188 231 18 149 101 211 57 55 199 42 52 211 67 101 135 196 2 65 0 143 58 240 154 81 127 86 74 219 61 187 52 92 18 45 228 22 64 244 179 204 108 92 188 14 43 54 168 54 178 101 60 170 17 42 224 63 117 59 14 144 112 201 252 127 13 20 11 51 201 210 184 55 131 125 25 71 192 61 20 25 87 255 238)
      #t
      ())))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 82 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 5 3 58 0 4 81 46 88 23 49 201 196 96 187 112 91 96 218 151 108 203 27 14 244 33 120 81 6 186 44 205 210 56 15 33 213 186 205 248 28 12 183 143 161 81 35 125 179 19 10 212 222 243 115 243 229 35 57 140 44 247)
  :der-encode
  #t
  :tests
  '(#(1510
      "y-coordinate of the public key has many trailing 1's on brainpoolP224t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 29 0 201 85 24 186 228 205 209 49 23 132 89 10 120 70 80 194 99 58 225 146 210 146 149 83 233 110 223 95 2 28 106 251 55 249 146 75 94 76 148 83 189 194 220 185 172 21 101 179 177 24 45 116 96 126 51 157 232 255)
      #t
      ("GroupIsomorphism"))
    #(1511
      "y-coordinate of the public key has many trailing 1's on brainpoolP224t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 28 45 12 221 81 15 105 0 125 235 56 173 137 145 34 185 38 205 104 78 232 90 41 137 42 111 142 41 73 2 29 0 166 9 130 172 1 232 67 191 64 57 186 240 228 197 77 128 62 232 108 155 57 107 113 154 88 242 176 132)
      #t
      ("GroupIsomorphism"))
    #(1512
      "y-coordinate of the public key has many trailing 1's on brainpoolP224t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 62 2 29 0 191 3 0 118 153 203 211 108 86 64 41 52 13 147 231 166 146 48 172 235 117 154 61 9 24 238 14 108 2 29 0 153 116 59 163 164 231 116 24 173 173 199 178 219 103 173 236 143 200 178 68 229 110 196 242 213 175 192 197)
      #t
      ("GroupIsomorphism"))))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 82 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 5 3 58 0 4 172 85 209 179 254 212 174 224 63 163 97 93 34 90 156 186 92 2 132 65 111 186 249 167 97 53 247 98 23 168 136 57 91 206 211 73 119 168 72 35 112 213 110 188 98 170 28 168 27 195 48 244 157 74 20 29)
  :der-encode
  #t
  :tests
  '(#(1513
      "x-coordinate of the public key is small on brainpoolP224t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 62 2 29 0 178 7 232 108 176 120 155 9 222 132 224 176 92 135 92 19 76 183 1 184 37 183 227 115 105 209 73 127 2 29 0 182 111 137 11 108 97 23 29 45 71 67 145 213 251 245 32 90 254 243 216 98 142 211 114 141 92 22 85)
      #t
      ("GroupIsomorphism"))
    #(1514
      "x-coordinate of the public key is small on brainpoolP224t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 29 0 210 192 174 69 28 29 102 28 211 193 55 162 176 194 165 52 154 27 34 232 144 9 63 59 176 33 180 112 2 28 107 123 243 190 231 125 72 179 43 11 130 47 93 79 13 202 10 1 121 25 176 159 146 199 102 156 245 205)
      #t
      ("GroupIsomorphism"))
    #(1515
      "x-coordinate of the public key is small on brainpoolP224t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 62 2 29 0 173 48 90 255 49 32 220 170 147 35 131 136 249 111 38 180 78 42 191 191 200 227 102 233 54 161 245 240 2 29 0 145 13 12 102 193 139 116 220 173 98 218 80 143 139 181 228 68 131 194 13 249 93 123 51 72 197 211 44)
      #t
      ("GroupIsomorphism"))))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 82 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 5 3 58 0 4 139 49 159 46 208 116 162 14 196 45 134 156 127 153 189 145 70 237 130 99 41 123 254 0 79 39 197 155 18 15 150 52 61 235 128 9 62 203 118 149 194 210 165 190 153 55 162 88 114 61 120 237 0 170 30 223)
  :der-encode
  #t
  :tests
  '(#(1516
      "y-coordinate of the public key is small on brainpoolP224t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 62 2 29 0 162 241 202 7 1 47 109 118 240 193 167 237 201 142 151 172 84 57 234 111 83 99 118 225 81 130 67 225 2 29 0 141 168 153 190 139 115 173 116 243 28 222 128 48 236 105 76 60 3 128 163 3 85 69 87 0 157 220 228)
      #t
      ("GroupIsomorphism"))
    #(1517
      "y-coordinate of the public key is small on brainpoolP224t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 29 0 142 36 90 35 217 94 140 133 18 104 156 106 123 121 179 56 244 98 129 22 217 46 38 89 101 11 184 121 2 28 38 2 247 236 136 171 46 126 16 250 2 170 196 66 71 110 226 111 251 130 49 208 23 53 95 128 71 97)
      #t
      ("GroupIsomorphism"))
    #(1518
      "y-coordinate of the public key is small on brainpoolP224t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 62 2 29 0 148 138 133 82 133 207 210 5 96 239 164 95 147 48 106 165 208 174 179 152 139 34 69 135 252 48 18 47 2 29 0 213 74 207 53 30 83 143 22 41 145 185 23 104 227 105 15 20 144 149 211 19 151 207 1 173 19 106 33)
      #t
      ("GroupIsomorphism"))))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 82 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 5 3 58 0 4 139 49 159 46 208 116 162 14 196 45 134 156 127 153 189 145 70 237 130 99 41 123 254 0 79 39 197 155 197 177 158 117 232 87 230 124 235 76 185 143 178 255 49 201 23 103 100 255 37 157 17 8 126 30 162 32)
  :der-encode
  #t
  :tests
  '(#(1519
      "y-coordinate of the public key is large on brainpoolP224t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 28 28 45 15 103 111 153 162 149 91 114 202 50 210 137 104 204 189 56 211 222 112 188 237 187 225 89 34 145 2 29 0 203 122 57 250 169 171 5 8 166 170 167 114 240 160 3 199 3 171 132 255 205 221 154 197 11 161 241 150)
      #t
      ("GroupIsomorphism"))
    #(1520
      "y-coordinate of the public key is large on brainpoolP224t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 29 0 211 160 164 146 79 134 197 36 254 119 19 66 214 203 100 93 114 128 127 162 80 203 123 39 80 42 127 201 2 28 83 147 198 63 210 198 130 105 29 195 205 145 31 23 90 95 17 93 0 46 51 121 74 216 211 155 108 75)
      #t
      ("GroupIsomorphism"))
    #(1521
      "y-coordinate of the public key is large on brainpoolP224t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 60 2 28 58 0 30 155 210 154 19 126 246 85 170 143 192 42 217 207 177 145 113 102 141 242 255 236 187 22 111 171 2 28 100 107 70 149 84 125 219 57 40 32 224 248 67 80 134 42 124 255 51 43 3 111 4 109 76 47 228 160)
      #t
      ("GroupIsomorphism"))))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 82 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 5 3 58 0 4 197 220 81 53 240 80 169 107 187 13 33 136 81 149 180 154 87 77 81 152 186 172 75 70 2 178 27 200 181 243 139 127 230 97 0 63 174 225 183 175 103 14 22 91 250 183 11 1 137 101 232 51 41 212 5 188)
  :der-encode
  #t
  :tests
  '(#(1522
      "y-coordinate of the public key has many trailing 0's on brainpoolP224t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 60 2 28 113 22 190 89 207 230 145 191 77 65 170 83 109 245 150 129 240 143 245 102 58 135 229 176 67 37 67 255 2 28 100 89 0 91 85 19 196 112 200 250 73 33 60 151 213 74 141 146 65 197 107 44 53 223 113 79 71 76)
      #t
      ("GroupIsomorphism"))
    #(1523
      "y-coordinate of the public key has many trailing 0's on brainpoolP224t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 60 2 28 62 42 240 82 143 133 221 54 3 182 19 141 77 88 183 0 217 225 76 36 235 185 165 35 35 62 2 218 2 28 52 205 90 117 49 63 13 12 87 212 83 76 172 24 89 25 126 172 62 131 127 215 183 123 201 37 178 87)
      #t
      ("GroupIsomorphism"))
    #(1524
      "y-coordinate of the public key has many trailing 0's on brainpoolP224t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 28 35 87 218 175 77 216 84 233 9 3 134 53 13 118 202 24 67 108 129 169 24 17 221 210 114 224 227 105 2 29 0 212 145 167 69 5 29 106 69 175 182 189 70 83 177 161 235 82 195 182 235 65 224 56 71 218 62 229 185)
      #t
      ("GroupIsomorphism"))))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 82 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 5 3 58 0 4 193 181 106 26 209 84 225 21 86 183 35 252 116 147 243 110 102 80 157 143 104 250 208 230 44 64 240 133 155 4 120 10 133 230 154 191 152 222 243 51 92 230 67 205 53 84 22 122 139 80 213 150 185 83 136 149)
  :der-encode
  #t
  :tests
  '(#(1525
      "x-coordinate of the public key has many trailing 1's on brainpoolP224t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 28 57 170 58 166 105 28 149 72 126 188 61 96 92 249 224 172 138 100 234 51 36 244 72 232 81 234 29 12 2 29 0 142 135 162 32 199 10 126 27 91 83 225 15 159 133 223 215 150 229 188 184 197 11 86 254 140 17 154 37)
      #t
      ("GroupIsomorphism"))
    #(1526
      "x-coordinate of the public key has many trailing 1's on brainpoolP224t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 28 60 78 88 1 49 83 107 84 251 27 249 218 103 76 191 119 62 136 89 155 245 102 78 65 77 56 207 84 2 29 0 209 178 219 125 160 51 122 249 102 90 12 60 99 85 69 230 224 115 37 234 129 22 100 171 27 185 127 33)
      #t
      ("GroupIsomorphism"))
    #(1527
      "x-coordinate of the public key has many trailing 1's on brainpoolP224t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 29 0 130 137 13 153 3 255 36 19 84 43 33 140 209 58 4 1 246 168 63 7 194 183 203 50 41 73 83 176 2 28 33 137 218 170 232 228 142 218 185 155 209 224 30 34 208 79 40 120 47 45 30 23 182 200 91 123 181 111)
      #t
      ("GroupIsomorphism"))))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 129 82 139 122 219 190 191 27 107 60 127 161 214 18 132 176 119 89 185 169 141 49 165 112 39 7 176 24 253 236 255 17 117 187 252 203 84 83 129 191 134 1 3 23 49 132 24 41 64 27 8 220 220 104 204 52 224 106 100 228 18 3 133 18)
  :der-encode
  #t
  :tests
  '(#(1528
      "x-coordinate of the public key has many trailing 1's on brainpoolP256t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 33 0 165 3 24 195 6 106 73 102 173 24 174 143 133 37 63 187 88 53 163 75 47 145 135 218 172 113 238 40 211 213 208 235 2 32 8 144 239 15 201 61 242 34 209 17 151 203 34 20 131 206 137 123 12 241 172 244 169 9 195 6 197 164 133 119 106 188)
      #t
      ("GroupIsomorphism"))
    #(1529
      "x-coordinate of the public key has many trailing 1's on brainpoolP256t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 4 30 3 137 221 162 207 42 227 169 86 42 15 181 212 28 31 117 51 230 204 132 168 150 233 154 247 129 226 16 151 112 2 32 54 107 93 136 195 111 18 39 223 82 47 218 182 94 18 52 125 104 235 100 242 222 130 198 72 17 95 213 101 189 55 183)
      #t
      ("GroupIsomorphism"))
    #(1530
      "x-coordinate of the public key has many trailing 1's on brainpoolP256t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 32 42 118 57 74 4 174 25 178 92 84 41 30 40 188 212 42 126 222 178 9 129 184 163 184 56 249 221 14 41 181 116 193 2 33 0 156 232 153 128 174 67 44 79 166 166 128 37 218 85 75 249 0 204 46 176 198 105 6 66 13 50 44 20 180 83 4 156)
      #t
      ("GroupIsomorphism"))))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 163 162 90 53 60 170 148 172 78 237 55 0 247 213 107 69 106 15 198 112 213 106 22 109 82 25 183 201 127 48 239 62 22 234 142 3 194 9 119 242 10 237 88 16 107 109 157 16 133 180 71 95 117 181 70 156 95 66 108 178 126 198 216 114)
  :der-encode
  #t
  :tests
  '(#(1531
      "y-coordinate of the public key is small on brainpoolP256t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 32 102 149 139 227 55 148 5 130 106 0 218 245 73 91 22 87 105 129 38 165 255 68 159 150 73 175 38 202 150 223 150 103 2 33 0 155 65 0 129 110 39 65 248 108 92 11 13 207 130 229 121 244 40 29 43 142 112 194 52 128 141 132 193 164 149 7 159)
      #t
      ("GroupIsomorphism"))
    #(1532
      "y-coordinate of the public key is small on brainpoolP256t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 83 237 15 75 143 179 62 242 119 205 209 6 4 53 237 61 236 81 138 34 86 89 247 31 103 249 161 240 127 133 193 202 2 32 18 77 95 148 221 241 43 180 203 227 197 206 166 210 104 109 68 128 218 187 143 251 176 94 82 56 200 119 254 32 56 62)
      #t
      ("GroupIsomorphism"))
    #(1533
      "y-coordinate of the public key is small on brainpoolP256t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 70 100 60 127 224 243 8 184 175 76 226 151 141 121 126 140 70 167 225 248 191 238 11 92 219 174 205 225 245 155 228 29 2 32 27 209 26 129 77 31 189 154 233 122 73 223 153 190 202 127 236 37 18 86 60 0 49 197 170 213 185 252 47 176 165 7)
      #t
      ("GroupIsomorphism"))))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 163 162 90 53 60 170 148 172 78 237 55 0 247 213 107 69 106 15 198 112 213 106 22 109 82 25 183 201 127 48 239 62 147 16 201 215 223 229 49 202 51 120 178 128 50 21 240 97 232 135 174 196 95 112 217 139 192 208 219 106 160 167 123 5)
  :der-encode
  #t
  :tests
  '(#(1534
      "y-coordinate of the public key is large on brainpoolP256t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 79 131 59 236 156 128 24 91 234 203 183 59 95 152 78 44 3 217 34 53 155 231 70 140 227 117 132 245 61 26 234 74 2 32 102 54 116 74 183 254 202 165 53 65 188 245 243 124 108 190 130 138 142 251 196 208 15 100 105 186 57 10 134 112 138 38)
      #t
      ("GroupIsomorphism"))
    #(1535
      "y-coordinate of the public key is large on brainpoolP256t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 33 0 162 134 157 164 22 82 58 173 43 143 168 170 213 195 179 28 90 83 95 221 65 59 113 175 77 255 185 12 111 150 166 105 2 32 41 255 62 141 73 156 171 195 204 76 204 208 250 129 28 195 176 71 112 170 113 240 208 82 24 82 16 177 77 49 153 61)
      #t
      ("GroupIsomorphism"))
    #(1536
      "y-coordinate of the public key is large on brainpoolP256t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 99 219 254 41 36 154 80 107 137 251 210 203 31 175 194 84 169 88 45 252 75 8 209 67 182 210 91 242 171 73 213 94 2 32 68 202 216 12 0 70 9 5 225 3 242 109 168 76 239 215 26 244 188 122 113 150 42 59 206 50 27 195 181 132 39 54)
      #t
      ("GroupIsomorphism"))))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 109 73 155 7 122 182 215 123 36 67 32 162 202 202 185 26 118 69 149 221 103 167 168 223 207 132 218 125 56 178 216 244 89 148 192 123 131 63 244 144 156 26 146 204 159 36 222 168 139 232 96 59 64 123 0 210 40 250 242 21 141 178 53 79)
  :der-encode
  #t
  :tests
  '(#(1537
      "y-coordinate of the public key has many trailing 1's on brainpoolP256t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 69 2 33 0 157 144 124 248 142 16 214 12 63 35 137 36 152 254 67 221 176 47 130 79 177 142 107 227 19 224 45 148 242 200 224 144 2 32 12 22 185 224 219 77 200 96 108 2 59 0 31 105 179 200 134 8 7 148 252 157 127 227 27 0 193 207 9 53 228 33)
      #t
      ("GroupIsomorphism"))
    #(1538
      "y-coordinate of the public key has many trailing 1's on brainpoolP256t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 115 149 206 14 246 82 132 138 134 182 16 151 204 149 67 153 141 57 218 232 138 31 201 228 223 221 105 100 41 73 84 137 2 32 125 226 158 37 110 130 2 56 47 145 193 22 166 103 168 185 70 242 16 68 122 87 54 155 166 26 228 250 231 61 209 54)
      #t
      ("GroupIsomorphism"))
    #(1539
      "y-coordinate of the public key has many trailing 1's on brainpoolP256t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 123 175 31 222 135 204 177 190 160 248 147 179 191 178 84 156 4 188 161 136 53 216 235 90 49 184 210 5 6 255 136 195 2 32 40 158 190 130 159 239 185 173 0 157 124 221 98 40 116 174 245 250 8 143 5 8 164 180 61 88 149 214 22 69 206 207)
      #t
      ("GroupIsomorphism"))))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 90 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 7 3 66 0 4 8 194 249 95 254 221 225 213 94 63 44 157 207 88 132 52 127 105 4 198 73 34 115 173 118 14 183 185 179 95 3 107 43 207 122 4 140 170 44 114 106 232 128 141 201 83 18 235 35 80 39 90 143 79 190 234 124 15 50 243 131 156 123 147)
  :der-encode
  #t
  :tests
  '(#(1540
      "x-coordinate of the public key is large on brainpoolP256t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 51 227 124 59 102 172 171 238 61 104 203 187 156 85 205 82 181 134 222 81 100 119 35 250 132 229 50 163 236 89 83 239 2 32 59 138 158 231 7 209 188 95 131 225 126 160 114 173 194 236 218 146 230 55 215 192 96 96 241 175 121 185 41 168 80 179)
      #t
      ("GroupIsomorphism"))
    #(1541
      "x-coordinate of the public key is large on brainpoolP256t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 31 142 189 201 78 205 221 132 249 9 96 204 85 208 202 2 227 61 112 83 95 193 199 50 43 60 39 131 185 220 146 56 2 32 32 90 168 98 108 58 93 162 20 229 72 91 17 21 74 55 141 112 176 211 50 58 184 104 82 138 232 4 141 23 182 150)
      #t
      ("GroupIsomorphism"))
    #(1542
      "x-coordinate of the public key is large on brainpoolP256t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 68 2 32 107 13 112 224 155 161 100 42 218 192 109 255 155 82 226 42 62 74 171 65 128 227 114 102 86 145 65 34 65 231 67 160 2 32 77 125 48 255 138 33 13 230 158 62 109 30 207 113 117 248 159 72 26 77 158 208 107 234 247 20 141 164 127 74 249 233)
      #t
      ("GroupIsomorphism"))))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 52 119 12 115 167 228 44 231 165 125 29 230 229 79 53 241 117 32 71 246 81 53 132 199 177 75 202 23 215 171 196 153 248 171 3 124 112 253 46 19 168 185 123 42 226 99 104 134 34 66 22 21 186 54 63 31 254 154 143 47 224 246 226 70 253 161 20 98 163 236 0 12 104 94 9 169 13 188 220 42 246 70 127 158 230 155 94 123 234 217 184 70 31 74 75 224)
  :der-encode
  #t
  :tests
  '(#(1543
      "x-coordinate of the public key is large on brainpoolP384t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 100 2 48 14 68 253 195 58 237 12 50 14 55 30 42 120 233 241 143 222 131 67 78 104 26 251 5 165 189 176 244 60 172 112 232 62 222 86 191 140 86 172 247 14 5 78 47 254 245 73 207 2 48 19 36 180 207 230 132 212 1 234 193 91 9 64 245 131 84 54 211 161 2 142 39 193 150 109 191 105 254 254 248 39 72 160 91 68 67 199 124 135 7 137 19 87 85 208 209 132 207)
      #t
      ("GroupIsomorphism"))
    #(1544
      "x-coordinate of the public key is large on brainpoolP384t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 100 2 48 89 102 172 216 167 113 79 32 21 227 111 212 253 179 69 34 88 206 10 174 251 57 114 9 27 73 107 213 48 187 175 30 198 125 126 55 229 0 49 179 238 164 74 139 184 246 44 32 2 48 42 95 48 157 47 173 85 185 58 122 48 18 203 218 40 69 239 170 78 160 209 135 211 130 79 74 106 146 39 115 13 58 177 82 70 216 208 149 44 126 232 192 185 235 131 209 194 162)
      #t
      ("GroupIsomorphism"))
    #(1545
      "x-coordinate of the public key is large on brainpoolP384t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 100 2 48 38 110 172 230 87 225 236 136 162 173 187 56 165 175 180 247 80 39 76 166 20 209 253 233 234 57 223 246 242 162 170 105 146 62 154 116 137 240 107 249 216 76 81 140 238 87 229 91 2 48 61 25 2 118 132 239 34 18 22 246 58 89 29 142 121 53 36 228 193 35 74 86 206 65 91 185 173 158 46 191 37 172 148 169 146 97 185 21 125 25 218 165 170 135 98 145 243 8)
      #t
      ("GroupIsomorphism"))))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 134 240 252 137 183 134 30 195 189 88 33 97 174 207 201 87 137 174 64 36 89 235 127 48 21 183 221 36 226 15 201 176 5 198 53 252 41 10 14 42 159 243 88 99 183 184 46 62 1 235 186 72 158 146 61 173 136 20 96 119 145 78 58 229 197 117 225 190 206 206 199 16 150 42 24 255 217 16 5 119 108 77 158 75 217 82 199 147 88 122 112 41 28 228 120 180)
  :der-encode
  #t
  :tests
  '(#(1546
      "x-coordinate of the public key is small on brainpoolP384t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 100 2 48 19 222 110 181 50 50 28 2 48 146 170 120 193 153 249 238 77 206 122 24 223 21 140 62 121 148 97 175 157 150 194 211 135 101 167 143 219 20 64 77 25 147 101 222 5 189 68 197 2 48 37 20 160 53 155 203 102 18 43 244 140 24 106 75 178 237 204 243 5 176 100 20 177 31 71 13 37 18 202 221 161 41 54 111 96 114 222 113 91 194 186 187 138 58 95 38 13 155)
      #t
      ("GroupIsomorphism"))
    #(1547
      "x-coordinate of the public key is small on brainpoolP384t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 100 2 48 19 8 211 217 237 254 58 208 126 33 90 151 91 43 6 126 159 11 128 51 113 179 2 159 67 136 163 71 31 77 178 63 53 138 234 92 3 219 98 215 113 21 197 108 73 98 99 59 2 48 75 139 31 228 75 50 204 102 145 20 161 206 11 160 85 84 70 208 201 106 50 203 96 33 133 232 251 164 20 211 168 49 203 245 181 25 176 249 6 71 220 69 227 10 31 35 239 144)
      #t
      ("GroupIsomorphism"))
    #(1548
      "x-coordinate of the public key is small on brainpoolP384t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 100 2 48 93 163 223 9 65 85 184 248 129 45 12 99 69 52 78 65 195 181 145 182 91 149 254 219 188 189 60 58 59 177 193 219 252 77 76 91 132 27 143 136 116 213 155 7 207 34 136 252 2 48 74 30 74 131 153 171 189 242 70 146 155 37 89 187 15 164 4 119 39 85 252 116 82 54 38 174 239 67 47 228 118 77 241 225 245 201 176 248 151 237 143 31 253 122 136 22 127 14)
      #t
      ("GroupIsomorphism"))))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 8 47 125 206 181 133 197 186 72 148 176 250 246 96 77 168 136 163 17 173 159 65 115 26 29 57 55 22 138 16 176 121 90 31 174 73 108 185 169 7 57 225 192 166 229 49 232 7 44 59 133 104 234 161 198 245 65 166 101 206 122 102 247 142 162 213 137 49 3 230 2 138 221 98 53 100 146 216 181 172 106 184 144 29 89 98 28 51 65 108 51 152 27 213 148 236)
  :der-encode
  #t
  :tests
  '(#(1549
      "x-coordinate of the public key has many trailing 0's on brainpoolP384t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 100 2 48 11 246 254 192 165 190 39 205 219 14 118 105 174 6 209 93 250 117 131 127 142 231 43 71 68 58 200 69 255 205 66 123 8 147 225 12 133 194 12 122 165 118 251 112 232 119 97 171 2 48 116 24 182 243 116 147 106 220 168 176 125 197 21 69 238 52 237 46 159 86 243 38 112 51 227 14 160 154 10 205 49 182 206 131 80 62 231 224 152 98 127 139 168 180 197 132 52 30)
      #t
      ("GroupIsomorphism"))
    #(1550
      "x-coordinate of the public key has many trailing 0's on brainpoolP384t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 100 2 48 3 227 6 168 111 107 44 178 72 252 182 141 29 49 122 96 66 183 8 158 150 215 76 47 91 147 78 46 18 40 49 38 138 69 226 24 91 124 33 39 14 139 144 108 211 114 230 215 2 48 76 130 171 109 230 188 1 148 172 26 46 52 128 160 200 4 102 175 125 42 50 157 32 176 49 81 209 128 106 11 192 114 15 85 211 120 26 125 185 254 190 125 139 189 10 113 155 250)
      #t
      ("GroupIsomorphism"))
    #(1551
      "x-coordinate of the public key has many trailing 0's on brainpoolP384t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 100 2 48 20 209 223 155 61 181 94 204 141 30 18 102 37 189 245 182 49 107 186 30 127 78 165 236 119 65 140 117 74 89 117 99 220 93 194 145 183 221 4 119 130 213 24 254 116 224 190 131 2 48 51 239 112 28 68 15 40 14 223 129 169 99 45 222 157 193 125 229 244 56 220 193 158 156 165 145 155 75 115 230 41 5 229 247 224 188 157 176 177 75 197 51 39 247 159 112 198 218)
      #t
      ("GroupIsomorphism"))))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 106 254 78 167 112 84 146 189 163 8 183 137 215 13 164 148 87 221 232 37 213 37 137 96 167 163 102 228 102 90 249 211 38 57 44 38 114 22 94 164 187 220 51 55 77 136 231 73 132 117 230 147 122 16 166 246 165 15 35 222 145 38 186 4 229 101 10 28 208 106 128 102 202 66 51 57 252 44 229 61 145 72 39 68 164 205 242 249 55 247 111 18 170 227 246 48)
  :der-encode
  #t
  :tests
  '(#(1552
      "y-coordinate of the public key has many trailing 1's on brainpoolP384t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 100 2 48 106 58 24 64 6 134 99 90 226 121 195 133 182 64 212 250 8 13 156 68 165 212 33 254 75 229 165 236 122 138 227 27 0 191 164 6 233 25 229 126 57 193 19 96 230 112 216 105 2 48 114 156 11 159 247 127 136 248 16 84 141 109 177 131 83 18 164 72 17 74 59 217 60 245 148 34 250 162 234 2 111 93 71 98 127 12 17 251 133 145 18 36 109 135 156 133 149 104)
      #t
      ("GroupIsomorphism"))
    #(1553
      "y-coordinate of the public key has many trailing 1's on brainpoolP384t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 101 2 48 26 184 214 195 29 69 119 245 156 165 113 76 158 173 169 121 253 185 236 12 173 50 216 203 145 93 189 112 73 41 71 24 127 90 82 113 142 25 152 47 122 45 76 180 139 34 119 35 2 49 0 135 46 60 231 209 253 90 225 128 250 241 153 11 17 147 117 88 170 68 204 218 182 49 73 43 137 37 190 132 251 203 69 33 72 237 173 91 191 228 140 6 184 201 144 140 162 82 253)
      #t
      ("GroupIsomorphism"))
    #(1554
      "y-coordinate of the public key has many trailing 1's on brainpoolP384t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 102 2 49 0 128 63 252 88 248 21 10 156 76 34 154 123 82 35 87 244 159 154 95 72 248 45 139 185 130 149 67 149 131 110 9 235 95 140 241 243 69 206 40 70 116 188 54 157 4 109 92 138 2 49 0 138 159 235 100 196 16 207 58 230 38 26 211 95 126 62 141 161 49 41 218 249 73 68 248 224 142 150 73 205 0 102 34 195 213 201 30 197 185 121 138 27 227 163 21 51 160 168 81)
      #t
      ("GroupIsomorphism"))))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 75 198 82 98 194 45 50 46 168 145 70 204 181 198 12 66 135 182 90 53 34 135 67 165 185 220 209 84 147 189 134 66 71 137 135 196 33 99 125 208 113 80 121 236 144 251 140 212 122 69 85 126 246 83 208 119 61 190 38 48 248 224 0 98 158 216 41 62 26 164 169 111 59 21 154 36 90 163 90 217 42 16 25 199 224 154 154 183 91 164 60 7 134 146 130 55)
  :der-encode
  #t
  :tests
  '(#(1555
      "y-coordinate of the public key has many trailing 0's on brainpoolP384t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 101 2 48 46 213 105 241 45 190 48 162 171 240 33 144 187 158 77 231 226 24 233 253 112 93 199 28 190 20 128 2 39 129 178 162 33 60 62 242 249 16 82 233 8 64 161 143 116 227 117 174 2 49 0 136 114 181 102 243 135 194 188 182 57 223 156 45 134 111 118 49 223 41 12 95 102 194 100 212 148 158 37 99 131 177 180 178 9 140 18 15 19 68 157 157 123 255 104 145 145 156 136)
      #t
      ("GroupIsomorphism"))
    #(1556
      "y-coordinate of the public key has many trailing 0's on brainpoolP384t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 100 2 48 75 126 86 81 176 53 149 146 149 9 46 46 254 84 141 165 34 6 200 208 228 139 164 62 43 142 205 152 236 226 93 192 137 85 182 231 176 94 56 196 226 40 41 209 101 135 17 181 2 48 68 169 115 183 85 40 64 12 239 63 99 245 95 33 84 212 139 176 184 38 33 66 0 211 243 60 123 195 17 85 36 45 78 36 240 126 209 150 6 253 178 200 236 174 182 152 30 183)
      #t
      ("GroupIsomorphism"))
    #(1557
      "y-coordinate of the public key has many trailing 0's on brainpoolP384t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 100 2 48 30 202 218 206 170 71 159 164 233 170 186 196 33 11 26 183 127 193 209 58 156 76 176 34 130 107 177 128 101 117 17 88 52 166 236 185 222 195 230 104 184 201 29 74 202 40 61 201 2 48 45 232 150 90 102 213 101 69 173 132 253 174 225 111 255 160 235 49 2 33 134 165 182 190 42 36 117 149 139 154 215 47 72 62 189 75 37 87 72 168 17 128 107 205 66 138 207 215)
      #t
      ("GroupIsomorphism"))))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-384"
  :public-key
  #vu8(48 122 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 11 3 98 0 4 42 195 147 242 12 17 14 63 151 6 83 4 57 126 174 14 35 24 123 43 97 99 220 102 8 62 130 175 245 104 66 104 67 5 106 255 141 194 62 235 206 41 127 116 120 48 226 23 52 201 53 103 19 145 198 239 168 180 108 92 55 179 248 74 130 228 41 167 88 15 235 154 19 131 181 92 131 169 57 142 142 204 123 21 214 153 230 57 98 50 145 2 161 87 111 43)
  :der-encode
  #t
  :tests
  '(#(1558
      "y-coordinate of the public key has many trailing 0's on brainpoolP384t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 100 2 48 55 226 86 135 35 64 218 157 200 132 253 0 218 161 70 40 55 43 75 237 192 168 160 159 157 117 19 82 29 59 128 58 120 220 14 219 171 60 125 194 178 1 75 175 122 157 33 14 2 48 27 164 180 8 121 115 7 12 202 155 149 118 80 23 126 235 65 197 87 115 21 150 169 102 176 183 246 135 23 216 231 181 84 175 208 124 41 55 201 84 3 169 12 58 5 250 150 75)
      #t
      ("GroupIsomorphism"))
    #(1559
      "y-coordinate of the public key has many trailing 0's on brainpoolP384t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 99 2 47 18 140 25 157 194 118 119 242 63 234 226 138 155 40 129 60 188 59 2 252 164 147 0 90 103 195 18 106 112 92 73 185 130 203 88 23 238 44 129 22 30 128 183 56 187 181 18 2 48 115 203 109 69 71 119 29 37 75 231 67 72 149 91 238 151 144 113 53 138 163 175 214 42 88 56 23 154 9 101 70 90 236 121 189 108 189 155 139 42 162 199 155 184 138 178 21 146)
      #t
      ("GroupIsomorphism"))
    #(1560
      "y-coordinate of the public key has many trailing 0's on brainpoolP384t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 101 2 49 0 129 139 15 214 202 9 120 165 156 173 63 161 94 132 219 40 150 243 155 42 164 98 240 88 56 52 250 68 68 209 83 254 97 224 201 48 113 186 150 197 255 167 25 63 119 184 6 243 2 48 29 45 97 68 23 35 133 248 87 219 75 126 126 134 57 98 234 202 205 236 3 75 75 74 157 209 175 39 38 4 64 63 57 244 90 33 148 139 48 151 110 115 142 158 152 253 156 238)
      #t
      ("GroupIsomorphism"))))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 13 3 129 130 0 4 114 126 117 214 61 206 177 168 74 113 6 216 2 232 235 52 162 4 188 5 53 53 103 162 59 168 182 245 78 80 210 216 34 28 135 253 142 82 56 163 55 77 249 88 179 207 62 63 56 198 24 193 204 140 91 149 116 181 14 64 93 105 18 24 55 247 137 24 80 110 169 204 20 241 73 46 182 108 158 28 78 39 243 203 0 187 81 29 93 253 190 166 248 23 168 123 253 129 222 41 85 250 3 47 82 135 63 121 145 105 204 68 92 176 57 30 70 229 113 121 239 132 213 12 133 219 92 151)
  :der-encode
  #t
  :tests
  '(#(1561
      "y-coordinate of the public key is small on brainpoolP512t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 132 2 64 94 27 244 177 222 186 203 164 114 95 195 204 130 20 83 77 229 246 229 146 100 91 96 244 196 161 221 34 96 211 53 125 143 178 173 167 247 42 72 52 106 126 52 57 90 106 24 28 105 64 72 174 130 88 241 203 59 111 99 244 147 40 41 235 2 64 94 61 240 190 238 34 250 150 212 101 88 51 134 47 115 181 47 18 228 196 199 216 24 178 24 70 239 251 57 214 240 159 195 91 45 15 172 143 92 179 196 5 31 244 95 83 5 233 59 36 19 138 15 149 250 210 254 241 193 12 209 220 242 203)
      #t
      ("GroupIsomorphism"))
    #(1562
      "y-coordinate of the public key is small on brainpoolP512t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 133 2 65 0 128 64 11 238 154 52 47 58 251 162 219 176 41 35 90 213 17 174 219 48 150 12 83 186 214 112 70 11 56 48 77 124 189 112 111 249 143 18 150 203 126 116 111 140 163 164 57 55 165 205 3 90 0 198 56 104 0 31 164 41 180 145 189 142 2 64 92 102 148 30 220 218 86 34 142 220 231 115 115 167 185 220 221 70 78 209 128 117 231 218 20 39 145 23 120 120 79 128 23 190 246 241 135 81 203 161 35 85 189 144 186 99 184 211 30 163 115 56 127 54 73 78 54 66 0 128 130 211 73 209)
      #t
      ("GroupIsomorphism"))
    #(1563
      "y-coordinate of the public key is small on brainpoolP512t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 132 2 64 71 104 223 221 174 76 184 53 102 242 195 169 52 0 145 194 96 142 14 39 10 75 63 72 222 215 199 91 74 161 90 182 92 176 80 207 219 49 44 50 191 170 119 89 134 156 156 12 226 127 108 223 31 181 132 55 159 99 152 201 94 191 134 68 2 64 126 26 58 172 216 214 3 250 236 248 121 2 20 123 103 67 93 153 46 233 229 67 249 52 221 76 64 216 161 44 209 225 3 102 208 116 61 120 98 185 200 186 139 104 22 99 156 53 9 181 202 162 169 21 51 192 175 80 236 226 253 44 83 12)
      #t
      ("GroupIsomorphism"))))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 13 3 129 130 0 4 114 126 117 214 61 206 177 168 74 113 6 216 2 232 235 52 162 4 188 5 53 53 103 162 59 168 182 245 78 80 210 216 34 28 135 253 142 82 56 163 55 77 249 88 179 207 62 63 56 198 24 193 204 140 91 149 116 181 14 64 93 105 18 24 114 230 20 160 139 123 26 191 42 227 157 127 125 93 93 235 125 8 153 232 179 14 128 241 120 101 222 35 120 27 95 245 127 203 188 215 69 204 101 19 92 70 97 177 85 57 180 161 203 209 198 16 230 157 85 11 57 37 139 73 210 94 236 92)
  :der-encode
  #t
  :tests
  '(#(1564
      "y-coordinate of the public key is large on brainpoolP512t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 132 2 64 39 217 198 196 219 49 175 242 136 250 78 64 21 157 110 225 140 152 19 148 39 72 71 150 241 248 116 92 152 39 223 192 141 57 58 190 20 77 246 183 193 45 72 151 31 221 40 75 129 230 225 8 96 53 158 247 20 115 185 230 187 132 203 30 2 64 7 160 66 12 138 155 38 145 27 99 98 101 64 168 95 96 170 39 122 253 239 153 144 252 141 193 211 241 242 197 169 39 225 228 162 157 129 167 1 180 139 54 111 0 15 150 38 20 137 156 191 25 56 38 202 141 228 164 37 83 141 229 172 98)
      #t
      ("GroupIsomorphism"))
    #(1565
      "y-coordinate of the public key is large on brainpoolP512t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 132 2 64 73 84 46 236 59 150 196 118 181 155 43 148 213 252 126 224 143 210 161 177 231 50 230 96 144 152 171 42 127 37 4 82 251 193 5 122 109 63 236 203 202 235 0 70 139 38 34 46 180 128 101 252 170 215 100 118 129 130 56 96 69 30 30 145 2 64 55 219 51 109 238 30 69 217 172 229 80 5 53 17 201 195 117 86 87 231 142 202 16 141 61 253 30 104 254 131 218 98 107 141 172 187 25 240 238 35 43 15 139 254 141 219 231 213 233 139 122 46 204 208 63 55 93 22 76 232 40 99 24 150)
      #t
      ("GroupIsomorphism"))
    #(1566
      "y-coordinate of the public key is large on brainpoolP512t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 132 2 64 79 144 206 183 107 199 47 12 202 16 112 93 59 173 171 108 170 96 25 239 107 254 125 225 183 89 81 213 23 210 177 97 104 81 91 243 5 240 0 98 146 228 144 5 152 37 97 65 228 92 25 7 127 164 71 221 95 50 218 166 44 37 8 21 2 64 103 18 167 132 16 40 2 130 30 151 8 227 73 208 58 136 41 123 55 78 248 26 78 220 53 1 101 36 205 42 34 175 234 123 139 49 113 222 96 172 27 56 130 83 54 80 88 109 202 211 56 234 72 35 20 134 225 14 49 32 206 61 42 89)
      #t
      ("GroupIsomorphism"))))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 13 3 129 130 0 4 5 24 255 20 186 5 24 138 190 208 168 200 141 176 240 151 181 102 10 172 87 233 163 205 187 156 131 62 42 127 159 97 62 73 149 107 83 166 53 149 46 41 129 142 74 128 21 203 106 21 12 237 230 54 194 85 143 45 54 2 72 57 99 185 158 217 254 132 47 62 212 24 70 44 99 226 102 148 76 162 116 126 21 189 143 82 132 77 106 28 233 129 82 16 66 18 6 128 92 110 215 146 53 110 197 125 121 250 62 54 255 242 62 47 198 55 12 103 188 81 211 248 181 85 201 4 141 109)
  :der-encode
  #t
  :tests
  '(#(1567
      "x-coordinate of the public key has many trailing 1's on brainpoolP512t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 133 2 64 69 158 62 110 103 26 108 52 45 88 93 182 137 4 61 50 164 148 206 0 57 238 113 172 103 237 110 192 134 25 8 235 174 107 45 110 74 103 202 167 168 240 87 106 73 136 154 74 99 212 176 184 170 136 69 201 207 120 91 73 65 42 112 113 2 65 0 165 237 215 171 252 233 212 65 59 34 40 147 151 120 91 61 132 178 192 211 113 148 9 37 91 183 18 130 104 224 188 211 125 146 139 234 84 134 191 86 255 226 89 199 236 159 80 184 120 224 21 93 115 227 189 229 207 254 85 230 18 248 215 184)
      #t
      ("GroupIsomorphism"))
    #(1568
      "x-coordinate of the public key has many trailing 1's on brainpoolP512t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 132 2 64 27 47 126 164 9 96 227 126 40 181 86 183 228 70 196 100 30 47 61 138 130 157 204 74 52 149 83 228 44 249 206 98 114 220 156 220 218 1 62 57 129 203 115 177 13 70 50 28 128 80 29 106 52 173 127 217 89 160 199 143 137 31 51 240 2 64 127 25 91 118 150 237 252 118 135 255 1 38 234 186 19 218 209 225 149 99 232 211 149 175 50 219 61 106 123 78 130 242 128 4 80 29 146 183 83 125 163 151 132 91 122 163 152 161 16 81 5 46 82 38 75 216 203 203 169 152 126 198 116 43)
      #t
      ("GroupIsomorphism"))
    #(1569
      "x-coordinate of the public key has many trailing 1's on brainpoolP512t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 132 2 64 27 92 29 43 43 6 89 26 31 165 22 207 250 156 138 87 207 31 255 194 44 236 183 36 146 129 103 11 194 56 131 166 133 83 224 202 241 237 217 241 112 58 37 183 78 0 0 163 126 50 230 204 53 118 147 159 69 140 61 213 196 219 204 156 2 64 75 35 215 237 127 138 107 123 167 210 42 239 168 253 224 48 236 179 242 254 212 165 242 111 18 213 154 41 214 60 221 14 192 63 174 85 125 20 28 123 14 135 18 195 6 176 238 187 208 202 178 118 150 1 32 98 98 43 177 128 4 48 52 186)
      #t
      ("GroupIsomorphism"))))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 13 3 129 130 0 4 63 137 231 135 180 213 210 89 150 36 81 53 48 231 80 171 60 89 87 220 154 160 231 176 138 62 37 53 104 24 226 3 125 6 47 51 109 78 237 65 124 145 188 177 27 84 181 125 84 164 240 42 114 251 116 38 47 116 44 198 243 64 68 1 58 68 139 142 45 13 90 124 91 79 27 159 91 112 26 157 33 255 85 227 103 140 161 25 182 215 197 17 186 10 239 137 243 26 235 25 93 176 15 36 131 89 174 233 36 231 200 96 183 104 69 246 81 42 42 74 173 193 40 122 21 9 82 32)
  :der-encode
  #t
  :tests
  '(#(1570
      "y-coordinate of the public key has many trailing 0's on brainpoolP512t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 134 2 65 0 169 82 132 122 207 33 60 134 226 49 49 109 143 145 48 247 203 223 127 57 82 48 122 87 112 118 52 45 19 147 155 74 181 161 49 59 52 171 184 146 4 211 253 31 135 56 133 255 250 104 60 90 73 62 84 97 199 241 64 10 248 106 231 254 2 65 0 154 101 168 164 21 13 229 147 178 150 66 185 136 178 236 46 35 225 94 21 110 207 10 245 253 226 251 215 50 8 246 159 37 6 209 65 224 180 124 14 31 47 160 158 242 107 56 154 107 210 176 35 9 48 161 111 209 25 118 126 56 39 36 181)
      #t
      ("GroupIsomorphism"))
    #(1571
      "y-coordinate of the public key has many trailing 0's on brainpoolP512t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 133 2 64 81 191 184 10 174 48 38 42 103 191 7 113 166 184 209 149 229 154 160 78 135 189 6 15 229 169 189 86 211 83 133 165 252 61 165 223 195 174 140 103 219 212 8 24 68 130 133 94 53 99 222 222 231 42 33 182 15 175 215 56 25 170 131 124 2 65 0 128 127 13 105 56 84 103 173 108 216 164 77 72 44 163 182 225 143 123 53 46 241 154 43 201 128 80 11 109 89 4 95 13 111 122 183 228 20 197 13 43 104 215 246 230 192 29 62 131 83 205 253 71 95 36 155 49 132 47 229 153 85 244 20)
      #t
      ("GroupIsomorphism"))
    #(1572
      "y-coordinate of the public key has many trailing 0's on brainpoolP512t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 132 2 64 78 135 17 176 13 227 85 241 76 142 185 25 89 193 60 119 249 21 87 84 118 95 16 242 170 168 253 173 106 20 198 164 230 44 94 212 138 157 140 164 3 201 2 219 12 44 7 53 66 107 51 230 120 40 172 50 174 25 184 78 101 152 104 25 2 64 125 16 74 229 229 208 218 38 203 66 125 121 81 212 13 244 41 180 32 80 134 230 51 184 0 215 215 184 189 228 138 155 236 78 67 221 235 66 38 25 43 92 155 48 255 163 239 167 210 56 90 178 138 25 12 22 95 178 162 197 133 114 194 162)
      #t
      ("GroupIsomorphism"))))
(test-signature/testvector
  "ecdsa_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-512"
  :public-key
  #vu8(48 129 155 48 20 6 7 42 134 72 206 61 2 1 6 9 43 36 3 3 2 8 1 1 13 3 129 130 0 4 120 96 164 116 59 180 142 119 147 199 241 65 111 186 198 202 11 83 130 16 215 67 242 73 118 175 62 253 169 127 40 188 149 145 52 1 236 76 165 231 68 162 61 26 85 38 83 255 17 14 200 66 27 61 229 49 243 186 205 160 123 251 9 214 3 102 47 47 36 117 187 245 226 13 164 139 80 22 157 40 156 137 197 78 208 249 123 187 199 243 128 22 241 169 85 203 116 197 39 39 239 128 32 85 234 9 15 225 164 155 229 141 220 96 131 188 163 247 192 47 246 68 119 92 208 2 127 6)
  :der-encode
  #t
  :tests
  '(#(1573
      "y-coordinate of the public key has many trailing 1's on brainpoolP512t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 132 2 64 76 214 23 84 33 29 34 35 113 229 82 87 143 247 5 204 129 154 47 159 178 114 159 5 216 72 202 171 244 74 49 253 161 189 3 143 27 135 239 210 138 140 229 50 34 253 254 193 141 89 41 223 146 109 242 124 44 126 115 96 188 92 12 112 2 64 92 233 76 133 29 177 128 125 199 157 204 8 124 8 48 215 10 0 105 207 82 186 255 175 52 122 239 161 221 186 119 246 247 112 193 72 63 221 227 143 93 116 189 179 35 114 225 47 238 132 62 255 240 242 220 147 68 202 30 59 38 185 176 81)
      #t
      ("GroupIsomorphism"))
    #(1574
      "y-coordinate of the public key has many trailing 1's on brainpoolP512t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 133 2 64 72 180 189 231 190 251 27 28 173 80 206 230 35 60 191 50 129 40 96 200 29 122 213 176 233 214 55 114 2 188 211 72 39 197 52 218 10 201 100 106 224 21 70 137 227 140 96 136 148 187 49 38 225 2 95 105 200 36 198 154 184 33 39 74 2 65 0 131 105 245 132 15 119 102 104 235 180 53 179 59 224 93 206 74 223 171 184 134 12 204 144 13 7 219 0 106 80 25 95 212 222 152 99 33 146 251 231 49 156 237 255 38 170 134 130 207 123 245 241 192 46 88 185 193 99 35 97 3 217 179 20)
      #t
      ("GroupIsomorphism"))
    #(1575
      "y-coordinate of the public key has many trailing 1's on brainpoolP512t1"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 129 133 2 64 25 82 75 21 207 78 203 64 11 147 142 245 247 82 184 110 200 240 124 89 3 218 93 186 156 145 171 121 101 177 34 58 142 38 43 239 140 202 137 115 237 152 121 127 55 163 94 28 89 153 207 32 62 97 14 247 115 198 170 39 134 187 160 100 2 65 0 152 207 117 38 245 162 74 14 47 34 249 9 248 25 11 19 19 4 81 177 93 214 119 75 222 169 217 41 52 45 146 75 199 235 161 223 137 145 156 27 154 238 141 9 32 54 6 209 12 235 255 137 144 76 183 231 26 130 216 151 45 117 83 6)
      #t
      ("GroupIsomorphism"))))
