(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 234 218 147 190 16 178 68 158 30 139 181 131 5 213 32 8 1 60 87 16 124 26 32 163 23 166 203 167 236 166 114 52 12 3 209 210 224 150 99 40 102 145 223 85 6 159 162 84 144 201 221 159 156 11 178 181)
  :der-encode
  #t
  :tests
  '(#(1
      "signature malleability"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 28 40 64 191 36 246 246 107 226 135 6 107 124 191 56 120 142 27 119 112 177 143 209 170 106 38 215 198 220)
      #t
      ())
    #(2
      "Legacy:ASN encoding of s misses leading 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 28 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #t
      ("MissingZero"))
    #(3
      "valid"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #t
      ())
    #(4
      "long form encoding of length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 129 61 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ("BER"))
    #(5
      "length of sequence contains leading 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 130 0 61 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ("BER"))
    #(6
      "wrong length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(7
      "wrong length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(8
      "uint32 overflow in length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 133 1 0 0 0 61 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(9
      "uint64 overflow in length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 137 1 0 0 0 0 0 0 0 61 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(10
      "length of sequence = 2**31 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 132 127 255 255 255 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(11
      "length of sequence = 2**32 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 132 255 255 255 255 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(12
      "length of sequence = 2**40 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 133 255 255 255 255 255 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(13
      "length of sequence = 2**64 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 136 255 255 255 255 255 255 255 255 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(14
      "incorrect length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 255 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(15
      "indefinite length without termination"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(16
      "indefinite length without termination"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 128 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(17
      "indefinite length without termination"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 128 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(18
      "removing sequence"
      #vu8(49 50 51 52 48 48)
      #vu8()
      #f
      ())
    #(19
      "lonely sequence tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48)
      #f
      ())
    #(20
      "appending 0's to sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 63 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97 0 0)
      #f
      ())
    #(21
      "prepending 0's to sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 63 0 0 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(22
      "appending unused 0's to sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97 0 0)
      #f
      ())
    #(23
      "appending null value to sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 63 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97 5 0)
      #f
      ())
    #(24
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 66 73 129 119 48 61 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(25
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 65 37 0 48 61 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(26
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 63 48 61 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97 0 4 222 173 190 239)
      #f
      ())
    #(27
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 66 34 33 73 129 119 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(28
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 65 34 32 37 0 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(29
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 34 30 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 0 4 222 173 190 239 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(30
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 66 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 34 34 73 129 119 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(31
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 65 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 34 33 37 0 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(32
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 34 31 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97 0 4 222 173 190 239)
      #f
      ())
    #(33
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 170 0 187 0 205 0 48 61 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(34
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 67 170 2 170 187 48 61 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(35
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 34 36 170 0 187 0 205 0 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(36
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 67 34 34 170 2 170 187 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(37
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 34 37 170 0 187 0 205 0 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(38
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 67 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 34 35 170 2 170 187 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(39
      "truncated length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 129)
      #f
      ())
    #(40
      "using composition with indefinite length"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 48 61 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97 0 0)
      #f
      ())
    #(41
      "using composition with indefinite length"
      #vu8(49 50 51 52 48 48)
      #vu8(48 65 34 128 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 0 0 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(42
      "using composition with indefinite length"
      #vu8(49 50 51 52 48 48)
      #vu8(48 65 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 34 128 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97 0 0)
      #f
      ())
    #(43
      "using composition with wrong tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 49 61 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97 0 0)
      #f
      ())
    #(44
      "using composition with wrong tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48 65 34 128 3 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 0 0 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(45
      "using composition with wrong tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48 65 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 34 128 3 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97 0 0)
      #f
      ())
    #(46
      "Replacing sequence with NULL"
      #vu8(49 50 51 52 48 48)
      #vu8(5 0)
      #f
      ())
    #(47
      "changing tag value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(46 61 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(48
      "changing tag value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(47 61 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(49
      "changing tag value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(49 61 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(50
      "changing tag value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(50 61 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(51
      "changing tag value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(255 61 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(52
      "dropping value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 0)
      #f
      ())
    #(53
      "using composition for sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 65 48 1 2 48 60 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(54
      "truncated sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99)
      #f
      ())
    #(55
      "truncated sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(56
      "indefinite length"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97 0 0)
      #f
      ("BER"))
    #(57
      "indefinite length with truncated delimiter"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97 0)
      #f
      ())
    #(58
      "indefinite length with additional element"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97 5 0 0 0)
      #f
      ())
    #(59
      "indefinite length with truncated element"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97 6 8 17 34 0 0)
      #f
      ())
    #(60
      "indefinite length with garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97 0 0 254 2 190 239)
      #f
      ())
    #(61
      "indefinite length with nonempty EOC"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97 0 2 190 239)
      #f
      ())
    #(62
      "prepend empty sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 63 48 0 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(63
      "append empty sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 63 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97 48 0)
      #f
      ())
    #(64
      "append garbage with high tag number"
      #vu8(49 50 51 52 48 48)
      #vu8(48 64 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97 191 127 0)
      #f
      ())
    #(65
      "sequence of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 63 48 61 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(66
      "truncated sequence: removed last 1 elements"
      #vu8(49 50 51 52 48 48)
      #vu8(48 30 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10)
      #f
      ())
    #(67
      "repeating element in sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 92 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(68
      "long form encoding of length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 129 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ("BER"))
    #(69
      "long form encoding of length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 129 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ("BER"))
    #(70
      "length of integer contains leading 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 63 2 130 0 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ("BER"))
    #(71
      "length of integer contains leading 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 63 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 130 0 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ("BER"))
    #(72
      "wrong length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 29 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(73
      "wrong length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 27 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(74
      "wrong length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 30 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(75
      "wrong length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 28 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(76
      "uint32 overflow in length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 66 2 133 1 0 0 0 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(77
      "uint32 overflow in length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 66 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 133 1 0 0 0 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(78
      "uint64 overflow in length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 137 1 0 0 0 0 0 0 0 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(79
      "uint64 overflow in length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 70 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 137 1 0 0 0 0 0 0 0 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(80
      "length of integer = 2**31 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 65 2 132 127 255 255 255 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(81
      "length of integer = 2**31 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 65 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 132 127 255 255 255 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(82
      "length of integer = 2**32 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 65 2 132 255 255 255 255 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(83
      "length of integer = 2**32 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 65 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 132 255 255 255 255 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(84
      "length of integer = 2**40 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 66 2 133 255 255 255 255 255 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(85
      "length of integer = 2**40 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 66 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 133 255 255 255 255 255 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(86
      "length of integer = 2**64 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 136 255 255 255 255 255 255 255 255 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(87
      "length of integer = 2**64 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 69 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 136 255 255 255 255 255 255 255 255 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(88
      "incorrect length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 255 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(89
      "incorrect length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 255 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(90
      "removing integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 31 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(91
      "lonely integer tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48 32 2 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(92
      "lonely integer tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48 31 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2)
      #f
      ())
    #(93
      "appending 0's to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 63 2 30 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 0 0 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(94
      "appending 0's to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 63 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 31 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97 0 0)
      #f
      ())
    #(95
      "prepending 0's to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 63 2 30 0 0 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ("BER"))
    #(96
      "prepending 0's to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 63 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 31 0 0 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ("BER"))
    #(97
      "appending unused 0's to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 63 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 0 0 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(98
      "appending null value to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 63 2 30 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 5 0 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(99
      "appending null value to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 63 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 31 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97 5 0)
      #f
      ())
    #(100
      "truncated length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 33 2 129 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(101
      "truncated length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 32 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 129)
      #f
      ())
    #(102
      "Replacing integer with NULL"
      #vu8(49 50 51 52 48 48)
      #vu8(48 33 5 0 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(103
      "Replacing integer with NULL"
      #vu8(49 50 51 52 48 48)
      #vu8(48 32 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 5 0)
      #f
      ())
    #(104
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 0 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(105
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 1 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(106
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 3 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(107
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 4 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(108
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 255 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(109
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 0 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(110
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 1 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(111
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 3 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(112
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 4 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(113
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 255 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(114
      "dropping value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 33 2 0 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(115
      "dropping value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 32 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 0)
      #f
      ())
    #(116
      "using composition for integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 65 34 32 2 1 112 2 27 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(117
      "using composition for integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 65 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 34 33 2 1 0 2 28 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(118
      "modify first byte of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 114 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(119
      "modify first byte of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 2 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(120
      "modify last byte of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 138 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(121
      "modify last byte of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 225)
      #f
      ())
    #(122
      "truncated integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 27 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(123
      "truncated integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 27 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(124
      "truncated integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 28 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99)
      #f
      ())
    #(125
      "leading ff in integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 255 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(126
      "leading ff in integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 30 255 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(127
      "replaced integer by infinity"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 9 1 128 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(128
      "replaced integer by infinity"
      #vu8(49 50 51 52 48 48)
      #vu8(48 33 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 9 1 128)
      #f
      ())
    #(129
      "replacing integer with zero"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 1 0 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(130
      "replacing integer with zero"
      #vu8(49 50 51 52 48 48)
      #vu8(48 33 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 1 0)
      #f
      ())
    #(131
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 1 112 4 154 243 31 131 72 103 61 86 206 206 43 38 252 42 132 187 226 226 162 232 74 236 237 118 114 71 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(132
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 255 112 4 154 243 31 131 72 103 61 86 206 206 43 40 206 228 195 74 2 102 123 45 248 98 52 190 29 205 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(133
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 143 251 101 12 224 124 183 152 194 169 49 49 212 216 26 120 91 253 13 91 112 244 222 88 110 229 183 246 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(134
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 143 251 101 12 224 124 183 152 194 169 49 49 212 215 49 27 60 181 253 153 132 210 7 157 203 65 226 51 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(135
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 254 143 251 101 12 224 124 183 152 194 169 49 49 212 217 3 213 123 68 29 29 93 23 181 19 18 137 141 185 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(136
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 1 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(137
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 143 251 101 12 224 124 183 152 194 169 49 49 212 216 26 120 91 253 13 91 112 244 222 88 110 229 183 246 2 29 0 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(138
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 1 215 191 64 219 9 9 148 29 120 249 148 131 64 197 180 183 165 250 111 202 151 232 168 32 145 224 141 158)
      #f
      ())
    #(139
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 28 215 191 64 219 9 9 148 29 120 249 148 131 64 199 135 113 228 136 143 78 112 46 85 149 217 40 57 36)
      #f
      ())
    #(140
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 255 40 64 191 36 246 246 107 226 135 6 107 124 191 57 97 235 58 190 128 115 123 244 129 36 202 123 156 159)
      #f
      ())
    #(141
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 254 40 64 191 36 246 246 107 226 135 6 107 124 191 58 75 72 90 5 144 53 104 23 87 223 110 31 114 98)
      #f
      ())
    #(142
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 29 1 215 191 64 219 9 9 148 29 120 249 148 131 64 198 158 20 197 65 127 140 132 11 126 219 53 132 99 97)
      #f
      ())
    #(143
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 112 4 154 243 31 131 72 103 61 86 206 206 43 39 229 135 164 2 242 164 143 11 33 167 145 26 72 10 2 28 40 64 191 36 246 246 107 226 135 6 107 124 191 57 97 235 58 190 128 115 123 244 129 36 202 123 156 159)
      #f
      ())
    #(144
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 0 2 1 0)
      #f
      ("EdgeCase"))
    #(145
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 0 2 1 1)
      #f
      ("EdgeCase"))
    #(146
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 0 2 1 255)
      #f
      ("EdgeCase"))
    #(147
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 1 0 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 61)
      #f
      ("EdgeCase"))
    #(148
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 1 0 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 60)
      #f
      ("EdgeCase"))
    #(149
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 1 0 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 62)
      #f
      ("EdgeCase"))
    #(150
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 1 0 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 1)
      #f
      ("EdgeCase"))
    #(151
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 1 0 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 2)
      #f
      ("EdgeCase"))
    #(152
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 8 2 1 0 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(153
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 0 9 1 66)
      #f
      ("EdgeCase"))
    #(154
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 2 1 0)
      #f
      ("EdgeCase"))
    #(155
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 2 1 1)
      #f
      ("EdgeCase"))
    #(156
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 2 1 255)
      #f
      ("EdgeCase"))
    #(157
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 1 1 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 61)
      #f
      ("EdgeCase"))
    #(158
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 1 1 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 60)
      #f
      ("EdgeCase"))
    #(159
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 1 1 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 62)
      #f
      ("EdgeCase"))
    #(160
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 1 1 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 1)
      #f
      ("EdgeCase"))
    #(161
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 1 1 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 2)
      #f
      ("EdgeCase"))
    #(162
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 8 2 1 1 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(163
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 9 1 66)
      #f
      ("EdgeCase"))
    #(164
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 255 2 1 0)
      #f
      ("EdgeCase"))
    #(165
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 255 2 1 1)
      #f
      ("EdgeCase"))
    #(166
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 255 2 1 255)
      #f
      ("EdgeCase"))
    #(167
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 1 255 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 61)
      #f
      ("EdgeCase"))
    #(168
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 1 255 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 60)
      #f
      ("EdgeCase"))
    #(169
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 1 255 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 62)
      #f
      ("EdgeCase"))
    #(170
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 1 255 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 1)
      #f
      ("EdgeCase"))
    #(171
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 1 255 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 2)
      #f
      ("EdgeCase"))
    #(172
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 8 2 1 255 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(173
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 255 9 1 66)
      #f
      ("EdgeCase"))
    #(174
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 61 2 1 0)
      #f
      ("EdgeCase"))
    #(175
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 61 2 1 1)
      #f
      ("EdgeCase"))
    #(176
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 61 2 1 255)
      #f
      ("EdgeCase"))
    #(177
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 61 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 61)
      #f
      ("EdgeCase"))
    #(178
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 61 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 60)
      #f
      ("EdgeCase"))
    #(179
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 61 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 62)
      #f
      ("EdgeCase"))
    #(180
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 61 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 1)
      #f
      ("EdgeCase"))
    #(181
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 61 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 2)
      #f
      ("EdgeCase"))
    #(182
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 36 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 61 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(183
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 61 9 1 66)
      #f
      ("EdgeCase"))
    #(184
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 60 2 1 0)
      #f
      ("EdgeCase"))
    #(185
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 60 2 1 1)
      #f
      ("EdgeCase"))
    #(186
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 60 2 1 255)
      #f
      ("EdgeCase"))
    #(187
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 60 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 61)
      #f
      ("EdgeCase"))
    #(188
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 60 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 60)
      #f
      ("EdgeCase"))
    #(189
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 60 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 62)
      #f
      ("EdgeCase"))
    #(190
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 60 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 1)
      #f
      ("EdgeCase"))
    #(191
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 60 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 2)
      #f
      ("EdgeCase"))
    #(192
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 36 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 60 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(193
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 60 9 1 66)
      #f
      ("EdgeCase"))
    #(194
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 62 2 1 0)
      #f
      ("EdgeCase"))
    #(195
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 62 2 1 1)
      #f
      ("EdgeCase"))
    #(196
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 62 2 1 255)
      #f
      ("EdgeCase"))
    #(197
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 61)
      #f
      ("EdgeCase"))
    #(198
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 60)
      #f
      ("EdgeCase"))
    #(199
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 62)
      #f
      ("EdgeCase"))
    #(200
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 1)
      #f
      ("EdgeCase"))
    #(201
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 2)
      #f
      ("EdgeCase"))
    #(202
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 36 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 62 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(203
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 62 9 1 66)
      #f
      ("EdgeCase"))
    #(204
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 1 2 1 0)
      #f
      ("EdgeCase"))
    #(205
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 1 2 1 1)
      #f
      ("EdgeCase"))
    #(206
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 1 2 1 255)
      #f
      ("EdgeCase"))
    #(207
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 1 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 61)
      #f
      ("EdgeCase"))
    #(208
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 1 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 60)
      #f
      ("EdgeCase"))
    #(209
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 1 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 62)
      #f
      ("EdgeCase"))
    #(210
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 1 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 1)
      #f
      ("EdgeCase"))
    #(211
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 1 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 2)
      #f
      ("EdgeCase"))
    #(212
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 36 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 1 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(213
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 1 9 1 66)
      #f
      ("EdgeCase"))
    #(214
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 2 2 1 0)
      #f
      ("EdgeCase"))
    #(215
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 2 2 1 1)
      #f
      ("EdgeCase"))
    #(216
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 2 2 1 255)
      #f
      ("EdgeCase"))
    #(217
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 2 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 61)
      #f
      ("EdgeCase"))
    #(218
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 2 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 60)
      #f
      ("EdgeCase"))
    #(219
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 2 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 62)
      #f
      ("EdgeCase"))
    #(220
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 2 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 1)
      #f
      ("EdgeCase"))
    #(221
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 2 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 2)
      #f
      ("EdgeCase"))
    #(222
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 36 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 2 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(223
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 2 9 1 66)
      #f
      ("EdgeCase"))
    #(224
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 12 1 48)
      #f
      ())
    #(225
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 5 2 1 1 12 0)
      #f
      ())
    #(226
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 9 12 2 37 115 12 3 115 37 115)
      #f
      ())
    #(227
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 8 2 1 1 48 3 2 1 0)
      #f
      ())
    #(228
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 3 2 1 1)
      #f
      ())
    #(229
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 1 1 0)
      #f
      ())
    #(230
      "Edge case for Shamir multiplication"
      #vu8(49 55 53 55 56)
      #vu8(48 60 2 28 50 107 192 99 83 247 249 201 247 123 143 75 85 70 78 134 25 148 78 120 121 64 44 202 87 46 4 26 2 28 49 22 225 163 142 74 178 0 142 202 3 47 178 209 133 229 194 26 35 46 175 69 7 174 86 23 127 210)
      #t
      ())
    #(231
      "special case hash"
      #vu8(50 50 53 52 54 50 56 57 56 52)
      #vu8(48 61 2 29 0 140 226 175 226 11 104 69 118 253 217 27 75 52 22 140 156 1 25 150 175 91 14 184 95 169 41 243 129 2 28 102 42 245 202 101 27 255 188 98 60 58 59 55 39 121 189 9 225 148 140 209 145 136 245 51 154 151 157)
      #t
      ())
    #(232
      "special case hash"
      #vu8(49 56 50 55 56 55 56 54 49 48)
      #vu8(48 62 2 29 0 218 87 60 247 58 237 23 71 16 194 50 21 87 53 36 143 142 190 246 150 55 70 71 82 125 165 34 88 2 29 0 178 81 133 107 102 168 60 50 191 11 123 129 160 31 29 180 80 126 98 33 37 243 1 189 131 42 92 204)
      #t
      ())
    #(233
      "special case hash"
      #vu8(49 53 49 56 56 54 49 55 48 57)
      #vu8(48 62 2 29 0 195 104 218 134 88 43 44 130 182 150 178 247 199 144 39 150 143 63 210 92 187 169 104 140 220 103 177 122 2 29 0 171 168 227 194 255 26 249 187 156 102 202 136 163 130 90 25 206 23 32 110 122 101 143 244 112 37 137 30)
      #t
      ())
    #(234
      "special case hash"
      #vu8(50 49 50 57 50 51 51 52 50 50)
      #vu8(48 61 2 29 0 255 206 252 181 113 144 208 184 126 251 120 159 181 52 7 253 44 101 197 174 53 81 218 62 204 248 221 213 2 28 5 200 155 65 35 143 30 29 239 143 190 141 74 254 191 32 190 7 126 130 151 47 145 41 116 135 225 24)
      #t
      ())
    #(235
      "special case hash"
      #vu8(49 50 50 49 57 55 57 48 53 57)
      #vu8(48 60 2 28 43 152 198 126 191 101 151 176 139 199 241 183 63 248 102 44 241 37 233 112 14 201 115 236 233 198 255 72 2 28 46 63 114 168 247 110 18 200 205 244 72 126 9 86 193 239 69 120 225 218 77 41 216 219 130 77 65 91)
      #t
      ())
    #(236
      "special case hash"
      #vu8(50 51 48 50 53 54 55 54 49 49)
      #vu8(48 61 2 28 87 148 215 4 64 241 102 144 77 36 208 185 16 205 18 124 99 169 237 220 164 90 77 144 50 219 71 232 2 29 0 139 165 210 144 131 77 154 9 99 18 45 146 141 169 2 247 176 52 103 57 96 114 24 11 177 128 27 67)
      #t
      ())
    #(237
      "special case hash"
      #vu8(49 49 48 53 56 54 56 52 55 50)
      #vu8(48 62 2 29 0 194 156 112 176 178 23 130 209 199 39 244 144 122 239 86 65 182 214 198 231 178 161 235 250 87 121 66 35 2 29 0 170 194 211 160 37 146 242 152 221 49 152 227 136 66 94 199 169 29 126 107 228 130 72 166 71 115 97 76)
      #t
      ())
    #(238
      "special case hash"
      #vu8(49 52 54 54 54 49 52 52 52 50)
      #vu8(48 61 2 28 92 62 243 119 140 129 30 105 239 11 14 55 14 69 236 13 126 184 133 5 195 232 255 184 197 11 153 147 2 29 0 224 107 92 110 71 220 77 169 230 79 210 27 195 225 218 19 207 124 38 79 166 76 203 137 218 135 56 124)
      #t
      ())
    #(239
      "special case hash"
      #vu8(52 52 49 57 53 54 52 50 48)
      #vu8(48 62 2 29 0 237 143 88 101 99 35 44 241 94 189 1 75 212 249 151 39 227 55 207 228 206 72 105 79 230 116 142 194 2 29 0 255 247 121 163 236 169 81 53 34 144 142 37 42 43 74 171 32 96 96 142 108 210 212 241 184 198 150 205)
      #t
      ())
    #(240
      "special case hash"
      #vu8(49 57 54 57 52 56 54 48 54 52)
      #vu8(48 60 2 28 100 192 132 246 183 117 187 247 145 92 25 100 166 139 2 89 98 147 40 89 143 19 85 120 114 134 120 48 2 28 42 111 59 40 157 19 14 195 217 158 76 170 246 1 73 120 149 160 105 193 165 167 91 85 154 210 132 68)
      #t
      ())
    #(241
      "special case hash"
      #vu8(50 50 51 53 54 55 50 56 56 51)
      #vu8(48 61 2 28 43 81 78 155 14 14 182 138 220 1 145 90 187 238 159 162 31 48 52 190 85 129 222 218 166 177 89 130 2 29 0 184 247 28 95 220 104 214 152 113 107 252 98 59 39 130 22 192 252 192 41 132 151 252 156 3 219 68 233)
      #t
      ())
    #(242
      "special case hash"
      #vu8(50 50 53 55 56 52 51 55 48 51)
      #vu8(48 62 2 29 0 228 16 63 74 138 129 68 133 182 180 6 254 141 215 34 6 186 214 165 14 113 38 188 101 92 61 34 133 2 29 0 155 203 153 105 50 132 202 194 110 102 65 168 97 219 236 36 249 204 93 215 187 83 83 57 208 154 201 132)
      #t
      ())
    #(243
      "special case hash"
      #vu8(57 52 52 53 48 48 57 52 54)
      #vu8(48 61 2 29 0 158 223 184 51 68 110 200 182 252 132 238 163 78 228 10 133 183 50 229 201 157 168 171 200 186 252 197 21 2 28 80 82 180 15 157 64 122 233 0 3 41 156 171 227 225 165 135 176 85 129 39 202 251 49 222 107 38 56)
      #t
      ())
    #(244
      "special case hash"
      #vu8(49 54 56 55 55 56 57 52 49 48)
      #vu8(48 61 2 29 0 173 38 71 200 255 55 119 152 166 174 174 212 54 211 12 123 37 251 82 66 136 41 206 100 36 221 52 232 2 28 40 245 134 113 215 124 134 218 48 36 24 197 30 90 184 109 19 123 166 239 67 137 114 43 199 155 135 81)
      #t
      ())
    #(245
      "special case hash"
      #vu8(51 57 51 50 54 49 50 50 56)
      #vu8(48 60 2 28 93 252 111 173 56 91 219 36 178 183 10 100 253 66 83 64 92 0 40 187 54 244 121 58 163 189 49 254 2 28 28 33 11 116 146 65 113 55 137 146 176 59 177 189 120 197 207 207 200 121 210 229 199 54 211 85 22 195)
      #t
      ())
    #(246
      "special case hash"
      #vu8(49 48 55 51 53 55 49 48 57 53)
      #vu8(48 61 2 28 118 107 239 70 34 150 149 230 130 157 209 44 213 88 54 158 195 69 25 186 74 114 220 175 111 115 247 176 2 29 0 252 1 92 205 209 233 67 185 16 16 22 7 216 31 241 57 140 166 164 215 12 37 131 43 2 178 33 228)
      #t
      ())
    #(247
      "special case hash"
      #vu8(54 48 56 56 55 52 55 52)
      #vu8(48 60 2 28 18 0 85 249 10 209 41 12 76 95 197 250 246 155 33 81 57 24 44 119 13 43 85 233 87 18 68 47 2 28 1 172 71 247 68 101 67 212 0 59 3 157 159 84 218 169 208 121 159 152 41 26 50 223 79 205 71 42)
      #t
      ())
    #(248
      "special case hash"
      #vu8(49 49 57 50 53 54 57 57 54 50)
      #vu8(48 61 2 29 0 244 128 89 31 111 64 162 91 55 160 53 253 145 149 65 69 236 52 46 89 61 9 225 66 242 93 164 8 2 28 92 107 164 79 245 47 82 197 20 144 116 61 155 101 9 22 190 88 208 109 124 31 217 157 250 46 171 88)
      #t
      ())
    #(249
      "special case hash"
      #vu8(57 48 48 55 54 48 57 51)
      #vu8(48 60 2 28 87 218 221 176 203 106 249 57 177 234 26 175 75 199 46 86 21 12 12 70 165 129 130 113 147 230 93 23 2 28 59 195 123 222 78 96 183 137 186 134 160 84 211 127 17 145 224 129 73 38 193 160 16 1 104 209 108 23)
      #t
      ())
    #(250
      "special case hash"
      #vu8(49 54 48 50 56 51 54 49 51 55)
      #vu8(48 60 2 28 58 116 16 43 209 252 97 112 24 239 196 251 192 66 231 25 168 27 85 131 10 172 31 29 205 237 236 101 2 28 75 185 254 144 1 90 69 243 28 140 149 221 162 79 84 252 219 100 104 44 19 246 141 77 163 209 171 224)
      #t
      ())
    #(251
      "special case hash"
      #vu8(50 48 56 48 50 52 53 54 55 52)
      #vu8(48 62 2 29 0 227 182 187 27 91 238 208 72 224 23 126 62 49 15 161 78 185 35 161 227 39 76 9 70 249 39 84 84 2 29 0 224 68 224 73 79 244 101 115 195 112 7 227 239 163 35 53 136 241 209 3 206 209 130 60 126 135 231 200)
      #t
      ())
    #(252
      "special case hash"
      #vu8(49 55 57 56 50 55 52 54 53 57)
      #vu8(48 60 2 28 60 33 43 90 126 101 217 175 68 100 59 214 47 164 42 155 156 255 230 189 182 35 233 185 228 51 113 86 2 28 41 200 18 26 18 66 122 50 78 93 85 31 245 168 61 60 37 46 50 37 122 242 128 13 8 8 23 210)
      #t
      ())
    #(253
      "special case hash"
      #vu8(49 49 53 53 53 55 55 55 50 48)
      #vu8(48 60 2 28 22 48 85 73 137 255 253 14 53 242 217 16 86 35 215 58 84 54 52 196 128 0 72 76 66 34 114 202 2 28 33 77 164 135 213 229 31 115 129 77 255 128 160 140 119 189 138 131 169 136 154 27 38 165 87 139 169 84)
      #t
      ())
    #(254
      "special case hash"
      #vu8(50 52 51 50 52 55 52 54 54 52)
      #vu8(48 61 2 28 10 70 9 36 47 33 147 185 75 197 79 73 188 245 50 165 118 224 53 206 197 14 4 54 104 87 75 239 2 29 0 170 104 189 103 98 77 136 18 0 43 187 58 95 83 5 148 69 19 114 212 171 54 137 106 41 41 195 223)
      #t
      ())
    #(255
      "special case hash"
      #vu8(50 52 49 55 50 56 50 50 55 55)
      #vu8(48 62 2 29 0 239 159 244 70 232 238 243 233 72 244 18 159 232 128 79 129 245 183 241 22 165 56 63 158 139 195 89 228 2 29 0 244 199 5 91 217 143 74 126 164 157 149 116 22 14 172 22 120 9 246 167 139 157 210 32 149 141 208 243)
      #t
      ())
    #(256
      "special case hash"
      #vu8(55 55 56 55 52 55 55 49)
      #vu8(48 61 2 28 26 108 89 216 93 91 49 32 178 140 13 48 188 5 138 146 220 114 93 142 244 80 193 152 204 60 165 34 2 29 0 139 23 254 252 138 177 255 11 179 122 147 68 100 83 212 15 101 188 44 185 99 107 17 32 127 92 144 161)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 139 247 231 146 247 200 104 119 241 253 5 82 228 45 128 101 59 89 227 162 158 118 42 34 129 13 170 199 238 198 21 187 173 4 181 141 194 167 149 96 144 184 4 11 181 5 83 37 187 160 170 139 58 92 170 111)
  :der-encode
  #t
  :tests
  '(#(257
      "k*G has a large x-coordinate"
      #vu8(49 50 51 52 48 48)
      #vu8(48 48 2 15 0 233 92 31 71 15 193 236 34 214 186 163 163 213 193 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 58)
      #t
      ())
    #(258
      "r too large"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 255 255 255 255 255 255 255 255 255 254 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 58)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 38 70 255 54 217 105 122 170 237 13 100 17 23 249 79 96 225 56 186 184 233 145 43 85 138 224 168 24 202 72 228 90 51 85 12 27 91 210 10 0 228 217 223 48 51 192 50 34 232 123 217 106 129 151 242 221)
  :der-encode
  #t
  :tests
  '(#(259
      "r,s are large"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 60 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 59)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 234 62 162 135 59 111 192 153 191 215 121 176 162 194 60 44 67 84 226 254 196 83 111 59 142 66 9 136 249 126 28 118 70 180 235 61 230 22 117 47 65 90 179 166 246 150 209 214 116 251 75 103 50 37 35 130)
  :der-encode
  #t
  :tests
  '(#(260
      "r and s^-1 have a large Hamming weight"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 2 28 61 80 82 105 27 141 200 157 235 173 54 4 102 242 163 158 130 232 174 42 239 183 124 60 146 173 124 209)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 146 174 84 227 139 78 156 106 233 148 49 147 116 124 76 138 204 108 150 244 34 81 82 136 233 105 138 19 232 243 167 89 161 168 39 60 83 244 180 177 139 252 247 141 155 185 136 173 179 176 5 0 45 190 67 76)
  :der-encode
  #t
  :tests
  '(#(261
      "r and s^-1 have a large Hamming weight"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 2 29 0 191 25 171 77 62 191 90 26 73 215 101 144 147 8 218 168 140 43 123 227 150 157 181 82 234 48 86 43)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 177 87 49 92 193 170 234 230 78 181 179 132 82 136 65 149 253 254 138 21 251 86 24 40 79 72 175 229 225 251 186 173 114 148 119 164 95 55 82 183 247 42 210 249 205 125 206 65 88 168 226 27 129 39 232 167)
  :der-encode
  #t
  :tests
  '(#(262
      "small r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 3 2 1 1)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 135 217 217 100 4 75 91 22 128 31 50 222 159 63 144 102 25 78 139 248 10 255 163 203 13 77 219 29 181 235 155 101 148 230 209 188 172 208 253 157 103 196 8 247 137 223 185 95 235 121 166 226 251 156 76 238)
  :der-encode
  #t
  :tests
  '(#(263
      "small r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 3 2 1 3)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 70 27 67 90 240 158 222 53 231 77 172 33 249 175 123 27 153 152 33 48 57 248 120 93 74 73 5 245 24 184 155 222 105 222 52 164 130 99 132 97 208 147 134 231 25 60 169 12 165 179 3 142 42 56 133 209)
  :der-encode
  #t
  :tests
  '(#(264
      "small r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 3 2 1 4)
      #t
      ())
    #(265
      "r is larger than n"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 42 64 2 1 4)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 128 147 175 141 176 75 61 210 231 195 197 155 182 74 131 44 47 184 232 225 65 186 231 186 21 52 149 10 16 197 232 122 236 189 31 205 252 54 205 24 212 27 50 56 178 172 97 62 183 201 222 152 141 136 24 22)
  :der-encode
  #t
  :tests
  '(#(266
      "s is larger than n"
      #vu8(49 50 51 52 48 48)
      #vu8(48 34 2 1 3 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 111 0 196)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 198 215 31 75 160 147 63 18 105 247 214 223 131 253 12 156 103 37 79 16 29 204 18 109 193 95 170 62 60 69 220 159 237 199 28 159 43 13 209 177 43 101 98 65 245 227 53 6 111 63 146 91 219 207 233 143)
  :der-encode
  #t
  :tests
  '(#(267
      "small r and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 35 2 2 1 0 2 29 0 201 147 38 76 153 50 100 201 147 38 76 153 50 100 17 210 229 91 50 20 168 214 117 40 129 42 85 171)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 190 185 216 220 186 72 20 107 144 50 104 142 206 169 71 162 49 231 208 230 206 23 215 107 86 237 99 72 53 80 63 59 74 244 20 135 14 240 51 131 120 75 29 132 107 62 7 184 233 252 45 97 144 163 191 218)
  :der-encode
  #t
  :tests
  '(#(268
      "smallish r and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 39 2 7 45 155 77 52 121 82 204 2 28 62 133 213 100 116 181 197 95 190 134 96 132 66 168 75 43 240 147 183 215 95 83 164 114 80 225 199 12)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 25 85 186 63 144 231 167 57 71 26 93 24 43 89 76 151 71 235 73 213 53 98 3 243 187 139 147 156 128 125 136 206 58 8 133 191 165 181 183 246 233 190 177 130 133 231 19 5 36 182 193 73 139 50 105 238)
  :der-encode
  #t
  :tests
  '(#(269
      "100-bit r and small s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 13 16 51 230 126 55 179 43 68 85 128 191 78 251 2 28 2 253 2 253 2 253 2 253 2 253 2 253 2 253 0 67 164 253 45 163 23 36 115 8 199 77 198 184)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 92 185 229 165 7 31 43 55 170 58 94 95 56 159 84 249 150 176 188 138 19 46 203 104 133 49 143 191 78 197 248 185 61 139 242 163 182 79 167 202 195 22 57 37 98 196 101 103 150 60 67 166 159 122 55 253)
  :der-encode
  #t
  :tests
  '(#(270
      "small r and 100 bit s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 35 2 2 1 0 2 29 0 208 84 52 171 172 216 89 237 116 24 94 117 183 81 198 217 246 12 121 33 218 207 187 142 25 205 186 142)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 123 52 239 135 35 164 48 156 15 168 167 236 58 120 52 119 101 42 130 137 35 112 246 118 51 20 254 123 222 230 99 133 48 113 227 95 211 199 111 153 29 120 67 197 225 104 202 101 155 147 189 96 21 81 143 186)
  :der-encode
  #t
  :tests
  '(#(271
      "100-bit r and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 13 6 37 34 187 211 236 190 124 57 233 62 124 36 2 29 0 208 84 52 171 172 216 89 237 116 24 94 117 183 81 198 217 246 12 121 33 218 207 187 142 25 205 186 142)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 3 242 106 156 19 151 156 245 208 144 234 37 220 150 99 152 2 44 238 195 21 4 171 196 177 15 118 118 125 87 125 207 71 225 14 56 76 107 154 34 154 69 90 159 211 62 84 254 121 96 184 176 22 10 239 22)
  :der-encode
  #t
  :tests
  '(#(272
      "r and s^-1 are close to n"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 29 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 22 162 224 184 240 62 19 221 41 69 92 92 41 189 2 28 85 85 85 85 85 85 85 85 85 85 85 85 85 85 7 139 160 61 165 106 6 159 13 193 201 116 14 20)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 182 113 41 109 213 246 144 80 46 75 21 0 228 172 180 200 45 58 168 223 188 88 104 166 67 248 106 60 164 107 168 195 167 184 35 37 149 34 41 30 36 22 35 34 118 204 168 80 60 200 219 249 65 241 217 61)
  :der-encode
  #t
  :tests
  '(#(273
      "s == 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 33 2 28 85 85 85 85 85 85 85 85 85 85 85 85 85 85 7 139 160 61 165 106 6 159 13 193 201 116 14 20 2 1 1)
      #t
      ())
    #(274
      "s == 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 33 2 28 85 85 85 85 85 85 85 85 85 85 85 85 85 85 7 139 160 61 165 106 6 159 13 193 201 116 14 20 2 1 0)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 118 227 75 87 168 198 29 245 156 176 183 146 28 236 110 84 34 52 64 51 247 172 203 123 49 121 230 130 206 253 10 132 131 9 209 222 207 152 163 185 227 51 105 27 149 193 120 33 203 104 17 55 99 12 2 226)
  :der-encode
  #t
  :tests
  '(#(275
      "point at infinity during verify"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 139 81 112 92 120 31 9 238 148 162 174 46 21 30 2 28 85 85 85 85 85 85 85 85 85 85 85 85 85 85 7 139 160 61 165 106 6 159 13 193 201 116 14 20)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 81 131 158 84 92 135 47 74 56 31 39 142 213 180 194 76 243 138 172 119 176 41 83 64 86 24 191 39 57 78 65 34 101 148 196 153 219 106 125 215 166 144 27 218 94 100 116 177 255 161 10 101 103 33 0 16)
  :der-encode
  #t
  :tests
  '(#(276
      "edge case for signature malleability"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 139 81 112 92 120 31 9 238 148 162 174 46 21 31 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 139 81 112 92 120 31 9 238 148 162 174 46 21 30)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 163 236 144 5 61 30 16 8 21 209 190 207 233 108 155 54 70 229 45 247 148 246 176 59 118 106 117 116 195 183 225 126 115 172 200 206 254 113 182 235 19 212 241 201 76 87 229 139 238 67 198 157 157 65 169 100)
  :der-encode
  #t
  :tests
  '(#(277
      "edge case for signature malleability"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 139 81 112 92 120 31 9 238 148 162 174 46 21 31 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 139 81 112 92 120 31 9 238 148 162 174 46 21 31)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 181 192 155 72 81 166 115 113 238 231 187 240 36 81 229 32 140 64 222 97 188 26 51 223 39 16 179 132 220 206 78 91 131 195 42 128 14 141 226 143 169 54 213 130 205 202 209 133 232 148 202 172 121 127 29 20)
  :der-encode
  #t
  :tests
  '(#(278
      "u1 == 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 85 85 85 85 85 85 85 85 85 85 85 85 85 85 7 139 160 61 165 106 6 159 13 193 201 116 14 20 2 28 117 59 180 0 120 147 64 129 215 189 17 62 196 155 25 239 9 209 186 51 73 134 144 81 109 77 18 44)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 148 30 40 59 227 19 0 191 212 246 161 43 135 111 211 38 115 82 85 28 196 158 158 239 115 247 101 56 193 21 229 254 59 146 246 67 198 206 241 197 143 63 134 87 87 77 31 100 149 125 72 128 153 92 222 131)
  :der-encode
  #t
  :tests
  '(#(279
      "u1 == n - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 85 85 85 85 85 85 85 85 85 85 85 85 85 85 7 139 160 61 165 106 6 159 13 193 201 116 14 20 2 29 0 138 196 75 255 135 108 191 126 40 66 238 193 59 99 252 179 214 231 54 10 202 86 152 243 239 15 24 17)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 67 201 204 208 138 128 188 161 128 34 114 43 11 220 215 144 216 42 62 248 182 92 63 52 32 75 180 114 158 225 193 240 5 152 19 11 35 19 163 227 138 55 152 208 61 172 102 92 255 32 243 108 232 162 2 74)
  :der-encode
  #t
  :tests
  '(#(280
      "u2 == 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 85 85 85 85 85 85 85 85 85 85 85 85 85 85 7 139 160 61 165 106 6 159 13 193 201 116 14 20 2 28 85 85 85 85 85 85 85 85 85 85 85 85 85 85 7 139 160 61 165 106 6 159 13 193 201 116 14 20)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 217 88 228 24 250 209 197 234 92 146 62 97 133 224 62 213 83 157 63 95 88 223 172 139 185 241 4 89 105 151 228 8 201 123 229 253 192 55 165 192 4 56 157 75 151 235 31 84 99 94 152 88 83 193 240 130)
  :der-encode
  #t
  :tests
  '(#(281
      "u2 == n - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 85 85 85 85 85 85 85 85 85 85 85 85 85 85 7 139 160 61 165 106 6 159 13 193 201 116 14 20 2 29 0 170 170 170 170 170 170 170 170 170 170 170 170 170 170 15 23 64 123 74 212 13 62 27 131 146 232 28 41)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 214 41 180 52 201 181 209 87 189 114 225 20 253 131 149 83 247 240 233 70 0 147 74 10 73 229 154 164 113 58 19 192 23 117 231 94 46 186 231 93 158 41 210 80 97 132 23 123 125 208 134 134 147 135 53 150)
  :der-encode
  #t
  :tests
  '(#(282
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 29 0 209 190 145 85 125 134 106 213 242 148 91 20 236 51 23 188 67 193 51 143 208 106 246 73 98 1 204 226)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 61 46 155 185 167 18 191 58 212 42 195 6 89 253 189 169 190 153 86 83 127 159 55 205 5 240 255 55 125 89 130 214 217 38 109 119 73 66 196 77 158 179 80 16 81 211 185 104 134 16 19 30 120 86 239 54)
  :der-encode
  #t
  :tests
  '(#(283
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 28 122 197 74 56 29 155 211 242 105 131 89 214 246 88 181 228 22 125 21 167 91 87 110 130 210 239 189 55)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 160 190 47 16 20 75 155 66 176 22 241 189 159 202 48 228 194 74 174 71 117 89 108 124 219 7 174 96 214 15 243 167 15 21 65 99 31 96 135 211 243 179 254 55 109 35 5 181 11 148 130 17 6 65 36 121)
  :der-encode
  #t
  :tests
  '(#(284
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 28 79 187 6 62 130 64 46 22 254 20 237 218 77 121 134 176 184 131 68 161 245 59 14 38 132 238 126 49)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 77 116 57 122 88 108 138 197 227 38 190 208 55 32 189 231 3 126 74 7 174 231 32 159 112 73 60 171 16 103 120 191 208 129 209 122 182 220 184 253 138 69 73 98 148 28 38 236 193 156 218 159 183 119 25 219)
  :der-encode
  #t
  :tests
  '(#(285
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 29 0 211 190 95 80 215 38 249 155 138 196 75 255 135 107 254 120 221 122 230 48 210 39 239 11 168 122 227 155)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 140 47 20 155 23 56 36 63 129 166 241 33 53 57 90 43 162 113 136 99 98 46 102 227 62 252 36 31 86 56 207 106 233 207 179 149 120 207 58 113 151 2 5 46 94 158 148 2 22 197 19 109 203 110 240 133)
  :der-encode
  #t
  :tests
  '(#(286
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 29 0 229 245 13 114 111 153 184 172 68 191 248 118 203 247 16 228 127 144 135 209 175 223 177 218 182 214 218 241)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 173 82 39 228 138 250 161 101 231 185 126 248 33 6 135 85 110 16 100 63 218 138 55 122 175 79 91 244 18 232 109 74 229 95 68 96 171 166 169 50 243 7 238 120 239 220 19 110 154 61 246 49 49 0 191 79)
  :der-encode
  #t
  :tests
  '(#(287
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 29 0 203 234 26 228 223 51 113 88 137 127 240 237 151 239 11 38 30 104 31 101 75 226 58 112 17 81 139 165)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 63 185 74 49 101 236 222 244 63 162 121 7 237 7 92 175 82 194 84 32 172 123 199 187 144 64 137 146 2 60 77 123 71 117 181 145 174 34 61 212 218 156 234 171 215 59 151 67 221 171 139 64 87 110 57 63)
  :der-encode
  #t
  :tests
  '(#(288
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 29 0 215 38 249 155 138 196 75 255 135 108 191 126 40 66 42 160 126 195 203 29 148 114 189 112 79 64 41 240)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 228 95 207 10 127 77 194 163 8 220 120 104 37 20 35 251 247 26 32 90 149 70 133 10 1 167 50 252 154 115 202 77 65 23 80 118 242 243 98 178 118 236 176 204 219 110 11 179 12 74 27 53 194 227 237 130)
  :der-encode
  #t
  :tests
  '(#(289
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 29 0 151 32 183 85 65 60 202 149 6 181 210 117 137 229 138 196 190 216 86 118 43 167 174 32 171 91 67 204)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 60 89 225 57 130 253 156 26 69 153 27 30 157 121 233 57 165 42 98 202 71 151 100 241 71 126 40 19 27 0 76 155 255 215 240 12 5 227 22 140 98 92 201 58 183 160 241 186 141 111 162 106 77 81 98 203)
  :der-encode
  #t
  :tests
  '(#(290
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 28 46 65 110 170 130 121 149 42 13 107 164 235 19 203 254 230 156 247 188 174 67 114 50 251 250 90 93 91)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 198 184 255 21 45 122 27 122 153 206 52 131 189 234 175 91 210 206 100 220 107 15 137 207 53 68 184 124 5 58 182 207 156 181 16 220 20 64 171 78 65 42 22 127 76 105 54 95 207 201 127 49 213 186 69 129)
  :der-encode
  #t
  :tests
  '(#(291
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 29 0 197 98 37 255 195 182 95 191 20 33 119 96 157 177 137 171 91 208 19 36 111 25 225 28 165 181 161 39)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 124 7 114 251 101 83 192 236 13 209 247 59 93 179 128 118 77 159 47 122 251 78 172 30 119 77 172 213 110 46 93 224 219 99 191 3 207 150 117 234 230 210 223 229 66 78 121 171 57 73 81 201 182 10 213 223)
  :der-encode
  #t
  :tests
  '(#(292
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 29 0 167 221 131 31 65 32 23 11 127 10 118 237 38 188 78 169 204 158 26 112 4 140 27 181 240 165 84 55)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 65 8 224 204 212 124 186 9 251 126 212 217 243 69 88 35 120 9 101 21 120 97 193 191 143 147 211 75 70 214 253 183 30 158 137 173 170 231 19 118 177 63 209 118 68 177 30 237 0 212 152 120 61 160 186 26)
  :der-encode
  #t
  :tests
  '(#(293
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 178 54 74 232 80 20 177 73 184 108 116 30 184 190)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 47 45 164 10 27 114 246 123 166 54 19 162 67 17 156 65 199 37 40 57 207 16 110 134 181 216 230 227 90 30 14 47 196 155 79 49 111 12 14 114 54 120 87 73 235 52 206 146 60 35 174 243 48 175 135 51)
  :der-encode
  #t
  :tests
  '(#(294
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 29 0 133 95 91 45 200 228 110 196 40 165 147 247 50 25 207 101 218 231 147 232 52 110 48 204 55 1 48 156)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 125 192 151 16 244 245 134 175 5 176 143 12 157 205 72 177 48 135 51 201 119 103 252 40 109 28 114 131 67 83 167 4 199 149 11 143 74 17 57 75 200 219 6 173 204 241 157 142 217 92 127 33 74 23 49 55)
  :der-encode
  #t
  :tests
  '(#(295
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 28 45 181 246 26 234 129 114 118 175 32 100 225 4 199 163 14 50 3 76 181 38 221 10 172 250 86 86 111)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 219 180 57 226 195 233 209 130 43 148 204 199 217 140 159 203 102 142 101 221 106 117 154 210 223 220 211 40 130 102 50 52 230 218 81 45 125 125 95 231 145 86 173 14 25 255 198 45 97 142 60 244 130 118 16 109)
  :der-encode
  #t
  :tests
  '(#(296
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 29 0 132 166 199 81 62 95 72 192 127 255 255 255 255 255 135 19 243 203 161 41 62 79 62 149 89 127 230 189)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 224 18 220 32 204 165 189 42 223 170 39 245 116 25 89 108 224 158 208 241 138 145 72 227 10 15 110 210 85 190 202 27 94 62 36 133 239 149 55 174 72 166 123 114 219 207 109 123 51 55 32 35 165 196 67 232)
  :der-encode
  #t
  :tests
  '(#(297
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 28 108 117 19 229 244 140 7 255 255 255 255 255 255 255 157 33 253 27 49 84 76 177 60 168 106 117 178 94)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 197 16 171 52 171 212 133 92 84 214 36 7 171 230 202 9 12 115 186 73 172 169 222 155 241 23 188 162 66 179 176 12 39 44 34 104 26 247 194 85 18 15 172 20 138 215 60 129 180 120 70 228 173 47 86 39)
  :der-encode
  #t
  :tests
  '(#(298
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 29 0 216 234 39 203 233 24 15 255 255 255 255 255 255 255 58 67 250 54 98 168 153 98 121 80 212 235 100 188)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 8 166 225 103 83 106 71 170 162 36 254 194 28 224 119 100 46 253 185 125 147 174 22 185 103 34 121 244 51 251 159 26 187 37 242 192 195 230 0 138 200 87 237 228 168 156 168 217 208 139 137 150 97 73 105 172)
  :der-encode
  #t
  :tests
  '(#(299
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 28 62 95 72 192 127 255 255 255 255 255 255 255 255 255 199 36 150 140 14 207 158 215 131 116 74 115 55 179)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 26 131 225 133 252 243 14 108 105 207 41 46 73 125 99 204 4 230 253 7 203 147 101 167 75 227 195 156 107 45 86 36 125 244 156 249 65 118 196 232 239 200 78 199 16 205 13 97 77 208 102 193 111 106 211 224)
  :der-encode
  #t
  :tests
  '(#(300
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 29 0 191 255 255 255 255 255 255 255 255 255 255 255 255 255 61 135 187 68 200 51 187 56 77 15 34 76 205 222)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 45 89 239 216 65 164 75 131 253 66 230 162 152 74 83 250 147 173 36 44 17 103 143 146 32 44 204 251 149 188 175 11 47 110 176 230 212 216 62 50 96 224 55 211 220 14 72 171 108 65 65 206 107 86 202 208)
  :der-encode
  #t
  :tests
  '(#(301
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 100 108 149 208 160 41 98 147 112 216 232 61 113 127)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 17 97 199 173 214 246 127 153 91 147 225 158 177 139 213 231 63 215 29 107 177 13 206 239 11 121 46 156 8 196 76 239 152 38 180 237 103 80 140 9 208 126 200 87 160 234 73 237 26 127 31 162 199 76 184 56)
  :der-encode
  #t
  :tests
  '(#(302
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 28 63 255 255 255 255 255 255 255 255 255 255 255 255 255 139 81 112 92 120 31 9 238 148 162 174 46 21 32)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 132 220 61 46 191 207 52 128 113 59 174 255 48 173 7 129 188 140 77 6 171 109 221 79 127 16 69 175 117 112 83 124 93 113 167 139 26 4 26 202 15 227 95 100 40 36 171 218 140 63 242 233 252 245 200 203)
  :der-encode
  #t
  :tests
  '(#(303
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 127 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 253 2 29 0 150 218 251 13 117 64 185 59 87 144 50 112 130 99 92 216 137 94 30 121 157 93 25 249 43 89 64 86)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 23 103 87 78 100 92 85 14 243 211 83 247 109 68 40 249 97 106 194 136 179 99 120 133 125 227 50 98 159 224 152 37 165 127 58 14 193 17 137 244 86 2 114 41 122 182 213 224 149 64 31 235 182 13 13 201)
  :der-encode
  #t
  :tests
  '(#(304
      "point duplication during verification"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 29 0 196 69 3 218 232 93 213 33 7 128 240 41 40 179 217 39 23 28 87 143 134 3 209 107 36 6 99 199 2 28 30 243 89 228 189 20 111 99 216 21 92 92 37 35 250 51 83 201 130 15 132 242 129 80 186 211 129 154)
      #t
      ("PointDuplication"))))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 23 103 87 78 100 92 85 14 243 211 83 247 109 68 40 249 97 106 194 136 179 99 120 133 125 227 50 98 96 31 103 218 90 128 197 241 62 238 118 11 169 253 141 213 133 73 42 31 106 191 224 20 73 242 242 56)
  :der-encode
  #t
  :tests
  '(#(305
      "duplication bug"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 29 0 196 69 3 218 232 93 213 33 7 128 240 41 40 179 217 39 23 28 87 143 134 3 209 107 36 6 99 199 2 28 30 243 89 228 189 20 111 99 216 21 92 92 37 35 250 51 83 201 130 15 132 242 129 80 186 211 129 154)
      #f
      ("PointDuplication"))))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 226 239 140 140 203 88 235 162 135 217 39 155 52 158 118 82 204 163 231 205 161 136 165 241 121 215 113 66 248 117 148 243 102 76 15 175 123 89 103 14 53 58 55 13 29 104 173 137 214 161 226 70 180 208 59 238)
  :der-encode
  #t
  :tests
  '(#(306
      "comparison with point at infinity "
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 85 85 85 85 85 85 85 85 85 85 85 85 85 85 7 139 160 61 165 106 6 159 13 193 201 116 14 20 2 28 51 51 51 51 51 51 51 51 51 51 51 51 51 51 4 134 249 190 150 114 208 197 213 13 223 69 162 12)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 184 191 62 249 100 106 191 255 184 66 32 16 78 201 150 169 44 239 51 249 50 142 196 203 30 166 153 72 79 234 81 160 222 158 157 128 27 171 212 44 160 146 75 54 73 139 197 144 15 190 185 203 213 173 156 26)
  :der-encode
  #t
  :tests
  '(#(307
      "extreme value for k and edgecase s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 112 106 70 220 118 220 183 103 152 230 14 109 137 71 71 136 209 109 193 128 50 210 104 253 26 112 79 166 2 28 85 85 85 85 85 85 85 85 85 85 85 85 85 85 7 139 160 61 165 106 6 159 13 193 201 116 14 20)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 40 110 128 66 156 135 150 220 216 133 217 95 150 13 32 159 237 25 248 126 44 228 35 209 102 200 226 32 46 48 136 44 9 151 13 93 213 139 103 229 187 128 175 254 199 66 72 169 203 74 120 51 132 200 182 160)
  :der-encode
  #t
  :tests
  '(#(308
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 112 106 70 220 118 220 183 103 152 230 14 109 137 71 71 136 209 109 193 128 50 210 104 253 26 112 79 166 2 29 0 219 109 182 219 109 182 219 109 182 219 109 182 219 108 238 212 192 158 132 199 126 189 145 22 225 115 145 235)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 85 153 163 250 249 106 186 115 2 189 61 152 207 222 105 82 91 114 146 118 35 131 244 160 181 195 16 57 63 170 69 254 182 195 93 43 123 242 95 252 99 60 66 14 191 196 231 21 118 83 2 197 161 26 199 147)
  :der-encode
  #t
  :tests
  '(#(309
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 112 106 70 220 118 220 183 103 152 230 14 109 137 71 71 136 209 109 193 128 50 210 104 253 26 112 79 166 2 28 51 51 51 51 51 51 51 51 51 51 51 51 51 51 4 134 249 190 150 114 208 197 213 13 223 69 162 12)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 91 82 52 184 219 107 189 57 110 174 125 28 164 230 216 119 130 76 152 205 233 251 250 179 75 107 140 203 31 56 174 159 135 173 195 230 210 71 78 181 227 205 154 239 240 146 115 32 33 75 229 80 245 230 46 212)
  :der-encode
  #t
  :tests
  '(#(310
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 28 112 106 70 220 118 220 183 103 152 230 14 109 137 71 71 136 209 109 193 128 50 210 104 253 26 112 79 166 2 29 0 204 204 204 204 204 204 204 204 204 204 204 204 204 204 18 27 230 250 89 203 67 23 84 55 125 22 136 49)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 172 237 78 168 148 158 90 227 126 242 245 235 94 0 103 93 8 225 124 52 190 102 119 176 242 105 182 114 94 58 208 175 73 235 255 244 21 238 79 42 131 142 173 31 132 202 250 166 82 193 122 204 38 19 7 37)
  :der-encode
  #t
  :tests
  '(#(311
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 112 106 70 220 118 220 183 103 152 230 14 109 137 71 71 136 209 109 193 128 50 210 104 253 26 112 79 166 2 28 36 146 73 36 146 73 36 146 73 36 146 73 36 146 39 206 32 26 107 118 149 31 152 46 122 232 152 82)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 62 140 27 204 22 25 94 135 105 226 93 76 133 152 7 223 254 23 139 237 91 202 157 176 110 250 21 50 78 59 83 179 4 139 140 205 140 220 18 101 190 36 12 142 226 4 6 4 134 169 154 211 30 170 211 164)
  :der-encode
  #t
  :tests
  '(#(312
      "extreme value for k"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 112 106 70 220 118 220 183 103 152 230 14 109 137 71 71 136 209 109 193 128 50 210 104 253 26 112 79 166 2 28 14 177 14 90 185 95 172 222 212 6 16 41 214 58 70 244 111 18 148 116 17 242 234 86 26 89 32 87)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 36 129 147 35 183 190 138 176 145 15 127 51 189 47 118 105 196 75 19 240 148 121 150 94 149 40 125 19 176 89 35 69 190 175 191 219 140 243 98 146 105 189 216 23 114 141 93 92 211 194 139 198 198 65 74 112)
  :der-encode
  #t
  :tests
  '(#(313
      "extreme value for k and edgecase s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 29 0 183 14 12 189 107 180 191 127 50 19 144 185 74 3 193 211 86 194 17 34 52 50 128 214 17 92 29 33 2 28 85 85 85 85 85 85 85 85 85 85 85 85 85 85 7 139 160 61 165 106 6 159 13 193 201 116 14 20)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 68 207 87 186 195 10 131 218 57 249 11 243 250 172 213 34 17 167 15 185 37 71 219 119 120 234 108 129 43 63 209 191 20 104 141 39 112 197 12 213 168 144 163 128 123 160 232 97 33 54 161 177 30 3 15 130)
  :der-encode
  #t
  :tests
  '(#(314
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 183 14 12 189 107 180 191 127 50 19 144 185 74 3 193 211 86 194 17 34 52 50 128 214 17 92 29 33 2 29 0 219 109 182 219 109 182 219 109 182 219 109 182 219 108 238 212 192 158 132 199 126 189 145 22 225 115 145 235)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 220 23 241 0 29 50 97 39 247 55 92 255 167 11 117 48 188 164 218 16 64 220 67 208 4 74 172 160 122 20 111 4 197 41 76 254 126 30 213 135 218 85 186 231 11 127 168 227 47 106 168 0 49 77 1 221)
  :der-encode
  #t
  :tests
  '(#(315
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 29 0 183 14 12 189 107 180 191 127 50 19 144 185 74 3 193 211 86 194 17 34 52 50 128 214 17 92 29 33 2 28 51 51 51 51 51 51 51 51 51 51 51 51 51 51 4 134 249 190 150 114 208 197 213 13 223 69 162 12)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 104 226 215 8 142 172 24 186 119 91 246 140 92 80 158 134 175 214 249 52 81 180 228 238 29 115 226 119 226 79 244 226 126 246 197 25 219 103 109 130 44 93 176 64 72 40 136 1 60 143 56 129 188 154 198 90)
  :der-encode
  #t
  :tests
  '(#(316
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 62 2 29 0 183 14 12 189 107 180 191 127 50 19 144 185 74 3 193 211 86 194 17 34 52 50 128 214 17 92 29 33 2 29 0 204 204 204 204 204 204 204 204 204 204 204 204 204 204 18 27 230 250 89 203 67 23 84 55 125 22 136 49)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 205 65 113 173 203 139 231 94 119 52 6 26 4 139 43 242 40 209 103 194 116 45 39 248 84 57 32 70 134 94 185 88 235 211 32 186 135 102 42 211 172 122 245 104 198 190 15 9 190 9 11 207 224 131 179 229)
  :der-encode
  #t
  :tests
  '(#(317
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 29 0 183 14 12 189 107 180 191 127 50 19 144 185 74 3 193 211 86 194 17 34 52 50 128 214 17 92 29 33 2 28 36 146 73 36 146 73 36 146 73 36 146 73 36 146 39 206 32 26 107 118 149 31 152 46 122 232 152 82)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 238 253 249 154 182 157 24 136 119 44 171 226 29 64 96 69 225 190 171 130 118 26 112 64 190 235 126 211 89 113 140 136 154 248 15 34 243 32 251 230 98 213 234 15 101 223 180 165 88 156 41 76 229 183 51 89)
  :der-encode
  #t
  :tests
  '(#(318
      "extreme value for k"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 29 0 183 14 12 189 107 180 191 127 50 19 144 185 74 3 193 211 86 194 17 34 52 50 128 214 17 92 29 33 2 28 14 177 14 90 185 95 172 222 212 6 16 41 214 58 70 244 111 18 148 116 17 242 234 86 26 89 32 87)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 183 14 12 189 107 180 191 127 50 19 144 185 74 3 193 211 86 194 17 34 52 50 128 214 17 92 29 33 189 55 99 136 181 247 35 251 76 34 223 230 205 67 117 160 90 7 71 100 68 213 129 153 133 0 126 52)
  :der-encode
  #t
  :tests
  '(#(319
      "testing point duplication"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 117 59 180 0 120 147 64 129 215 189 17 62 196 155 25 239 9 209 186 51 73 134 144 81 109 77 18 44 2 28 36 146 73 36 146 73 36 146 73 36 146 73 36 146 39 206 32 26 107 118 149 31 152 46 122 232 152 81)
      #f
      ())
    #(320
      "testing point duplication"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 29 0 138 196 75 255 135 108 191 126 40 66 238 193 59 99 252 179 214 231 54 10 202 86 152 243 239 15 24 17 2 28 36 146 73 36 146 73 36 146 73 36 146 73 36 146 39 206 32 26 107 118 149 31 152 46 122 232 152 81)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 183 14 12 189 107 180 191 127 50 19 144 185 74 3 193 211 86 194 17 34 52 50 128 214 17 92 29 33 66 200 156 119 74 8 220 4 179 221 32 25 50 188 138 94 165 248 184 155 187 42 126 102 122 255 129 205)
  :der-encode
  #t
  :tests
  '(#(321
      "testing point duplication"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 117 59 180 0 120 147 64 129 215 189 17 62 196 155 25 239 9 209 186 51 73 134 144 81 109 77 18 44 2 28 36 146 73 36 146 73 36 146 73 36 146 73 36 146 39 206 32 26 107 118 149 31 152 46 122 232 152 81)
      #f
      ())
    #(322
      "testing point duplication"
      #vu8(49 50 51 52 48 48)
      #vu8(48 61 2 29 0 138 196 75 255 135 108 191 126 40 66 238 193 59 99 252 179 214 231 54 10 202 86 152 243 239 15 24 17 2 28 36 146 73 36 146 73 36 146 73 36 146 73 36 146 39 206 32 26 107 118 149 31 152 46 122 232 152 81)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 76 36 102 112 101 138 29 65 245 215 123 206 36 108 190 56 106 194 40 72 226 105 185 212 205 103 196 102 221 217 71 21 61 57 178 212 37 51 164 96 222 242 104 128 64 140 175 45 211 221 72 254 136 140 209 118)
  :der-encode
  #t
  :tests
  '(#(323
      "pseudorandom signature"
      #vu8()
      #vu8(48 61 2 28 39 112 64 61 66 183 180 94 85 51 8 209 246 164 128 100 11 97 202 192 174 54 102 93 111 20 211 78 2 29 0 133 80 107 4 4 38 94 222 223 154 137 252 124 156 122 85 193 108 91 13 120 31 119 77 232 244 111 161)
      #t
      ())
    #(324
      "pseudorandom signature"
      #vu8(77 115 103)
      #vu8(48 61 2 29 0 182 141 167 34 187 186 127 106 88 65 123 181 208 221 136 244 3 22 252 98 139 14 223 203 15 2 176 98 2 28 92 116 46 51 11 111 235 173 249 161 45 88 186 42 113 153 98 148 87 239 46 158 76 236 210 240 159 80)
      #t
      ())
    #(325
      "pseudorandom signature"
      #vu8(49 50 51 52 48 48)
      #vu8(48 60 2 28 1 236 31 241 92 138 85 214 151 165 66 77 103 71 83 248 47 113 21 147 130 131 104 210 251 180 26 23 2 28 32 217 8 157 183 186 244 107 129 53 225 126 1 100 94 115 45 34 213 173 178 14 55 114 218 116 14 238)
      #t
      ())
    #(326
      "pseudorandom signature"
      #vu8(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      #vu8(48 60 2 28 62 70 233 186 77 192 137 255 48 250 140 2 9 195 27 17 255 73 219 238 192 144 249 245 60 0 12 117 2 28 111 46 59 54 54 148 22 96 43 202 131 32 104 9 237 137 143 207 21 138 86 194 90 84 116 20 63 104)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 174 214 252 173 36 0 196 217 78 85 219 182 176 18 206 61 76 43 70 132 63 190 153 212 40 158 110 207 138 36 168 158 113 52 61 125 21 29 37 141 44 182 144 52 156 45 86 179 102 221 16 166 0 0 0 0)
  :der-encode
  #t
  :tests
  '(#(327
      "y-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 28 119 179 141 163 112 121 210 123 131 118 19 172 62 130 72 214 110 171 213 214 55 7 108 142 98 199 153 30 2 29 0 212 12 217 248 30 252 82 219 68 41 192 193 175 124 29 138 34 182 199 186 187 231 251 216 181 179 240 47)
      #t
      ())
    #(328
      "y-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 29 0 140 3 179 44 22 108 12 139 153 215 248 118 172 209 9 68 126 251 19 246 184 41 69 231 141 81 162 105 2 28 101 117 104 241 160 168 189 125 245 255 164 48 151 235 178 182 68 53 200 227 51 91 202 175 198 63 158 213)
      #t
      ())
    #(329
      "y-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 29 0 209 153 163 117 37 61 48 241 210 180 73 53 66 233 147 79 159 31 139 6 128 17 118 121 245 188 74 210 2 28 17 65 157 219 240 44 138 213 245 24 248 218 195 63 134 168 94 119 122 245 26 3 65 50 226 118 122 109)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 191 25 236 254 67 255 226 137 246 153 244 121 49 97 69 185 167 247 55 11 158 206 90 177 33 33 116 241 115 213 40 148 154 233 20 47 129 139 173 231 26 150 4 7 150 59 224 182 72 42 106 96 255 255 255 255)
  :der-encode
  #t
  :tests
  '(#(330
      "y-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 29 0 143 248 38 153 226 232 40 112 190 156 253 216 164 8 187 52 248 243 138 131 164 172 131 112 241 143 43 200 2 28 126 80 8 250 182 160 212 21 146 0 7 126 249 145 141 173 101 146 205 131 89 131 136 82 198 54 172 5)
      #t
      ())
    #(331
      "y-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 28 63 59 96 181 41 174 15 149 12 81 114 100 173 242 228 129 97 107 196 116 22 116 45 81 3 88 150 96 2 29 0 247 49 235 233 142 88 56 75 58 100 180 105 109 76 201 97 152 40 173 81 215 195 153 128 116 151 9 166)
      #t
      ())
    #(332
      "y-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 29 0 220 17 255 220 107 120 117 74 51 95 22 140 64 51 145 106 33 88 209 37 163 244 254 217 220 115 102 97 2 28 109 216 67 100 113 125 159 75 7 144 242 178 130 249 36 94 203 49 104 116 234 192 37 96 3 151 241 9)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 38 229 171 241 53 203 84 234 170 22 182 158 75 11 41 34 117 52 78 136 160 157 246 223 128 0 0 0 234 184 145 222 84 227 242 111 245 10 185 137 243 51 218 197 81 88 61 70 138 230 35 197 150 67 74 240)
  :der-encode
  #t
  :tests
  '(#(333
      "x-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 62 2 29 0 165 155 37 183 134 213 95 38 176 77 254 144 238 2 166 189 230 78 214 228 49 220 159 189 195 171 54 14 2 29 0 252 20 181 173 32 243 157 169 144 14 53 67 121 54 200 98 111 204 246 99 46 122 61 158 88 126 51 17)
      #t
      ())
    #(334
      "x-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 28 46 218 31 150 193 166 227 173 138 51 33 206 130 203 177 58 91 147 91 80 26 191 108 6 247 253 43 63 2 29 0 232 16 80 195 229 245 58 60 123 157 11 219 158 217 42 50 109 254 172 68 121 27 161 171 228 214 233 115)
      #t
      ())
    #(335
      "x-coordinate of the public key has many trailing 0's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 28 96 245 224 147 253 160 143 193 74 201 157 130 10 24 173 19 112 197 129 80 190 160 172 162 79 198 219 157 2 29 0 194 34 10 14 187 244 137 110 104 253 181 189 130 79 136 41 28 28 134 43 145 111 156 74 248 127 143 95)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 236 98 127 52 85 69 208 63 140 109 189 8 229 117 82 113 22 86 127 227 117 249 236 170 255 255 255 255 65 191 112 86 151 213 247 22 188 247 135 24 213 57 59 99 169 134 145 244 161 242 66 70 55 85 56 253)
  :der-encode
  #t
  :tests
  '(#(336
      "x-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 28 46 173 55 132 106 94 54 164 144 183 81 64 189 199 182 54 198 233 246 216 249 128 246 250 219 8 247 105 2 29 0 225 254 19 10 225 121 140 25 109 123 230 44 122 93 219 49 104 207 75 141 72 182 182 180 220 148 171 59)
      #t
      ())
    #(337
      "x-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 29 0 168 164 201 65 109 114 200 96 87 61 7 50 129 203 8 200 106 214 83 19 240 107 21 163 41 232 46 178 2 28 90 110 221 47 8 22 183 38 61 145 93 114 198 125 80 168 84 227 171 238 92 222 27 103 154 12 239 9)
      #t
      ())
    #(338
      "x-coordinate of the public key has many trailing 1's"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 60 2 28 87 107 184 108 81 123 254 205 201 48 164 200 80 23 37 84 141 66 90 251 185 109 147 245 193 226 160 225 2 28 119 36 140 94 205 98 12 67 20 56 197 14 107 238 104 88 9 27 84 168 127 133 72 174 53 194 16 39)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 21 1 110 82 179 100 114 213 54 71 118 5 251 128 93 211 144 48 130 160 98 209 234 48 175 158 85 90 0 0 0 0 118 45 40 241 253 194 25 24 79 129 104 31 191 245 102 212 101 181 241 243 30 135 45 245)
  :der-encode
  #t
  :tests
  '(#(339
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 28 52 228 28 186 98 143 216 120 123 161 165 40 246 1 93 44 174 1 92 28 154 134 110 8 167 19 56 1 2 29 0 131 212 34 255 221 153 204 60 109 112 150 239 146 127 11 17 152 141 24 36 230 233 56 64 255 102 108 205)
      #t
      ())
    #(340
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 60 2 28 37 88 164 46 121 104 146 68 188 205 94 133 95 106 30 66 180 255 114 104 115 243 11 83 43 137 239 83 2 28 7 249 189 148 119 133 24 113 117 216 72 182 226 215 159 122 179 187 193 8 123 66 89 11 12 251 37 106)
      #t
      ())
    #(341
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 62 2 29 0 213 254 125 213 251 79 209 234 92 230 108 8 36 245 63 150 206 71 253 155 108 99 180 213 120 39 253 23 2 29 0 188 229 188 58 247 5 175 170 203 129 191 166 213 82 214 25 137 98 254 206 159 186 65 84 108 96 45 220)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 21 1 110 82 179 100 114 213 54 71 118 5 251 128 93 211 144 48 130 160 98 209 234 48 175 158 85 90 255 255 255 255 137 210 215 14 2 61 230 231 176 126 151 223 64 10 153 43 154 74 14 12 225 120 210 12)
  :der-encode
  #t
  :tests
  '(#(342
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 29 0 140 29 162 240 124 220 188 228 219 128 103 184 99 70 140 252 114 141 245 41 128 34 144 40 104 158 87 182 2 28 50 23 92 19 144 164 178 202 182 53 155 171 159 133 73 87 212 253 121 118 201 198 217 32 200 113 192 81)
      #t
      ())
    #(343
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 62 2 29 0 228 109 79 17 184 107 90 18 246 254 120 29 31 147 78 242 179 14 120 246 249 204 134 169 153 110 32 192 2 29 0 131 81 151 75 150 85 38 3 74 12 206 240 231 211 188 19 217 23 152 21 20 136 201 21 51 20 63 123)
      #t
      ())
    #(344
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 60 2 28 48 92 207 11 93 12 243 61 199 69 187 124 121 100 194 51 246 207 216 137 42 28 26 233 245 11 47 63 2 28 120 95 110 133 245 230 82 88 124 110 21 208 196 92 66 114 120 207 101 187 20 41 165 125 136 38 202 57)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 0 0 0 0 247 228 113 61 8 81 18 17 44 55 205 244 96 31 246 136 218 121 96 22 183 26 114 122 222 90 158 193 101 5 76 201 135 249 220 135 233 153 27 146 228 250 100 156 166 85 238 174 159 42 48 225)
  :der-encode
  #t
  :tests
  '(#(345
      "x-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 28 14 79 222 10 200 211 117 54 80 95 123 139 220 45 34 197 195 52 176 100 172 94 210 123 234 156 23 158 2 29 0 196 214 191 130 157 213 71 0 13 111 112 185 173 158 156 21 3 190 188 241 217 92 38 8 148 44 161 157)
      #t
      ())
    #(346
      "x-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 62 2 29 0 129 138 252 175 73 29 169 208 138 124 194 147 24 213 232 93 206 86 141 204 167 1 128 89 244 78 155 126 2 29 0 191 50 162 51 213 252 110 216 226 217 39 11 27 218 212 187 210 160 242 194 147 210 137 189 145 255 188 243)
      #t
      ())
    #(347
      "x-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 60 2 28 14 5 237 103 92 103 62 94 112 164 253 213 164 123 17 76 93 84 45 79 109 122 54 117 151 215 19 234 2 28 38 215 13 101 196 132 48 55 51 99 152 120 16 189 204 85 110 2 113 142 171 33 68 3 174 0 141 180)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 255 255 255 255 234 223 124 238 141 52 208 76 242 44 143 125 227 86 116 251 47 80 29 36 42 118 247 37 134 196 9 48 157 57 142 96 206 30 10 76 158 5 169 211 38 39 87 126 140 226 204 127 58 250 44 62)
  :der-encode
  #t
  :tests
  '(#(348
      "x-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 62 2 29 0 171 122 25 238 207 99 233 102 130 120 150 59 101 35 107 39 104 229 124 174 14 38 140 184 106 13 221 161 2 29 0 136 41 245 211 163 57 79 148 103 186 98 230 110 241 118 142 62 84 249 62 210 62 201 98 188 68 60 46)
      #t
      ())
    #(349
      "x-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 28 23 17 26 119 207 121 190 173 69 110 216 106 125 138 147 85 49 68 2 129 235 139 21 168 133 227 65 192 2 29 0 253 195 149 141 4 240 55 177 212 187 44 238 48 123 82 1 190 6 46 13 78 8 157 241 193 145 118 104)
      #t
      ())
    #(350
      "x-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 29 0 172 175 161 227 51 69 238 186 12 51 140 34 4 180 205 139 162 29 231 236 62 18 19 49 112 56 233 104 2 28 11 66 251 186 237 169 138 53 218 13 228 199 149 70 243 160 247 217 222 194 117 210 205 103 31 147 200 116)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 176 1 60 111 191 246 240 159 236 218 28 38 62 246 83 153 212 207 152 156 165 252 79 143 255 15 233 225 0 0 0 0 14 42 176 232 73 94 133 158 178 175 176 7 105 214 231 254 98 106 17 145 103 192 182 188)
  :der-encode
  #t
  :tests
  '(#(351
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 29 0 163 254 113 162 165 111 85 78 152 253 16 168 9 140 42 84 60 152 188 107 54 2 239 57 242 65 35 8 2 28 93 29 104 249 168 112 239 43 200 116 132 179 56 101 73 250 233 88 17 171 114 188 14 58 81 71 32 218)
      #t
      ())
    #(352
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 28 19 47 118 37 112 71 86 193 63 43 250 68 158 96 149 47 131 111 73 4 102 11 91 29 160 126 90 159 2 29 0 130 180 171 175 196 14 143 209 155 12 150 127 2 255 241 82 115 124 224 17 83 101 141 244 69 196 215 183)
      #t
      ())
    #(353
      "y-coordinate of the public key is small"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 62 2 29 0 243 106 131 71 198 254 3 151 161 22 26 54 76 188 75 223 180 216 183 137 76 186 166 237 197 90 79 247 2 29 0 156 156 144 81 93 165 230 2 214 46 153 244 142 172 65 78 145 61 208 183 203 246 128 193 165 57 153 82)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp224r1_sha224_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-224"
  :public-key
  #vu8(48 78 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 33 3 58 0 4 176 1 60 111 191 246 240 159 236 218 28 38 62 246 83 153 212 207 152 156 165 252 79 143 255 15 233 225 255 255 255 255 241 213 79 23 182 161 122 97 77 80 79 247 150 41 24 1 157 149 238 110 152 63 73 69)
  :der-encode
  #t
  :tests
  '(#(354
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 28 33 37 236 192 142 82 233 227 158 89 1 23 222 33 69 189 135 150 38 203 135 24 14 82 233 211 206 3 2 29 0 143 126 131 141 14 143 184 0 5 254 60 114 252 161 183 204 8 237 50 26 52 72 120 150 176 201 11 4)
      #t
      ())
    #(355
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 62 2 29 0 228 133 116 122 194 243 208 69 224 16 205 173 171 79 213 219 213 85 108 0 8 68 95 183 62 7 205 144 2 29 0 226 19 58 121 6 174 172 80 72 82 224 158 109 5 127 41 171 33 54 140 252 78 35 148 190 86 94 104)
      #t
      ())
    #(356
      "y-coordinate of the public key is large"
      #vu8(77 101 115 115 97 103 101)
      #vu8(48 61 2 29 0 164 222 13 147 29 218 185 14 102 126 188 10 216 0 206 73 233 113 198 5 67 171 220 70 206 255 249 38 2 28 85 8 22 23 11 216 117 147 185 251 138 213 237 154 180 221 177 36 3 255 111 224 50 37 40 51 186 196)
      #t
      ())))
