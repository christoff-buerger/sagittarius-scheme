(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 190 116 216 221 29 86 84 38 83 132 247 66 39 171 15 133 52 181 164 254 42 184 229 191 239 249 41 121 77 141 217 194 227 190 64 230 207 73 173 73)
  :der-encode
  #t
  :tests
  '(#(1
      "signature malleability"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 21 0 224 52 140 32 17 5 151 142 227 171 156 86 92 249 166 50 97 165 129 115)
      #t
      ())
    #(2
      "Legacy:ASN encoding of r misses leading 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 44 2 20 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #t
      ("MissingZero"))
    #(3
      "valid"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #t
      ())
    #(4
      "long form encoding of length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 129 45 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ("BER"))
    #(5
      "length of sequence contains leading 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 130 0 45 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ("BER"))
    #(6
      "wrong length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(7
      "wrong length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 44 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(8
      "uint32 overflow in length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 133 1 0 0 0 45 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(9
      "uint64 overflow in length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 137 1 0 0 0 0 0 0 0 45 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(10
      "length of sequence = 2**31 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 132 127 255 255 255 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(11
      "length of sequence = 2**32 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 132 255 255 255 255 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(12
      "length of sequence = 2**40 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 133 255 255 255 255 255 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(13
      "length of sequence = 2**64 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 136 255 255 255 255 255 255 255 255 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(14
      "incorrect length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 255 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(15
      "indefinite length without termination"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(16
      "indefinite length without termination"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 128 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(17
      "indefinite length without termination"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 128 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(18
      "removing sequence"
      #vu8(49 50 51 52 48 48)
      #vu8()
      #f
      ())
    #(19
      "lonely sequence tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48)
      #f
      ())
    #(20
      "appending 0's to sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 47 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64 0 0)
      #f
      ())
    #(21
      "prepending 0's to sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 47 0 0 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(22
      "appending unused 0's to sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64 0 0)
      #f
      ())
    #(23
      "appending null value to sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 47 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64 5 0)
      #f
      ())
    #(24
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 50 73 129 119 48 45 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(25
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 49 37 0 48 45 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(26
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 47 48 45 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64 0 4 222 173 190 239)
      #f
      ())
    #(27
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 50 34 26 73 129 119 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(28
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 49 34 25 37 0 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(29
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 53 34 23 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 0 4 222 173 190 239 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(30
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 50 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 34 25 73 129 119 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(31
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 49 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 34 24 37 0 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(32
      "including garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 53 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 34 22 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64 0 4 222 173 190 239)
      #f
      ())
    #(33
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 53 170 0 187 0 205 0 48 45 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(34
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 51 170 2 170 187 48 45 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(35
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 53 34 29 170 0 187 0 205 0 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(36
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 51 34 27 170 2 170 187 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(37
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 53 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 34 28 170 0 187 0 205 0 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(38
      "including undefined tags"
      #vu8(49 50 51 52 48 48)
      #vu8(48 51 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 34 26 170 2 170 187 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(39
      "truncated length of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 129)
      #f
      ())
    #(40
      "using composition with indefinite length"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 48 45 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64 0 0)
      #f
      ())
    #(41
      "using composition with indefinite length"
      #vu8(49 50 51 52 48 48)
      #vu8(48 49 34 128 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 0 0 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(42
      "using composition with indefinite length"
      #vu8(49 50 51 52 48 48)
      #vu8(48 49 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 34 128 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64 0 0)
      #f
      ())
    #(43
      "using composition with wrong tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 49 45 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64 0 0)
      #f
      ())
    #(44
      "using composition with wrong tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48 49 34 128 3 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 0 0 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(45
      "using composition with wrong tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48 49 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 34 128 3 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64 0 0)
      #f
      ())
    #(46
      "Replacing sequence with NULL"
      #vu8(49 50 51 52 48 48)
      #vu8(5 0)
      #f
      ())
    #(47
      "changing tag value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(46 45 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(48
      "changing tag value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(47 45 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(49
      "changing tag value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(49 45 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(50
      "changing tag value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(50 45 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(51
      "changing tag value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(255 45 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(52
      "dropping value of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 0)
      #f
      ())
    #(53
      "using composition for sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 49 48 1 2 48 44 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(54
      "truncated sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 44 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53)
      #f
      ())
    #(55
      "truncated sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 44 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(56
      "sequence of size 4142 to check for overflows"
      #vu8(49 50 51 52 48 48)
      #vu8(48 130 16 46 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      #f
      ())
    #(57
      "indefinite length"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64 0 0)
      #f
      ("BER"))
    #(58
      "indefinite length with truncated delimiter"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64 0)
      #f
      ())
    #(59
      "indefinite length with additional element"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64 5 0 0 0)
      #f
      ())
    #(60
      "indefinite length with truncated element"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64 6 8 17 34 0 0)
      #f
      ())
    #(61
      "indefinite length with garbage"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64 0 0 254 2 190 239)
      #f
      ())
    #(62
      "indefinite length with nonempty EOC"
      #vu8(49 50 51 52 48 48)
      #vu8(48 128 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64 0 2 190 239)
      #f
      ())
    #(63
      "prepend empty sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 47 48 0 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(64
      "append empty sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 47 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64 48 0)
      #f
      ())
    #(65
      "append garbage with high tag number"
      #vu8(49 50 51 52 48 48)
      #vu8(48 48 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64 191 127 0)
      #f
      ())
    #(66
      "append null with explicit tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48 49 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64 160 2 5 0)
      #f
      ())
    #(67
      "append null with implicit tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48 47 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64 160 0)
      #f
      ())
    #(68
      "sequence of sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 47 48 45 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(69
      "truncated sequence: removed last 1 elements"
      #vu8(49 50 51 52 48 48)
      #vu8(48 23 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35)
      #f
      ())
    #(70
      "repeating element in sequence"
      #vu8(49 50 51 52 48 48)
      #vu8(48 67 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(71
      "long form encoding of length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 129 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ("BER"))
    #(72
      "long form encoding of length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 129 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ("BER"))
    #(73
      "length of integer contains leading 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 47 2 130 0 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ("BER"))
    #(74
      "length of integer contains leading 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 47 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 130 0 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ("BER"))
    #(75
      "wrong length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 22 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(76
      "wrong length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 20 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(77
      "wrong length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 21 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(78
      "wrong length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 19 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(79
      "uint32 overflow in length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 50 2 133 1 0 0 0 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(80
      "uint32 overflow in length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 50 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 133 1 0 0 0 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(81
      "uint64 overflow in length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 54 2 137 1 0 0 0 0 0 0 0 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(82
      "uint64 overflow in length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 54 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 137 1 0 0 0 0 0 0 0 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(83
      "length of integer = 2**31 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 49 2 132 127 255 255 255 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(84
      "length of integer = 2**31 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 49 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 132 127 255 255 255 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(85
      "length of integer = 2**32 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 49 2 132 255 255 255 255 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(86
      "length of integer = 2**32 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 49 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 132 255 255 255 255 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(87
      "length of integer = 2**40 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 50 2 133 255 255 255 255 255 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(88
      "length of integer = 2**40 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 50 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 133 255 255 255 255 255 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(89
      "length of integer = 2**64 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 53 2 136 255 255 255 255 255 255 255 255 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(90
      "length of integer = 2**64 - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 53 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 136 255 255 255 255 255 255 255 255 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(91
      "incorrect length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 255 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(92
      "incorrect length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 255 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(93
      "removing integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 22 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(94
      "lonely integer tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48 23 2 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(95
      "lonely integer tag"
      #vu8(49 50 51 52 48 48)
      #vu8(48 24 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2)
      #f
      ())
    #(96
      "appending 0's to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 47 2 23 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 0 0 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(97
      "appending 0's to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 47 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 22 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64 0 0)
      #f
      ())
    #(98
      "prepending 0's to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 47 2 23 0 0 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ("BER"))
    #(99
      "prepending 0's to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 47 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 22 0 0 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ("BER"))
    #(100
      "appending unused 0's to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 47 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 0 0 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(101
      "appending null value to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 47 2 23 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 5 0 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(102
      "appending null value to integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 47 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 22 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64 5 0)
      #f
      ())
    #(103
      "truncated length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 24 2 129 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(104
      "truncated length of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 25 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 129)
      #f
      ())
    #(105
      "Replacing integer with NULL"
      #vu8(49 50 51 52 48 48)
      #vu8(48 24 5 0 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(106
      "Replacing integer with NULL"
      #vu8(49 50 51 52 48 48)
      #vu8(48 25 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 5 0)
      #f
      ())
    #(107
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 0 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(108
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 1 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(109
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 3 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(110
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 4 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(111
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 255 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(112
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 0 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(113
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 1 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(114
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 3 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(115
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 4 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(116
      "changing tag value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 255 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(117
      "dropping value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 24 2 0 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(118
      "dropping value of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 25 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 0)
      #f
      ())
    #(119
      "using composition for integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 49 34 25 2 1 0 2 20 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(120
      "using composition for integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 49 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 34 24 2 1 31 2 19 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(121
      "modifying first byte of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 2 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(122
      "modifying first byte of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 29 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(123
      "modifying last byte of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 163 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(124
      "modifying last byte of integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 192)
      #f
      ())
    #(125
      "truncated integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 44 2 20 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(126
      "truncated integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 44 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 19 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53)
      #f
      ())
    #(127
      "truncated integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 44 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 19 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(128
      "integer of size 4118 to check for overflows"
      #vu8(49 50 51 52 48 48)
      #vu8(48 130 16 48 2 130 16 22 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(129
      "leading ff in integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 22 255 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(130
      "leading ff in integer"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 21 255 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(131
      "replaced integer by infinity"
      #vu8(49 50 51 52 48 48)
      #vu8(48 25 9 1 128 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(132
      "replaced integer by infinity"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 9 1 128)
      #f
      ())
    #(133
      "replacing integer with zero"
      #vu8(49 50 51 52 48 48)
      #vu8(48 25 2 1 0 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(134
      "replacing integer with zero"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 1 0)
      #f
      ())
    #(135
      "integer of size 4117 to check for overflows"
      #vu8(49 50 51 52 48 48)
      #vu8(48 130 16 48 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 130 16 21 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      #f
      ())
    #(136
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 1 168 156 245 170 20 243 229 216 160 49 41 27 221 175 212 185 59 107 149 214 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(137
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 44 2 20 168 156 245 170 20 243 229 216 160 45 183 39 175 240 125 131 167 62 40 112 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(138
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 255 87 99 10 85 235 12 26 39 95 208 143 222 57 47 214 225 142 171 32 221 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(139
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 44 2 20 87 99 10 85 235 12 26 39 95 210 72 216 80 15 130 124 88 193 215 144 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(140
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 254 87 99 10 85 235 12 26 39 95 206 214 228 34 80 43 70 196 148 106 42 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(141
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 254 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(142
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 1 87 99 10 85 235 12 26 39 95 208 143 222 57 47 214 225 142 171 32 221 2 20 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(143
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 21 1 31 203 115 223 238 250 104 113 28 87 213 157 208 197 177 3 50 135 235 243)
      #f
      ())
    #(144
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 21 255 31 203 115 223 238 250 104 113 28 84 99 169 163 6 89 205 158 90 126 141)
      #f
      ())
    #(145
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 20 224 52 140 32 17 5 151 142 227 169 227 92 70 25 250 151 151 142 202 192)
      #f
      ())
    #(146
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 21 254 224 52 140 32 17 5 151 142 227 168 42 98 47 58 78 252 205 120 20 13)
      #f
      ())
    #(147
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 21 2 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(148
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 21 254 31 203 115 223 238 250 104 113 28 86 28 163 185 230 5 104 104 113 53 64)
      #f
      ())
    #(149
      "Modified r or s, e.g. by adding or subtracting the order of the group"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 0 168 156 245 170 20 243 229 216 160 47 112 33 198 208 41 30 113 84 223 35 2 21 1 224 52 140 32 17 5 151 142 227 169 227 92 70 25 250 151 151 142 202 192)
      #f
      ())
    #(150
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 0 2 1 0)
      #f
      ("EdgeCase"))
    #(151
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 0 2 1 1)
      #f
      ("EdgeCase"))
    #(152
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 0 2 1 255)
      #f
      ("EdgeCase"))
    #(153
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 1 0 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 179)
      #f
      ("EdgeCase"))
    #(154
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 1 0 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 178)
      #f
      ("EdgeCase"))
    #(155
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 1 0 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 180)
      #f
      ("EdgeCase"))
    #(156
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 1 0 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 172 115)
      #f
      ("EdgeCase"))
    #(157
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 1 0 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 172 116)
      #f
      ("EdgeCase"))
    #(158
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 8 2 1 0 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(159
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 0 9 1 66)
      #f
      ("EdgeCase"))
    #(160
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 2 1 0)
      #f
      ("EdgeCase"))
    #(161
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 2 1 1)
      #f
      ("EdgeCase"))
    #(162
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 2 1 255)
      #f
      ("EdgeCase"))
    #(163
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 1 1 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 179)
      #f
      ("EdgeCase"))
    #(164
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 1 1 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 178)
      #f
      ("EdgeCase"))
    #(165
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 1 1 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 180)
      #f
      ("EdgeCase"))
    #(166
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 1 1 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 172 115)
      #f
      ("EdgeCase"))
    #(167
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 1 1 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 172 116)
      #f
      ("EdgeCase"))
    #(168
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 8 2 1 1 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(169
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 9 1 66)
      #f
      ("EdgeCase"))
    #(170
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 255 2 1 0)
      #f
      ("EdgeCase"))
    #(171
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 255 2 1 1)
      #f
      ("EdgeCase"))
    #(172
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 255 2 1 255)
      #f
      ("EdgeCase"))
    #(173
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 1 255 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 179)
      #f
      ("EdgeCase"))
    #(174
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 1 255 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 178)
      #f
      ("EdgeCase"))
    #(175
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 1 255 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 180)
      #f
      ("EdgeCase"))
    #(176
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 1 255 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 172 115)
      #f
      ("EdgeCase"))
    #(177
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 1 255 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 172 116)
      #f
      ("EdgeCase"))
    #(178
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 8 2 1 255 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(179
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 255 9 1 66)
      #f
      ("EdgeCase"))
    #(180
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 179 2 1 0)
      #f
      ("EdgeCase"))
    #(181
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 179 2 1 1)
      #f
      ("EdgeCase"))
    #(182
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 179 2 1 255)
      #f
      ("EdgeCase"))
    #(183
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 179 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 179)
      #f
      ("EdgeCase"))
    #(184
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 179 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 178)
      #f
      ("EdgeCase"))
    #(185
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 179 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 180)
      #f
      ("EdgeCase"))
    #(186
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 179 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 172 115)
      #f
      ("EdgeCase"))
    #(187
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 179 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 172 116)
      #f
      ("EdgeCase"))
    #(188
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 28 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 179 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(189
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 179 9 1 66)
      #f
      ("EdgeCase"))
    #(190
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 178 2 1 0)
      #f
      ("EdgeCase"))
    #(191
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 178 2 1 1)
      #f
      ("EdgeCase"))
    #(192
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 178 2 1 255)
      #f
      ("EdgeCase"))
    #(193
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 178 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 179)
      #f
      ("EdgeCase"))
    #(194
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 178 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 178)
      #f
      ("EdgeCase"))
    #(195
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 178 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 180)
      #f
      ("EdgeCase"))
    #(196
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 178 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 172 115)
      #f
      ("EdgeCase"))
    #(197
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 178 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 172 116)
      #f
      ("EdgeCase"))
    #(198
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 28 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 178 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(199
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 178 9 1 66)
      #f
      ("EdgeCase"))
    #(200
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 180 2 1 0)
      #f
      ("EdgeCase"))
    #(201
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 180 2 1 1)
      #f
      ("EdgeCase"))
    #(202
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 180 2 1 255)
      #f
      ("EdgeCase"))
    #(203
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 180 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 179)
      #f
      ("EdgeCase"))
    #(204
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 180 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 178)
      #f
      ("EdgeCase"))
    #(205
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 180 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 180)
      #f
      ("EdgeCase"))
    #(206
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 180 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 172 115)
      #f
      ("EdgeCase"))
    #(207
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 180 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 172 116)
      #f
      ("EdgeCase"))
    #(208
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 28 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 180 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(209
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 180 9 1 66)
      #f
      ("EdgeCase"))
    #(210
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 172 115 2 1 0)
      #f
      ("EdgeCase"))
    #(211
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 172 115 2 1 1)
      #f
      ("EdgeCase"))
    #(212
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 172 115 2 1 255)
      #f
      ("EdgeCase"))
    #(213
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 172 115 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 179)
      #f
      ("EdgeCase"))
    #(214
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 172 115 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 178)
      #f
      ("EdgeCase"))
    #(215
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 172 115 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 180)
      #f
      ("EdgeCase"))
    #(216
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 172 115 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 172 115)
      #f
      ("EdgeCase"))
    #(217
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 172 115 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 172 116)
      #f
      ("EdgeCase"))
    #(218
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 28 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 172 115 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(219
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 172 115 9 1 66)
      #f
      ("EdgeCase"))
    #(220
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 172 116 2 1 0)
      #f
      ("EdgeCase"))
    #(221
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 172 116 2 1 1)
      #f
      ("EdgeCase"))
    #(222
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 172 116 2 1 255)
      #f
      ("EdgeCase"))
    #(223
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 172 116 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 179)
      #f
      ("EdgeCase"))
    #(224
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 172 116 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 178)
      #f
      ("EdgeCase"))
    #(225
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 172 116 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 180)
      #f
      ("EdgeCase"))
    #(226
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 172 116 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 172 115)
      #f
      ("EdgeCase"))
    #(227
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 172 116 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 172 116)
      #f
      ("EdgeCase"))
    #(228
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 28 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 172 116 9 3 128 254 1)
      #f
      ("EdgeCase"))
    #(229
      "Signature with special case values for r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 172 116 9 1 66)
      #f
      ("EdgeCase"))
    #(230
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 12 1 48)
      #f
      ())
    #(231
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 5 2 1 1 12 0)
      #f
      ())
    #(232
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 9 12 2 37 115 12 3 115 37 115)
      #f
      ())
    #(233
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 8 2 1 1 48 3 2 1 0)
      #f
      ())
    #(234
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 3 2 1 1)
      #f
      ())
    #(235
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 1 1 1 0)
      #f
      ())
    #(236
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 1 1 0 1 1 0)
      #f
      ())
    #(237
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 4 12 0 12 0)
      #f
      ())
    #(238
      "Signature encoding contains wrong types."
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 12 1 48 12 1 48)
      #f
      ())
    #(239
      "Edge case for Shamir multiplication"
      #vu8(54 52 48 52 51)
      #vu8(48 45 2 21 0 151 246 236 107 119 242 118 136 3 117 100 251 101 250 105 25 10 78 141 77 2 20 16 242 97 4 0 147 55 223 220 135 120 124 67 0 82 152 87 88 57 26)
      #t
      ())
    #(240
      "special case hash"
      #vu8(52 50 54 52 55 57 55 50 52)
      #vu8(48 45 2 20 25 2 143 157 164 190 146 90 21 95 244 253 113 206 9 5 141 61 223 207 2 21 0 253 12 9 55 246 94 106 139 7 72 199 133 209 204 221 28 47 255 39 89)
      #t
      ())
    #(241
      "special case hash"
      #vu8(55 49 51 56 54 56 52 56 57 49)
      #vu8(48 44 2 20 46 99 183 53 16 136 43 147 198 154 141 0 118 127 155 152 151 38 43 45 2 20 46 64 29 242 208 54 7 233 162 110 22 249 85 10 187 196 212 14 136 140)
      #t
      ())
    #(242
      "special case hash"
      #vu8(49 48 51 53 57 51 51 49 54 54 56)
      #vu8(48 44 2 20 66 150 151 77 202 29 42 198 219 137 43 101 226 174 88 119 171 36 62 31 2 20 53 176 85 146 88 183 190 146 223 162 87 93 120 201 121 128 88 225 106 78)
      #t
      ())
    #(243
      "special case hash"
      #vu8(51 57 52 57 52 48 49 50 49 53)
      #vu8(48 45 2 21 0 164 80 59 55 135 159 193 200 196 159 161 207 15 166 106 110 178 174 1 249 2 20 99 109 139 55 138 241 75 129 173 97 15 130 246 235 171 220 169 39 189 225)
      #t
      ())
    #(244
      "special case hash"
      #vu8(49 51 52 52 50 57 51 48 55 57)
      #vu8(48 44 2 20 7 102 202 28 173 30 110 71 163 220 141 134 216 204 193 134 36 73 130 115 2 20 71 121 25 24 197 187 85 17 207 37 25 79 213 45 124 202 151 169 49 181)
      #t
      ())
    #(245
      "special case hash"
      #vu8(51 55 48 54 50 49 49 55 49 50)
      #vu8(48 44 2 20 113 99 127 167 86 252 188 59 131 19 80 28 30 101 21 105 115 62 231 26 2 20 18 51 65 34 178 24 120 42 20 84 70 153 101 70 188 202 149 199 201 104)
      #t
      ())
    #(246
      "special case hash"
      #vu8(51 52 51 54 56 56 55 49 50)
      #vu8(48 46 2 21 0 183 150 157 184 159 42 229 253 163 45 215 50 214 4 196 74 89 120 195 104 2 21 0 130 250 77 28 9 92 216 202 15 172 119 246 201 189 85 79 46 73 139 11)
      #t
      ())
    #(247
      "special case hash"
      #vu8(49 51 53 49 53 51 48 51 55 48)
      #vu8(48 46 2 21 0 161 84 31 115 85 247 210 244 207 48 56 116 174 105 43 227 220 30 231 114 2 21 0 148 196 181 240 13 224 209 145 127 70 92 30 70 57 129 96 173 194 86 156)
      #t
      ())
    #(248
      "special case hash"
      #vu8(54 53 53 51 50 48 51 49 50 54)
      #vu8(48 46 2 21 0 177 182 136 179 210 5 216 13 236 180 57 118 81 58 91 203 166 35 253 107 2 21 0 246 53 77 66 32 20 196 124 47 145 126 242 226 225 47 61 197 167 65 86)
      #t
      ())
    #(249
      "special case hash"
      #vu8(49 53 54 52 51 52 54 54 48 51)
      #vu8(48 45 2 20 51 43 219 85 138 38 215 200 209 87 194 238 114 5 43 30 117 155 39 57 2 21 0 235 178 164 57 38 188 180 126 87 204 170 210 68 17 186 110 158 8 164 116)
      #t
      ())
    #(250
      "special case hash"
      #vu8(52 52 50 57 53 51 57 49 49 55)
      #vu8(48 44 2 20 108 190 3 27 141 253 81 66 235 124 143 105 201 212 211 242 95 72 169 3 2 20 39 104 92 84 253 131 122 201 113 241 152 182 97 98 14 172 133 29 157 122)
      #t
      ())
    #(251
      "special case hash"
      #vu8(49 48 57 53 51 50 54 49 51 53 49)
      #vu8(48 45 2 21 0 154 145 177 9 133 227 215 102 199 17 90 99 250 22 97 102 48 47 62 230 2 20 123 111 38 76 79 126 71 241 109 150 99 119 65 124 79 126 218 170 198 207)
      #t
      ())
    #(252
      "special case hash"
      #vu8(53 57 56 55 51 53 48 48 52 49)
      #vu8(48 46 2 21 0 138 132 24 27 126 209 166 9 47 29 244 248 235 155 150 34 168 2 219 95 2 21 0 139 95 78 102 237 26 135 16 237 169 127 55 212 82 211 56 77 95 184 100)
      #t
      ())
    #(253
      "special case hash"
      #vu8(51 52 54 51 48 48 54 56 55 56)
      #vu8(48 45 2 21 0 246 105 244 55 75 31 154 238 201 163 132 105 101 48 25 114 31 118 19 93 2 20 36 99 42 230 181 2 216 125 24 90 63 120 209 238 76 148 52 79 48 155)
      #t
      ())
    #(254
      "special case hash"
      #vu8(57 56 49 55 51 50 48 50 56 55)
      #vu8(48 46 2 21 0 237 250 221 167 13 130 119 18 203 143 34 56 56 146 160 72 120 221 37 223 2 21 0 234 224 202 169 152 95 139 243 145 97 54 55 167 173 107 178 149 236 215 238)
      #t
      ())
    #(255
      "special case hash"
      #vu8(51 50 50 50 48 52 49 48 52 54)
      #vu8(48 45 2 21 0 134 149 214 146 233 141 200 31 118 90 40 119 51 181 148 125 168 118 159 196 2 20 84 133 172 40 212 105 79 188 206 0 179 98 132 100 137 184 174 233 65 4)
      #t
      ())
    #(256
      "special case hash"
      #vu8(54 54 54 54 51 48 55 49 48 52)
      #vu8(48 44 2 20 91 88 36 155 185 252 133 141 182 114 87 164 187 93 33 223 109 138 29 197 2 20 116 209 109 191 65 253 77 91 209 72 160 204 2 15 110 166 190 209 213 235)
      #t
      ())
    #(257
      "special case hash"
      #vu8(49 48 51 53 57 53 49 56 57 56)
      #vu8(48 44 2 20 70 250 75 55 217 148 237 230 71 170 0 232 85 40 103 160 253 147 44 37 2 20 117 160 133 13 30 125 13 14 58 121 106 29 240 105 213 187 158 236 115 9)
      #t
      ())
    #(258
      "special case hash"
      #vu8(49 56 52 54 53 57 55 49 57 53)
      #vu8(48 46 2 21 0 174 97 62 220 164 144 207 186 150 164 137 8 27 63 83 157 137 5 134 85 2 21 0 195 147 248 129 1 156 91 118 18 228 140 30 68 236 177 8 71 96 94 140)
      #t
      ())
    #(259
      "special case hash"
      #vu8(51 49 51 54 48 52 54 49 56 57)
      #vu8(48 45 2 21 0 139 182 68 156 20 125 97 50 25 59 215 249 166 243 53 115 8 61 191 249 2 20 122 12 69 204 73 92 0 5 118 180 189 221 5 157 178 132 8 229 45 89)
      #t
      ())
    #(260
      "special case hash"
      #vu8(50 54 54 51 55 56 52 50 53 52)
      #vu8(48 45 2 21 0 180 177 146 14 70 55 29 8 9 10 40 242 168 255 26 47 144 154 205 90 2 20 89 14 98 250 169 165 14 32 179 8 206 197 107 104 97 150 173 149 219 150)
      #t
      ())
    #(261
      "special case hash"
      #vu8(49 54 53 50 49 48 48 53 50 52)
      #vu8(48 46 2 21 0 151 37 224 5 135 49 96 141 9 217 107 203 58 207 141 139 128 44 243 150 2 21 0 141 54 9 73 199 174 8 182 83 111 182 144 79 58 92 146 46 50 162 22)
      #t
      ())
    #(262
      "special case hash"
      #vu8(53 55 52 56 48 56 49 54 57 54)
      #vu8(48 45 2 20 81 75 42 247 218 146 206 120 158 62 238 217 128 68 105 149 48 229 175 48 2 21 0 230 6 72 76 183 211 71 132 60 100 207 242 81 131 25 16 142 102 16 148)
      #t
      ())
    #(263
      "special case hash"
      #vu8(54 51 52 51 57 49 51 52 54 56)
      #vu8(48 45 2 20 110 63 2 10 240 13 43 86 236 62 146 178 62 152 20 134 182 121 189 68 2 21 0 186 93 5 213 148 189 245 248 79 193 48 57 99 131 111 192 149 56 199 186)
      #t
      ())
    #(264
      "special case hash"
      #vu8(49 53 52 49 49 48 51 53 57 56)
      #vu8(48 44 2 20 48 137 76 203 89 92 4 140 182 255 157 204 91 151 75 90 114 233 251 149 2 20 28 59 128 87 114 233 136 69 219 198 96 211 103 81 116 233 132 44 127 43)
      #t
      ())
    #(265
      "special case hash"
      #vu8(49 48 52 55 56 53 56 48 49 50 56)
      #vu8(48 44 2 20 109 227 38 202 96 215 74 89 151 212 19 123 75 111 102 249 166 235 255 145 2 20 106 95 91 136 86 153 32 196 247 100 74 71 98 128 166 231 17 221 240 88)
      #t
      ())
    #(266
      "special case hash"
      #vu8(49 48 53 51 54 50 56 53 53 54 56)
      #vu8(48 45 2 20 67 34 223 46 225 179 147 249 36 212 16 135 252 142 17 146 167 141 77 129 2 21 0 225 252 184 52 27 135 70 246 226 134 52 76 74 101 104 253 44 41 196 120)
      #t
      ())
    #(267
      "special case hash"
      #vu8(57 53 51 57 48 52 49 48 53)
      #vu8(48 45 2 20 85 73 119 107 184 128 20 10 68 26 196 214 148 189 145 198 131 178 150 62 2 21 0 192 35 131 67 200 226 205 57 56 211 160 201 50 60 164 233 0 166 14 15)
      #t
      ())
    #(268
      "special case hash"
      #vu8(57 55 56 56 52 56 48 51 57)
      #vu8(48 46 2 21 0 147 185 126 104 114 117 203 31 37 242 18 68 176 222 182 138 118 78 103 12 2 21 0 242 115 103 92 182 201 108 206 147 181 139 131 39 107 172 96 157 175 242 23)
      #t
      ())
    #(269
      "special case hash"
      #vu8(51 54 49 48 54 55 50 52 52 50)
      #vu8(48 45 2 21 0 247 224 52 47 216 226 158 11 117 13 73 75 1 150 152 150 146 189 219 75 2 20 125 22 31 173 150 218 219 187 204 205 178 12 159 130 77 88 152 149 112 177)
      #t
      ())
    #(270
      "special case hash"
      #vu8(49 48 53 52 50 52 48 55 48 53)
      #vu8(48 46 2 21 0 234 241 243 192 80 82 4 17 39 107 11 226 37 161 93 57 134 187 240 101 2 21 0 193 195 147 245 185 241 226 197 84 189 70 105 218 148 11 138 39 179 61 115)
      #t
      ())
    #(271
      "special case hash"
      #vu8(53 49 55 52 52 52 56 49 57 55)
      #vu8(48 46 2 21 0 252 180 98 57 121 10 221 18 177 164 91 223 107 187 106 64 220 85 43 29 2 21 0 164 254 55 155 146 206 110 37 229 213 255 70 75 26 219 160 17 58 99 230)
      #t
      ())
    #(272
      "special case hash"
      #vu8(49 57 54 55 53 54 49 50 53 49)
      #vu8(48 44 2 20 57 249 179 140 217 67 188 195 202 13 71 162 118 196 25 225 174 148 100 62 2 20 89 2 122 255 64 150 96 20 189 246 44 127 111 241 25 126 80 147 100 76)
      #t
      ())
    #(273
      "special case hash"
      #vu8(51 52 52 55 50 53 51 51 52 51)
      #vu8(48 45 2 21 0 240 170 180 179 211 142 216 49 151 105 203 214 143 221 212 40 1 149 13 91 2 20 29 131 119 109 19 239 242 63 170 113 134 244 242 78 134 111 11 168 152 216)
      #t
      ())
    #(274
      "special case hash"
      #vu8(51 54 56 50 54 52 51 49 56)
      #vu8(48 45 2 20 25 62 232 153 184 3 166 123 24 40 161 255 192 241 14 28 108 16 119 50 2 21 0 177 38 101 94 84 22 176 18 215 231 154 190 219 140 142 252 14 119 202 195)
      #t
      ())
    #(275
      "special case hash"
      #vu8(51 50 54 49 49 57 56 54 48 56)
      #vu8(48 46 2 21 0 170 56 217 118 90 177 75 174 230 56 46 58 66 220 177 208 7 14 163 123 2 21 0 152 157 86 183 30 89 113 70 227 98 38 133 26 217 31 168 83 93 193 241)
      #t
      ())
    #(276
      "special case hash"
      #vu8(57 54 55 56 55 56 49 48 57 52)
      #vu8(48 46 2 21 0 133 215 99 221 185 58 105 161 186 48 163 45 143 22 253 210 59 225 146 47 2 21 0 231 74 47 36 1 14 13 96 132 71 34 106 48 149 183 0 42 96 199 154)
      #t
      ())
    #(277
      "special case hash"
      #vu8(52 57 53 56 56 50 51 56 50 51)
      #vu8(48 45 2 20 33 179 7 107 21 236 3 145 55 163 107 21 143 75 106 20 203 108 52 15 2 21 0 170 129 154 241 210 223 21 146 245 202 78 42 1 51 210 193 80 24 223 27)
      #t
      ())
    #(278
      "special case hash"
      #vu8(56 50 52 54 51 55 56 51 55)
      #vu8(48 46 2 21 0 185 221 255 48 205 194 148 166 46 59 113 53 191 42 202 199 248 175 235 149 2 21 0 185 117 125 111 79 24 23 2 187 67 238 98 149 190 197 96 219 127 148 31)
      #t
      ())
    #(279
      "special case hash"
      #vu8(49 49 48 50 48 56 51 51 55 55 54)
      #vu8(48 46 2 21 0 180 95 197 91 153 56 78 126 146 154 164 61 1 126 57 139 97 236 208 52 2 21 0 186 232 87 42 216 68 133 107 8 39 226 1 4 94 216 88 10 240 88 6)
      #t
      ())
    #(280
      "special case hash"
      #vu8(49 51 51 56 55 49 54 52 56)
      #vu8(48 45 2 20 49 154 75 104 182 232 182 248 174 128 154 105 7 65 241 31 234 101 122 83 2 21 0 189 147 31 18 184 248 133 58 143 125 233 139 228 138 168 19 161 142 163 229)
      #t
      ())
    #(281
      "special case hash"
      #vu8(51 50 50 49 52 52 49 54 50)
      #vu8(48 45 2 20 12 9 67 46 109 62 169 121 141 189 13 116 17 129 106 82 109 8 252 30 2 21 0 221 22 64 219 100 57 246 197 102 55 171 217 151 155 134 82 234 4 243 110)
      #t
      ())
    #(282
      "special case hash"
      #vu8(49 48 54 56 54 54 53 53 53 52 54)
      #vu8(48 45 2 21 0 131 220 157 11 197 83 110 117 145 149 85 28 41 232 179 52 60 6 148 153 2 20 13 180 229 116 144 101 157 37 195 32 44 249 197 37 248 221 233 148 102 240)
      #t
      ())
    #(283
      "special case hash"
      #vu8(54 50 49 53 53 50 52 54)
      #vu8(48 45 2 20 100 5 5 254 20 57 134 247 180 107 128 236 68 216 60 123 4 138 52 248 2 21 0 191 255 93 77 96 74 8 255 222 132 245 24 153 129 69 162 119 236 19 118)
      #t
      ())
    #(284
      "special case hash"
      #vu8(55 48 51 48 56 49 56 55 55 52)
      #vu8(48 44 2 20 28 119 233 67 12 35 92 51 169 61 127 116 174 43 27 103 175 183 81 145 2 20 75 27 108 76 73 173 0 42 16 23 229 1 127 196 149 164 236 200 92 30)
      #t
      ())
    #(285
      "special case hash"
      #vu8(53 57 50 52 53 50 51 55 52 52)
      #vu8(48 44 2 20 45 58 11 186 34 11 21 129 75 12 172 63 26 52 79 100 135 85 255 142 2 20 104 240 103 240 94 221 75 84 58 13 138 146 245 166 2 87 105 97 112 41)
      #t
      ())
    #(286
      "special case hash"
      #vu8(49 52 57 53 53 56 54 54 50 49)
      #vu8(48 45 2 20 112 8 185 173 138 45 33 133 119 115 167 78 178 100 108 95 24 47 169 114 2 21 0 224 147 205 119 57 139 41 197 244 13 249 211 177 62 154 132 242 233 44 67)
      #t
      ())
    #(287
      "special case hash"
      #vu8(52 48 48 53 51 49 52 52 48 54)
      #vu8(48 44 2 20 49 116 195 146 17 74 110 98 58 71 120 187 210 109 203 143 253 10 94 6 2 20 52 37 178 33 3 28 35 214 169 158 250 129 49 9 229 63 229 64 33 118)
      #t
      ())
    #(288
      "special case hash"
      #vu8(51 48 57 54 52 53 55 53 49 50)
      #vu8(48 45 2 21 0 155 46 78 85 44 222 187 188 1 35 221 22 93 25 154 119 193 195 99 40 2 20 63 131 149 253 56 110 254 37 197 18 112 141 53 54 213 85 150 4 228 31)
      #t
      ())
    #(289
      "special case hash"
      #vu8(50 55 56 52 48 50 53 54 50 48)
      #vu8(48 45 2 21 0 193 246 41 39 172 53 61 221 229 166 249 82 68 170 198 220 171 0 126 240 2 20 112 25 14 116 0 10 46 141 35 50 29 44 44 218 246 64 179 131 25 35)
      #t
      ())
    #(290
      "special case hash"
      #vu8(50 54 49 56 55 56 55 52 49 56)
      #vu8(48 44 2 20 22 119 30 228 8 86 148 192 14 225 11 97 100 132 216 126 135 133 84 216 2 20 103 223 252 229 199 17 236 168 227 112 210 189 206 54 170 2 5 231 211 19)
      #t
      ())
    #(291
      "special case hash"
      #vu8(49 54 52 50 54 50 53 50 54 50)
      #vu8(48 46 2 21 0 231 66 118 117 7 242 171 164 199 11 147 18 1 179 70 106 135 227 33 229 2 21 0 148 140 80 86 49 96 43 200 46 167 77 136 97 113 169 13 103 54 72 116)
      #t
      ())
    #(292
      "special case hash"
      #vu8(54 56 50 52 49 56 57 52 51 54)
      #vu8(48 45 2 20 38 23 124 227 1 3 18 11 93 36 235 5 39 151 229 178 185 211 31 14 2 21 0 184 151 98 8 167 183 162 124 206 135 171 221 85 146 74 149 67 19 133 82)
      #t
      ())
    #(293
      "special case hash"
      #vu8(52 56 52 50 52 53 52 50 53)
      #vu8(48 45 2 21 0 167 141 177 149 79 28 164 220 55 102 166 209 161 71 87 97 5 115 183 141 2 20 54 218 82 12 205 170 157 162 151 81 148 141 84 99 110 100 116 64 147 39)
      #t
      ())
    #(294
      "Signature generated without truncating the hash"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 20 98 172 165 226 129 193 250 108 219 182 94 249 40 151 194 255 82 38 179 189 2 21 0 208 184 47 21 35 154 13 124 75 4 166 83 125 254 218 198 149 113 102 61)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 27 31 161 159 86 69 5 159 70 236 90 169 208 51 98 143 7 159 50 24 226 128 147 73 201 10 112 187 0 48 75 82 191 49 172 2 140 61 205 175)
  :der-encode
  #t
  :tests
  '(#(295
      "k*G has a large x-coordinate"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 254 255 255 172 114 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 176)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 224 207 145 222 55 158 231 177 163 109 204 219 119 65 182 0 226 63 34 32 224 53 247 176 201 105 199 117 200 220 217 58 65 98 44 225 227 116 132 227)
  :der-encode
  #t
  :tests
  '(#(296
      "r,s are large"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 178 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 177)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 102 252 29 238 35 100 77 158 17 12 43 228 122 231 6 121 170 13 222 43 93 45 185 86 172 65 200 248 36 99 238 1 61 100 6 125 5 69 22 185)
  :der-encode
  #t
  :tests
  '(#(297
      "r and s^-1 have a large Hamming weight"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 2 21 0 149 45 71 175 69 7 192 64 8 243 166 63 248 245 145 5 79 61 197 213)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 20 123 221 43 50 93 58 26 88 25 88 92 88 99 71 129 68 202 8 198 133 35 52 138 187 251 227 89 106 46 24 36 89 246 153 185 168 108 140 66)
  :der-encode
  #t
  :tests
  '(#(298
      "r and s^-1 have a large Hamming weight"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 2 20 109 83 71 32 216 92 211 145 224 166 155 111 151 215 13 77 240 176 27 207)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 1 42 120 243 206 178 197 96 111 130 75 144 180 21 26 124 215 136 195 200 98 22 82 28 139 3 142 112 128 187 86 1 172 139 73 233 104 38 54 139)
  :der-encode
  #t
  :tests
  '(#(299
      "small r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 3 2 1 1)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 206 231 245 171 219 3 187 96 58 48 167 167 129 210 36 151 8 147 30 40 244 89 223 227 127 239 28 193 61 88 50 69 35 129 204 23 158 112 135 40)
  :der-encode
  #t
  :tests
  '(#(300
      "small r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 3 2 1 3)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 72 199 64 14 34 210 239 115 84 184 32 235 102 33 5 225 182 228 74 96 163 41 248 189 105 175 213 170 145 212 225 141 60 250 36 40 147 13 238 104)
  :der-encode
  #t
  :tests
  '(#(301
      "small r and s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 6 2 1 3 2 1 4)
      #t
      ())
    #(302
      "r is larger than n"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 182 2 1 4)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 178 11 141 130 1 192 180 12 128 8 83 97 48 127 119 113 92 81 144 84 219 165 45 171 118 215 167 155 212 193 41 220 201 69 65 125 193 240 61 215)
  :der-encode
  #t
  :tests
  '(#(303
      "s is larger than n"
      #vu8(49 50 51 52 48 48)
      #vu8(48 26 2 1 3 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 41 141 58)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 78 147 98 149 2 252 95 30 41 104 238 37 85 110 20 241 214 250 192 87 123 137 43 227 106 16 12 25 58 155 210 31 101 66 97 26 140 137 114 249)
  :der-encode
  #t
  :tests
  '(#(304
      "small r and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 27 2 2 1 0 2 21 0 191 126 253 251 247 239 223 191 126 255 69 213 71 137 19 131 233 208 124 146)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 7 159 220 43 165 141 44 230 54 17 179 69 144 53 38 20 5 225 121 219 220 2 123 248 146 66 89 176 47 196 170 20 75 125 203 88 230 14 179 101)
  :der-encode
  #t
  :tests
  '(#(305
      "smallish r and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 31 2 7 45 155 77 52 121 82 204 2 20 65 89 54 57 91 180 111 153 67 145 79 33 0 96 122 236 108 243 61 157)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 153 12 253 34 251 106 172 253 108 240 55 97 199 229 122 162 165 215 119 216 95 206 152 65 202 58 88 141 58 71 94 7 153 113 129 77 58 233 250 68)
  :der-encode
  #t
  :tests
  '(#(306
      "100-bit r and small s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 37 2 13 16 51 230 126 55 179 43 68 85 128 191 78 251 2 20 107 148 107 148 107 148 107 148 107 149 36 228 157 9 83 18 59 6 142 133)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 171 32 98 137 161 136 92 199 57 9 92 154 64 237 216 30 141 91 112 230 184 252 240 212 168 171 58 91 251 46 15 186 10 9 58 28 22 51 158 190)
  :der-encode
  #t
  :tests
  '(#(307
      "small r and 100 bit s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 27 2 2 1 0 2 21 0 201 220 236 78 63 171 169 27 29 155 122 242 131 222 104 60 145 71 92 25)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 231 107 154 203 60 47 230 245 244 132 99 83 237 80 112 136 107 37 198 131 105 152 150 147 66 250 57 21 123 165 152 210 129 211 190 18 185 135 160 52)
  :der-encode
  #t
  :tests
  '(#(308
      "100-bit r and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 38 2 13 6 37 34 187 211 236 190 124 57 233 62 124 38 2 21 0 201 220 236 78 63 171 169 27 29 155 122 242 131 222 104 60 145 71 92 25)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 192 243 14 109 209 227 115 82 83 131 100 43 212 92 156 58 250 80 222 249 220 157 99 250 5 253 104 86 35 213 243 105 15 61 227 35 53 230 235 183)
  :der-encode
  #t
  :tests
  '(#(309
      "r and s^-1 are close to n"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 1 0 0 0 0 0 0 0 0 0 1 184 250 22 223 171 154 202 22 182 51 2 20 85 85 85 85 85 85 85 85 85 85 232 83 92 245 57 51 152 178 60 230)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 107 84 105 36 131 179 125 28 182 60 11 166 181 199 74 244 251 181 179 54 103 234 41 87 183 85 19 210 174 109 26 46 169 236 229 134 218 148 124 155)
  :der-encode
  #t
  :tests
  '(#(310
      "s == 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 25 2 20 85 85 85 85 85 85 85 85 85 85 232 83 92 245 57 51 152 178 60 231 2 1 1)
      #t
      ())
    #(311
      "s == 0"
      #vu8(49 50 51 52 48 48)
      #vu8(48 25 2 20 85 85 85 85 85 85 85 85 85 85 232 83 92 245 57 51 152 178 60 231 2 1 0)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 56 203 239 210 27 156 31 181 147 109 255 55 161 165 110 105 234 180 174 161 117 98 15 133 28 97 13 230 86 110 186 207 242 71 153 178 146 240 98 175)
  :der-encode
  #t
  :tests
  '(#(312
      "point at infinity during verify"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 0 128 0 0 0 0 0 0 0 0 0 220 125 11 111 213 205 101 11 91 89 2 20 85 85 85 85 85 85 85 85 85 85 232 83 92 245 57 51 152 178 60 230)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 235 228 9 79 250 145 129 146 18 243 136 103 154 3 207 113 187 72 4 187 46 61 57 132 216 139 122 134 114 197 188 23 189 219 198 230 182 8 57 117)
  :der-encode
  #t
  :tests
  '(#(313
      "edge case for signature malleability"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 0 128 0 0 0 0 0 0 0 0 0 220 125 11 111 213 205 101 11 91 97 2 21 0 128 0 0 0 0 0 0 0 0 0 220 125 11 111 213 205 101 11 91 89)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 64 102 85 218 204 32 189 229 217 138 217 122 235 228 200 2 185 86 214 202 70 65 74 195 186 228 193 3 109 207 11 224 99 73 148 22 200 163 180 178)
  :der-encode
  #t
  :tests
  '(#(314
      "edge case for signature malleability"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 0 128 0 0 0 0 0 0 0 0 0 220 125 11 111 213 205 101 11 91 97 2 21 0 128 0 0 0 0 0 0 0 0 0 220 125 11 111 213 205 101 11 91 90)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 63 27 168 174 234 231 159 109 36 31 216 190 70 255 166 243 86 135 35 177 29 196 130 169 85 104 232 230 207 80 37 203 245 184 254 249 238 79 186 27)
  :der-encode
  #t
  :tests
  '(#(315
      "u1 == 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 20 85 85 85 85 85 85 85 85 85 85 232 83 92 245 57 51 152 178 60 227 2 21 1 118 180 165 232 95 57 36 195 218 134 195 235 40 69 67 198 0 109 207 134)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 71 166 164 87 186 78 54 147 9 226 17 224 238 16 126 82 197 238 250 168 34 54 239 84 249 93 32 159 88 183 74 219 241 124 212 22 71 44 69 22)
  :der-encode
  #t
  :tests
  '(#(316
      "u1 == n - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 20 85 85 85 85 85 85 85 85 85 85 232 83 92 245 57 51 152 178 60 227 2 21 0 137 75 90 23 160 198 219 60 37 124 174 9 5 122 19 111 147 191 157 224)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 65 243 212 52 96 10 63 138 138 49 174 190 44 221 254 43 194 176 214 227 19 60 216 139 188 10 77 129 96 48 21 243 220 225 234 130 225 250 73 221)
  :der-encode
  #t
  :tests
  '(#(317
      "u2 == 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 44 2 20 85 85 85 85 85 85 85 85 85 85 232 83 92 245 57 51 152 178 60 227 2 20 85 85 85 85 85 85 85 85 85 85 232 83 92 245 57 51 152 178 60 227)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 83 74 105 73 247 130 245 212 236 237 91 166 99 28 18 190 159 55 159 23 151 205 93 117 239 12 242 206 249 1 163 220 78 29 158 3 48 51 236 79)
  :der-encode
  #t
  :tests
  '(#(318
      "u2 == n - 1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 20 85 85 85 85 85 85 85 85 85 85 232 83 92 245 57 51 152 178 60 227 2 21 0 170 170 170 170 170 170 170 170 170 171 208 166 185 234 114 103 49 100 121 208)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 193 186 119 182 140 36 57 117 153 245 238 188 107 74 72 244 248 202 244 197 55 134 174 117 157 230 55 80 56 39 83 179 51 87 111 92 27 38 197 64)
  :der-encode
  #t
  :tests
  '(#(319
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 29 2 5 1 0 0 83 131 2 20 124 230 225 248 31 189 182 235 243 130 65 78 98 193 193 66 0 36 154 130)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 40 162 23 62 155 205 148 196 109 93 211 209 96 200 211 198 245 243 146 203 119 235 233 132 180 72 20 239 36 214 210 87 14 203 234 112 75 245 135 160)
  :der-encode
  #t
  :tests
  '(#(320
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 29 2 5 1 0 0 83 131 2 20 46 92 92 27 56 125 251 14 152 116 12 40 0 137 152 227 81 72 60 254)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 251 117 161 162 200 70 210 45 120 126 115 209 215 188 124 129 178 124 230 212 79 92 162 74 238 221 46 109 193 237 44 85 245 158 240 12 228 79 128 14)
  :der-encode
  #t
  :tests
  '(#(321
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 29 2 5 1 0 0 83 131 2 20 52 164 171 228 54 236 63 196 209 24 247 172 238 192 223 111 218 232 0 208)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 4 67 106 223 63 88 202 183 162 245 220 7 210 7 129 109 203 30 167 165 179 137 159 56 10 183 249 168 211 133 147 62 197 124 172 66 145 167 166 198)
  :der-encode
  #t
  :tests
  '(#(322
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 30 2 5 1 0 0 83 131 2 21 0 134 51 97 85 1 92 37 96 137 76 65 67 10 59 173 170 103 189 16 77)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 181 89 77 146 109 226 17 104 176 246 9 98 231 32 199 98 53 99 21 142 71 165 0 131 89 103 168 100 188 215 93 20 174 55 128 202 15 21 72 149)
  :der-encode
  #t
  :tests
  '(#(323
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 29 2 5 1 0 0 83 131 2 20 54 21 80 21 194 86 8 148 181 161 215 53 228 254 115 78 244 134 144 199)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 45 248 18 88 127 250 103 232 45 164 123 206 123 114 68 107 114 53 234 116 149 105 33 11 203 180 13 79 217 206 6 213 143 116 184 236 201 100 189 251)
  :der-encode
  #t
  :tests
  '(#(324
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 29 2 5 1 0 0 83 131 2 20 108 42 160 43 132 172 17 41 107 67 174 107 201 252 230 157 233 13 33 142)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 227 1 30 143 185 11 253 241 116 36 213 157 15 124 151 87 224 169 186 140 171 40 197 133 37 128 1 89 75 135 216 61 234 0 41 76 74 78 231 158)
  :der-encode
  #t
  :tests
  '(#(325
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 29 2 5 1 0 0 83 131 2 20 1 92 37 96 137 75 90 23 160 198 221 147 217 213 73 45 51 146 131 145)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 194 251 1 128 120 74 143 80 116 48 76 183 8 0 38 53 232 68 179 213 200 239 249 32 224 13 75 165 6 197 140 162 80 252 246 65 177 142 111 97)
  :der-encode
  #t
  :tests
  '(#(326
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 29 2 5 1 0 0 83 131 2 20 24 249 13 79 173 145 126 150 1 113 60 78 169 90 210 222 247 176 128 111)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 75 78 95 87 71 219 214 255 148 27 142 125 206 219 53 55 115 117 34 90 210 41 35 137 195 116 215 210 38 104 197 176 191 67 156 88 92 17 214 73)
  :der-encode
  #t
  :tests
  '(#(327
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 30 2 5 1 0 0 83 131 2 21 0 218 135 137 2 92 224 175 134 3 193 11 200 249 63 36 211 202 11 187 140)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 212 47 221 139 240 74 7 134 79 73 207 122 99 177 191 221 152 246 222 7 47 29 228 81 25 85 18 35 49 190 92 115 228 105 105 188 148 12 141 90)
  :der-encode
  #t
  :tests
  '(#(328
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 30 2 5 1 0 0 83 131 2 21 0 131 25 30 7 224 66 73 20 12 127 119 171 180 29 234 88 201 242 28 49)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 57 67 113 53 36 84 130 96 200 64 164 200 51 9 30 38 130 186 197 152 5 172 177 214 188 161 198 133 237 27 202 77 5 220 110 207 184 242 34 6)
  :der-encode
  #t
  :tests
  '(#(329
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 29 2 5 1 0 0 83 131 2 20 68 165 173 11 208 99 109 158 18 190 87 4 130 189 9 183 201 223 206 240)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 76 33 162 196 52 202 201 24 143 72 114 30 29 11 22 13 94 61 133 2 115 215 225 204 214 113 164 247 173 11 155 21 13 76 100 162 152 33 145 166)
  :der-encode
  #t
  :tests
  '(#(330
      "edge case for u1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 29 2 5 1 0 0 83 131 2 20 26 82 85 242 27 118 31 226 104 140 123 214 119 96 111 183 237 116 0 104)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 45 54 230 240 31 6 70 242 114 40 157 115 80 14 74 47 183 69 2 148 85 0 188 86 28 100 136 128 254 153 71 107 128 177 156 195 223 163 22 159)
  :der-encode
  #t
  :tests
  '(#(331
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 29 2 5 1 0 0 83 131 2 20 85 85 85 85 85 85 85 85 85 85 232 83 92 245 57 51 238 7 174 18)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 99 56 66 117 122 157 195 177 152 222 149 155 195 76 193 10 201 83 155 226 20 181 92 114 247 49 203 236 26 108 200 12 48 201 168 104 222 232 82 51)
  :der-encode
  #t
  :tests
  '(#(332
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 29 2 5 1 0 0 83 131 2 20 73 113 66 81 223 62 200 243 169 245 163 156 68 227 190 94 95 191 222 196)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 3 104 140 131 98 136 209 29 153 120 172 44 212 30 212 136 78 7 69 85 29 82 74 35 200 184 135 17 145 222 225 59 110 212 179 220 139 162 1 5)
  :der-encode
  #t
  :tests
  '(#(333
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 29 2 5 1 0 0 83 131 2 20 89 158 38 107 128 117 239 85 24 51 249 100 230 139 23 135 201 165 213 101)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 55 186 251 60 186 22 61 5 85 156 163 99 153 6 215 100 179 162 19 186 179 12 113 48 119 163 45 236 24 70 94 30 115 86 128 102 190 245 133 50)
  :der-encode
  #t
  :tests
  '(#(334
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 29 2 5 1 0 0 83 131 2 20 119 241 22 97 229 26 215 241 0 0 206 155 138 159 160 181 87 253 181 50)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 198 109 0 185 205 107 91 89 3 178 236 226 9 71 14 113 43 150 245 21 201 116 133 34 161 123 89 166 14 116 198 157 125 225 97 165 249 255 181 50)
  :der-encode
  #t
  :tests
  '(#(335
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 29 2 5 1 0 0 83 131 2 20 17 102 30 81 173 127 16 0 0 0 29 248 131 99 248 46 251 15 152 51)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 254 68 121 176 57 201 120 26 248 117 229 26 64 161 152 143 153 228 119 123 212 176 26 168 67 11 154 107 39 30 214 9 203 229 154 217 127 24 155 245)
  :der-encode
  #t
  :tests
  '(#(336
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 29 2 5 1 0 0 83 131 2 20 34 204 60 163 90 254 32 0 0 0 59 241 6 199 240 93 246 31 48 102)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 122 55 35 219 31 248 49 25 142 15 120 173 210 195 177 195 184 136 212 68 18 80 73 172 91 146 150 217 122 137 137 8 95 94 38 241 178 122 96 107)
  :der-encode
  #t
  :tests
  '(#(337
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 30 2 5 1 0 0 83 131 2 21 0 229 26 215 241 0 0 0 0 0 1 138 165 243 213 147 222 70 46 100 45)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 157 12 227 6 168 192 174 114 171 97 60 108 48 6 128 178 58 80 147 209 141 9 103 102 226 113 249 145 242 208 211 127 115 185 144 72 3 117 173 167)
  :der-encode
  #t
  :tests
  '(#(338
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 30 2 5 1 0 0 83 131 2 21 0 147 177 59 19 177 59 19 177 59 20 175 163 249 129 10 99 27 249 102 49)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 219 106 11 243 180 110 119 9 118 152 140 126 144 169 116 156 105 33 227 135 107 232 149 141 68 148 94 156 127 255 33 9 6 205 232 141 2 103 73 1)
  :der-encode
  #t
  :tests
  '(#(339
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 30 2 5 1 0 0 83 131 2 21 0 128 0 0 0 0 0 0 0 0 0 220 125 11 111 213 205 75 113 185 102)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 20 43 30 118 245 7 199 16 199 121 205 157 219 231 178 108 229 103 32 60 248 250 206 7 219 208 123 8 45 105 182 130 68 59 155 21 225 93 183 57)
  :der-encode
  #t
  :tests
  '(#(340
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 30 2 5 1 0 0 83 131 2 21 0 170 170 170 170 170 170 170 170 170 171 208 166 185 234 114 102 220 15 8 161)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 208 157 37 159 8 238 243 129 81 46 206 140 80 34 241 227 104 218 230 43 49 222 60 23 239 189 63 19 232 248 202 194 84 108 251 109 235 249 238 62)
  :der-encode
  #t
  :tests
  '(#(341
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 30 2 5 1 0 0 83 131 2 21 0 128 0 0 0 0 0 0 0 0 0 220 125 11 111 213 204 229 11 49 152)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 200 250 237 241 190 140 207 209 75 47 28 20 7 0 40 46 241 44 237 159 196 163 40 238 31 212 87 204 113 193 64 9 34 88 38 87 18 100 215 213)
  :der-encode
  #t
  :tests
  '(#(342
      "edge case for u2"
      #vu8(49 50 51 52 48 48)
      #vu8(48 30 2 5 1 0 0 83 131 2 21 0 172 207 19 53 192 58 247 170 140 26 217 47 126 181 97 145 73 222 70 12)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 196 154 45 231 9 191 70 128 158 13 174 203 195 89 222 67 229 103 40 169 186 169 106 57 183 240 250 19 114 86 255 71 154 199 217 116 225 139 221 53)
  :der-encode
  #t
  :tests
  '(#(343
      "point duplication during verification"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 0 164 177 113 126 221 193 228 125 228 239 190 254 216 20 243 6 228 218 88 47 2 20 23 8 218 9 98 197 234 24 149 195 8 120 217 15 62 114 254 247 25 13)
      #t
      ("PointDuplication"))))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 196 154 45 231 9 191 70 128 158 13 174 203 195 89 222 67 229 103 40 169 69 86 149 198 72 15 5 236 141 169 0 184 101 56 38 138 30 115 207 62)
  :der-encode
  #t
  :tests
  '(#(344
      "duplication bug"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 0 164 177 113 126 221 193 228 125 228 239 190 254 216 20 243 6 228 218 88 47 2 20 23 8 218 9 98 197 234 24 149 195 8 120 217 15 62 114 254 247 25 13)
      #f
      ("PointDuplication"))))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 152 222 251 191 26 10 134 210 207 238 24 96 101 198 151 246 95 71 31 153 225 134 237 205 154 225 58 104 168 243 3 6 145 178 171 32 168 180 24 198)
  :der-encode
  #t
  :tests
  '(#(345
      "comparison with point at infinity "
      #vu8(49 50 51 52 48 48)
      #vu8(48 44 2 20 85 85 85 85 85 85 85 85 85 85 232 83 92 245 57 51 152 178 60 230 2 20 51 51 51 51 51 51 51 51 51 51 139 101 55 198 85 133 91 158 36 138)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 211 207 86 105 215 166 170 52 81 51 160 255 159 86 168 140 153 90 52 13 148 248 132 86 44 226 123 11 103 224 232 14 72 108 77 78 34 100 230 81)
  :der-encode
  #t
  :tests
  '(#(346
      "extreme value for k and edgecase s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 44 2 20 116 252 113 203 149 233 101 252 84 238 95 160 34 122 255 148 101 51 160 227 2 20 85 85 85 85 85 85 85 85 85 85 232 83 92 245 57 51 152 178 60 230)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 194 224 182 181 211 112 243 116 243 178 245 162 228 160 30 43 243 194 225 88 95 104 121 246 58 64 169 202 204 131 67 33 78 194 146 92 71 241 209 138)
  :der-encode
  #t
  :tests
  '(#(347
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 44 2 20 116 252 113 203 149 233 101 252 84 238 95 160 34 122 255 148 101 51 160 227 2 20 73 36 146 73 36 146 73 36 146 73 162 144 152 210 49 7 167 116 52 51)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 180 61 209 197 92 161 165 175 14 158 244 243 179 211 12 112 254 202 111 77 79 220 43 49 113 225 23 252 62 5 139 125 11 168 129 143 151 124 166 212)
  :der-encode
  #t
  :tests
  '(#(348
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 44 2 20 116 252 113 203 149 233 101 252 84 238 95 160 34 122 255 148 101 51 160 227 2 20 51 51 51 51 51 51 51 51 51 51 139 101 55 198 85 133 91 158 36 138)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 243 190 56 195 174 255 147 36 215 64 188 122 219 15 234 94 235 158 166 75 173 10 99 74 45 25 155 210 2 58 255 215 167 84 107 100 95 208 191 120)
  :der-encode
  #t
  :tests
  '(#(349
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 20 116 252 113 203 149 233 101 252 84 238 95 160 34 122 255 148 101 51 160 227 2 21 0 204 204 204 204 204 204 204 204 204 206 45 148 223 25 86 21 110 120 146 41)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 10 156 42 157 227 244 105 57 239 51 160 58 96 112 144 239 57 113 3 125 119 66 3 62 2 15 195 95 103 111 198 80 209 112 204 48 13 235 38 26)
  :der-encode
  #t
  :tests
  '(#(350
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 20 116 252 113 203 149 233 101 252 84 238 95 160 34 122 255 148 101 51 160 227 2 21 0 182 219 109 182 219 109 182 219 109 184 22 105 126 13 122 147 34 162 130 128)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 134 46 46 180 31 169 115 137 230 217 165 128 159 51 196 118 37 94 133 28 108 151 202 20 74 152 200 66 231 6 215 52 49 217 10 54 109 252 172 106)
  :der-encode
  #t
  :tests
  '(#(351
      "extreme value for k"
      #vu8(49 50 51 52 48 48)
      #vu8(48 44 2 20 116 252 113 203 149 233 101 252 84 238 95 160 34 122 255 148 101 51 160 227 2 20 14 176 32 201 185 124 86 100 152 2 209 232 206 146 141 198 96 172 186 232)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 168 150 178 206 125 224 220 83 216 19 5 58 100 164 80 83 249 230 52 28 143 59 124 55 77 194 35 192 255 94 50 207 197 23 133 106 226 90 218 62)
  :der-encode
  #t
  :tests
  '(#(352
      "extreme value for k and edgecase s"
      #vu8(49 50 51 52 48 48)
      #vu8(48 44 2 20 59 76 56 44 227 122 161 146 164 1 158 118 48 54 244 245 221 77 126 187 2 20 85 85 85 85 85 85 85 85 85 85 232 83 92 245 57 51 152 178 60 230)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 166 178 244 36 213 58 177 220 232 222 216 72 148 183 201 53 218 162 216 105 87 108 91 170 192 140 28 95 244 94 43 79 94 44 116 62 36 102 28 125)
  :der-encode
  #t
  :tests
  '(#(353
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 44 2 20 59 76 56 44 227 122 161 146 164 1 158 118 48 54 244 245 221 77 126 187 2 20 73 36 146 73 36 146 73 36 146 73 162 144 152 210 49 7 167 116 52 51)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 41 157 5 89 188 211 159 180 165 40 121 137 213 160 42 147 234 33 219 23 220 100 166 241 118 246 98 51 209 204 185 43 205 222 16 13 57 121 60 212)
  :der-encode
  #t
  :tests
  '(#(354
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 44 2 20 59 76 56 44 227 122 161 146 164 1 158 118 48 54 244 245 221 77 126 187 2 20 51 51 51 51 51 51 51 51 51 51 139 101 55 198 85 133 91 158 36 138)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 45 120 95 89 144 188 166 54 224 66 56 213 10 181 227 185 124 156 239 13 125 65 241 235 142 80 240 121 36 199 117 160 65 86 114 104 253 74 196 159)
  :der-encode
  #t
  :tests
  '(#(355
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 20 59 76 56 44 227 122 161 146 164 1 158 118 48 54 244 245 221 77 126 187 2 21 0 204 204 204 204 204 204 204 204 204 206 45 148 223 25 86 21 110 120 146 41)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 192 185 82 69 30 175 255 230 181 222 229 64 158 133 32 98 42 232 119 246 39 48 69 8 147 175 148 95 227 39 166 0 69 128 104 187 226 186 46 191)
  :der-encode
  #t
  :tests
  '(#(356
      "extreme value for k and s^-1"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 20 59 76 56 44 227 122 161 146 164 1 158 118 48 54 244 245 221 77 126 187 2 21 0 182 219 109 182 219 109 182 219 109 184 22 105 126 13 122 147 34 162 130 128)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 192 87 32 179 189 146 176 248 199 43 248 92 7 114 22 98 23 35 64 32 131 161 161 33 148 237 160 165 170 83 241 127 123 255 101 214 191 95 187 8)
  :der-encode
  #t
  :tests
  '(#(357
      "extreme value for k"
      #vu8(49 50 51 52 48 48)
      #vu8(48 44 2 20 59 76 56 44 227 122 161 146 164 1 158 118 48 54 244 245 221 77 126 187 2 20 14 176 32 201 185 124 86 100 152 2 209 232 206 146 141 198 96 172 186 232)
      #t
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 59 76 56 44 227 122 161 146 164 1 158 118 48 54 244 245 221 77 126 187 147 140 249 53 49 143 220 237 107 194 130 134 83 23 51 195 240 60 79 238)
  :der-encode
  #t
  :tests
  '(#(358
      "testing point duplication"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 1 118 180 165 232 95 57 36 195 218 134 195 235 40 69 67 198 0 109 207 134 2 20 36 146 73 36 146 73 36 146 73 36 209 72 76 105 24 131 211 186 26 25)
      #f
      ())
    #(359
      "testing point duplication"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 0 137 75 90 23 160 198 219 60 37 124 174 9 5 122 19 111 147 191 157 224 2 20 36 146 73 36 146 73 36 146 73 36 209 72 76 105 24 131 211 186 26 25)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 59 76 56 44 227 122 161 146 164 1 158 118 48 54 244 245 221 77 126 187 108 115 6 202 206 112 35 18 148 61 125 121 172 232 204 59 15 195 92 133)
  :der-encode
  #t
  :tests
  '(#(360
      "testing point duplication"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 1 118 180 165 232 95 57 36 195 218 134 195 235 40 69 67 198 0 109 207 134 2 20 36 146 73 36 146 73 36 146 73 36 209 72 76 105 24 131 211 186 26 25)
      #f
      ())
    #(361
      "testing point duplication"
      #vu8(49 50 51 52 48 48)
      #vu8(48 45 2 21 0 137 75 90 23 160 198 219 60 37 124 174 9 5 122 19 111 147 191 157 224 2 20 36 146 73 36 146 73 36 146 73 36 209 72 76 105 24 131 211 186 26 25)
      #f
      ())))
(test-signature/testvector
  "ecdsa_secp160k1_sha256_test"
  :algorithm
  "ECDSA"
  :digest
  "SHA-256"
  :public-key
  #vu8(48 62 48 16 6 7 42 134 72 206 61 2 1 6 5 43 129 4 0 9 3 42 0 4 140 139 127 128 11 201 197 88 139 73 112 231 85 158 202 146 111 163 142 123 108 93 130 35 66 110 28 248 210 162 121 26 183 16 161 67 5 4 138 211)
  :der-encode
  #t
  :tests
  '(#(362
      "pseudorandom signature"
      #vu8()
      #vu8(48 44 2 20 46 53 103 181 35 242 68 33 207 89 220 128 146 87 117 177 72 235 83 128 2 20 56 170 56 241 124 19 31 1 40 175 77 202 254 1 230 131 5 65 69 134)
      #t
      ())
    #(363
      "pseudorandom signature"
      #vu8(77 115 103)
      #vu8(48 45 2 20 105 185 244 109 237 105 163 90 192 10 5 62 249 219 180 125 7 61 103 41 2 21 0 208 89 203 119 8 17 1 87 130 114 202 72 191 89 128 197 1 159 235 213)
      #t
      ())
    #(364
      "pseudorandom signature"
      #vu8(49 50 51 52 48 48)
      #vu8(48 46 2 21 0 142 100 26 93 133 127 140 134 150 60 172 228 248 149 55 116 29 161 163 44 2 21 0 155 190 109 56 161 152 132 121 6 34 63 8 220 111 58 142 206 229 99 198)
      #t
      ())
    #(365
      "pseudorandom signature"
      #vu8(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      #vu8(48 46 2 21 0 240 54 163 21 20 73 168 248 84 193 44 111 213 91 217 251 2 238 103 175 2 21 0 195 188 82 39 24 139 133 185 185 195 63 167 197 8 143 142 142 2 222 134)
      #t
      ())))
