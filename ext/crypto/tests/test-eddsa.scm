(import (crypto eddsa))

(define (test-keypair type)
  (define keypair (generate-key-pair type))
  (define priv (keypair-private keypair))
  (define pub (keypair-public keypair))
  (test-assert (eddsa-private-key? priv))
  (test-assert (eddsa-public-key? pub))
  (let ((signer (make-cipher EdDSA priv :type type))
	(verifier (make-cipher EdDSA pub :type type)))
    (test-assert (format "EdDSA sign/verify ~a" type)
		 (cipher-verify verifier #vu8()
				(cipher-signature signer #vu8())))))
(test-keypair Ed25519)
(test-keypair Ed25519ctx)
(test-keypair Ed25519ph)
(test-keypair Ed448)
(test-keypair Ed448ph)

(define (%test-eddsa type priv pub msg sig signer verifier :key (context #f))
  (define priv-key (generate-private-key type (integer->bytevector priv)))
  (define raw-pub (integer->bytevector pub))
  (define signature (integer->bytevector sig))
  (define pub-key (generate-public-key type raw-pub))
  
  (test-assert (eddsa-private-key? priv-key))
  (test-assert (eddsa-public-key? pub-key))
  
  (test-equal (format "EdDSA public key ~a" type) raw-pub
	      (eddsa-public-key-data (eddsa-private-key-public-key priv-key)))
  (test-equal (format "EdDSA signature ~a" type)
	       signature (signer msg priv-key :context context))
  (test-assert (format "EdDSA verify ~a" type)
	       (verifier msg signature pub-key :context context))
  ;; using cipher
  (let ((sign-cipher0 (make-cipher type priv-key))
	(sign-cipher1 (make-cipher EdDSA priv-key :type type))
	(verify-cipher0 (make-cipher type pub-key))
	(verify-cipher1 (make-cipher EdDSA pub-key :type type)))
    (test-equal (format "EdDSA cipher sign spceific ~a" type)
		signature (cipher-signature sign-cipher0 msg :context context))
    (test-equal (format "EdDSA cipher sign generic ~a" type)
		signature (cipher-signature sign-cipher1 msg :context context))
    (test-assert (format "EdDSA cipher verify spceific ~a" type)
		 (cipher-verify verify-cipher0 msg signature :context context))
    (test-assert (format "EdDSA cipher verify generic ~a" type)
		 (cipher-verify verify-cipher1 msg signature :context context))))

(define (make-test-eddsa type signer verifier)
  (lambda (priv pub msg sig . args)
    (apply %test-eddsa type priv pub msg sig signer verifier args)))
(include "test-ed25519.scm")
(include "test-ed25519ctx.scm")
(include "test-ed25519ph.scm")
(include "test-ed448.scm")
(include "test-ed448ph.scm")
