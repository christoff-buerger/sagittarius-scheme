@; -*- mode:scribble; coding: utf-8 -*-

@section[:tag "ext.sagittarius"]{Sagittarius拡張}

R6RSが大きいとはいえそれだけでは実用的なプログラムを書くのに十分ではないので
Sagittariusは独自の拡張ライブラリを持っています。

@subsection[:tag "lib.sagittarius"]{(sagittarius) - ビルトインライブラリ}

@define[Library]{@name{(sagittarius)}}
@desc{このライブラリはSagittarius固有の手続き等を提供します。}

@subsubsection[:tag "lib.sagittarius.builtin.syntax"]{固有構文}
@define[Syntax]{@name{define-constant} @args{variable expression}}
@desc{@code{define}と似ていますが、@code{define-constant}は与えられた
@var{variable}を定数として束縛します。束縛された値は可能であればコンパイル時に
定数として畳み込まれます。

もし定義された@var{variable}が上書きされた場合、VMが警告メッセージを標準エラー
に表示します。また、@code{#!no-overwite}ディレクティブ等で上書き禁止フラグが
セットされた場合、コンパイラはエラーを投げます。
}

@define[Syntax]{@name{receive} @args{formals expression body}}
@desc{[SRFI-8] @var{formals}と@var{body}は@code{lambda}と同様です。
@var{Expression}は式である必要があります。

@code{receive}は@var{expressions}で生成された多値を@var{formals}に束縛します。

@var{body}内の式は逐次的に評価されます。@var{body}の最後にある式の評価結果が
@code{receive}式の値になります。
}

@define[Syntax]{@name{cond-expand} @args{clauses @dots{}}}
@desc{[R7RS][SRFI-0]コンパイル時条件式。@code{cond-expand}は環境固有の条件を
解決します。

@var{clauses}は以下のいずれかである必要があります。
@itemlist{
@item{(@var{feature-identifier} @var{body} @dots{})}
@item{((@code{library} @var{library-name}) @var{body} @dots{})}
@item{((@code{and} @var{feature-identifier} @dots{}) @var{body} @dots{})}
@item{((@code{or} @var{feature-identifier} @dots{}) @var{body} @dots{})}
@item{(@code{not} @var{feature-identifier})}
}
@code{library}フォームは与えられた@var{library-name}を探し、もし存在すれば
@var{body}をコンパイルします。

@code{and}、@code{or}そして@code{not}は通常の構文と同様です。

@var{feature-identifier}の取りうる値は手続き@code{cond-features}で確認することが
できます。
}

@subsubsection{マクロ展開器}

@define[Function]{@name{er-macro-transformer} @args{proc}}
@desc{@var{Proc}は3つの引数、@var{form}、@var{rename}そして@var{compare}を受け
取る手続きでなければいけません。

@dl-list[
@dl-item[@var{form}]{このマクロ展開器の入力式(S式)です。}
@dl-item[@var{rename}]{手続き。Schemeオブジェクトを受け取り構文オブジェクトにし
ます。@code{datum->syntax}と似ていますが、テンプレート手続きを必要としません。
変換に使用される環境はマクロが定義された際の環境です。}
@dl-item[@var{compare}]{手続き。二つの引数を受け取り、それらを
@code{free-identifier=?}で比較します。引数がリストもしくはベクタだった場合、こ
の手続きはそれらの要素の比較もします。}
]

@code{er-macro-transformer}はexplicit renamingマクロ展開器を返します。
この展開器は健全、非健全両方のマクロを書くことが可能です。例えば以下のように：
@codeblock[=> (a a a)]{
(define-syntax loop
  (er-macro-transformer
   (lambda (form rename compare)
     (let ((body (cdr form)))
       `(,(rename 'call/cc)
	 (,(rename 'lambda) (break)
	  (,(rename 'let) ,(rename 'f) () ,@atmark{}body (,(rename 'f)))))))))

(let ((n 3) (ls '()))
  (loop
    (if (= n 0) (break ls))
    (set! ls (cons 'a ls))
    (set! n (- n 1))))
}
この例は@code{datum->syntax}の説明で示された例と同等の機能を実装しています。
@code{er-macro-transformer}の基本は@code{syntax-case}の逆と言えます。
@code{syntax-case}は基本健全にしますが、@code{er-macro-transformer}ではユーザが
明示的に健全にする必要があります。もう少し言えば、ユーザが@var{rename}を
使わなければマクロの展開結果は常に非健全になります。
}

@subsubsection{算術操作}

@define[Function]{@name{+.} @args{z @dots{}}}
@define[Function]{@name{*.} @args{z @dots{}}}
@define[Function]{@name{-.} @args{z @dots{}}}
@define[Function]{@name{-.} @args{z1 z2 @dots{}}}
@define[Function]{@name{/.} @args{z @dots{}}}
@define[Function]{@name{/.} @args{z1 z2 @dots{}}}
@desc{@code{+}, @code{*}, @code{-} and @code{/}とほぼ同じです。違いは計算結果が
必ず非正確数になることです。}

@define[Function]{@name{mod-inverse} @args{x m}}
@desc{@var{x}と@var{m}は正確数でなければなりません。

@code{@var{x} ^ -1 mod @var{m}}の結果を返します。}

@define[Function]{@name{mod-expt} @args{x e m}}
@desc{@var{x}、@var{e}及び@var{m}はすべて正確数でなければなりません。

@code{@var{x} ^ @var{e} mod @var{m}}の結果をを返します。}

@subsubsection{ファイルシステム操作}

@define[Function]{@name{file-size-in-bytes} @args{filename}}
@desc{@var{filename}のファイルサイズをバイト数で返します。もしファイルが存在し
なければ@code{&assertion}例外を投げます。
}

@define[Function]{@name{file-regular?} @args{filename}}
@define[Function]{@name{file-directory?} @args{filename}}
@define[Function]{@name{file-symbolic-link?} @args{filename}}
@define[Function]{@name{file-readable?} @args{filename}}
@define[Function]{@name{file-writable?} @args{filename}}
@define[Function]{@name{file-executable?} @args{filename}}
@desc{与えられたファイルの種類、または権限を返します。}

@define[Function]{@name{file-stat-ctime} @args{filename}}
@define[Function]{@name{file-stat-mtime} @args{filename}}
@define[Function]{@name{file-stat-atime} @args{filename}}
@desc{与えられたファイルの時間統計をナノセカンドで返します。

@code{file-stat-ctime}手続きは最終変更時間を返します。

@code{file-stat-mtime}手続きは最終更新時間を返します。

@code{file-stat-atime}手続きは最終アクセス時間を返します。
}

@define[Function]{@name{create-symbolic-link} @args{old-filename new-filename}}
@desc{@var{old-filename}のシンボリックリンクを@var{new-filename}という名前で作
成します}

@define[Function]{@name{rename-file} @args{old-filename new-filename}}
@desc{@var{old-filename}を@var{new-filename}に変更します。

@var{old-filename}が存在しない場合@code{&i/o}例外が投げられます。

@var{new-filename}が存在する場合、古いファイルを上書きします。
}

@define[Function]{@name{create-directory} @args{path}}
@define[Function]{@name{delete-directory} @args{path}}
@desc{与えられたディレクトリ名を作成または削除します。失敗した場合は@code{&i/o}
例外が投げられます。
}

@define[Function]{@name{read-directory} @args{path}}
@desc{与えられたディレクトリ@var{path}内にあるファイルおよびディレクトリ名を文
字列のリストで返します。@var{path}が存在しない場合には#fを返します。
}

@define[Function]{@name{copy-file} @args{src dst :optional overwrite}}
@desc{@var{src}と@var{dst}は文字列でなければなりません。また@var{src}は存在する
ファイル名でなければなりません。

与えられた@var{src}を@var{dst}にコピーします。コピーが成功すれば#t、失敗すれば#f
を返します。

オプショナル引数@var{overwrite}に真の値が渡された場合、@var{dst}が既に存在して
いても上書きコピーを行います。
}

@define[Function]{@name{current-directory} @args{:optional path}}
@desc{現在の作業ディレクトリを返します。

オプショナル引数@var{path}が与えられた場合、@code{current-directory}は
作業ディレクトリを与えられた@var{path}に変更し未定義値を返します。
}

@define[Function]{@name{set-current-directory} @args{path}}
@desc{作業ディレクトリを@var{path}に変更します。}

@define[Function]{@name{build-path} @args{path1 path2}}
@desc{@var{path1}及び@var{path2}は文字列でなければなりません。

与えられた二つのパス文字列をプラットフォーム依存の文字を用いて連結します。
}


@subsubsection{Hashtables}

@define[Function]{@name{make-equal-hashtable} @args{:optional k weakness}}
@define[Function]{@name{make-string-hashtable} @args{:optional k weakness}}
@desc{ハッシュテーブルを作成します。

@code{make-eq-hashtable}や@code{make-eqv-hashtable}と同様ですが、こちらは
@code{equal?}または@code{string=?}を比較手続きとして使用します。}

@define[Function]{@name{hashtable-values} @args{hashtable}}
@desc{@var{hashtable}のすべての値をベクタで返します。

この手続きは@code{hashtable-keys}との一貫性のために提供されています。}

@define[Function]{@name{hashtable-keys-list} @args{hashtable}}
@define[Function]{@name{hashtable-values-list} @args{hashtable}}
@desc{@var{hashtable}に含まれる@var{キー}または@var{値}をリストで返します。}

@define[Function]{@name{hashtable-type} @args{hashtable}}
@desc{@var{hashtable}の種類をシンボルで返します。戻り値は@code{eq}、@code{eqv}、
@code{equal}、@code{string}または@code{general}のいずれかになります。
}

@define[Function]{@name{hashtable-weakness} @args{hashtable}} 
@desc{@var{hashtable}の弱さをシンボルで返します。@var{hashtable}が
弱いハッシュテーブルでなかった場合は#fが返ります。

戻り値は@code{key}、@code{value}または@code{both}のいずれかになります。
}

@subsubsection{I/O}

@define[Function]{@name{port-closed?} @args{port}}
@desc{与えられたポート@var{port}が閉じていれば#tをそうでなければ#fを返します。}

@define[Function]{@name{put-u16} @args{out v endian}}
@define[Function]{@name{put-s16} @args{out v endian}}
@define[Function]{@name{put-u32} @args{out v endian}}
@define[Function]{@name{put-s32} @args{out v endian}}
@desc{@var{out}はバイナリ出力ポートでなければなりません。@var{endian}は
@code{endianness}マクロが返す値でなければなりません。

与えられた@var{v}を出力ポート@var{out}に符号付きまたは符号なし16ビットまたは
32ビット整数として書き出します。}

@define[Function]{@name{get-u16} @args{in endian}}
@define[Function]{@name{get-s16} @args{in endian}}
@define[Function]{@name{get-u32} @args{in endian}}
@define[Function]{@name{get-s32} @args{in endian}}
@desc{@var{in}はバイナリ入力ポートでなければなりません。@var{endian}は
@code{endianness}マクロが返す値でなければなりません。

入力ポート@var{in}から符号付きまたは符号なし16ビットまたは32ビット整数を
読み取ります。}

注意：上記の@code{put-*}または@code{get-*}手続きは16ビット及び32ビットのみが提供
されています。これはベンチマークの結果Cでの実装とSchemeでの実装に大きな差異が
なかった為です。64ビット整数や浮動小数点の読み取りは十分な要求があればCで
実装されるかもしれません。

@define[Function]{@name{read/ss}
 @args{:optional (port @code{(current-input-port)})}}
@define[Function]{@name{write/ss}
 @args{obj :optional (port @code{(current-output-port)})}}
@desc{[SRFI-38]@code{read/ss}手続きはSchemeオブジェクトを与えられた入力ポート
@var{port}から読み取ります。

@code{write/ss}手続きは与えられた @var{obj}を出力ポート@var{port}に
書き出します。

これらは循環構造を検知する点を除いて@code{read}及び@code{write}手続きと
同様です。
}

@define[Function]{@name{format} @args{port string arg @dots{}}}
@define[Function]{@name{format} @args{string arg @dots{}}}
@desc{[SRFI-28+] 与えられた@var{arg}を@var{string}に従って整形します。@var{Port}
引数は出力先を指定します。もし出力ポートなら整形された結果はそこに
書き込まれます。もし#tであれば、現在の出力ポートに書き込まれます。
もし#fであれば整形された結果は文字列として返されます。@var{Port}引数は
省略することも可能です。その場合は#fが指定された場合と同様に振る舞います。
(すなわち文字列を返します。)

@var{String}は整形ディレクティブを含む文字列です。整形ディレクティブはチルダ
@code{'~'}から始まるり特定の文字で終わる文字並びです。整形ディレクティブは
対応する引数を受け取りそれを整形します。残りの文字列は出力にそのまま
コピーされます。

@snipet[=> "the anser is 48"]{(format #f "the answer is ~a" 48)}

整形ディレクティブはコンマで区切られた一つ以上の引数を受け取ることができます。
引数は整数もしくは文字である必要があります。もし文字ならクオート付き文字として
与えら得れる必要があります。引数は省略可能です、その場合は規定の値が使われます。
引数の解釈は整形ディレクティブによって異なります。

更に、整形ディレクティブは@code{'@atmark{}'}と@code{':'}を追加フラグとして受け
取ることができます。どちらも整形ディレクティブの振る舞いを変えることが可能です。
これらは整形ディレクティブのすぐ後ろに配置されている必要があります。

以下はサポートされているディレクティブです。大文字、小文字のどちらも使用可能で
す。通常は意味に違いがありませんが、違いがある場合はそのように書いてあります。

@dl-list[
@dl-item[@string{~@var{mincol},@var{colinc},@var{minpad},@var{padchar},@var{maxcol}@b{A}}]{
アスキー出力。

渡された引数は@code{display}手続きでプリントされます。もし、@var{mincol}が整数
で渡された場合、この引数は最低文字数を指定します。もし出力された結果が
@var{mincol}より短い場合は、空白が右側に追加されます。結果は左寄せされます。

もし@var{colinc}、@var{minpad}及び、@var{padchar}が渡された場合、これらは更に詳
細なパディングの調整をします。文字@var{padchar}はパディング文字を置き換えます。
もし整数@var{minpad}に0より大きい値が渡された場合、出力結果に関係なく少なくとも
@var{minpad}パディング文字が使用されます。もし整数@var{colinc}が与えられた場合、
この値は@var{padchar}の数が@var{colinc}倍になるように調整します。

アットマーク@code{'@atmark{}'}が与えられた場合、整形結果は右寄せになります。

引数@var{maxcol}が与えられた場合、この引数は書き出される最大文字数を制限します。
もし整形済み文字列の長さが@var{maxcol}を超えた場合、@var{maxcol}で指定された
長さだけが書き出されます。もしコロンフラグも渡されて、かつ出力文字数の上限を
超えた場合、@var{maxcol} - 4 文字と@code{" @dots{}"}が続いて出力されます。

@snipet[=> "|oops|"       ]{(format #f "|~a|" "oops")}
@snipet[=> "|oops      |" ]{(format #f "|~10a|" "oops")}
@snipet[=> "|      oops|" ]{(format #f "|~10@atmark{}a|" "oops")}
@snipet[=> "|******oops|" ]{(format #f "|~10,,,'*@atmark{}a|" "oops")}
@snipet[=> "|abc def gh|" ]{(format #f "|~,,,,10a|" '(abc def ghi jkl))}
@snipet[=> "|abc de ...|" ]{(format #f "|~,,,,10:a|" '(abc def ghi jkl))}
}
@dl-item[@string{~@var{mincol},@var{colinc},@var{minpad},@var{padchar},@var{maxcol}@b{S}}]{
S式の出力。与えられた引数は@code{write}手続きを使った際と同様に表示されます。
追加引数とフラグの意味は@b{~A}ディレクティブと同様です。

@snipet[=> "|\"oops\"|"	   ]{(format #f "|~s|" "oops")}
@snipet[=> "|\"oops\"    |"]{(format #f "|~10s|" "oops")}
@snipet[=> "|    \"oops\"|"]{(format #f "|~10@atmark{}s|" "oops")}
@snipet[=> "|****\"oops\"|"]{(format #f "|~10,,,'*@atmark{}s|" "oops")}
}

@dl-item[@string{~@var{mincol},@var{padchar},@var{commachar},@var{interval}@b{D}}]{
十進数の出力。引数は十進数に整形されます。もし、引数が整数でなかった場合はすべての追加
引数は無視され、あたかも@b{~A}が指定されたかのように振る舞います。

もし@var{mincol}が整数で与えられた場合、この引数は最小幅を指定します。もし整形結果が
@var{mincol}より短い場合、@var{padchar}が左側に追加されます。(つまり右寄せです。)
@var{padchar}の既定値は空白です。

@snipet[=> "|12345|"     ]{(format #f "|~d|" 12345)}
@snipet[=> "|     12345|"]{(format #f "|~10d|" 12345)}
@snipet[=> "|0000012345|"]{(format #f "|~10,'0d|" 12345)}

もしアットマークフラグ@code{@atmark{}}が与えられれかつ引数が正の整数だった場合、
符号@code{'+'}が数値の先頭に付与されて出力されます。

もしコロンフラグ@code{:}が与えられた場合、全ての@var{interval}番目にある数値は
まとめられ@var{commachar}が間に挿入されます。@var{commachar}の規定値は@code{','}で、
@var{interval}の規定値は@code{3}です。

@snipet[=> "|12,345|"    ]{(format #f "|~:d|" 12345)}
@snipet[=> "|-1234_5678|"]{(format #f "|~,,'_,4:d|" -12345678)}
}
@dl-item[@string{~@var{mincol},@var{padchar},@var{commachar},@var{interval}@b{B}}]{
二進数出力。引数は二進数に整形されます。追加引数及びフラグの意味は@b{~D}ディレクティブ
と同様です。
}
@dl-item[@string{~@var{mincol},@var{padchar},@var{commachar},@var{interval}@b{O}}]{
八進数出力。引数は八進数に整形されます。追加引数及びフラグの意味は@b{~D}ディレクティブ
と同様です。
}
@dl-itemx[2
@string{~@var{mincol},@var{padchar},@var{commachar},@var{interval}@b{X}}
@string{~@var{mincol},@var{padchar},@var{commachar},@var{interval}@b{x}}]{
十六進数出力。引数は十六進数に整形されます。大文字の@code{'X'}が渡された場合は
アルファベットの大文字が10以上の数字に使われます。小文字の@code{'x'}ならば
アルファベットの小文字が使われます。追加引数及びフラグの意味は@b{~D}ディレクティブ
と同様です。
@snipet[=> "0f7cf5a8"]{(format #f "~8,'0x" 259847592)}
@snipet[=> "0F7CF5A8"]{(format #f "~8,'0X" 259847592)}
}
]
}

@define[Function]{@name{port-ready?}
 @args{:optional (port (current-input-port))}}
@desc{与えられたポートが読取りまたは各込み可能であれば#tをそうでなければ
#fを返します。

もし、与えられたポート@var{port}がこの機能をサポートしていなかった場合、
この手続きは常に#tを返します。以下は常に#tを返す例です。
@codeblock[=> #t]{
;; Assume read! is provided.
(define user-port (make-custom-binary-input-port "my-port" read! #f #f))
(port-ready user-port)
}

}

@define[Function]{@name{buffered-port} @args{port buffer-mode :key buffer}}
@desc{@var{port}はバイナリポートでなければなりません。

与えられた@var{port}がバッファーポートでなければバッファーポートに変換します。

バッファーポートはポートの一種です。このポートは入出力を内部のバッファに保持します。
例えば@code{(buffer-mode block)}もしくは@code{(buffer-mode line)}を指定して
作られたファイルポートはバッファーポートです。入出力のコストが高い場合にこのポートを
使用することでパフォーマンスの向上が得られます。

@var{buffer-mode}引数は@code{buffer-mode}マクロが返すシンボルでなければなりません。
もし@code{buffer-mode}がシンボル@code{none}の場合、この手続きは与えられたポートを
そのまま返します。

キーワード引数@var{buffer}はバイトベクタでなければなりません。もしこのキーワード引数が
指定された場合、変換されたバッファーポートは指定されたバイトベクタを内部バッファとして
使用します。もし与えられたバイトベクタのサイズが0またはリテラルのバイトベクタだった
場合、@code{&assertion}例外が送出されます。
}

@define[Function]{@name{make-codec} @args{symbol getc putc data}}
@desc{カスタムコーデックを作ります。シンボル@var{Symbol}は作られるコーデックの名前。
@var{Getc}及び@var{putc}は手続きでなければなりません。@var{Data}は
@var{getc}及び@var{putc}で参照することが可能なユーザデータです。

@var{Getc}手続きは4つの引数、@var{input-port}、 @var{error-handling-mode}、
@var{check-bom?}そして@var{userdata}を受け取ります。@var{Input-port}は
バイナリ入力ポート。@var{Error-handling-mode}シンボルで、@code{ignore}、
@code{raise}または@code{replace}のいずれかです。値は作成されたコーデックと使用する
トランスコーダによって決定されます。@var{Check-bom?}は真偽値です。@var{getc}の
初回呼び出しの際に#tそれ以外は#fを受け取ります。@var{Userdata}はコーデック作成時に
渡されたユーザ定義のデータです。

@var{Getc}手続きの基本的なプロセスは、@var{input-port}からバイナリデータを読み取り
それをUCS4に変換することです。返されるUCS4のコードポイントは整数である必要がありますが、
必ずしも4バイトである必要はありません。

@var{Putc}手続きは4つの引数、@var{output-port}、@var{char}、
@var{error-handling-mode}及び@var{userdata}を受け取ります。@var{Output-port}は
バイナリ出力ポートです。@var{Char}は対象の文字コードポイントに変換されるべき文字です。
@var{Error-handling-mode}はシンボルで、@code{ignore}、@code{raise}または
@code{replace}のいずれかです。 値は作成されたコーデックと使用するトランスコーダ
によって決定されます。@var{Userdata}はコーデック作成時に渡されたユーザ定義の
データです。

@var{Putc}手続きのの基本的なプロセスは、与えられたUCS4文字を対象のコードポイントに
変換し、@var{output-port}に書き出すことです。

例としては@code{sitelib/encoding}を見るのがいいでしょう。いくつかのカスタムコーデックが
実装されています。
}

@subsubsection{Symbols}

@define[Function]{@name{symbol<?} @args{symbol1 symbol2 symbols @dots{}}}
@define[Function]{@name{symbol<=?} @args{symbol1 symbol2 symbols @dots{}}}
@define[Function]{@name{symbol>?} @args{symbol1 symbol2 symbols @dots{}}}
@define[Function]{@name{symbol>=?} @args{symbol1 symbol2 symbols @dots{}}}
@desc{与えられたシンボル@var{symbol1}がシンボル@var{symbol2}と比較して、
未満、以下、より大きい、以上であれば#tを返し、そうでなければ#fを返します。もし
@var{symbols}が与えられた場合、それらすべてに対して同様に比較します。

これら手続きは@code{string<?}、@code{string<=?}、@code{string>?}及び
@code{string>=?}と似た手続きです。

これらは以下のようにも実装可能です。
@snipet{(define (symbol<? . syms) (apply string<? (map symbol->string syms)))}
しかし、組み込みの手続きではシンボルから文字列への返還を行いません。
}

@subsubsection{Keywords}

Sagittariusはキーワードを持っています。これは@code{':'}から始まる識別子です。
キーワードはシンボルとよく似た特徴を持っていますが、キーワードにはいかなる値も束縛
することはできません。キーワードは自己評価するオブジェクトなので、ユーザーは
明示的に@code{'}をつける必要はありません。(もちろんつけても構いません)

キーワードはリーダーモードR6RSまたはR7RSでは使用できません。つまり
@code{#!r6rs}または@code{#!r7rs}ディレクティブ、そして@code{-r6}または@code{-r7}
の起動オプションを与えると無効化されます。

@define[Function]{@name{make-keyword} @args{symbol}}
@define[Function]{@name{symbol->keyword} @args{symbol}}
@desc{与えられたシンボル@var{symbol}からキーワードを作ります。}

@define[Function]{@name{string->keyword} @args{string}}
@desc{与えられた文字列@var{string}からキーワードを作ります。}

@define[Function]{@name{keyword?} @args{obj}}
@desc{与えられた@var{obj}がキーワードなら#tをそれ以外なら#fを返します。}

@define[Function]{@name{keyword->symbol} @args{keyword}}
@desc{与えられたキーワード@var{keyword}のシンボル表現を返します。}

@define[Function]{@name{keyword->string} @args{keyword}}
@desc{与えられたキーワード@var{keyword}の文字列表現を返します。}

@define[Function]{@name{get-keyword} @args{keyword list :optional fallback}}
@desc{与えられたリスト@var{list}から与えられたキーワード@var{keyword}のすぐ後ろに
ある要素を返します。

@var{list}の要素数は偶数でなければなりません。要素数が奇数でかつ与えられた
@var{keyword}が@var{list}内に存在しない場合は@code{&error}が送出されます。

もし@var{fallback}が与えられかつ@var{keyword}が@var{list}内に存在しない場合、
@var{fallback}が戻り値として返されます。@var{fallback}が与えられなかった場合は
@code{&error}が送出されます。

@snipet[=> d]{(get-keyword :key '(a b c :key d))}
@snipet[=> &error]{(get-keyword :key '(a b c d e))}
@snipet[=> &error]{(get-keyword :key '(a b c d e) 'fallback)}
@snipet[=> fallback]{(get-keyword :key '(a b c d e f) 'fallback)}
}

@subsubsection{Weak box(弱ボックス)}

弱ボックスはGCを阻害しないようにオブジェクトへの参照を保持します。つまり、弱ボックスの
要素はGCが発生した際し弱ボックス以外から参照されていなかった場合に回収されます。

@define[Function]{@name{weak-box?} @args{obj}}
@desc{与えられた@var{obj}が弱ボックスなら#tをそれ以外なら#fを返します。}

@define[Function]{@name{make-weak-box} @args{obj}}
@desc{与えられた@var{obj}を保持する弱ボックスを作ります。}

@define[Function]{@name{weak-box-empty?} @args{wb}}
@desc{与えられた弱ボックス@var{wb}の保持する要素がGCによって回収されたならば#tを
そうでなければ#fを返します。}

@define[Function]{@name{weak-box-ref} @args{wb :optional (fallback #f)}}
@desc{与えられた弱ボックス@var{wb}の保持する要素を返します。既にGCによって回収
されている場合は@var{fallback}を返します。}

@define[Function]{@name{weak-box-set!} @args{wb obj}}
@desc{与えられた弱ボックス@var{wb}の保持する要素を@var{obj}で置き替えます。}


@subsubsection{Weak vector(弱ベクター)}

弱ベクターはベクターとよく似たオブジェクトですが、保持する要素がGCの対象になります。

@define[Function]{@name{weak-vector?} @args{obj}}
@desc{与えられた@var{obj}が弱ベクターなら♯tをそれ以外なら#fを返します。}

@define[Function]{@name{make-weak-vector} @args{size}}
@desc{サイズが@var{size}の弱ベクターを作ります。}

@define[Function]{@name{weak-vector-length} @args{wvec}}
@desc{与えられた弱ベクター@var{wvec}の長さを返します。}

@define[Function]{@name{weak-vector-ref} @args{wvec k :optional fallback}}
@desc{弱ベクター@var{wvec}の@var{k}番目の要素を返します。

@var{k}が負の値または@var{wvec}の長さより大きな値であった場合、
@code{weak-vector-ref}は通常@code{&assertion}を送出します。しかし、オプショナル引数
@var{fallback}が与えられた場合、そのような場合でも@var{fallback}を返します。

もし要素がGCによって回収されている場合@code{weak-vector-ref}手続きは@var{fallback}
を返します。もし@var{fallback}が与えられていない場合は#fを返します。
}

@define[Function]{@name{weak-vector-set!} @args{wvec k value}}
@desc{弱ベクター@var{wvec}の@var{k}番目に@var{value}をセットします。}

@subsubsection{Weak hashtable}

A weak hashtable  is a reference to  an object that doesn’t  prevent the object
from being garbage-collected the same as  weak vector. A weak hashtable is like
a hashtable, except each entry can be garbage collected if it is not referenced
from objects other than weak hashtable according to the constructed condition.

@define[Function]{@name{weak-hashtable?} @args{obj}}
@desc{Returns #t if @var{obj} is weak hashtable otherwise #f.}

@define[Function]{@name{make-weak-eq-hashtable}
 @args{:key (init-size 200) (weakness 'both) default}}
@define[Function]{@name{make-weak-eqv-hashtable}
 @args{:key (init-size 200) (weakness 'both) default}}
@desc{Make a weak hashtable with the hash procedure @code{eq?} and @code{eqv?},
respectively.

The keyword argument @var{init-size} specifies the initial size of the
weak hashtable.

The kwyword argument @var{weakness} specifies the place where the weak pointer
is. This must be one of the @code{key}, @code{value} and @code{both}. If the
@code{key} is specified, then weak hashtable's weak pointer will be the key
so is @code{value}. If the @code{both} is specified, then it will be both.

The keyword argument @var{default} specifies the default value when the entry
is garbage collected. If this is not spceified, then undefined value will be
used.
}

@define[Function]{@name{weak-hashtable-ref}
 @args{weak-hashtable key :optional (default #f)}}
@desc{Returns the value in @var{weak-hashtable} associated with @var{key}. If
@var{weak-hashtable} does not contain an association for @var{key}, 
@var{default} is returned.
}

@define[Function]{@name{weak-hashtable-set!} @args{weak-hashtable key obj}}
@desc{Changes @var{weak-hashtable} to associate @var{key} with @var{obj},
adding a new association or replacing any existing association for @var{key},
and returns unspecified values.
}

@define[Function]{@name{weak-hashtable-delete!} @args{weak-hashtable key}}
@desc{Removes any association for @var{key} within @var{weak-hashtable} and
returns unspecified values.
}

@define[Function]{@name{weak-hashtable-keys-list} @args{weak-hashtable}}
@define[Function]{@name{weak-hashtable-values-list} @args{weak-hashtable}}
@desc{Returns a list of keys and values in the given @var{weak-hashtable},
respectively.
}

@define[Function]{@name{weak-hashtable-copy} @args{weak-hashtable}}
@desc{Returns a copy of @var{weak-hashtable}.}

@define[Function]{@name{weak-hashtable-shrink} @args{weak-hashtable}}
@desc{Shrink the given @var{weak-hashtable} and returns the number of
removed entry. This is only for GC friendliness.}


@subsubsection{Bytevector operations}

@define[Function]{@name{bytevector->sinteger}
 @args{bytevector :optional start end}}
@define[Function]{@name{bytevector->uinteger}
 @args{bytevector :optional start end}}
@define[Function]{@name{bytevector->integer}
 @args{bytevector :optional start end}}
@desc{Converts given bytevector @var{bytevector} to exact integer. If optional
argument @var{start} is given, conversion starts with index @var{start}. If
optional argument @var{end} is given, convertion ends by index @var{end}. The
conversion only happens in big endian. 

The first form converts to signed integer and the rest convert to unsigned
integer.
}

@define[Function]{@name{sinteger->bytevector} @args{ei :optional size}}
@define[Function]{@name{uinteger->bytevector} @args{ei :optional size}}
@define[Function]{@name{integer->bytevector} @args{ei :optional size}}
@desc{@var{Ei} must be exact integer. Converts exact integer @var{ei} to a
bytevector.

The first form can accept signed integer and converts with two's complement
form. The rest forms only accept unsigned integer and simply convert to
bytes.

If optional argument @var{size} is given, then the procedure returns @var{size}
size bytevector.

NOTE: The conversion is processed from right most byte so if the @var{size} is
smaller than given @var{ei} bytes, then the rest of left bytes will be dropped.

NOTE: the endianness is always big integer.

@snipet[=> "#vu8(#x00 #x12 #x34 #x56 #x78)"]{(integer->bytevector #x12345678 5)}
@snipet[=> "#vu8(#x34 #x56 #x78)"]{(integer->bytevector #x12345678 3)}
}

@define[Function]{@name{bytevector-append} @args{bvs @dots{}}}
@desc{Returns a newly allocated bytevector that contains all elements in
order from the subsequent locations in @var{bvs @dots{}}.
}

@define[Function]{@name{bytevector-concatenate} @args{list-of-bytevectors}}
@desc{Appends each bytevectors in @var{list-of-bytevectors}. This is
equivalent to:

@snipet{(apply bytevector-append @var{list-of-bytevectors})}
}


@subsubsection{List operations}

@define[Function]{@name{circular-list?} @args{list}}
@define[Function]{@name{dotted-list?} @args{list}}
@desc{[SRFI-1] Returns #t if @var{list} is circular or dotted list,
respectively. Otherwise #f.}

@define[Function]{@name{acons} @args{obj1 obj2 obj3}}
@desc{Returns @code{(cons (cons @var{obj1} @var{obj2}) @var{obj3})}. Useful to
put an entry at the head of an associative list.
}

@define[Function]{@name{append!} @args{list @dots{}}}
@desc{[SRFI-1] Returns a list consisting of the elements of the first @var{list}
followed by the elements of the other @var{lists}. The cells in the lists except
the last one may be reused to construct the result. The last argument may be any
object.
}

@define[Function]{@name{reverse!} @args{list @dots{}}}
@desc{[SRFI-1] Returns a list consisting of the elements of @var{list} in
reverse order. The cells of list may be reused to construct the returned list.
}

@subsubsection{Vector operations}

@define[Function]{@name{vector-copy} @args{vector :optional start end fill}}
@desc{[SRFI-43] Copies a vector @var{vector}. Optional @var{start} and @var{end}
arguments can be used to limit the range of @var{vector} to be copied. If the
range specified by @var{start} and @var{end} falls outside of the original
vector, the @var{fill} value is used to fill the result vector.
}

@define[Function]{@name{vector-append} @args{vector @dots{}}}
@desc{[SRFI-43] Returns a newly allocated vector that contains all elements in
order from the subsequent locations in @var{vector @dots{}}.
}

@define[Function]{@name{vector-concatenate} @args{list-of-vectors}}
@desc{[SRFI-43] Appends each vectors in @var{list-of-vectors}. This is
equivalent to:

@snipet{(apply vector-append @var{list-of-vectors})}
}

@define[Function]{@name{vector-reverse} @args{vector :optional start end}}
@define[Function]{@name{vector-reverse!} @args{vector :optional start end}}
@desc{[SRFI-43] Reverse the given @var{vector}'s elements.

The second form reverses the given @var{vector} destructively.

Optional arguments @var{start} and @var{end} must be non negative integer
if it's given. And it restricts the range of the target elements.
}

@subsubsection{String operations}

@define[Function]{@name{string-scan} @args{string item :optional return}}
@desc{Scan @var{item} (either a string or a character) in @var{string}.

The @var{return} argument specified what value should be returned when
@var{item} is found in @var{string}. It must be one of the following symbols;

@dl-list{
@dl-item[@code{index}]{
	Returns the index in @var{string} if @var{item} is found, or @code{#f}.
	This is the default behaviour.
}
@dl-item[@code{before}]{
	Returns a substring of @var{string} before @var{item}, or @code{#f} if
	@var{item} is not found.
}
@dl-item[@code{after}]{
	Returns a substring of @var{string} after @var{item}, or @code{#f} if
	@var{item} is not found.
}
@dl-item[@code{before*}]{
	Returns a substring of @var{string} before @var{item}, and the substring
	after it. If @var{item} is not found then return @code{(values #f #f)}.
}
@dl-item[@code{after*}]{
	Returns a substring of @var{string} up to the end of @var{item}, and the
	rest. after it. If @var{item} is not found then return 
	@code{(values #f #f)}.
}
@dl-item[@code{both}]{
	Returns a substring of @var{string} before @var{item} and after
	 @var{item}. If @var{item} is not found, return @code{(values #f #f)}.
}
}
}


@define[Function]{@name{string-concatenate} @args{list-of-strings}}
@desc{[SRFI-13] Appends each strings in @var{list-of-strings}. This is
equivalent to:

@snipet{(apply string-append @var{list-of-strings})}
}

@define[Function]{@name{istring?} @args{obj}}
@desc{Returns #t if the given @var{obj} is an immutable string, otherwise #f.

Immutable strings are one of the followings:
@itemlist{
@item{String literals. (c.f. @code{"abc"})}
@item{Strings converted to immutable string by @code{string->istring}}
}
}

@define[Function]{@name{string->istring} 
 @args{string :optional start end}}
@desc{Returns copy of the given @var{string}. The returning string is
converted to immutable string.

The optional argument @var{start} and @var{end} are given, then the
returing string is contains only the range of given @var{string}.
}

@subsubsection{Load path}

@define[Function]{@name{add-load-path} @args{path :key (append #f)}}
@desc{Add given @var{path} to current loading path list.

If keyword argument @var{append} is @code{#t}, then given @var{path} is
appended to the current loading path list, otherwise prepend to the list.
}

@define[Function]{@name{add-load-suffix} @args{suffix :key (append #f)}}
@desc{Add given @var{suffix} to current suffix list.

If keyword argument @var{append} is @code{#t}, then given @var{suffix} is
appended to the current suffix list, otherwise prepend to the list.

The @var{suffix} should contain @code{.} as well.
}

@define[Function]{@name{load-path} @args{}}
@define[Function]{@name{load-path} @args{paths}}
@desc{Retrives/sets current loading path.

If the latter form is used, then the given path list @var{paths} is set
to current loading path list. Otherwise retrieves the list.

The returning value is not copied, thus modifying the list may cause
unexpected results.
}

@subsubsection{System and platform}

@define[Function]{@name{uname} @args{}}
@desc{Return a vector which contains the following information.

@dl-list{
 @dl-item["System name"]{Operating system name. E.g. "Linux"}
 @dl-item["Node name"]{The name of the computer.}
 @dl-item["Release"]{Release number of the system if availabel.}
 @dl-item["Version"]{Version number of the system if availabel.}
 @dl-item["Machine"]{Machine architecture of the system.}
}

On POSIX environment, this is the result of @code{uname(2)}.

On Windows environment, this is the result of couple of Win32 API calls
and formatted to look like the result of @code{uname(2)}.
}

@define[Function]{@name{get-mac-address} @args{:optional (position 0)}}
@desc{Retrieves MAC address. The returning value is a bytevector which
contains 6 elements.

If optional argument specifies which NIC's MAC address should be returned.
}

@define[Function]{@name{get-process-times}}
@define[Function]{@name{get-thread-times} @args{:optional thread}}
@desc{Returns a vector having 3 elements; @var{user time}, @var{system time}
and @var{tick}.

The first procedure returns process CPU time, the second procedure returns
thread CPU time. If the optional argument @var{thread} is given, then the
procedure retrieves CPU time of given thread. Otherwise current thread.

@var{tick} is a clock tick. Users can compute CPU second Dividing
@var{user time} or @var{system time} by this value.

NOTE: @var{tick} may not be the same even on the same platform. For example,
@code{get-process-times} returns value of @code{_SC_CLK_TCK}, and
@code{get-thread-times} returns 1000000 (on OSX), 1000000000 (on other POSIX
environments which have @code{pthread_getcpuclockid}), or @code{_SC_CLK_TCK}
(on other POSIX environments which don't have @code{pthread_getcpuclockid}). So
users must not assume the value is one of them and calculate CPU second with
assumed value.
}

@define[Function]{@name{gc} @args{}}
@desc{Invokes garbage collection manually.}

@define[Function]{@name{cpu-count} @args{}}
@desc{Returns number of CPUs. The result contains hyperthreading, for example,
if the CPU is Core i5 which have 2 cores and hyperthreading is enabled, then
the returning value is 4.

On Linux environment, the procedure also considers @code{taskset(1)}.

This procedure returns static value initialised during initialisation of
Sagittarius process. Thus, if the process is restricted after its 
initialisation by @code{taskset(1)}, for example the environment has 4 CPUs
but restricted to 1, then this process, however, returns 4.
}

@subsubsection{Debugging aid}

@define[Function]{@name{disasm} @args{closure}}
@desc{Disassembles the compiled body of @var{closure} and print it.
}

@define[Function]{@name{arity} @args{procedure}}
@desc{Returns arity of given @var{procedure}.

It returns a pair whose car part is required arguments count and cdr part
is boolean which indicates if the procedure accepts optional arguments or
not.
}

@define[Library]{@name{(time)}}
@desc{Exports @code{time} macro}

@define[Macro]{@name{time} @args{expr}}
@desc{Evaluate @var{expr} and shows time usage.

The macro return the result of @var{expr}.}


@include-section["sagittarius/control.scrbl"]
@include-section["sagittarius/ffi.scrbl"]
@include-section["sagittarius/filewatch.scrbl"]
@include-section["sagittarius/io.scrbl"]
@include-section["sagittarius/mop.scrbl"]
@include-section["sagittarius/object.scrbl"]
@include-section["sagittarius/process.scrbl"]
@include-section["sagittarius/reader.scrbl"]
@include-section["sagittarius/record.scrbl"]
@include-section["sagittarius/regex.scrbl"]
@include-section["sagittarius/socket.scrbl"]
@include-section["sagittarius/threads.scrbl"]
@include-section["sagittarius/timezone.scrbl"]
@include-section["sagittarius/debug.scrbl"]
@include-section["sagittarius/generators.scrbl"]

@; end of file
@; Local Variables:
@; mode: scrbl
@; fill-column: 75
@; End:

