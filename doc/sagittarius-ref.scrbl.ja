@; -*- mode:scribble; coding: utf-8 -*-
@title{Sagittarius ユーザーガイド}

このドキュメントはR6RS/R7RS Scheme処理系Sagittariusバージョン@eval{(sagittarius-version)}のマニュアルです。

@table-of-contents[:id "table-of-contents"]

@section{はじめに}

これはScheme処理系Sagittariusのユーザーガイド兼リファレンスマニュアルです。
ここではR6RSに準拠していない部分の説明をします。

この文書の対象読者は既にSchemeを知っていて何らかのプログラムをSagittarius上で
書こうとしている人としています。

@subsection{Sagittariusの概要}

SagittariusはSchemeスクリプトエンジンです。Schemeプログラムを読み込み、コンパイ
ルし仮想マシン上で実行します。Sagittariusは"Revised^6 Report on the Algorithmic
Language Scheme"(R6RS)に及び"Revised^7 Report on the Algorithmic Language
Scheme"(R7RS)に準拠し、またいくつかの"Scheme Requests for　Implementation"
(SRFI)で定められたライブラリを提供します。

Scheme処理系は沢山あり、それぞれ特徴があります。Sagittariusは「柔軟性」と「扱い
やすさ」を念頭に置いて作成されています。R6RSは仕様上厳しい要求を処理系に課して
いますが、それは時として足枷になることがあります。そこで、Sagittariusはデフォル
トではそれらのいくつかの要求を緩めていることがあります。この振る舞いは起動オプ
ションで変えることが可能です。

可搬性の喪失や意図しない振る舞いを避けるため、ここでデフォルトで標準に準拠しな
い部分を挙げます。

@dl-list[]{
@dl-item["リーダー(Reader)"]{

リーダーは3つのモードがあります。一つはR6RSモード。一つはR7RSモード。そしてコン
 パチブルモードです。ユーザーはリーダーマクロでリーダーの振る舞いを変えることが
 できるので、これらのモードはあくまでデフォルトこのように振る舞うリーダーが3つ
 あるとだけといえます。これら3つのモードは@code{#!r6rs}、 @code{#!r7rs} もしく
 は @code{#!compatible}ディレクティブで切り替えることが可能です。詳しくは
 @secref["lib.sagittarius.reader.predefined"]{Predefined reader macros}を参照し
 てください。
 }
 
 @dl-item["その他"]{

エクスポートされた束縛再定義が可能です。この振る舞いは起動オプションで
@code{-r6} を指定することで禁止することが可能です。

また、複数のインポート句での同名シンボルのインポートもエラーを挙げません。
その際には最も最後にインポートされたライブラリの束縛が使用されます。
}
}

@subsection{表記}

このマニュアルではそれぞれのエントリーは以下のように表示されます。

@define[カテゴリ]{@name{foo} @args{arg1 arg2}}
@desc{[標準] 説明 @dots{}}

@var{カテゴリ} はエントリ@b{foo}のカテゴリを意味します。以下のカテゴリがこの
マニュアルでは使用されます。

@dl-list[
@dl-item["Program"]{コマンドラインプログラム}
@dl-item["Function"]{Schemeの手続き}
@dl-item["Syntax"]{構文}
@dl-item["Auxiliary Syntax"]{補助構文}
@dl-item["Macro"]{マクロ}
@dl-item["Auxiliary Macro"]{補助マクロ}
@dl-item["Library"]{ライブラリ}
@dl-item["Condition Type"]{コンディション型}
@dl-item["Reader Macro"]{リーダーマクロ}
@dl-item["Class"]{CLOSのクラス}
@dl-item["Generic"]{総称関数}
@dl-item["Method"]{メソッド}
]

手続き、構文及びマクロではエントリーは一つ以上の引数を持つことがあります。引数
のリストでは以下の表記が用いられます。

@dl-list[
@dl-item[@var{arg @dots{}}]{0個以上の引数を受け取ることを示します。}
@dl-itemx[2 @var{:optional x y z} 
	    @var{:optional (x x-default) (y y-default) (z z-default)}]{
3つまでのオプショナル引数を受け取ることを示します。二つ目のフォームは@var{x}、
@var{y}及び@var{z}の既定の値を明示しています。}
]

エントリーの説明が続きます。もしエントリーが標準または実装に基づいている場合、
以下に列挙される元となった項目が説明の先頭に付きます。

@dl-list[
@dl-itemx[2 "[R6RS]" "[R6RS+]"]{
R6RSで定義されているエントリーを意味します。
もし[R6RS+]となっていた場合は追加の機能を有します。
}
@dl-item["[R7RS]"]{
R7RSで定義されているエントリーを意味します。
}
@dl-itemx[2 "[SRFI-n]" "[SRFI-n+]"]{
SRFI-@var{n}で定義されているエントリーを意味します。
もし[SRFI-n+]となっていた場合は追加の機能を有します。
}
]

@section{Sagittarius上でのプログラミン}

@subsection{Sagittariusの起動}

Sagittariusは独立したScheme処理系として使用することができます。処理系はUNIX環境
では@code{sagittarius}という名前で、Windows上では@code{sash}という名前で配布さ
れます。

@define[Program]{@name{sagittarius} @args{[options] scheme-file arg @dots{}}}
@desc{@code{sagittarius}を起動します。@var{scheme-file}が与えられなかった
場合は、対話モードで起動します。

Scheme標準の番号、現状では@code{6}と@code{7}をサポート、を@code{-r}で指定した場
合、Sagittariusを標準準拠モードで起動します。例えば、R6RSモードで起動した場合は
一度すべてのスクリプトを読み込んでから評価をします。これによりマクロ展開が評価
に先んじて行われることを保証します。

詳細なオプションは@code{"-h"}を渡して起動することで確認することができます。}

後方互換のためにUNIX環境では@code{sash}がシンボリックリンクで提供されます。これ
はビルド時に抑制することが可能です。

@subsection{Schemeスクリプトを書く}

@code{sagittarius}がSchemeファイルを受け取って起動した場合、ファイル以降のコマ
ンドラインオプションが@code{command-line}手続きでアクセスすることが可能な内部変
数にリストとして束縛された後にファイルに記述されたSchemeプログラムを読み込みま
す。もしファイルの先頭の行が@code{"#!"}で始まっていた場合、Sagittariusはその行
を無視します。この振る舞いはUNIX環境で実行可能なスクリプトをSchemeで書く際に便
利です。

以下は先頭行の典型的な例です。

@snipet{#!/usr/local/bin/sagittarius}

または、

@snipet{#!/bin/env sagittarius}

2つ目はシェルトランポリンと呼ばれるテクニックで、これを使うことによりPATH上に
@code{sagittarius}を使用することが可能です。

スクリプトファイルが読み込まれると、Sagittariusは全てのトップレベルにある式を実
行します。

簡単な例を見てみましょう。このスクリプトはごく単純な@code{cat(1)}コマンドのよう
な振る舞いをします。

@codeblock{
#!/usr/local/bin/sagittarius
(import (rnrs))
(let ((args (command-line)))
  (unless (null? (cdr args))
    (for-each (lambda (file)
		(call-with-input-file file
		  (lambda (in)
		    (display (get-string-all in)))))
	      (cdr args)))
  0)
}

もしスクリプトファイルが@code{main}手続きを持っていた場合、Sagittariusはこの手
続きをリストにパックされたコマンドラインオプションを渡して実行します。これは
@hyperlink[:href "http://srfi.schemers.org/srfi-22/"]{SRFI-22}で定義されている
機能です。この機能を使うと、上記の例は以下のように書くことができます。

@codeblock{
#!/usr/local/bin/sagittarius
(import (rnrs))
(define (main args)
  (unless (null? (cdr args))
    (for-each (lambda (file)
		(call-with-input-file file
		  (lambda (in)
		    (display (get-string-all in)))))
	      (cdr args)))
  0)
}

注意: @code{main}手続きは全てのトップレベルにある式が実行された後に呼ばれます。

@subsection{REPLを使う}

@code{sagittarius}コマンドがファイルなしで起動された場合、REPL
(read-eval-print-loop)に入ります。開発者の利便性のため、REPLは@code{(rnrs)}
といったいくつかのライブラリを起動時に読み込みます。

もし@code{.sashrc}ファイルが@code{HOME}もしくは@code{USERPROFILE}環境変数が指す
ディレクトリにあった場合、REPLはそのファイルを起動時に読み込みます。これによっ
て開発者はREPL上で頻繁に使うライブラリや手続きを予め読み込むことが可能です。

注意: @code{.sashrc}はREPL上でのみ有効です。スクリプトファイルではライブラリの
読み込みを行う必要があります。

@subsection{ライブラリを書く}

Sagittariusはライブラリの形式としてR6RS及びR7RSの両方を提供します。どちらの形式
も同様に処理されるのでユーザーは可搬性を損なうことなく両方の形式で書かれたライ
ブラリを使用することが可能です。

以下の例はR6RS形式で書かれたライブラリです。詳しい構文については先に続くR6RSの
章を参照してください。
@codeblock{
(library (foo)
  (export bar)
  (import (rnrs))

 (define bar 'bar)
)
}
ライブラリ@code{(foo)}は@code{foo.scm}、@code{foo.ss}、@code{foo.sls}もしくは
@code{foo.sld}という名前のファイルでロードパス上に保存されている必要があります。
このドキュメントの例では@code{.scm}を使います。

もしSagittarius特有の機能を使った可搬性のあるコード(いささか矛盾がありますが)を
書きたい場合、処理系特有のコードは@code{.sagittarius.scm}、
@code{.sagittarius.ss}、@code{.sagittarius.sls}もしくは@code{.sagittarius.sld}
といったファイルに保存することで分けて書くことが可能です。これはほぼ全てのR6RS
処理系で実装されているデファクトスタンダードな機能です。もしR7RS形式のライブラ
リ構文を使うのであれば、@code{cond-expand}を使って同様のことが可能です。

もしライブラリをある特定のライブラリ以外で使用したくない場合(例えば低レベルマク
ロの補助ライブラリなど)、以下のように2つのライブラリを一つのファイルに記述する
ことも可能です。
@codeblock{
(library (not showing)
  ;; exports all internal use procedures
  (export ...)
  (import (rnrs))
;; write procedures
...
)

(library (shared)
  (export shared-procedure ...)
  (import (rnrs) (not showing))
;; write shared procedures here
)
}

上記のスクリプトは@code{shared.scm}で保存されている必要があります。また、ライブ
ラリの記載順序の重要です、一番上のライブラリが依存関係の最も上、2つめが依存関係
の二番目といった具合です。

注意: この形式はある程度プライベートな手続きを隠すことができますが可搬性があり
ません。処理系によっては許容していない可能性があるからです。

@subsection{コンパイル済みキャッシュ}

起動時間短縮のためSagittariusはコンパイルされたライブラリを独自の
バイナリファイルにキャッシュします。キャシュファイルは以下の環境変数で
指定されたディレクトリに保存されます。

UNIX環境下
@itemlist[
  @item{@code{SAGITTARIUS_CACHE_DIR}}
  @item{@code{HOME}}
]

Windows環境下
@itemlist[
  @item{@code{SAGITTARIUS_CACHE_DIR}}
  @item{@code{TEMP}}
  @item{@code{TMP}}
]

Sagittariusは上記の順番通りにチェックします。なので、
@code{SAGITTARIUS_CACHE_DIR}が見つかればそれを使用します。

キャッシュ機構は慎重に設計されていますが、キャッシュファイルは壊れる可能性があ
ちます。そのような場合にはSagittariusを@code{-c}オプションをつけて起動すること
でキャッシュファイルをクリアすることが可能です。また、キャッシュファイルを使用
したくない場合は@code{-d}オプションをつけることでキャッシュの使用を抑制すること
ができます。

@subsubsection{キャッシュファイルの事前生成}

ユーザーは自身のライブラリを予めキャッシュにするスクリプトを提供することも可能
です。以下はその例です。

@codeblock{
(import (the-library-1)
        (the-library-2))
}

このスクリプトを走らせることでライブラリ@code{(the-library-1)}及び
@code{(the-library-2)}はキャッシュされます。

注意: キャッシュファイル名は元のファイルの絶対パスから導出されます。なので、事
前コンパイルするライブラリが既に予定の位置に配布されていることが重要になります。
そうでなければSagittariusは事前にコンパイルされたファイルを使用しません。

@include-section["r6rs.scrbl"]
@include-section["r7rs.scrbl"]
@include-section["clos.scrbl"]
@include-section["sagittarius.scrbl"]
@include-section["utils.scrbl"]
@include-section["ported.scrbl"]
@include-section["srfi.scrbl"]
@section[:appendix "A" :tag "index"]{Index}

@index-table[:id "index-table"]
@author["Takashi Kato"]