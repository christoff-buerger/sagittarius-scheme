@; -*- coding: utf-8 -*-
@subsection[:tag "rfc.jwt"]{(rfc jwt) - Json Web Token}

@define[Library][@name{(rfc jwt)}]
@desc{This library provides Json Web Token (JWT) APIs. JWT is defined
in @hyperlink[:href "https://tools.ietf.org/html/rfc7519"]{RFC 7519}.
}

The following example shows how to consume JWT
@codeblock{
(import (rnrs)
        (rfc jwt)
        (rfc jwk)
        (rfc jwe)
        (rfc jws)
        (rfc uuid)
        (crypto)
        (srfi :19)
        (sagittarius combinators))

(define keypair (generate-key-pair Ed25519))
(define alg 'EdDSA)
;; (define keypair (generate-key-pair ECDSA :ec-parameter NIST-P-256))
;; (define alg 'ES256)
;; (define keypair (generate-key-pair RSA :size 2048))
;; (define alg 'PS512)

(define claims
  (jwt-claims-builder
   (iss "Sagittarius Scheme")
   (aud "All saints")
   (sub "Use Sagittarius")
   (iat (current-time))
   (nbf (add-duration (current-time) (make-time time-duration 0 -1)))
   (exp (add-duration (current-time) (make-time time-duration 0 600)))
   (jti (uuid->string (make-v4-uuid)))))

(define jws-header
  (jws-header-builder
   (alg alg)))

(define payload (string->utf8 (jwt-claims->json-string claims)))
(define jws-object (make-jws-object jws-header payload))

(define signer (private-key->jws-signer (keypair-private keypair)))

(define jwk
  (public-key->jwk (keypair-public keypair)
                   (jwk-config-builder (kid "my key"))))
(define jwks (make-jwk-set (list jwk)))

(let ((jwt-object (jws:sign jws-object signer)))
  ;; Share the JWT to 3rd party
  ;; (jws:serialize jwt-object)
  ;; (jwk-set->json-string jwks)

  ;; Verify the JWT token with the public key
  (let* ((kid-matcher (jwk-matcher:kid "my key"))
         (verifier (public-key->jws-verifier
                    (jwk-set:find-key jwks kid-matcher)))
         (jwt-consumer (jwt-consumer-builder
                        (verifier verifier)
                        (claims-validator
                         ;; Validate claims
                         (compose jwt:iss-required-validator
                                  jwt:sub-required-validator
                                  jwt:aud-required-validator
                                  jwt:exp-required-validator
                                  jwt:nbf-required-validator
                                  jwt:iat-required-validator
                                  jwt:jti-required-validator
                                  (jwt:iss-value-validator "Sagittarius Scheme"
                                                           "Sagittarius")
                                  (jwt:sub-value-validator "Use Sagittarius")
                                  (jwt:aud-value-validator "All saints")
                                  (jwt:nbf-validator)
                                  (jwt:exp-validator)))))
         (claims (jwt:consume jwt-consumer jwt-object)))
    ;; use the user claim
    (jwt-claims-aud claims))) ;; retrieve 'aud' field
}

@subsubsection{JWT}

By definition, JWT is either JWE or JWS. To create JWT, users need to
use either @code{(rfc jwe)} or  @code{(rfc jws)} library. For more details,
please refer the respective section of the document.

@define[Function]{@name{jwt:consume} @args{jwt-consumer jwt-string/object}}
@desc{Returns JWT claims after decrypt and/or verify the given
@var{jwt-string/object}.

@var{jwt-consumer} must be a JWT consumer object.

@var{jwt-string/object} must be either a string of valid JWT format or
JWE/JWS object.}

@subsubsection{JWT Consumer}

JWT consumer is an object decrypts and/or verifies the JWT and validates the
claims. JWT consumer contains the below fields:
@itemlist{
  @item{@code{decryptor}: JWE decryptor}
  @item{@code{verifier}: JWS verifier}
  @item{@code{claims-validator}: Claims validator, see below section for more details}
}

@define[Function]{@name{jwt-consumer?} @args{obj}}
@desc{Returns #t if the given @var{obj} is a JWT consumer otherwise #f.}

@define[Macro]{@name{jwt-consumer-builder}}
@desc{A builder macro of JWT consumer. The macro is generated by
@code{(record builder)}. see @secref["record.builder"]{(record builder)}
for more details.}

JWT consumer execute validation if the @code{claims-validator} field is
set. The field must hold claims validator, which is a procedure takes
one argument, @var{claims}, and returns the given @var{claims} or raises
an error if the validation failed.

@define[Function]{@name{jwt:iss-required-validator} @args{claims}}
@define[Function]{@name{jwt:sub-required-validator} @args{claims}}
@define[Function]{@name{jwt:aud-required-validator} @args{claims}}
@define[Function]{@name{jwt:exp-required-validator} @args{claims}}
@define[Function]{@name{jwt:nbf-required-validator} @args{claims}}
@define[Function]{@name{jwt:iat-required-validator} @args{claims}}
@define[Function]{@name{jwt:jti-required-validator} @args{claims}}
@desc{Claims validator to validate required field of the given @var{claims}.}

@define[Function]{@name{jwt:iss-validator} @args{iss @dots{}}}
@define[Function]{@name{jwt:aud-validator} @args{aud @dots{}}}
@define[Function]{@name{jwt:sub-validator} @args{sub}}
@desc{Creates claims validator to validate @code{iss}, @code{aud} and
@code{sub}, respectively.

The first 2 procedures may take multiple argument and checks if one of the
value matches or not.
}

@define[Function]{@name{jwt:exp-validator}}
@define[Function]{@name{jwt:exp-validator} @args{clock-skew}}
@define[Function]{@name{jwt:exp-validator}
 @args{clock-skew future-bound-seconds}}
@desc{Creates claims validator to validate @var{exp} field is
expired or nor.

@var{clock-skew} must be an integer represents seconds of clock skew.

@var{future-bound-seconds} must be an integer represents seconds of maximum
boundary that @code{exp} can be. (e.g. @code{exp} can't be more than 10 mins
of future)
}

@define[Function]{@name{jwt:nbf-validator}}
@define[Function]{@name{jwt:nbf-validator} @args{clock-skew}}
@desc{Creates claims validator to validate if the current time
is earlier than @var{nbf} field.

@var{clock-skew} must be an integer represents seconds of clock skew.
}

@define[Function]{@name{jwt:iat-validator}
 @args{not-before not-after}}
@define[Function]{@name{jwt:iat-validator}
 @args{not-before not-after clock-skew}}
@desc{Creates claims validator to validate if the @code{iat} is in between
@var{not-before} and @var{not-after}

@var{not-before} and @var{not-after} must be a time object.

@var{clock-skew} must be an integer represents seconds of clock skew.
}

@subsubsection{JWT Claims}

JWT claims is an object which contains claims of the JWT.

@define["Record Type"]{@name{<jwt-claims>}}
@desc{Record type of JWT claims object.

The object contains the following fields:
@itemlist{
  @item{@code{iss}: Issuer}
  @item{@code{sub}: Subject}
  @item{@code{aud}: Audience}
  @item{@code{exp}: Expiration time}
  @item{@code{nbf}: Not before}
  @item{@code{iat}: Issued at}
  @item{@code{jti}: JWT ID}
  @item{@code{custom-claims}: User defined claims, hashtable}
}
}

@define[Function]{@name{jwt-claims?} @args{obj}}
@desc{Returns #t if the @var{obj} is JWT claims otherwise #f.}

@define[Macro]{@name{jwt-claims-builder}}
@desc{A builder macro of JWT claims. The macro is generated by
@code{(record builder)}. see @secref["record.builder"]{(record builder)}
for more details.}

@define[Function]{@name{jwt-claims-iss} @args{jwt-claims}}
@define[Function]{@name{jwt-claims-sub} @args{jwt-claims}}
@define[Function]{@name{jwt-claims-aud} @args{jwt-claims}}
@define[Function]{@name{jwt-claims-exp} @args{jwt-claims}}
@define[Function]{@name{jwt-claims-nbf} @args{jwt-claims}}
@define[Function]{@name{jwt-claims-iat} @args{jwt-claims}}
@define[Function]{@name{jwt-claims-jti} @args{jwt-claims}}
@define[Function]{@name{jwt-claims-custom-claims} @args{jwt-claims}}
@desc{Retrieves the field value of @var{jwt-claims}.}

@define[Function]{@name{json->jwt-claims} @args{obj}}
@define[Function]{@name{read-jwt-claims} @args{}}
@define[Function]{@name{read-jwt-claims} @args{:optional port}}
@define[Function]{@name{json-string->jwt-claims} @args{string}}
@desc{Construct JWT claims from S-exp JSON representation of @var{obj},
from input port @var{port} or a string @var{string}.

If the first form of @code{read-jwt-claims} is used, then it reads from
current input port.
}

@define[Function]{@name{jwt-claims->json} @args{jwt-claims}}
@define[Function]{@name{write-jwt-claims} @args{jwt-claims}}
@define[Function]{@name{write-jwt-claims} @args{jwt-claims port}}
@define[Function]{@name{jwt-claims->json-string} @args{jwt-claims}}
@desc{Serialize the given @var{jwt-claims} to a S-exp representaion,
to @var{port} or string.

If first form of @code{write-jwt-claims} is used, then it writes the
serialized JWT claims to current output port.
}
